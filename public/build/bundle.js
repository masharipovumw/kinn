
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$4() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$4;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function append$2(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text$1(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text$1(' ');
    }
    function empty$3() {
        return text$1('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children$1(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * Schedules a callback to run immediately after the component has been updated.
     *
     * The first time the callback runs will be after the initial `onMount`
     */
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    /**
     * Schedules a callback to run immediately before the component is unmounted.
     *
     * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
     * only one that runs inside a server-side component.
     *
     * https://svelte.dev/docs#run-time-svelte-ondestroy
     */
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init$1(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop$4,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children$1(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$4;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop$4;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append$2(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        if (has_stop_immediate_propagation)
            modifiers.push('stopImmediatePropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    function construct_svelte_component_dev(component, props) {
        const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
        try {
            const instance = new component(props);
            if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
                throw new Error(error_message);
            }
            return instance;
        }
        catch (err) {
            const { message } = err;
            if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
                throw new Error(error_message);
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier} [start]
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=} start
     */
    function writable(value, start = noop$4) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$4) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop$4;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0 && stop) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let started = false;
            const values = [];
            let pending = 0;
            let cleanup = noop$4;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop$4;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (started) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            started = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
                // We need to set this to false because callbacks can still happen despite having unsubscribed:
                // Callbacks might already be placed in the queue which doesn't know it should no longer
                // invoke this derived store.
                started = false;
            };
        });
    }

    function parse(str, loose) {
    	if (str instanceof RegExp) return { keys:false, pattern:str };
    	var c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');
    	arr[0] || arr.shift();

    	while (tmp = arr.shift()) {
    		c = tmp[0];
    		if (c === '*') {
    			keys.push('wild');
    			pattern += '/(.*)';
    		} else if (c === ':') {
    			o = tmp.indexOf('?', 1);
    			ext = tmp.indexOf('.', 1);
    			keys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );
    			pattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';
    			if (!!~ext) pattern += (!!~o ? '?' : '') + '\\' + tmp.substring(ext);
    		} else {
    			pattern += '/' + tmp;
    		}
    	}

    	return {
    		keys: keys,
    		pattern: new RegExp('^' + pattern + (loose ? '(?=$|\/)' : '\/?$'), 'i')
    	};
    }

    /* node_modules\svelte-spa-router\Router.svelte generated by Svelte v3.59.2 */

    const { Error: Error_1, Object: Object_1, console: console_1$3 } = globals;

    // (246:0) {:else}
    function create_else_block(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) mount_component(switch_instance, target, anchor);
    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*props*/ 4)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*props*/ ctx[2])])
    			: {};

    			if (dirty & /*component*/ 1 && switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(246:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (239:0) {#if componentParams}
    function create_if_block$3(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [{ params: /*componentParams*/ ctx[1] }, /*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) mount_component(switch_instance, target, anchor);
    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*componentParams, props*/ 6)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*componentParams*/ 2 && { params: /*componentParams*/ ctx[1] },
    					dirty & /*props*/ 4 && get_spread_object(/*props*/ ctx[2])
    				])
    			: {};

    			if (dirty & /*component*/ 1 && switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(239:0) {#if componentParams}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$3, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*componentParams*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getLocation() {
    	const hashPosition = window.location.href.indexOf('#/');

    	let location = hashPosition > -1
    	? window.location.href.substr(hashPosition + 1)
    	: '/';

    	// Check if there's a querystring
    	const qsPosition = location.indexOf('?');

    	let querystring = '';

    	if (qsPosition > -1) {
    		querystring = location.substr(qsPosition + 1);
    		location = location.substr(0, qsPosition);
    	}

    	return { location, querystring };
    }

    const loc = readable(null, // eslint-disable-next-line prefer-arrow-callback
    function start(set) {
    	set(getLocation());

    	const update = () => {
    		set(getLocation());
    	};

    	window.addEventListener('hashchange', update, false);

    	return function stop() {
    		window.removeEventListener('hashchange', update, false);
    	};
    });

    const location = derived(loc, _loc => _loc.location);
    const querystring = derived(loc, _loc => _loc.querystring);
    const params = writable(undefined);

    async function push(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	// Note: this will include scroll state in history even when restoreScrollState is false
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined
    	);

    	window.location.hash = (location.charAt(0) == '#' ? '' : '#') + location;
    }

    async function pop() {
    	// Execute this code when the current call stack is complete
    	await tick();

    	window.history.back();
    }

    async function replace(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	const dest = (location.charAt(0) == '#' ? '' : '#') + location;

    	try {
    		const newState = { ...history.state };
    		delete newState['__svelte_spa_router_scrollX'];
    		delete newState['__svelte_spa_router_scrollY'];
    		window.history.replaceState(newState, undefined, dest);
    	} catch(e) {
    		// eslint-disable-next-line no-console
    		console.warn('Caught exception while replacing the current page. If you\'re running this in the Svelte REPL, please note that the `replace` method might not work in this environment.');
    	}

    	// The method above doesn't trigger the hashchange event, so let's do that manually
    	window.dispatchEvent(new Event('hashchange'));
    }

    function link$3(node, opts) {
    	opts = linkOpts(opts);

    	// Only apply to <a> tags
    	if (!node || !node.tagName || node.tagName.toLowerCase() != 'a') {
    		throw Error('Action "link" can only be used with <a> tags');
    	}

    	updateLink(node, opts);

    	return {
    		update(updated) {
    			updated = linkOpts(updated);
    			updateLink(node, updated);
    		}
    	};
    }

    function restoreScroll(state) {
    	// If this exists, then this is a back navigation: restore the scroll position
    	if (state) {
    		window.scrollTo(state.__svelte_spa_router_scrollX, state.__svelte_spa_router_scrollY);
    	} else {
    		// Otherwise this is a forward navigation: scroll to top
    		window.scrollTo(0, 0);
    	}
    }

    // Internal function used by the link function
    function updateLink(node, opts) {
    	let href = opts.href || node.getAttribute('href');

    	// Destination must start with '/' or '#/'
    	if (href && href.charAt(0) == '/') {
    		// Add # to the href attribute
    		href = '#' + href;
    	} else if (!href || href.length < 2 || href.slice(0, 2) != '#/') {
    		throw Error('Invalid value for "href" attribute: ' + href);
    	}

    	node.setAttribute('href', href);

    	node.addEventListener('click', event => {
    		// Prevent default anchor onclick behaviour
    		event.preventDefault();

    		if (!opts.disabled) {
    			scrollstateHistoryHandler(event.currentTarget.getAttribute('href'));
    		}
    	});
    }

    // Internal function that ensures the argument of the link action is always an object
    function linkOpts(val) {
    	if (val && typeof val == 'string') {
    		return { href: val };
    	} else {
    		return val || {};
    	}
    }

    /**
     * The handler attached to an anchor tag responsible for updating the
     * current history state with the current scroll state
     *
     * @param {string} href - Destination
     */
    function scrollstateHistoryHandler(href) {
    	// Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined
    	);

    	// This will force an update as desired, but this time our scroll state will be attached
    	window.location.hash = href;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, []);
    	let { routes = {} } = $$props;
    	let { prefix = '' } = $$props;
    	let { restoreScrollState = false } = $$props;

    	/**
     * Container for a route: path, component
     */
    	class RouteItem {
    		/**
     * Initializes the object and creates a regular expression from the path, using regexparam.
     *
     * @param {string} path - Path to the route (must start with '/' or '*')
     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped
     */
    		constructor(path, component) {
    			if (!component || typeof component != 'function' && (typeof component != 'object' || component._sveltesparouter !== true)) {
    				throw Error('Invalid component object');
    			}

    			// Path must be a regular or expression, or a string starting with '/' or '*'
    			if (!path || typeof path == 'string' && (path.length < 1 || path.charAt(0) != '/' && path.charAt(0) != '*') || typeof path == 'object' && !(path instanceof RegExp)) {
    				throw Error('Invalid value for "path" argument - strings must start with / or *');
    			}

    			const { pattern, keys } = parse(path);
    			this.path = path;

    			// Check if the component is wrapped and we have conditions
    			if (typeof component == 'object' && component._sveltesparouter === true) {
    				this.component = component.component;
    				this.conditions = component.conditions || [];
    				this.userData = component.userData;
    				this.props = component.props || {};
    			} else {
    				// Convert the component to a function that returns a Promise, to normalize it
    				this.component = () => Promise.resolve(component);

    				this.conditions = [];
    				this.props = {};
    			}

    			this._pattern = pattern;
    			this._keys = keys;
    		}

    		/**
     * Checks if `path` matches the current route.
     * If there's a match, will return the list of parameters from the URL (if any).
     * In case of no match, the method will return `null`.
     *
     * @param {string} path - Path to test
     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.
     */
    		match(path) {
    			// If there's a prefix, check if it matches the start of the path.
    			// If not, bail early, else remove it before we run the matching.
    			if (prefix) {
    				if (typeof prefix == 'string') {
    					if (path.startsWith(prefix)) {
    						path = path.substr(prefix.length) || '/';
    					} else {
    						return null;
    					}
    				} else if (prefix instanceof RegExp) {
    					const match = path.match(prefix);

    					if (match && match[0]) {
    						path = path.substr(match[0].length) || '/';
    					} else {
    						return null;
    					}
    				}
    			}

    			// Check if the pattern matches
    			const matches = this._pattern.exec(path);

    			if (matches === null) {
    				return null;
    			}

    			// If the input was a regular expression, this._keys would be false, so return matches as is
    			if (this._keys === false) {
    				return matches;
    			}

    			const out = {};
    			let i = 0;

    			while (i < this._keys.length) {
    				// In the match parameters, URL-decode all values
    				try {
    					out[this._keys[i]] = decodeURIComponent(matches[i + 1] || '') || null;
    				} catch(e) {
    					out[this._keys[i]] = null;
    				}

    				i++;
    			}

    			return out;
    		}

    		/**
     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events
     * @typedef {Object} RouteDetail
     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)
     * @property {string} location - Location path
     * @property {string} querystring - Querystring from the hash
     * @property {object} [userData] - Custom data passed by the user
     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)
     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)
     */
    		/**
     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.
     * 
     * @param {RouteDetail} detail - Route detail
     * @returns {boolean} Returns true if all the conditions succeeded
     */
    		async checkConditions(detail) {
    			for (let i = 0; i < this.conditions.length; i++) {
    				if (!await this.conditions[i](detail)) {
    					return false;
    				}
    			}

    			return true;
    		}
    	}

    	// Set up all routes
    	const routesList = [];

    	if (routes instanceof Map) {
    		// If it's a map, iterate on it right away
    		routes.forEach((route, path) => {
    			routesList.push(new RouteItem(path, route));
    		});
    	} else {
    		// We have an object, so iterate on its own properties
    		Object.keys(routes).forEach(path => {
    			routesList.push(new RouteItem(path, routes[path]));
    		});
    	}

    	// Props for the component to render
    	let component = null;

    	let componentParams = null;
    	let props = {};

    	// Event dispatcher from Svelte
    	const dispatch = createEventDispatcher();

    	// Just like dispatch, but executes on the next iteration of the event loop
    	async function dispatchNextTick(name, detail) {
    		// Execute this code when the current call stack is complete
    		await tick();

    		dispatch(name, detail);
    	}

    	// If this is set, then that means we have popped into this var the state of our last scroll position
    	let previousScrollState = null;

    	let popStateChanged = null;

    	if (restoreScrollState) {
    		popStateChanged = event => {
    			// If this event was from our history.replaceState, event.state will contain
    			// our scroll history. Otherwise, event.state will be null (like on forward
    			// navigation)
    			if (event.state && (event.state.__svelte_spa_router_scrollY || event.state.__svelte_spa_router_scrollX)) {
    				previousScrollState = event.state;
    			} else {
    				previousScrollState = null;
    			}
    		};

    		// This is removed in the destroy() invocation below
    		window.addEventListener('popstate', popStateChanged);

    		afterUpdate(() => {
    			restoreScroll(previousScrollState);
    		});
    	}

    	// Always have the latest value of loc
    	let lastLoc = null;

    	// Current object of the component loaded
    	let componentObj = null;

    	// Handle hash change events
    	// Listen to changes in the $loc store and update the page
    	// Do not use the $: syntax because it gets triggered by too many things
    	const unsubscribeLoc = loc.subscribe(async newLoc => {
    		lastLoc = newLoc;

    		// Find a route matching the location
    		let i = 0;

    		while (i < routesList.length) {
    			const match = routesList[i].match(newLoc.location);

    			if (!match) {
    				i++;
    				continue;
    			}

    			const detail = {
    				route: routesList[i].path,
    				location: newLoc.location,
    				querystring: newLoc.querystring,
    				userData: routesList[i].userData,
    				params: match && typeof match == 'object' && Object.keys(match).length
    				? match
    				: null
    			};

    			// Check if the route can be loaded - if all conditions succeed
    			if (!await routesList[i].checkConditions(detail)) {
    				// Don't display anything
    				$$invalidate(0, component = null);

    				componentObj = null;

    				// Trigger an event to notify the user, then exit
    				dispatchNextTick('conditionsFailed', detail);

    				return;
    			}

    			// Trigger an event to alert that we're loading the route
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoading', Object.assign({}, detail));

    			// If there's a component to show while we're loading the route, display it
    			const obj = routesList[i].component;

    			// Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted
    			if (componentObj != obj) {
    				if (obj.loading) {
    					$$invalidate(0, component = obj.loading);
    					componentObj = obj;
    					$$invalidate(1, componentParams = obj.loadingParams);
    					$$invalidate(2, props = {});

    					// Trigger the routeLoaded event for the loading component
    					// Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)
    					dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    						component,
    						name: component.name,
    						params: componentParams
    					}));
    				} else {
    					$$invalidate(0, component = null);
    					componentObj = null;
    				}

    				// Invoke the Promise
    				const loaded = await obj();

    				// Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile
    				if (newLoc != lastLoc) {
    					// Don't update the component, just exit
    					return;
    				}

    				// If there is a "default" property, which is used by async routes, then pick that
    				$$invalidate(0, component = loaded && loaded.default || loaded);

    				componentObj = obj;
    			}

    			// Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`
    			// Of course, this assumes that developers always add a "params" prop when they are expecting parameters
    			if (match && typeof match == 'object' && Object.keys(match).length) {
    				$$invalidate(1, componentParams = match);
    			} else {
    				$$invalidate(1, componentParams = null);
    			}

    			// Set static props, if any
    			$$invalidate(2, props = routesList[i].props);

    			// Dispatch the routeLoaded event then exit
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    				component,
    				name: component.name,
    				params: componentParams
    			})).then(() => {
    				params.set(componentParams);
    			});

    			return;
    		}

    		// If we're still here, there was no match, so show the empty component
    		$$invalidate(0, component = null);

    		componentObj = null;
    		params.set(undefined);
    	});

    	onDestroy(() => {
    		unsubscribeLoc();
    		popStateChanged && window.removeEventListener('popstate', popStateChanged);
    	});

    	const writable_props = ['routes', 'prefix', 'restoreScrollState'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	function routeEvent_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function routeEvent_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    	};

    	$$self.$capture_state = () => ({
    		readable,
    		writable,
    		derived,
    		tick,
    		getLocation,
    		loc,
    		location,
    		querystring,
    		params,
    		push,
    		pop,
    		replace,
    		link: link$3,
    		restoreScroll,
    		updateLink,
    		linkOpts,
    		scrollstateHistoryHandler,
    		onDestroy,
    		createEventDispatcher,
    		afterUpdate,
    		parse,
    		routes,
    		prefix,
    		restoreScrollState,
    		RouteItem,
    		routesList,
    		component,
    		componentParams,
    		props,
    		dispatch,
    		dispatchNextTick,
    		previousScrollState,
    		popStateChanged,
    		lastLoc,
    		componentObj,
    		unsubscribeLoc
    	});

    	$$self.$inject_state = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    		if ('component' in $$props) $$invalidate(0, component = $$props.component);
    		if ('componentParams' in $$props) $$invalidate(1, componentParams = $$props.componentParams);
    		if ('props' in $$props) $$invalidate(2, props = $$props.props);
    		if ('previousScrollState' in $$props) previousScrollState = $$props.previousScrollState;
    		if ('popStateChanged' in $$props) popStateChanged = $$props.popStateChanged;
    		if ('lastLoc' in $$props) lastLoc = $$props.lastLoc;
    		if ('componentObj' in $$props) componentObj = $$props.componentObj;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*restoreScrollState*/ 32) {
    			// Update history.scrollRestoration depending on restoreScrollState
    			history.scrollRestoration = restoreScrollState ? 'manual' : 'auto';
    		}
    	};

    	return [
    		component,
    		componentParams,
    		props,
    		routes,
    		prefix,
    		restoreScrollState,
    		routeEvent_handler,
    		routeEvent_handler_1
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			routes: 3,
    			prefix: 4,
    			restoreScrollState: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get routes() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get restoreScrollState() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set restoreScrollState(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /* vim: set ts=2: */
    /*exported XLSX */
    /*global process:false, Buffer:false, ArrayBuffer:false, DataView:false, Deno:false */
    var XLSX = {};
    XLSX.version = '0.18.5';
    var current_codepage = 1200, current_ansi = 1252;

    var VALID_ANSI = [ 874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 10000 ];
    /* ECMA-376 Part I 18.4.1 charset to codepage mapping */
    var CS2CP = ({
    	/*::[*/0/*::]*/:    1252, /* ANSI */
    	/*::[*/1/*::]*/:   65001, /* DEFAULT */
    	/*::[*/2/*::]*/:   65001, /* SYMBOL */
    	/*::[*/77/*::]*/:  10000, /* MAC */
    	/*::[*/128/*::]*/:   932, /* SHIFTJIS */
    	/*::[*/129/*::]*/:   949, /* HANGUL */
    	/*::[*/130/*::]*/:  1361, /* JOHAB */
    	/*::[*/134/*::]*/:   936, /* GB2312 */
    	/*::[*/136/*::]*/:   950, /* CHINESEBIG5 */
    	/*::[*/161/*::]*/:  1253, /* GREEK */
    	/*::[*/162/*::]*/:  1254, /* TURKISH */
    	/*::[*/163/*::]*/:  1258, /* VIETNAMESE */
    	/*::[*/177/*::]*/:  1255, /* HEBREW */
    	/*::[*/178/*::]*/:  1256, /* ARABIC */
    	/*::[*/186/*::]*/:  1257, /* BALTIC */
    	/*::[*/204/*::]*/:  1251, /* RUSSIAN */
    	/*::[*/222/*::]*/:   874, /* THAI */
    	/*::[*/238/*::]*/:  1250, /* EASTEUROPE */
    	/*::[*/255/*::]*/:  1252, /* OEM */
    	/*::[*/69/*::]*/:   6969  /* MISC */
    }/*:any*/);

    var set_ansi = function(cp/*:number*/) { if(VALID_ANSI.indexOf(cp) == -1) return; current_ansi = CS2CP[0] = cp; };
    function reset_ansi() { set_ansi(1252); }

    var set_cp = function(cp/*:number*/) { current_codepage = cp; set_ansi(cp); };
    function reset_cp() { set_cp(1200); reset_ansi(); }

    function char_codes(data/*:string*/)/*:Array<number>*/ { var o/*:Array<number>*/ = []; for(var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i); return o; }

    function utf16leread(data/*:string*/)/*:string*/ {
    	var o/*:Array<string>*/ = [];
    	for(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i) + (data.charCodeAt(2*i+1)<<8));
    	return o.join("");
    }
    function utf16beread(data/*:string*/)/*:string*/ {
    	var o/*:Array<string>*/ = [];
    	for(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i+1) + (data.charCodeAt(2*i)<<8));
    	return o.join("");
    }

    var debom = function(data/*:string*/)/*:string*/ {
    	var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
    	if(c1 == 0xFF && c2 == 0xFE) return utf16leread(data.slice(2));
    	if(c1 == 0xFE && c2 == 0xFF) return utf16beread(data.slice(2));
    	if(c1 == 0xFEFF) return data.slice(1);
    	return data;
    };

    var _getchar = function _gc1(x/*:number*/)/*:string*/ { return String.fromCharCode(x); };
    var _getansi = function _ga1(x/*:number*/)/*:string*/ { return String.fromCharCode(x); };

    var $cptable;
    function set_cptable(cptable) {
    	$cptable = cptable;
    	set_cp = function(cp/*:number*/) { current_codepage = cp; set_ansi(cp); };
    	debom = function(data/*:string*/) {
    		if(data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) { return $cptable.utils.decode(1200, char_codes(data.slice(2))); }
    		return data;
    	};
    	_getchar = function _gc2(x/*:number*/)/*:string*/ {
    		if(current_codepage === 1200) return String.fromCharCode(x);
    		return $cptable.utils.decode(current_codepage, [x&255,x>>8])[0];
    	};
    	_getansi = function _ga2(x/*:number*/)/*:string*/ {
    		return $cptable.utils.decode(current_ansi, [x])[0];
    	};
    	cpdoit();
    }
    var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    function Base64_encode(input) {
      var o = "";
      var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
      for (var i = 0; i < input.length; ) {
        c1 = input.charCodeAt(i++);
        e1 = c1 >> 2;
        c2 = input.charCodeAt(i++);
        e2 = (c1 & 3) << 4 | c2 >> 4;
        c3 = input.charCodeAt(i++);
        e3 = (c2 & 15) << 2 | c3 >> 6;
        e4 = c3 & 63;
        if (isNaN(c2)) {
          e3 = e4 = 64;
        } else if (isNaN(c3)) {
          e4 = 64;
        }
        o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
      }
      return o;
    }
    function Base64_decode(input) {
      var o = "";
      var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
      input = input.replace(/[^\w\+\/\=]/g, "");
      for (var i = 0; i < input.length; ) {
        e1 = Base64_map.indexOf(input.charAt(i++));
        e2 = Base64_map.indexOf(input.charAt(i++));
        c1 = e1 << 2 | e2 >> 4;
        o += String.fromCharCode(c1);
        e3 = Base64_map.indexOf(input.charAt(i++));
        c2 = (e2 & 15) << 4 | e3 >> 2;
        if (e3 !== 64) {
          o += String.fromCharCode(c2);
        }
        e4 = Base64_map.indexOf(input.charAt(i++));
        c3 = (e3 & 3) << 6 | e4;
        if (e4 !== 64) {
          o += String.fromCharCode(c3);
        }
      }
      return o;
    }
    var has_buf = /*#__PURE__*/(function() { return typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && !!process.versions.node; })();

    var Buffer_from = /*#__PURE__*/(function() {
    	if(typeof Buffer !== 'undefined') {
    		var nbfs = !Buffer.from;
    		if(!nbfs) try { Buffer.from("foo", "utf8"); } catch(e) { nbfs = true; }
    		return nbfs ? function(buf, enc) { return (enc) ? new Buffer(buf, enc) : new Buffer(buf); } : Buffer.from.bind(Buffer);
    	}
    	return function() {};
    })();


    function new_raw_buf(len/*:number*/) {
    	/* jshint -W056 */
    	if(has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
    	return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
    	/* jshint +W056 */
    }

    function new_unsafe_buf(len/*:number*/) {
    	/* jshint -W056 */
    	if(has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
    	return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
    	/* jshint +W056 */
    }

    var s2a = function s2a(s/*:string*/)/*:any*/ {
    	if(has_buf) return Buffer_from(s, "binary");
    	return s.split("").map(function(x/*:string*/)/*:number*/{ return x.charCodeAt(0) & 0xff; });
    };

    function s2ab(s/*:string*/)/*:any*/ {
    	if(typeof ArrayBuffer === 'undefined') return s2a(s);
    	var buf = new ArrayBuffer(s.length), view = new Uint8Array(buf);
    	for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
    	return buf;
    }

    function a2s(data/*:any*/)/*:string*/ {
    	if(Array.isArray(data)) return data.map(function(c) { return String.fromCharCode(c); }).join("");
    	var o/*:Array<string>*/ = []; for(var i = 0; i < data.length; ++i) o[i] = String.fromCharCode(data[i]); return o.join("");
    }

    function a2u(data/*:Array<number>*/)/*:Uint8Array*/ {
    	if(typeof Uint8Array === 'undefined') throw new Error("Unsupported");
    	return new Uint8Array(data);
    }

    function ab2a(data/*:ArrayBuffer|Uint8Array*/)/*:Array<number>*/ {
    	if(typeof ArrayBuffer == 'undefined') throw new Error("Unsupported");
    	if(data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));
    	/*:: if(data instanceof ArrayBuffer) throw new Error("unreachable"); */
    	var o = new Array(data.length);
    	for(var i = 0; i < data.length; ++i) o[i] = data[i];
    	return o;
    }

    var bconcat = has_buf ? function(bufs) { return Buffer.concat(bufs.map(function(buf) { return Buffer.isBuffer(buf) ? buf : Buffer_from(buf); })); } : function(bufs) {
    	if(typeof Uint8Array !== "undefined") {
    		var i = 0, maxlen = 0;
    		for(i = 0; i < bufs.length; ++i) maxlen += bufs[i].length;
    		var o = new Uint8Array(maxlen);
    		var len = 0;
    		for(i = 0, maxlen = 0; i < bufs.length; maxlen += len, ++i) {
    			len = bufs[i].length;
    			if(bufs[i] instanceof Uint8Array) o.set(bufs[i], maxlen);
    			else if(typeof bufs[i] == "string") { throw "wtf"; }
    			else o.set(new Uint8Array(bufs[i]), maxlen);
    		}
    		return o;
    	}
    	return [].concat.apply([], bufs.map(function(buf) { return Array.isArray(buf) ? buf : [].slice.call(buf); }));
    };

    function utf8decode(content/*:string*/) {
    	var out = [], widx = 0, L = content.length + 250;
    	var o = new_raw_buf(content.length + 255);
    	for(var ridx = 0; ridx < content.length; ++ridx) {
    		var c = content.charCodeAt(ridx);
    		if(c < 0x80) o[widx++] = c;
    		else if(c < 0x800) {
    			o[widx++] = (192|((c>>6)&31));
    			o[widx++] = (128|(c&63));
    		} else if(c >= 0xD800 && c < 0xE000) {
    			c = (c&1023)+64;
    			var d = content.charCodeAt(++ridx)&1023;
    			o[widx++] = (240|((c>>8)&7));
    			o[widx++] = (128|((c>>2)&63));
    			o[widx++] = (128|((d>>6)&15)|((c&3)<<4));
    			o[widx++] = (128|(d&63));
    		} else {
    			o[widx++] = (224|((c>>12)&15));
    			o[widx++] = (128|((c>>6)&63));
    			o[widx++] = (128|(c&63));
    		}
    		if(widx > L) {
    			out.push(o.slice(0, widx));
    			widx = 0;
    			o = new_raw_buf(65535);
    			L = 65530;
    		}
    	}
    	out.push(o.slice(0, widx));
    	return bconcat(out);
    }

    var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
    /*::
    declare type Block = any;
    declare type BufArray = {
    	newblk(sz:number):Block;
    	next(sz:number):Block;
    	end():any;
    	push(buf:Block):void;
    };

    type RecordHopperCB = {(d:any, Rn:string, RT:number):?boolean;};

    type EvertType = {[string]:string};
    type EvertNumType = {[string]:number};
    type EvertArrType = {[string]:Array<string>};

    type StringConv = {(string):string};

    */
    /* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /*jshint -W041 */
    function _strrev(x/*:string*/)/*:string*/ { var o = "", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }
    function pad0(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
    function pad_(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v;return t.length>=d?t:fill(' ',d-t.length)+t;}
    function rpad_(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v; return t.length>=d?t:t+fill(' ',d-t.length);}
    function pad0r1(v/*:any*/,d/*:number*/)/*:string*/{var t=""+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}
    function pad0r2(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
    var p2_32 = /*#__PURE__*/Math.pow(2,32);
    function pad0r(v/*:any*/,d/*:number*/)/*:string*/{if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }
    /* yes, in 2022 this is still faster than string compare */
    function SSF_isgeneral(s/*:string*/, i/*:?number*/)/*:boolean*/ { i = i || 0; return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }
    var days/*:Array<Array<string> >*/ = [
    	['Sun', 'Sunday'],
    	['Mon', 'Monday'],
    	['Tue', 'Tuesday'],
    	['Wed', 'Wednesday'],
    	['Thu', 'Thursday'],
    	['Fri', 'Friday'],
    	['Sat', 'Saturday']
    ];
    var months/*:Array<Array<string> >*/ = [
    	['J', 'Jan', 'January'],
    	['F', 'Feb', 'February'],
    	['M', 'Mar', 'March'],
    	['A', 'Apr', 'April'],
    	['M', 'May', 'May'],
    	['J', 'Jun', 'June'],
    	['J', 'Jul', 'July'],
    	['A', 'Aug', 'August'],
    	['S', 'Sep', 'September'],
    	['O', 'Oct', 'October'],
    	['N', 'Nov', 'November'],
    	['D', 'Dec', 'December']
    ];
    function SSF_init_table(t/*:any*/) {
    	if(!t) t = {};
    	t[0]=  'General';
    	t[1]=  '0';
    	t[2]=  '0.00';
    	t[3]=  '#,##0';
    	t[4]=  '#,##0.00';
    	t[9]=  '0%';
    	t[10]= '0.00%';
    	t[11]= '0.00E+00';
    	t[12]= '# ?/?';
    	t[13]= '# ??/??';
    	t[14]= 'm/d/yy';
    	t[15]= 'd-mmm-yy';
    	t[16]= 'd-mmm';
    	t[17]= 'mmm-yy';
    	t[18]= 'h:mm AM/PM';
    	t[19]= 'h:mm:ss AM/PM';
    	t[20]= 'h:mm';
    	t[21]= 'h:mm:ss';
    	t[22]= 'm/d/yy h:mm';
    	t[37]= '#,##0 ;(#,##0)';
    	t[38]= '#,##0 ;[Red](#,##0)';
    	t[39]= '#,##0.00;(#,##0.00)';
    	t[40]= '#,##0.00;[Red](#,##0.00)';
    	t[45]= 'mm:ss';
    	t[46]= '[h]:mm:ss';
    	t[47]= 'mmss.0';
    	t[48]= '##0.0E+0';
    	t[49]= '@';
    	t[56]= '"上午/下午 "hh"時"mm"分"ss"秒 "';
    	return t;
    }
    /* repeated to satiate webpack */
    var table_fmt = {
    	0:  'General',
    	1:  '0',
    	2:  '0.00',
    	3:  '#,##0',
    	4:  '#,##0.00',
    	9:  '0%',
    	10: '0.00%',
    	11: '0.00E+00',
    	12: '# ?/?',
    	13: '# ??/??',
    	14: 'm/d/yy',
    	15: 'd-mmm-yy',
    	16: 'd-mmm',
    	17: 'mmm-yy',
    	18: 'h:mm AM/PM',
    	19: 'h:mm:ss AM/PM',
    	20: 'h:mm',
    	21: 'h:mm:ss',
    	22: 'm/d/yy h:mm',
    	37: '#,##0 ;(#,##0)',
    	38: '#,##0 ;[Red](#,##0)',
    	39: '#,##0.00;(#,##0.00)',
    	40: '#,##0.00;[Red](#,##0.00)',
    	45: 'mm:ss',
    	46: '[h]:mm:ss',
    	47: 'mmss.0',
    	48: '##0.0E+0',
    	49: '@',
    	56: '"上午/下午 "hh"時"mm"分"ss"秒 "'
    };

    /* Defaults determined by systematically testing in Excel 2019 */

    /* These formats appear to default to other formats in the table */
    var SSF_default_map = {
    	5:  37, 6:  38, 7:  39, 8:  40,         //  5 -> 37 ...  8 -> 40

    	23:  0, 24:  0, 25:  0, 26:  0,         // 23 ->  0 ... 26 ->  0

    	27: 14, 28: 14, 29: 14, 30: 14, 31: 14, // 27 -> 14 ... 31 -> 14

    	50: 14, 51: 14, 52: 14, 53: 14, 54: 14, // 50 -> 14 ... 58 -> 14
    	55: 14, 56: 14, 57: 14, 58: 14,
    	59:  1, 60:  2, 61:  3, 62:  4,         // 59 ->  1 ... 62 ->  4

    	67:  9, 68: 10,                         // 67 ->  9 ... 68 -> 10
    	69: 12, 70: 13, 71: 14,                 // 69 -> 12 ... 71 -> 14
    	72: 14, 73: 15, 74: 16, 75: 17,         // 72 -> 14 ... 75 -> 17
    	76: 20, 77: 21, 78: 22,                 // 76 -> 20 ... 78 -> 22
    	79: 45, 80: 46, 81: 47,                 // 79 -> 45 ... 81 -> 47
    	82: 0                                   // 82 ->  0 ... 65536 -> 0 (omitted)
    };


    /* These formats technically refer to Accounting formats with no equivalent */
    var SSF_default_str = {
    	//  5 -- Currency,   0 decimal, black negative
    	5:  '"$"#,##0_);\\("$"#,##0\\)',
    	63: '"$"#,##0_);\\("$"#,##0\\)',

    	//  6 -- Currency,   0 decimal, red   negative
    	6:  '"$"#,##0_);[Red]\\("$"#,##0\\)',
    	64: '"$"#,##0_);[Red]\\("$"#,##0\\)',

    	//  7 -- Currency,   2 decimal, black negative
    	7:  '"$"#,##0.00_);\\("$"#,##0.00\\)',
    	65: '"$"#,##0.00_);\\("$"#,##0.00\\)',

    	//  8 -- Currency,   2 decimal, red   negative
    	8:  '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    	66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',

    	// 41 -- Accounting, 0 decimal, No Symbol
    	41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',

    	// 42 -- Accounting, 0 decimal, $  Symbol
    	42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',

    	// 43 -- Accounting, 2 decimal, No Symbol
    	43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',

    	// 44 -- Accounting, 2 decimal, $  Symbol
    	44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
    };

    function SSF_frac(x/*:number*/, D/*:number*/, mixed/*:?boolean*/)/*:Array<number>*/ {
    	var sgn = x < 0 ? -1 : 1;
    	var B = x * sgn;
    	var P_2 = 0, P_1 = 1, P = 0;
    	var Q_2 = 1, Q_1 = 0, Q = 0;
    	var A = Math.floor(B);
    	while(Q_1 < D) {
    		A = Math.floor(B);
    		P = A * P_1 + P_2;
    		Q = A * Q_1 + Q_2;
    		if((B - A) < 0.00000005) break;
    		B = 1 / (B - A);
    		P_2 = P_1; P_1 = P;
    		Q_2 = Q_1; Q_1 = Q;
    	}
    	if(Q > D) { if(Q_1 > D) { Q = Q_2; P = P_2; } else { Q = Q_1; P = P_1; } }
    	if(!mixed) return [0, sgn * P, Q];
    	var q = Math.floor(sgn * P/Q);
    	return [q, sgn*P - q*Q, Q];
    }
    function SSF_parse_date_code(v/*:number*/,opts/*:?any*/,b2/*:?boolean*/) {
    	if(v > 2958465 || v < 0) return null;
    	var date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;
    	var dout=[];
    	var out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};
    	if(Math.abs(out.u) < 1e-6) out.u = 0;
    	if(opts && opts.date1904) date += 1462;
    	if(out.u > 0.9999) {
    		out.u = 0;
    		if(++time == 86400) { out.T = time = 0; ++date; ++out.D; }
    	}
    	if(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}
    	else if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}
    	else {
    		if(date > 60) --date;
    		/* 1 = Jan 1 1900 in Gregorian */
    		var d = new Date(1900, 0, 1);
    		d.setDate(d.getDate() + date - 1);
    		dout = [d.getFullYear(), d.getMonth()+1,d.getDate()];
    		dow = d.getDay();
    		if(date < 60) dow = (dow + 6) % 7;
    		if(b2) dow = SSF_fix_hijri(d, dout);
    	}
    	out.y = dout[0]; out.m = dout[1]; out.d = dout[2];
    	out.S = time % 60; time = Math.floor(time / 60);
    	out.M = time % 60; time = Math.floor(time / 60);
    	out.H = time;
    	out.q = dow;
    	return out;
    }
    var SSFbasedate = /*#__PURE__*/new Date(1899, 11, 31, 0, 0, 0);
    var SSFdnthresh = /*#__PURE__*/SSFbasedate.getTime();
    var SSFbase1904 = /*#__PURE__*/new Date(1900, 2, 1, 0, 0, 0);
    function datenum_local(v/*:Date*/, date1904/*:?boolean*/)/*:number*/ {
    	var epoch = /*#__PURE__*/v.getTime();
    	if(date1904) epoch -= 1461*24*60*60*1000;
    	else if(v >= SSFbase1904) epoch += 24*60*60*1000;
    	return (epoch - (SSFdnthresh + (/*#__PURE__*/v.getTimezoneOffset() - /*#__PURE__*/SSFbasedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);
    }
    /* ECMA-376 18.8.30 numFmt*/
    /* Note: `toPrecision` uses standard form when prec > E and E >= -6 */
    /* exponent >= -9 and <= 9 */
    function SSF_strip_decimal(o/*:string*/)/*:string*/ {
    	return (o.indexOf(".") == -1) ? o : o.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
    }

    /* General Exponential always shows 2 digits exp and trims the mantissa */
    function SSF_normalize_exp(o/*:string*/)/*:string*/ {
    	if(o.indexOf("E") == -1) return o;
    	return o.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/,"$1E").replace(/(E[+-])(\d)$/,"$10$2");
    }

    /* exponent >= -9 and <= 9 */
    function SSF_small_exp(v/*:number*/)/*:string*/ {
    	var w = (v<0?12:11);
    	var o = SSF_strip_decimal(v.toFixed(12)); if(o.length <= w) return o;
    	o = v.toPrecision(10); if(o.length <= w) return o;
    	return v.toExponential(5);
    }

    /* exponent >= 11 or <= -10 likely exponential */
    function SSF_large_exp(v/*:number*/)/*:string*/ {
    	var o = SSF_strip_decimal(v.toFixed(11));
    	return (o.length > (v<0?12:11) || o === "0" || o === "-0") ? v.toPrecision(6) : o;
    }

    function SSF_general_num(v/*:number*/)/*:string*/ {
    	var V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;

    	if(V >= -4 && V <= -1) o = v.toPrecision(10+V);
    	else if(Math.abs(V) <= 9) o = SSF_small_exp(v);
    	else if(V === 10) o = v.toFixed(10).substr(0,12);
    	else o = SSF_large_exp(v);

    	return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));
    }


    /*
    	"General" rules:
    	- text is passed through ("@")
    	- booleans are rendered as TRUE/FALSE
    	- "up to 11 characters" displayed for numbers
    	- Default date format (code 14) used for Dates

    	The longest 32-bit integer text is "-2147483648", exactly 11 chars
    	TODO: technically the display depends on the width of the cell
    */
    function SSF_general(v/*:any*/, opts/*:any*/) {
    	switch(typeof v) {
    		case 'string': return v;
    		case 'boolean': return v ? "TRUE" : "FALSE";
    		case 'number': return (v|0) === v ? v.toString(10) : SSF_general_num(v);
    		case 'undefined': return "";
    		case 'object':
    			if(v == null) return "";
    			if(v instanceof Date) return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);
    	}
    	throw new Error("unsupported value in General format: " + v);
    }

    function SSF_fix_hijri(date/*:Date*/, o/*:[number, number, number]*/) {
      /* TODO: properly adjust y/m/d and  */
      o[0] -= 581;
      var dow = date.getDay();
      if(date < 60) dow = (dow + 6) % 7;
      return dow;
    }
    //var THAI_DIGITS = "\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59".split("");
    function SSF_write_date(type/*:number*/, fmt/*:string*/, val, ss0/*:?number*/)/*:string*/ {
    	var o="", ss=0, tt=0, y = val.y, out, outl = 0;
    	switch(type) {
    		case 98: /* 'b' buddhist year */
    			y = val.y + 543;
    			/* falls through */
    		case 121: /* 'y' year */
    		switch(fmt.length) {
    			case 1: case 2: out = y % 100; outl = 2; break;
    			default: out = y % 10000; outl = 4; break;
    		} break;
    		case 109: /* 'm' month */
    		switch(fmt.length) {
    			case 1: case 2: out = val.m; outl = fmt.length; break;
    			case 3: return months[val.m-1][1];
    			case 5: return months[val.m-1][0];
    			default: return months[val.m-1][2];
    		} break;
    		case 100: /* 'd' day */
    		switch(fmt.length) {
    			case 1: case 2: out = val.d; outl = fmt.length; break;
    			case 3: return days[val.q][0];
    			default: return days[val.q][1];
    		} break;
    		case 104: /* 'h' 12-hour */
    		switch(fmt.length) {
    			case 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;
    			default: throw 'bad hour format: ' + fmt;
    		} break;
    		case 72: /* 'H' 24-hour */
    		switch(fmt.length) {
    			case 1: case 2: out = val.H; outl = fmt.length; break;
    			default: throw 'bad hour format: ' + fmt;
    		} break;
    		case 77: /* 'M' minutes */
    		switch(fmt.length) {
    			case 1: case 2: out = val.M; outl = fmt.length; break;
    			default: throw 'bad minute format: ' + fmt;
    		} break;
    		case 115: /* 's' seconds */
    			if(fmt != 's' && fmt != 'ss' && fmt != '.0' && fmt != '.00' && fmt != '.000') throw 'bad second format: ' + fmt;
    			if(val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
    			/*::if(!ss0) ss0 = 0; */
    			if(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;
    			else tt = ss0 === 1 ? 10 : 1;
    			ss = Math.round((tt)*(val.S + val.u));
    			if(ss >= 60*tt) ss = 0;
    			if(fmt === 's') return ss === 0 ? "0" : ""+ss/tt;
    			o = pad0(ss,2 + ss0);
    			if(fmt === 'ss') return o.substr(0,2);
    			return "." + o.substr(2,fmt.length-1);
    		case 90: /* 'Z' absolute time */
    		switch(fmt) {
    			case '[h]': case '[hh]': out = val.D*24+val.H; break;
    			case '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;
    			case '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;
    			default: throw 'bad abstime format: ' + fmt;
    		} outl = fmt.length === 3 ? 1 : 2; break;
    		case 101: /* 'e' era */
    			out = y; outl = 1; break;
    	}
    	var outstr = outl > 0 ? pad0(out, outl) : "";
    	return outstr;
    }


    /*jshint -W086 */
    /*jshint +W086 */
    function commaify(s/*:string*/)/*:string*/ {
    	var w = 3;
    	if(s.length <= w) return s;
    	var j = (s.length % w), o = s.substr(0,j);
    	for(; j!=s.length; j+=w) o+=(o.length > 0 ? "," : "") + s.substr(j,w);
    	return o;
    }
    var pct1 = /%/g;
    function write_num_pct(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
    	var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
    	return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
    }

    function write_num_cm(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
    	var idx = fmt.length - 1;
    	while(fmt.charCodeAt(idx-1) === 44) --idx;
    	return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
    }

    function write_num_exp(fmt/*:string*/, val/*:number*/)/*:string*/{
    	var o/*:string*/;
    	var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    	if(fmt.match(/^#+0.0E\+0$/)) {
    		if(val == 0) return "0.0E+0";
    		else if(val < 0) return "-" + write_num_exp(fmt, -val);
    		var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
    		var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
    		if(ee < 0) ee += period;
    		o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
    		if(o.indexOf("e") === -1) {
    			var fakee = Math.floor(Math.log(val)*Math.LOG10E);
    			if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
    			else o += "E+" + (fakee - ee);
    			while(o.substr(0,2) === "0.") {
    				o = o.charAt(0) + o.substr(2,period) + "." + o.substr(2+period);
    				o = o.replace(/^0+([1-9])/,"$1").replace(/^0+\./,"0.");
    			}
    			o = o.replace(/\+-/,"-");
    		}
    		o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
    	} else o = val.toExponential(idx);
    	if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
    	if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
    	return o.replace("e","E");
    }
    var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
    function write_num_f1(r/*:Array<string>*/, aval/*:number*/, sign/*:string*/)/*:string*/ {
    	var den = parseInt(r[4],10), rr = Math.round(aval * den), base = Math.floor(rr/den);
    	var myn = (rr - base*den), myd = den;
    	return sign + (base === 0 ? "" : ""+base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + "/" + r[3] + pad0(myd,r[4].length));
    }
    function write_num_f2(r/*:Array<string>*/, aval/*:number*/, sign/*:string*/)/*:string*/ {
    	return sign + (aval === 0 ? "" : ""+aval) + fill(" ", r[1].length + 2 + r[4].length);
    }
    var dec1 = /^#*0*\.([0#]+)/;
    var closeparen = /\).*[0#]/;
    var phone = /\(###\) ###\\?-####/;
    function hashq(str/*:string*/)/*:string*/ {
    	var o = "", cc;
    	for(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {
    		case 35: break;
    		case 63: o+= " "; break;
    		case 48: o+= "0"; break;
    		default: o+= String.fromCharCode(cc);
    	}
    	return o;
    }
    function rnd(val/*:number*/, d/*:number*/)/*:string*/ { var dd = Math.pow(10,d); return ""+(Math.round(val * dd)/dd); }
    function dec(val/*:number*/, d/*:number*/)/*:number*/ {
    	var _frac = val - Math.floor(val), dd = Math.pow(10,d);
    	if (d < ('' + Math.round(_frac * dd)).length) return 0;
    	return Math.round(_frac * dd);
    }
    function carry(val/*:number*/, d/*:number*/)/*:number*/ {
    	if (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {
    		return 1;
    	}
    	return 0;
    }
    function flr(val/*:number*/)/*:string*/ {
    	if(val < 2147483647 && val > -2147483648) return ""+(val >= 0 ? (val|0) : (val-1|0));
    	return ""+Math.floor(val);
    }
    function write_num_flt(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/ {
    	if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
    		var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
    		if(val >= 0) return write_num_flt('n', ffmt, val);
    		return '(' + write_num_flt('n', ffmt, -val) + ')';
    	}
    	if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
    	if(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);
    	if(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);
    	if(fmt.charCodeAt(0) === 36) return "$"+write_num_flt(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
    	var o;
    	var r/*:?Array<string>*/, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    	if(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);
    	if(fmt.match(/^[#?]+$/)) {
    		o = pad0r(val,0); if(o === "0") o = "";
    		return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
    	}
    	if((r = fmt.match(frac1))) return write_num_f1(r, aval, sign);
    	if(fmt.match(/^#+0+$/)) return sign + pad0r(aval,fmt.length - fmt.indexOf("0"));
    	if((r = fmt.match(dec1))) {
    		o = rnd(val, r[1].length).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1])).replace(/\.(\d*)$/,function($$, $1) { return "." + $1 + fill("0", hashq(/*::(*/r/*::||[""])*/[1]).length-$1.length); });
    		return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
    	}
    	fmt = fmt.replace(/^#+([0.])/, "$1");
    	if((r = fmt.match(/^(0*)\.(#*)$/))) {
    		return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
    	}
    	if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify(pad0r(aval,0));
    	if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
    		return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(""+(Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length),r[1].length);
    	}
    	if((r = fmt.match(/^#,#*,#0/))) return write_num_flt(type,fmt.replace(/^#,#*,/,""),val);
    	if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
    		o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g,""), val));
    		ri = 0;
    		return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
    	}
    	if(fmt.match(phone)) {
    		o = write_num_flt(type, "##########", val);
    		return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
    	}
    	var oa = "";
    	if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
    		ri = Math.min(/*::String(*/r[4]/*::)*/.length,7);
    		ff = SSF_frac(aval, Math.pow(10,ri)-1, false);
    		o = "" + sign;
    		oa = write_num("n", /*::String(*/r[1]/*::)*/, ff[1]);
    		if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
    		o += oa + /*::String(*/r[2]/*::)*/ + "/" + /*::String(*/r[3]/*::)*/;
    		oa = rpad_(ff[2],ri);
    		if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
    		o += oa;
    		return o;
    	}
    	if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
    		ri = Math.min(Math.max(r[1].length, r[4].length),7);
    		ff = SSF_frac(aval, Math.pow(10,ri)-1, true);
    		return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
    	}
    	if((r = fmt.match(/^[#0?]+$/))) {
    		o = pad0r(val, 0);
    		if(fmt.length <= o.length) return o;
    		return hashq(fmt.substr(0,fmt.length-o.length)) + o;
    	}
    	if((r = fmt.match(/^([#0?]+)\.([#0]+)$/))) {
    		o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
    		ri = o.indexOf(".");
    		var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
    		return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
    	}
    	if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
    		ri = dec(val, r[1].length);
    		return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(ri,r[1].length);
    	}
    	switch(fmt) {
    		case "###,##0.00": return write_num_flt(type, "#,##0.00", val);
    		case "###,###":
    		case "##,###":
    		case "#,###": var x = commaify(pad0r(aval,0)); return x !== "0" ? sign + x : "";
    		case "###,###.00": return write_num_flt(type, "###,##0.00",val).replace(/^0\./,".");
    		case "#,###.00": return write_num_flt(type, "#,##0.00",val).replace(/^0\./,".");
    	}
    	throw new Error("unsupported format |" + fmt + "|");
    }
    function write_num_cm2(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
    	var idx = fmt.length - 1;
    	while(fmt.charCodeAt(idx-1) === 44) --idx;
    	return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
    }
    function write_num_pct2(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
    	var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
    	return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
    }
    function write_num_exp2(fmt/*:string*/, val/*:number*/)/*:string*/{
    	var o/*:string*/;
    	var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    	if(fmt.match(/^#+0.0E\+0$/)) {
    		if(val == 0) return "0.0E+0";
    		else if(val < 0) return "-" + write_num_exp2(fmt, -val);
    		var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
    		var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
    		if(ee < 0) ee += period;
    		o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
    		if(!o.match(/[Ee]/)) {
    			var fakee = Math.floor(Math.log(val)*Math.LOG10E);
    			if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
    			else o += "E+" + (fakee - ee);
    			o = o.replace(/\+-/,"-");
    		}
    		o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
    	} else o = val.toExponential(idx);
    	if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
    	if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
    	return o.replace("e","E");
    }
    function write_num_int(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/ {
    	if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
    		var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
    		if(val >= 0) return write_num_int('n', ffmt, val);
    		return '(' + write_num_int('n', ffmt, -val) + ')';
    	}
    	if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
    	if(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);
    	if(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);
    	if(fmt.charCodeAt(0) === 36) return "$"+write_num_int(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
    	var o;
    	var r/*:?Array<string>*/, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    	if(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);
    	if(fmt.match(/^[#?]+$/)) {
    		o = (""+val); if(val === 0) o = "";
    		return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
    	}
    	if((r = fmt.match(frac1))) return write_num_f2(r, aval, sign);
    	if(fmt.match(/^#+0+$/)) return sign + pad0(aval,fmt.length - fmt.indexOf("0"));
    	if((r = fmt.match(dec1))) {
    		/*:: if(!Array.isArray(r)) throw new Error("unreachable"); */
    		o = (""+val).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1]));
    		o = o.replace(/\.(\d*)$/,function($$, $1) {
    		/*:: if(!Array.isArray(r)) throw new Error("unreachable"); */
    			return "." + $1 + fill("0", hashq(r[1]).length-$1.length); });
    		return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
    	}
    	fmt = fmt.replace(/^#+([0.])/, "$1");
    	if((r = fmt.match(/^(0*)\.(#*)$/))) {
    		return sign + (""+aval).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
    	}
    	if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify((""+aval));
    	if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
    		return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify((""+val)) + "." + fill('0',r[1].length);
    	}
    	if((r = fmt.match(/^#,#*,#0/))) return write_num_int(type,fmt.replace(/^#,#*,/,""),val);
    	if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
    		o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g,""), val));
    		ri = 0;
    		return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
    	}
    	if(fmt.match(phone)) {
    		o = write_num_int(type, "##########", val);
    		return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
    	}
    	var oa = "";
    	if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
    		ri = Math.min(/*::String(*/r[4]/*::)*/.length,7);
    		ff = SSF_frac(aval, Math.pow(10,ri)-1, false);
    		o = "" + sign;
    		oa = write_num("n", /*::String(*/r[1]/*::)*/, ff[1]);
    		if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
    		o += oa + /*::String(*/r[2]/*::)*/ + "/" + /*::String(*/r[3]/*::)*/;
    		oa = rpad_(ff[2],ri);
    		if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
    		o += oa;
    		return o;
    	}
    	if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
    		ri = Math.min(Math.max(r[1].length, r[4].length),7);
    		ff = SSF_frac(aval, Math.pow(10,ri)-1, true);
    		return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
    	}
    	if((r = fmt.match(/^[#0?]+$/))) {
    		o = "" + val;
    		if(fmt.length <= o.length) return o;
    		return hashq(fmt.substr(0,fmt.length-o.length)) + o;
    	}
    	if((r = fmt.match(/^([#0]+)\.([#0]+)$/))) {
    		o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
    		ri = o.indexOf(".");
    		var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
    		return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
    	}
    	if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
    		return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify(""+val).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(0,r[1].length);
    	}
    	switch(fmt) {
    		case "###,###":
    		case "##,###":
    		case "#,###": var x = commaify(""+aval); return x !== "0" ? sign + x : "";
    		default:
    			if(fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0,fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
    	}
    	throw new Error("unsupported format |" + fmt + "|");
    }
    function write_num(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/ {
    	return (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
    }
    function SSF_split_fmt(fmt/*:string*/)/*:Array<string>*/ {
    	var out/*:Array<string>*/ = [];
    	var in_str = false/*, cc*/;
    	for(var i = 0, j = 0; i < fmt.length; ++i) switch((/*cc=*/fmt.charCodeAt(i))) {
    		case 34: /* '"' */
    			in_str = !in_str; break;
    		case 95: case 42: case 92: /* '_' '*' '\\' */
    			++i; break;
    		case 59: /* ';' */
    			out[out.length] = fmt.substr(j,i-j);
    			j = i+1;
    	}
    	out[out.length] = fmt.substr(j);
    	if(in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
    	return out;
    }

    var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
    function fmt_is_date(fmt/*:string*/)/*:boolean*/ {
    	var i = 0, /*cc = 0,*/ c = "", o = "";
    	while(i < fmt.length) {
    		switch((c = fmt.charAt(i))) {
    			case 'G': if(SSF_isgeneral(fmt, i)) i+= 6; i++; break;
    			case '"': for(;(/*cc=*/fmt.charCodeAt(++i)) !== 34 && i < fmt.length;){/*empty*/} ++i; break;
    			case '\\': i+=2; break;
    			case '_': i+=2; break;
    			case '@': ++i; break;
    			case 'B': case 'b':
    				if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") return true;
    				/* falls through */
    			case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
    				/* falls through */
    			case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g': return true;
    			case 'A': case 'a': case '上':
    				if(fmt.substr(i, 3).toUpperCase() === "A/P") return true;
    				if(fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
    				if(fmt.substr(i, 5).toUpperCase() === "上午/下午") return true;
    				++i; break;
    			case '[':
    				o = c;
    				while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
    				if(o.match(SSF_abstime)) return true;
    				break;
    			case '.':
    				/* falls through */
    			case '0': case '#':
    				while(i < fmt.length && ("0#?.,E+-%".indexOf(c=fmt.charAt(++i)) > -1 || (c=='\\' && fmt.charAt(i+1) == "-" && "0#".indexOf(fmt.charAt(i+2))>-1))){/* empty */}
    				break;
    			case '?': while(fmt.charAt(++i) === c){/* empty */} break;
    			case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break;
    			case '(': case ')': ++i; break;
    			case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
    				while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1){/* empty */} break;
    			case ' ': ++i; break;
    			default: ++i; break;
    		}
    	}
    	return false;
    }

    function eval_fmt(fmt/*:string*/, v/*:any*/, opts/*:any*/, flen/*:number*/) {
    	var out = [], o = "", i = 0, c = "", lst='t', dt, j, cc;
    	var hr='H';
    	/* Tokenize */
    	while(i < fmt.length) {
    		switch((c = fmt.charAt(i))) {
    			case 'G': /* General */
    				if(!SSF_isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);
    				out[out.length] = {t:'G', v:'General'}; i+=7; break;
    			case '"': /* Literal text */
    				for(o="";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);
    				out[out.length] = {t:'t', v:o}; ++i; break;
    			case '\\': var w = fmt.charAt(++i), t = (w === "(" || w === ")") ? w : 't';
    				out[out.length] = {t:t, v:w}; ++i; break;
    			case '_': out[out.length] = {t:'t', v:" "}; i+=2; break;
    			case '@': /* Text Placeholder */
    				out[out.length] = {t:'T', v:v}; ++i; break;
    			case 'B': case 'b':
    				if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") {
    					if(dt==null) { dt=SSF_parse_date_code(v, opts, fmt.charAt(i+1) === "2"); if(dt==null) return ""; }
    					out[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;
    				}
    				/* falls through */
    			case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
    				c = c.toLowerCase();
    				/* falls through */
    			case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':
    				if(v < 0) return "";
    				if(dt==null) { dt=SSF_parse_date_code(v, opts); if(dt==null) return ""; }
    				o = c; while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o+=c;
    				if(c === 'm' && lst.toLowerCase() === 'h') c = 'M';
    				if(c === 'h') c = hr;
    				out[out.length] = {t:c, v:o}; lst = c; break;
    			case 'A': case 'a': case '上':
    				var q={t:c, v:c};
    				if(dt==null) dt=SSF_parse_date_code(v, opts);
    				if(fmt.substr(i, 3).toUpperCase() === "A/P") { if(dt!=null) q.v = dt.H >= 12 ? "P" : "A"; q.t = 'T'; hr='h';i+=3;}
    				else if(fmt.substr(i,5).toUpperCase() === "AM/PM") { if(dt!=null) q.v = dt.H >= 12 ? "PM" : "AM"; q.t = 'T'; i+=5; hr='h'; }
    				else if(fmt.substr(i,5).toUpperCase() === "上午/下午") { if(dt!=null) q.v = dt.H >= 12 ? "下午" : "上午"; q.t = 'T'; i+=5; hr='h'; }
    				else { q.t = "t"; ++i; }
    				if(dt==null && q.t === 'T') return "";
    				out[out.length] = q; lst = c; break;
    			case '[':
    				o = c;
    				while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
    				if(o.slice(-1) !== ']') throw 'unterminated "[" block: |' + o + '|';
    				if(o.match(SSF_abstime)) {
    					if(dt==null) { dt=SSF_parse_date_code(v, opts); if(dt==null) return ""; }
    					out[out.length] = {t:'Z', v:o.toLowerCase()};
    					lst = o.charAt(1);
    				} else if(o.indexOf("$") > -1) {
    					o = (o.match(/\$([^-\[\]]*)/)||[])[1]||"$";
    					if(!fmt_is_date(fmt)) out[out.length] = {t:'t',v:o};
    				}
    				break;
    			/* Numbers */
    			case '.':
    				if(dt != null) {
    					o = c; while(++i < fmt.length && (c=fmt.charAt(i)) === "0") o += c;
    					out[out.length] = {t:'s', v:o}; break;
    				}
    				/* falls through */
    			case '0': case '#':
    				o = c; while(++i < fmt.length && "0#?.,E+-%".indexOf(c=fmt.charAt(i)) > -1) o += c;
    				out[out.length] = {t:'n', v:o}; break;
    			case '?':
    				o = c; while(fmt.charAt(++i) === c) o+=c;
    				out[out.length] = {t:c, v:o}; lst = c; break;
    			case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break; // **
    			case '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;
    			case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
    				o = c; while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) o+=fmt.charAt(i);
    				out[out.length] = {t:'D', v:o}; break;
    			case ' ': out[out.length] = {t:c, v:c}; ++i; break;
    			case '$': out[out.length] = {t:'t', v:'$'}; ++i; break;
    			default:
    				if(",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);
    				out[out.length] = {t:'t', v:c}; ++i; break;
    		}
    	}

    	/* Scan for date/time parts */
    	var bt = 0, ss0 = 0, ssm;
    	for(i=out.length-1, lst='t'; i >= 0; --i) {
    		switch(out[i].t) {
    			case 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;
    			case 's':
    				if((ssm=out[i].v.match(/\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);
    				if(bt < 3) bt = 3;
    			/* falls through */
    			case 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;
    			case 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;
    			case 'X': /*if(out[i].v === "B2");*/
    				break;
    			case 'Z':
    				if(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
    				if(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
    				if(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
    		}
    	}
    	/* time rounding depends on presence of minute / second / usec fields */
    	switch(bt) {
    		case 0: break;
    		case 1:
    			/*::if(!dt) break;*/
    			if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
    			if(dt.S >=  60) { dt.S = 0; ++dt.M; }
    			if(dt.M >=  60) { dt.M = 0; ++dt.H; }
    			break;
    		case 2:
    			/*::if(!dt) break;*/
    			if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
    			if(dt.S >=  60) { dt.S = 0; ++dt.M; }
    			break;
    	}

    	/* replace fields */
    	var nstr = "", jj;
    	for(i=0; i < out.length; ++i) {
    		switch(out[i].t) {
    			case 't': case 'T': case ' ': case 'D': break;
    			case 'X': out[i].v = ""; out[i].t = ";"; break;
    			case 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':
    				/*::if(!dt) throw "unreachable"; */
    				out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
    				out[i].t = 't'; break;
    			case 'n': case '?':
    				jj = i+1;
    				while(out[jj] != null && (
    					(c=out[jj].t) === "?" || c === "D" ||
    					((c === " " || c === "t") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === "t" && out[jj+1].v === '/')) ||
    					(out[i].t === '(' && (c === ' ' || c === 'n' || c === ')')) ||
    					(c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?'))
    				)) {
    					out[i].v += out[jj].v;
    					out[jj] = {v:"", t:";"}; ++jj;
    				}
    				nstr += out[i].v;
    				i = jj-1; break;
    			case 'G': out[i].t = 't'; out[i].v = SSF_general(v,opts); break;
    		}
    	}
    	var vv = "", myv, ostr;
    	if(nstr.length > 0) {
    		if(nstr.charCodeAt(0) == 40) /* '(' */ {
    			myv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v);
    			ostr = write_num('n', nstr, myv);
    		} else {
    			myv = (v<0 && flen > 1 ? -v : v);
    			ostr = write_num('n', nstr, myv);
    			if(myv < 0 && out[0] && out[0].t == 't') {
    				ostr = ostr.substr(1);
    				out[0].v = "-" + out[0].v;
    			}
    		}
    		jj=ostr.length-1;
    		var decpt = out.length;
    		for(i=0; i < out.length; ++i) if(out[i] != null && out[i].t != 't' && out[i].v.indexOf(".") > -1) { decpt = i; break; }
    		var lasti=out.length;
    		if(decpt === out.length && ostr.indexOf("E") === -1) {
    			for(i=out.length-1; i>= 0;--i) {
    				if(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;
    				if(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }
    				else if(jj < 0) out[i].v = "";
    				else { out[i].v = ostr.substr(0, jj+1); jj = -1; }
    				out[i].t = 't';
    				lasti = i;
    			}
    			if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
    		}
    		else if(decpt !== out.length && ostr.indexOf("E") === -1) {
    			jj = ostr.indexOf(".")-1;
    			for(i=decpt; i>= 0; --i) {
    				if(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;
    				j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")-1:out[i].v.length-1;
    				vv = out[i].v.substr(j+1);
    				for(; j>=0; --j) {
    					if(jj>=0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
    				}
    				out[i].v = vv;
    				out[i].t = 't';
    				lasti = i;
    			}
    			if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
    			jj = ostr.indexOf(".")+1;
    			for(i=decpt; i<out.length; ++i) {
    				if(out[i] == null || ('n?('.indexOf(out[i].t) === -1 && i !== decpt)) continue;
    				j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")+1:0;
    				vv = out[i].v.substr(0,j);
    				for(; j<out[i].v.length; ++j) {
    					if(jj<ostr.length) vv += ostr.charAt(jj++);
    				}
    				out[i].v = vv;
    				out[i].t = 't';
    				lasti = i;
    			}
    		}
    	}
    	for(i=0; i<out.length; ++i) if(out[i] != null && 'n?'.indexOf(out[i].t)>-1) {
    		myv = (flen >1 && v < 0 && i>0 && out[i-1].v === "-" ? -v:v);
    		out[i].v = write_num(out[i].t, out[i].v, myv);
    		out[i].t = 't';
    	}
    	var retval = "";
    	for(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;
    	return retval;
    }

    var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
    function chkcond(v, rr) {
    	if(rr == null) return false;
    	var thresh = parseFloat(rr[2]);
    	switch(rr[1]) {
    		case "=":  if(v == thresh) return true; break;
    		case ">":  if(v >  thresh) return true; break;
    		case "<":  if(v <  thresh) return true; break;
    		case "<>": if(v != thresh) return true; break;
    		case ">=": if(v >= thresh) return true; break;
    		case "<=": if(v <= thresh) return true; break;
    	}
    	return false;
    }
    function choose_fmt(f/*:string*/, v/*:any*/) {
    	var fmt = SSF_split_fmt(f);
    	var l = fmt.length, lat = fmt[l-1].indexOf("@");
    	if(l<4 && lat>-1) --l;
    	if(fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
    	if(typeof v !== "number") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:"@"];
    	switch(fmt.length) {
    		case 1: fmt = lat>-1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"]; break;
    		case 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"]; break;
    		case 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"]; break;
    	}
    	var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
    	if(fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff];
    	if(fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
    		var m1 = fmt[0].match(cfregex2);
    		var m2 = fmt[1].match(cfregex2);
    		return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
    	}
    	return [l, ff];
    }
    function SSF_format(fmt/*:string|number*/,v/*:any*/,o/*:?any*/) {
    	if(o == null) o = {};
    	var sfmt = "";
    	switch(typeof fmt) {
    		case "string":
    			if(fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;
    			else sfmt = fmt;
    			break;
    		case "number":
    			if(fmt == 14 && o.dateNF) sfmt = o.dateNF;
    			else sfmt = (o.table != null ? (o.table/*:any*/) : table_fmt)[fmt];
    			if(sfmt == null) sfmt = (o.table && o.table[SSF_default_map[fmt]]) || table_fmt[SSF_default_map[fmt]];
    			if(sfmt == null) sfmt = SSF_default_str[fmt] || "General";
    			break;
    	}
    	if(SSF_isgeneral(sfmt,0)) return SSF_general(v, o);
    	if(v instanceof Date) v = datenum_local(v, o.date1904);
    	var f = choose_fmt(sfmt, v);
    	if(SSF_isgeneral(f[1])) return SSF_general(v, o);
    	if(v === true) v = "TRUE"; else if(v === false) v = "FALSE";
    	else if(v === "" || v == null) return "";
    	return eval_fmt(f[1], v, o, f[0]);
    }
    function SSF_load(fmt/*:string*/, idx/*:?number*/)/*:number*/ {
    	if(typeof idx != 'number') {
    		idx = +idx || -1;
    /*::if(typeof idx != 'number') return 0x188; */
    		for(var i = 0; i < 0x0188; ++i) {
    /*::if(typeof idx != 'number') return 0x188; */
    			if(table_fmt[i] == undefined) { if(idx < 0) idx = i; continue; }
    			if(table_fmt[i] == fmt) { idx = i; break; }
    		}
    /*::if(typeof idx != 'number') return 0x188; */
    		if(idx < 0) idx = 0x187;
    	}
    /*::if(typeof idx != 'number') return 0x188; */
    	table_fmt[idx] = fmt;
    	return idx;
    }
    function SSF_load_table(tbl/*:SSFTable*/)/*:void*/ {
    	for(var i=0; i!=0x0188; ++i)
    		if(tbl[i] !== undefined) SSF_load(tbl[i], i);
    }

    function make_ssf() {
    	table_fmt = SSF_init_table();
    }

    var SSF = {
    	format: SSF_format,
    	load: SSF_load,
    	_table: table_fmt,
    	load_table: SSF_load_table,
    	parse_date_code: SSF_parse_date_code,
    	is_date: fmt_is_date,
    	get_table: function get_table() { return SSF._table = table_fmt; }
    };

    var SSFImplicit/*{[number]:string}*/ = ({
    	"5": '"$"#,##0_);\\("$"#,##0\\)',
    	"6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    	"7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    	"8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    	"23": 'General', "24": 'General', "25": 'General', "26": 'General',
    	"27": 'm/d/yy', "28": 'm/d/yy', "29": 'm/d/yy', "30": 'm/d/yy', "31": 'm/d/yy',
    	"32": 'h:mm:ss', "33": 'h:mm:ss', "34": 'h:mm:ss', "35": 'h:mm:ss',
    	"36": 'm/d/yy',
    	"41": '_(* #,##0_);_(* \(#,##0\);_(* "-"_);_(@_)',
    	"42": '_("$"* #,##0_);_("$"* \(#,##0\);_("$"* "-"_);_(@_)',
    	"43": '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
    	"44": '_("$"* #,##0.00_);_("$"* \(#,##0.00\);_("$"* "-"??_);_(@_)',
    	"50": 'm/d/yy', "51": 'm/d/yy', "52": 'm/d/yy', "53": 'm/d/yy', "54": 'm/d/yy',
    	"55": 'm/d/yy', "56": 'm/d/yy', "57": 'm/d/yy', "58": 'm/d/yy',
    	"59": '0',
    	"60": '0.00',
    	"61": '#,##0',
    	"62": '#,##0.00',
    	"63": '"$"#,##0_);\\("$"#,##0\\)',
    	"64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    	"65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    	"66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    	"67": '0%',
    	"68": '0.00%',
    	"69": '# ?/?',
    	"70": '# ??/??',
    	"71": 'm/d/yy',
    	"72": 'm/d/yy',
    	"73": 'd-mmm-yy',
    	"74": 'd-mmm',
    	"75": 'mmm-yy',
    	"76": 'h:mm',
    	"77": 'h:mm:ss',
    	"78": 'm/d/yy h:mm',
    	"79": 'mm:ss',
    	"80": '[h]:mm:ss',
    	"81": 'mmss.0'
    }/*:any*/);

    /* dateNF parse TODO: move to SSF */
    var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
    function dateNF_regex(dateNF/*:string|number*/)/*:RegExp*/ {
    	var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
    	fmt = fmt.replace(dateNFregex, "(\\d+)");
    	return new RegExp("^" + fmt + "$");
    }
    function dateNF_fix(str/*:string*/, dateNF/*:string*/, match/*:Array<string>*/)/*:string*/ {
    	var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
    	(dateNF.match(dateNFregex)||[]).forEach(function(n, i) {
    		var v = parseInt(match[i+1], 10);
    		switch(n.toLowerCase().charAt(0)) {
    			case 'y': Y = v; break; case 'd': d = v; break;
    			case 'h': H = v; break; case 's': S = v; break;
    			case 'm': if(H >= 0) M = v; else m = v; break;
    		}
    	});
    	if(S >= 0 && M == -1 && m >= 0) { M = m; m = -1; }
    	var datestr = (("" + (Y>=0?Y: new Date().getFullYear())).slice(-4) + "-" + ("00" + (m>=1?m:1)).slice(-2) + "-" + ("00" + (d>=1?d:1)).slice(-2));
    	if(datestr.length == 7) datestr = "0" + datestr;
    	if(datestr.length == 8) datestr = "20" + datestr;
    	var timestr = (("00" + (H>=0?H:0)).slice(-2) + ":" + ("00" + (M>=0?M:0)).slice(-2) + ":" + ("00" + (S>=0?S:0)).slice(-2));
    	if(H == -1 && M == -1 && S == -1) return datestr;
    	if(Y == -1 && m == -1 && d == -1) return timestr;
    	return datestr + "T" + timestr;
    }

    /*::
    declare var ReadShift:any;
    declare var CheckField:any;
    declare var prep_blob:any;
    declare var __readUInt32LE:any;
    declare var __readInt32LE:any;
    declare var __toBuffer:any;
    declare var __utf16le:any;
    declare var bconcat:any;
    declare var s2a:any;
    declare var chr0:any;
    declare var chr1:any;
    declare var has_buf:boolean;
    declare var new_buf:any;
    declare var new_raw_buf:any;
    declare var new_unsafe_buf:any;
    declare var Buffer_from:any;
    */
    /* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /* vim: set ts=2: */
    /*jshint eqnull:true */
    /*exported CFB */
    /*global Uint8Array:false, Uint16Array:false */

    /*::
    type SectorEntry = {
    	name?:string;
    	nodes?:Array<number>;
    	data:RawBytes;
    };
    type SectorList = {
    	[k:string|number]:SectorEntry;
    	name:?string;
    	fat_addrs:Array<number>;
    	ssz:number;
    }
    type CFBFiles = {[n:string]:CFBEntry};
    */
    /* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */
    /* vim: set ts=2: */
    /*exported CRC32 */
    var CRC32 = /*#__PURE__*/(function() {
    var CRC32 = {};
    CRC32.version = '1.2.0';
    /* see perf/crc32table.js */
    /*global Int32Array */
    function signed_crc_table()/*:any*/ {
    	var c = 0, table/*:Array<number>*/ = new Array(256);

    	for(var n =0; n != 256; ++n){
    		c = n;
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		table[n] = c;
    	}

    	return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
    }

    var T0 = signed_crc_table();
    function slice_by_16_tables(T) {
    	var c = 0, v = 0, n = 0, table/*:Array<number>*/ = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;

    	for(n = 0; n != 256; ++n) table[n] = T[n];
    	for(n = 0; n != 256; ++n) {
    		v = T[n];
    		for(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];
    	}
    	var out = [];
    	for(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
    	return out;
    }
    var TT = slice_by_16_tables(T0);
    var T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];
    var T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];
    var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
    function crc32_bstr(bstr/*:string*/, seed/*:number*/)/*:number*/ {
    	var C = seed/*:: ? 0 : 0 */ ^ -1;
    	for(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];
    	return ~C;
    }

    function crc32_buf(B/*:Uint8Array|Array<number>*/, seed/*:number*/)/*:number*/ {
    	var C = seed/*:: ? 0 : 0 */ ^ -1, L = B.length - 15, i = 0;
    	for(; i < L;) C =
    		Tf[B[i++] ^ (C & 255)] ^
    		Te[B[i++] ^ ((C >> 8) & 255)] ^
    		Td[B[i++] ^ ((C >> 16) & 255)] ^
    		Tc[B[i++] ^ (C >>> 24)] ^
    		Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^
    		T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^
    		T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
    	L += 15;
    	while(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];
    	return ~C;
    }

    function crc32_str(str/*:string*/, seed/*:number*/)/*:number*/ {
    	var C = seed ^ -1;
    	for(var i = 0, L = str.length, c = 0, d = 0; i < L;) {
    		c = str.charCodeAt(i++);
    		if(c < 0x80) {
    			C = (C>>>8) ^ T0[(C^c)&0xFF];
    		} else if(c < 0x800) {
    			C = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
    		} else if(c >= 0xD800 && c < 0xE000) {
    			c = (c&1023)+64; d = str.charCodeAt(i++)&1023;
    			C = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];
    		} else {
    			C = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
    		}
    	}
    	return ~C;
    }
    CRC32.table = T0;
    CRC32.bstr = crc32_bstr;
    CRC32.buf = crc32_buf;
    CRC32.str = crc32_str;
    return CRC32;
    })();
    /* [MS-CFB] v20171201 */
    var CFB = /*#__PURE__*/(function _CFB(){
    var exports = {};
    exports.version = '1.2.1';
    /* [MS-CFB] 2.6.4 */
    function namecmp(l/*:string*/, r/*:string*/)/*:number*/ {
    	var L = l.split("/"), R = r.split("/");
    	for(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {
    		if((c = L[i].length - R[i].length)) return c;
    		if(L[i] != R[i]) return L[i] < R[i] ? -1 : 1;
    	}
    	return L.length - R.length;
    }
    function dirname(p/*:string*/)/*:string*/ {
    	if(p.charAt(p.length - 1) == "/") return (p.slice(0,-1).indexOf("/") === -1) ? p : dirname(p.slice(0, -1));
    	var c = p.lastIndexOf("/");
    	return (c === -1) ? p : p.slice(0, c+1);
    }

    function filename(p/*:string*/)/*:string*/ {
    	if(p.charAt(p.length - 1) == "/") return filename(p.slice(0, -1));
    	var c = p.lastIndexOf("/");
    	return (c === -1) ? p : p.slice(c+1);
    }
    /* -------------------------------------------------------------------------- */
    /* DOS Date format:
       high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low
       add 1980 to stored year
       stored second should be doubled
    */

    /* write JS date to buf as a DOS date */
    function write_dos_date(buf/*:CFBlob*/, date/*:Date|string*/) {
    	if(typeof date === "string") date = new Date(date);
    	var hms/*:number*/ = date.getHours();
    	hms = hms << 6 | date.getMinutes();
    	hms = hms << 5 | (date.getSeconds()>>>1);
    	buf.write_shift(2, hms);
    	var ymd/*:number*/ = (date.getFullYear() - 1980);
    	ymd = ymd << 4 | (date.getMonth()+1);
    	ymd = ymd << 5 | date.getDate();
    	buf.write_shift(2, ymd);
    }

    /* read four bytes from buf and interpret as a DOS date */
    function parse_dos_date(buf/*:CFBlob*/)/*:Date*/ {
    	var hms = buf.read_shift(2) & 0xFFFF;
    	var ymd = buf.read_shift(2) & 0xFFFF;
    	var val = new Date();
    	var d = ymd & 0x1F; ymd >>>= 5;
    	var m = ymd & 0x0F; ymd >>>= 4;
    	val.setMilliseconds(0);
    	val.setFullYear(ymd + 1980);
    	val.setMonth(m-1);
    	val.setDate(d);
    	var S = hms & 0x1F; hms >>>= 5;
    	var M = hms & 0x3F; hms >>>= 6;
    	val.setHours(hms);
    	val.setMinutes(M);
    	val.setSeconds(S<<1);
    	return val;
    }
    function parse_extra_field(blob/*:CFBlob*/)/*:any*/ {
    	prep_blob(blob, 0);
    	var o = /*::(*/{}/*:: :any)*/;
    	var flags = 0;
    	while(blob.l <= blob.length - 4) {
    		var type = blob.read_shift(2);
    		var sz = blob.read_shift(2), tgt = blob.l + sz;
    		var p = {};
    		switch(type) {
    			/* UNIX-style Timestamps */
    			case 0x5455: {
    				flags = blob.read_shift(1);
    				if(flags & 1) p.mtime = blob.read_shift(4);
    				/* for some reason, CD flag corresponds to LFH */
    				if(sz > 5) {
    					if(flags & 2) p.atime = blob.read_shift(4);
    					if(flags & 4) p.ctime = blob.read_shift(4);
    				}
    				if(p.mtime) p.mt = new Date(p.mtime*1000);
    			}
    			break;
    		}
    		blob.l = tgt;
    		o[type] = p;
    	}
    	return o;
    }
    var fs/*:: = require('fs'); */;
    function get_fs() { return fs || (fs = {}); }
    function parse(file/*:RawBytes*/, options/*:CFBReadOpts*/)/*:CFBContainer*/ {
    if(file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);
    if((file[0] | 0x20) == 0x6d && (file[1]|0x20) == 0x69) return parse_mad(file, options);
    if(file.length < 512) throw new Error("CFB file size " + file.length + " < 512");
    var mver = 3;
    var ssz = 512;
    var nmfs = 0; // number of mini FAT sectors
    var difat_sec_cnt = 0;
    var dir_start = 0;
    var minifat_start = 0;
    var difat_start = 0;

    var fat_addrs/*:Array<number>*/ = []; // locations of FAT sectors

    /* [MS-CFB] 2.2 Compound File Header */
    var blob/*:CFBlob*/ = /*::(*/file.slice(0,512)/*:: :any)*/;
    prep_blob(blob, 0);

    /* major version */
    var mv = check_get_mver(blob);
    mver = mv[0];
    switch(mver) {
    	case 3: ssz = 512; break; case 4: ssz = 4096; break;
    	case 0: if(mv[1] == 0) return parse_zip(file, options);
    	/* falls through */
    	default: throw new Error("Major Version: Expected 3 or 4 saw " + mver);
    }

    /* reprocess header */
    if(ssz !== 512) { blob = /*::(*/file.slice(0,ssz)/*:: :any)*/; prep_blob(blob, 28 /* blob.l */); }
    /* Save header for final object */
    var header/*:RawBytes*/ = file.slice(0,ssz);

    check_shifts(blob, mver);

    // Number of Directory Sectors
    var dir_cnt/*:number*/ = blob.read_shift(4, 'i');
    if(mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt);

    // Number of FAT Sectors
    blob.l += 4;

    // First Directory Sector Location
    dir_start = blob.read_shift(4, 'i');

    // Transaction Signature
    blob.l += 4;

    // Mini Stream Cutoff Size
    blob.chk('00100000', 'Mini Stream Cutoff Size: ');

    // First Mini FAT Sector Location
    minifat_start = blob.read_shift(4, 'i');

    // Number of Mini FAT Sectors
    nmfs = blob.read_shift(4, 'i');

    // First DIFAT sector location
    difat_start = blob.read_shift(4, 'i');

    // Number of DIFAT Sectors
    difat_sec_cnt = blob.read_shift(4, 'i');

    // Grab FAT Sector Locations
    for(var q = -1, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */
    	q = blob.read_shift(4, 'i');
    	if(q<0) break;
    	fat_addrs[j] = q;
    }

    /** Break the file up into sectors */
    var sectors/*:Array<RawBytes>*/ = sectorify(file, ssz);

    sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);

    /** Chains */
    var sector_list/*:SectorList*/ = make_sector_list(sectors, dir_start, fat_addrs, ssz);

    sector_list[dir_start].name = "!Directory";
    if(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
    sector_list[fat_addrs[0]].name = "!FAT";
    sector_list.fat_addrs = fat_addrs;
    sector_list.ssz = ssz;

    /* [MS-CFB] 2.6.1 Compound File Directory Entry */
    var files/*:CFBFiles*/ = {}, Paths/*:Array<string>*/ = [], FileIndex/*:CFBFileIndex*/ = [], FullPaths/*:Array<string>*/ = [];
    read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);

    build_full_paths(FileIndex, FullPaths, Paths);
    Paths.shift();

    var o = {
    	FileIndex: FileIndex,
    	FullPaths: FullPaths
    };

    // $FlowIgnore
    if(options && options.raw) o.raw = {header: header, sectors: sectors};
    return o;
    } // parse

    /* [MS-CFB] 2.2 Compound File Header -- read up to major version */
    function check_get_mver(blob/*:CFBlob*/)/*:[number, number]*/ {
    	if(blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0];
    	// header signature 8
    	blob.chk(HEADER_SIGNATURE, 'Header Signature: ');

    	// clsid 16
    	//blob.chk(HEADER_CLSID, 'CLSID: ');
    	blob.l += 16;

    	// minor version 2
    	var mver/*:number*/ = blob.read_shift(2, 'u');

    	return [blob.read_shift(2,'u'), mver];
    }
    function check_shifts(blob/*:CFBlob*/, mver/*:number*/)/*:void*/ {
    	var shift = 0x09;

    	// Byte Order
    	//blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff
    	blob.l += 2;

    	// Sector Shift
    	switch((shift = blob.read_shift(2))) {
    		case 0x09: if(mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift); break;
    		case 0x0c: if(mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift); break;
    		default: throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);
    	}

    	// Mini Sector Shift
    	blob.chk('0600', 'Mini Sector Shift: ');

    	// Reserved
    	blob.chk('000000000000', 'Reserved: ');
    }

    /** Break the file up into sectors */
    function sectorify(file/*:RawBytes*/, ssz/*:number*/)/*:Array<RawBytes>*/ {
    	var nsectors = Math.ceil(file.length/ssz)-1;
    	var sectors/*:Array<RawBytes>*/ = [];
    	for(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);
    	sectors[nsectors-1] = file.slice(nsectors*ssz);
    	return sectors;
    }

    /* [MS-CFB] 2.6.4 Red-Black Tree */
    function build_full_paths(FI/*:CFBFileIndex*/, FP/*:Array<string>*/, Paths/*:Array<string>*/)/*:void*/ {
    	var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
    	var dad/*:Array<number>*/ = [], q/*:Array<number>*/ = [];

    	for(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }

    	for(; j < q.length; ++j) {
    		i = q[j];
    		L = FI[i].L; R = FI[i].R; C = FI[i].C;
    		if(dad[i] === i) {
    			if(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];
    			if(R !== -1 && dad[R] !== R) dad[i] = dad[R];
    		}
    		if(C !== -1 /*NOSTREAM*/) dad[C] = i;
    		if(L !== -1 && i != dad[i]) { dad[L] = dad[i]; if(q.lastIndexOf(L) < j) q.push(L); }
    		if(R !== -1 && i != dad[i]) { dad[R] = dad[i]; if(q.lastIndexOf(R) < j) q.push(R); }
    	}
    	for(i=1; i < pl; ++i) if(dad[i] === i) {
    		if(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];
    		else if(L !== -1 && dad[L] !== L) dad[i] = dad[L];
    	}

    	for(i=1; i < pl; ++i) {
    		if(FI[i].type === 0 /* unknown */) continue;
    		j = i;
    		if(j != dad[j]) do {
    			j = dad[j];
    			FP[i] = FP[j] + "/" + FP[i];
    		} while (j !== 0 && -1 !== dad[j] && j != dad[j]);
    		dad[i] = -1;
    	}

    	FP[0] += "/";
    	for(i=1; i < pl; ++i) {
    		if(FI[i].type !== 2 /* stream */) FP[i] += "/";
    	}
    }

    function get_mfat_entry(entry/*:CFBEntry*/, payload/*:RawBytes*/, mini/*:?RawBytes*/)/*:CFBlob*/ {
    	var start = entry.start, size = entry.size;
    	//return (payload.slice(start*MSSZ, start*MSSZ + size)/*:any*/);
    	var o = [];
    	var idx = start;
    	while(mini && size > 0 && idx >= 0) {
    		o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
    		size -= MSSZ;
    		idx = __readInt32LE(mini, idx * 4);
    	}
    	if(o.length === 0) return (new_buf(0)/*:any*/);
    	return (bconcat(o).slice(0, entry.size)/*:any*/);
    }

    /** Chase down the rest of the DIFAT chain to build a comprehensive list
        DIFAT chains by storing the next sector number as the last 32 bits */
    function sleuth_fat(idx/*:number*/, cnt/*:number*/, sectors/*:Array<RawBytes>*/, ssz/*:number*/, fat_addrs)/*:void*/ {
    	var q/*:number*/ = ENDOFCHAIN;
    	if(idx === ENDOFCHAIN) {
    		if(cnt !== 0) throw new Error("DIFAT chain shorter than expected");
    	} else if(idx !== -1 /*FREESECT*/) {
    		var sector = sectors[idx], m = (ssz>>>2)-1;
    		if(!sector) return;
    		for(var i = 0; i < m; ++i) {
    			if((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;
    			fat_addrs.push(q);
    		}
    		sleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);
    	}
    }

    /** Follow the linked list of sectors for a given starting point */
    function get_sector_list(sectors/*:Array<RawBytes>*/, start/*:number*/, fat_addrs/*:Array<number>*/, ssz/*:number*/, chkd/*:?Array<boolean>*/)/*:SectorEntry*/ {
    	var buf/*:Array<number>*/ = [], buf_chain/*:Array<any>*/ = [];
    	if(!chkd) chkd = [];
    	var modulus = ssz - 1, j = 0, jj = 0;
    	for(j=start; j>=0;) {
    		chkd[j] = true;
    		buf[buf.length] = j;
    		buf_chain.push(sectors[j]);
    		var addr = fat_addrs[Math.floor(j*4/ssz)];
    		jj = ((j*4) & modulus);
    		if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
    		if(!sectors[addr]) break;
    		j = __readInt32LE(sectors[addr], jj);
    	}
    	return {nodes: buf, data:__toBuffer([buf_chain])};
    }

    /** Chase down the sector linked lists */
    function make_sector_list(sectors/*:Array<RawBytes>*/, dir_start/*:number*/, fat_addrs/*:Array<number>*/, ssz/*:number*/)/*:SectorList*/ {
    	var sl = sectors.length, sector_list/*:SectorList*/ = ([]/*:any*/);
    	var chkd/*:Array<boolean>*/ = [], buf/*:Array<number>*/ = [], buf_chain/*:Array<RawBytes>*/ = [];
    	var modulus = ssz - 1, i=0, j=0, k=0, jj=0;
    	for(i=0; i < sl; ++i) {
    		buf = ([]/*:Array<number>*/);
    		k = (i + dir_start); if(k >= sl) k-=sl;
    		if(chkd[k]) continue;
    		buf_chain = [];
    		var seen = [];
    		for(j=k; j>=0;) {
    			seen[j] = true;
    			chkd[j] = true;
    			buf[buf.length] = j;
    			buf_chain.push(sectors[j]);
    			var addr/*:number*/ = fat_addrs[Math.floor(j*4/ssz)];
    			jj = ((j*4) & modulus);
    			if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
    			if(!sectors[addr]) break;
    			j = __readInt32LE(sectors[addr], jj);
    			if(seen[j]) break;
    		}
    		sector_list[k] = ({nodes: buf, data:__toBuffer([buf_chain])}/*:SectorEntry*/);
    	}
    	return sector_list;
    }

    /* [MS-CFB] 2.6.1 Compound File Directory Entry */
    function read_directory(dir_start/*:number*/, sector_list/*:SectorList*/, sectors/*:Array<RawBytes>*/, Paths/*:Array<string>*/, nmfs, files, FileIndex, mini) {
    	var minifat_store = 0, pl = (Paths.length?2:0);
    	var sector = sector_list[dir_start].data;
    	var i = 0, namelen = 0, name;
    	for(; i < sector.length; i+= 128) {
    		var blob/*:CFBlob*/ = /*::(*/sector.slice(i, i+128)/*:: :any)*/;
    		prep_blob(blob, 64);
    		namelen = blob.read_shift(2);
    		name = __utf16le(blob,0,namelen-pl);
    		Paths.push(name);
    		var o/*:CFBEntry*/ = ({
    			name:  name,
    			type:  blob.read_shift(1),
    			color: blob.read_shift(1),
    			L:     blob.read_shift(4, 'i'),
    			R:     blob.read_shift(4, 'i'),
    			C:     blob.read_shift(4, 'i'),
    			clsid: blob.read_shift(16),
    			state: blob.read_shift(4, 'i'),
    			start: 0,
    			size: 0
    		});
    		var ctime/*:number*/ = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
    		if(ctime !== 0) o.ct = read_date(blob, blob.l-8);
    		var mtime/*:number*/ = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
    		if(mtime !== 0) o.mt = read_date(blob, blob.l-8);
    		o.start = blob.read_shift(4, 'i');
    		o.size = blob.read_shift(4, 'i');
    		if(o.size < 0 && o.start < 0) { o.size = o.type = 0; o.start = ENDOFCHAIN; o.name = ""; }
    		if(o.type === 5) { /* root */
    			minifat_store = o.start;
    			if(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
    			/*minifat_size = o.size;*/
    		} else if(o.size >= 4096 /* MSCSZ */) {
    			o.storage = 'fat';
    			if(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
    			sector_list[o.start].name = o.name;
    			o.content = (sector_list[o.start].data.slice(0,o.size)/*:any*/);
    		} else {
    			o.storage = 'minifat';
    			if(o.size < 0) o.size = 0;
    			else if(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {
    				o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini]||{}).data);
    			}
    		}
    		if(o.content) prep_blob(o.content, 0);
    		files[name] = o;
    		FileIndex.push(o);
    	}
    }

    function read_date(blob/*:RawBytes|CFBlob*/, offset/*:number*/)/*:Date*/ {
    	return new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);
    }

    function read_file(filename/*:string*/, options/*:CFBReadOpts*/) {
    	get_fs();
    	return parse(fs.readFileSync(filename), options);
    }

    function read(blob/*:RawBytes|string*/, options/*:CFBReadOpts*/) {
    	var type = options && options.type;
    	if(!type) {
    		if(has_buf && Buffer.isBuffer(blob)) type = "buffer";
    	}
    	switch(type || "base64") {
    		case "file": /*:: if(typeof blob !== 'string') throw "Must pass a filename when type='file'"; */return read_file(blob, options);
    		case "base64": /*:: if(typeof blob !== 'string') throw "Must pass a base64-encoded binary string when type='file'"; */return parse(s2a(Base64_decode(blob)), options);
    		case "binary": /*:: if(typeof blob !== 'string') throw "Must pass a binary string when type='file'"; */return parse(s2a(blob), options);
    	}
    	return parse(/*::typeof blob == 'string' ? new Buffer(blob, 'utf-8') : */blob, options);
    }

    function init_cfb(cfb/*:CFBContainer*/, opts/*:?any*/)/*:void*/ {
    	var o = opts || {}, root = o.root || "Root Entry";
    	if(!cfb.FullPaths) cfb.FullPaths = [];
    	if(!cfb.FileIndex) cfb.FileIndex = [];
    	if(cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");
    	if(cfb.FullPaths.length === 0) {
    		cfb.FullPaths[0] = root + "/";
    		cfb.FileIndex[0] = ({ name: root, type: 5 }/*:any*/);
    	}
    	if(o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
    	seed_cfb(cfb);
    }
    function seed_cfb(cfb/*:CFBContainer*/)/*:void*/ {
    	var nm = "\u0001Sh33tJ5";
    	if(CFB.find(cfb, "/" + nm)) return;
    	var p = new_buf(4); p[0] = 55; p[1] = p[3] = 50; p[2] = 54;
    	cfb.FileIndex.push(({ name: nm, type: 2, content:p, size:4, L:69, R:69, C:69 }/*:any*/));
    	cfb.FullPaths.push(cfb.FullPaths[0] + nm);
    	rebuild_cfb(cfb);
    }
    function rebuild_cfb(cfb/*:CFBContainer*/, f/*:?boolean*/)/*:void*/ {
    	init_cfb(cfb);
    	var gc = false, s = false;
    	for(var i = cfb.FullPaths.length - 1; i >= 0; --i) {
    		var _file = cfb.FileIndex[i];
    		switch(_file.type) {
    			case 0:
    				if(s) gc = true;
    				else { cfb.FileIndex.pop(); cfb.FullPaths.pop(); }
    				break;
    			case 1: case 2: case 5:
    				s = true;
    				if(isNaN(_file.R * _file.L * _file.C)) gc = true;
    				if(_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
    				break;
    			default: gc = true; break;
    		}
    	}
    	if(!gc && !f) return;

    	var now = new Date(1987, 1, 19), j = 0;
    	// Track which names exist
    	var fullPaths = Object.create ? Object.create(null) : {};
    	var data/*:Array<[string, CFBEntry]>*/ = [];
    	for(i = 0; i < cfb.FullPaths.length; ++i) {
    		fullPaths[cfb.FullPaths[i]] = true;
    		if(cfb.FileIndex[i].type === 0) continue;
    		data.push([cfb.FullPaths[i], cfb.FileIndex[i]]);
    	}
    	for(i = 0; i < data.length; ++i) {
    		var dad = dirname(data[i][0]);
    		s = fullPaths[dad];
    		if(!s) {
    			data.push([dad, ({
    				name: filename(dad).replace("/",""),
    				type: 1,
    				clsid: HEADER_CLSID,
    				ct: now, mt: now,
    				content: null
    			}/*:any*/)]);
    			// Add name to set
    			fullPaths[dad] = true;
    		}
    	}

    	data.sort(function(x,y) { return namecmp(x[0], y[0]); });
    	cfb.FullPaths = []; cfb.FileIndex = [];
    	for(i = 0; i < data.length; ++i) { cfb.FullPaths[i] = data[i][0]; cfb.FileIndex[i] = data[i][1]; }
    	for(i = 0; i < data.length; ++i) {
    		var elt = cfb.FileIndex[i];
    		var nm = cfb.FullPaths[i];

    		elt.name =  filename(nm).replace("/","");
    		elt.L = elt.R = elt.C = -(elt.color = 1);
    		elt.size = elt.content ? elt.content.length : 0;
    		elt.start = 0;
    		elt.clsid = (elt.clsid || HEADER_CLSID);
    		if(i === 0) {
    			elt.C = data.length > 1 ? 1 : -1;
    			elt.size = 0;
    			elt.type = 5;
    		} else if(nm.slice(-1) == "/") {
    			for(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==nm) break;
    			elt.C = j >= data.length ? -1 : j;
    			for(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==dirname(nm)) break;
    			elt.R = j >= data.length ? -1 : j;
    			elt.type = 1;
    		} else {
    			if(dirname(cfb.FullPaths[i+1]||"") == dirname(nm)) elt.R = i + 1;
    			elt.type = 2;
    		}
    	}

    }

    function _write(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:RawBytes|string*/ {
    	var _opts = options || {};
    	/* MAD is order-sensitive, skip rebuild and sort */
    	if(_opts.fileType == 'mad') return write_mad(cfb, _opts);
    	rebuild_cfb(cfb);
    	switch(_opts.fileType) {
    		case 'zip': return write_zip(cfb, _opts);
    		//case 'mad': return write_mad(cfb, _opts);
    	}
    	var L = (function(cfb/*:CFBContainer*/)/*:Array<number>*/{
    		var mini_size = 0, fat_size = 0;
    		for(var i = 0; i < cfb.FileIndex.length; ++i) {
    			var file = cfb.FileIndex[i];
    			if(!file.content) continue;
    			/*:: if(file.content == null) throw new Error("unreachable"); */
    			var flen = file.content.length;
    			if(flen > 0){
    				if(flen < 0x1000) mini_size += (flen + 0x3F) >> 6;
    				else fat_size += (flen + 0x01FF) >> 9;
    			}
    		}
    		var dir_cnt = (cfb.FullPaths.length +3) >> 2;
    		var mini_cnt = (mini_size + 7) >> 3;
    		var mfat_cnt = (mini_size + 0x7F) >> 7;
    		var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
    		var fat_cnt = (fat_base + 0x7F) >> 7;
    		var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);
    		while(((fat_base + fat_cnt + difat_cnt + 0x7F) >> 7) > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);
    		var L =  [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
    		cfb.FileIndex[0].size = mini_size << 6;
    		L[7] = (cfb.FileIndex[0].start=L[0]+L[1]+L[2]+L[3]+L[4]+L[5])+((L[6]+7) >> 3);
    		return L;
    	})(cfb);
    	var o = new_buf(L[7] << 9);
    	var i = 0, T = 0;
    	{
    		for(i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);
    		for(i = 0; i < 8; ++i) o.write_shift(2, 0);
    		o.write_shift(2, 0x003E);
    		o.write_shift(2, 0x0003);
    		o.write_shift(2, 0xFFFE);
    		o.write_shift(2, 0x0009);
    		o.write_shift(2, 0x0006);
    		for(i = 0; i < 3; ++i) o.write_shift(2, 0);
    		o.write_shift(4, 0);
    		o.write_shift(4, L[2]);
    		o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
    		o.write_shift(4, 0);
    		o.write_shift(4, 1<<12);
    		o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1: ENDOFCHAIN);
    		o.write_shift(4, L[3]);
    		o.write_shift(-4, L[1] ? L[0] - 1: ENDOFCHAIN);
    		o.write_shift(4, L[1]);
    		for(i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
    	}
    	if(L[1]) {
    		for(T = 0; T < L[1]; ++T) {
    			for(; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
    			o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
    		}
    	}
    	var chainit = function(w/*:number*/)/*:void*/ {
    		for(T += w; i<T-1; ++i) o.write_shift(-4, i+1);
    		if(w) { ++i; o.write_shift(-4, ENDOFCHAIN); }
    	};
    	T = i = 0;
    	for(T+=L[1]; i<T; ++i) o.write_shift(-4, consts.DIFSECT);
    	for(T+=L[2]; i<T; ++i) o.write_shift(-4, consts.FATSECT);
    	chainit(L[3]);
    	chainit(L[4]);
    	var j/*:number*/ = 0, flen/*:number*/ = 0;
    	var file/*:CFBEntry*/ = cfb.FileIndex[0];
    	for(; j < cfb.FileIndex.length; ++j) {
    		file = cfb.FileIndex[j];
    		if(!file.content) continue;
    		/*:: if(file.content == null) throw new Error("unreachable"); */
    		flen = file.content.length;
    		if(flen < 0x1000) continue;
    		file.start = T;
    		chainit((flen + 0x01FF) >> 9);
    	}
    	chainit((L[6] + 7) >> 3);
    	while(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);
    	T = i = 0;
    	for(j = 0; j < cfb.FileIndex.length; ++j) {
    		file = cfb.FileIndex[j];
    		if(!file.content) continue;
    		/*:: if(file.content == null) throw new Error("unreachable"); */
    		flen = file.content.length;
    		if(!flen || flen >= 0x1000) continue;
    		file.start = T;
    		chainit((flen + 0x3F) >> 6);
    	}
    	while(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);
    	for(i = 0; i < L[4]<<2; ++i) {
    		var nm = cfb.FullPaths[i];
    		if(!nm || nm.length === 0) {
    			for(j = 0; j < 17; ++j) o.write_shift(4, 0);
    			for(j = 0; j < 3; ++j) o.write_shift(4, -1);
    			for(j = 0; j < 12; ++j) o.write_shift(4, 0);
    			continue;
    		}
    		file = cfb.FileIndex[i];
    		if(i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
    		var _nm/*:string*/ = (i === 0 && _opts.root) || file.name;
    		flen = 2*(_nm.length+1);
    		o.write_shift(64, _nm, "utf16le");
    		o.write_shift(2, flen);
    		o.write_shift(1, file.type);
    		o.write_shift(1, file.color);
    		o.write_shift(-4, file.L);
    		o.write_shift(-4, file.R);
    		o.write_shift(-4, file.C);
    		if(!file.clsid) for(j = 0; j < 4; ++j) o.write_shift(4, 0);
    		else o.write_shift(16, file.clsid, "hex");
    		o.write_shift(4, file.state || 0);
    		o.write_shift(4, 0); o.write_shift(4, 0);
    		o.write_shift(4, 0); o.write_shift(4, 0);
    		o.write_shift(4, file.start);
    		o.write_shift(4, file.size); o.write_shift(4, 0);
    	}
    	for(i = 1; i < cfb.FileIndex.length; ++i) {
    		file = cfb.FileIndex[i];
    		/*:: if(!file.content) throw new Error("unreachable"); */
    		if(file.size >= 0x1000) {
    			o.l = (file.start+1) << 9;
    			if (has_buf && Buffer.isBuffer(file.content)) {
    				file.content.copy(o, o.l, 0, file.size);
    				// o is a 0-filled Buffer so just set next offset
    				o.l += (file.size + 511) & -512;
    			} else {
    				for(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
    				for(; j & 0x1FF; ++j) o.write_shift(1, 0);
    			}
    		}
    	}
    	for(i = 1; i < cfb.FileIndex.length; ++i) {
    		file = cfb.FileIndex[i];
    		/*:: if(!file.content) throw new Error("unreachable"); */
    		if(file.size > 0 && file.size < 0x1000) {
    			if (has_buf && Buffer.isBuffer(file.content)) {
    				file.content.copy(o, o.l, 0, file.size);
    				// o is a 0-filled Buffer so just set next offset
    				o.l += (file.size + 63) & -64;
    			} else {
    				for(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
    				for(; j & 0x3F; ++j) o.write_shift(1, 0);
    			}
    		}
    	}
    	if (has_buf) {
    		o.l = o.length;
    	} else {
    		// When using Buffer, already 0-filled
    		while(o.l < o.length) o.write_shift(1, 0);
    	}
    	return o;
    }
    /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */
    function find(cfb/*:CFBContainer*/, path/*:string*/)/*:?CFBEntry*/ {
    	var UCFullPaths/*:Array<string>*/ = cfb.FullPaths.map(function(x) { return x.toUpperCase(); });
    	var UCPaths/*:Array<string>*/ = UCFullPaths.map(function(x) { var y = x.split("/"); return y[y.length - (x.slice(-1) == "/" ? 2 : 1)]; });
    	var k/*:boolean*/ = false;
    	if(path.charCodeAt(0) === 47 /* "/" */) { k = true; path = UCFullPaths[0].slice(0, -1) + path; }
    	else k = path.indexOf("/") !== -1;
    	var UCPath/*:string*/ = path.toUpperCase();
    	var w/*:number*/ = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
    	if(w !== -1) return cfb.FileIndex[w];

    	var m = !UCPath.match(chr1);
    	UCPath = UCPath.replace(chr0,'');
    	if(m) UCPath = UCPath.replace(chr1,'!');
    	for(w = 0; w < UCFullPaths.length; ++w) {
    		if((m ? UCFullPaths[w].replace(chr1,'!') : UCFullPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];
    		if((m ? UCPaths[w].replace(chr1,'!') : UCPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];
    	}
    	return null;
    }
    /** CFB Constants */
    var MSSZ = 64; /* Mini Sector Size = 1<<6 */
    //var MSCSZ = 4096; /* Mini Stream Cutoff Size */
    /* 2.1 Compound File Sector Numbers and Types */
    var ENDOFCHAIN = -2;
    /* 2.2 Compound File Header */
    var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';
    var HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];
    var HEADER_CLSID = '00000000000000000000000000000000';
    var consts = {
    	/* 2.1 Compund File Sector Numbers and Types */
    	MAXREGSECT: -6,
    	DIFSECT: -4,
    	FATSECT: -3,
    	ENDOFCHAIN: ENDOFCHAIN,
    	FREESECT: -1,
    	/* 2.2 Compound File Header */
    	HEADER_SIGNATURE: HEADER_SIGNATURE,
    	HEADER_MINOR_VERSION: '3e00',
    	MAXREGSID: -6,
    	NOSTREAM: -1,
    	HEADER_CLSID: HEADER_CLSID,
    	/* 2.6.1 Compound File Directory Entry */
    	EntryTypes: ['unknown','storage','stream','lockbytes','property','root']
    };

    function write_file(cfb/*:CFBContainer*/, filename/*:string*/, options/*:CFBWriteOpts*/)/*:void*/ {
    	get_fs();
    	var o = _write(cfb, options);
    	/*:: if(typeof Buffer == 'undefined' || !Buffer.isBuffer(o) || !(o instanceof Buffer)) throw new Error("unreachable"); */
    	fs.writeFileSync(filename, o);
    }

    function a2s(o/*:RawBytes*/)/*:string*/ {
    	var out = new Array(o.length);
    	for(var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);
    	return out.join("");
    }

    function write(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:RawBytes|string*/ {
    	var o = _write(cfb, options);
    	switch(options && options.type || "buffer") {
    		case "file": get_fs(); fs.writeFileSync(options.filename, (o/*:any*/)); return o;
    		case "binary": return typeof o == "string" ? o : a2s(o);
    		case "base64": return Base64_encode(typeof o == "string" ? o : a2s(o));
    		case "buffer": if(has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);
    			/* falls through */
    		case "array": return typeof o == "string" ? s2a(o) : o;
    	}
    	return o;
    }
    /* node < 8.1 zlib does not expose bytesRead, so default to pure JS */
    var _zlib;
    function use_zlib(zlib) { try {
    	var InflateRaw = zlib.InflateRaw;
    	var InflRaw = new InflateRaw();
    	InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
    	if(InflRaw.bytesRead) _zlib = zlib;
    	else throw new Error("zlib does not expose bytesRead");
    } catch(e) {console.error("cannot use native zlib: " + (e.message || e)); } }

    function _inflateRawSync(payload, usz) {
    	if(!_zlib) return _inflate(payload, usz);
    	var InflateRaw = _zlib.InflateRaw;
    	var InflRaw = new InflateRaw();
    	var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
    	payload.l += InflRaw.bytesRead;
    	return out;
    }

    function _deflateRawSync(payload) {
    	return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
    }
    var CLEN_ORDER = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];

    /*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */
    var LEN_LN = [   3,   4,   5,   6,   7,   8,   9,  10,  11,  13 , 15,  17,  19,  23,  27,  31,  35,  43,  51,  59,  67,  83,  99, 115, 131, 163, 195, 227, 258 ];

    /*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */
    var DST_LN = [  1,  2,  3,  4,  5,  7,  9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];

    function bit_swap_8(n) { var t = (((((n<<1)|(n<<11)) & 0x22110) | (((n<<5)|(n<<15)) & 0x88440))); return ((t>>16) | (t>>8) |t)&0xFF; }

    var use_typed_arrays = typeof Uint8Array !== 'undefined';

    var bitswap8 = use_typed_arrays ? new Uint8Array(1<<8) : [];
    for(var q = 0; q < (1<<8); ++q) bitswap8[q] = bit_swap_8(q);

    function bit_swap_n(n, b) {
    	var rev = bitswap8[n & 0xFF];
    	if(b <= 8) return rev >>> (8-b);
    	rev = (rev << 8) | bitswap8[(n>>8)&0xFF];
    	if(b <= 16) return rev >>> (16-b);
    	rev = (rev << 8) | bitswap8[(n>>16)&0xFF];
    	return rev >>> (24-b);
    }

    /* helpers for unaligned bit reads */
    function read_bits_2(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 6 ? 0 : buf[h+1]<<8))>>>w)& 0x03; }
    function read_bits_3(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 5 ? 0 : buf[h+1]<<8))>>>w)& 0x07; }
    function read_bits_4(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 4 ? 0 : buf[h+1]<<8))>>>w)& 0x0F; }
    function read_bits_5(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 3 ? 0 : buf[h+1]<<8))>>>w)& 0x1F; }
    function read_bits_7(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 1 ? 0 : buf[h+1]<<8))>>>w)& 0x7F; }

    /* works up to n = 3 * 8 + 1 = 25 */
    function read_bits_n(buf, bl, n) {
    	var w = (bl&7), h = (bl>>>3), f = ((1<<n)-1);
    	var v = buf[h] >>> w;
    	if(n < 8 - w) return v & f;
    	v |= buf[h+1]<<(8-w);
    	if(n < 16 - w) return v & f;
    	v |= buf[h+2]<<(16-w);
    	if(n < 24 - w) return v & f;
    	v |= buf[h+3]<<(24-w);
    	return v & f;
    }

    /* helpers for unaligned bit writes */
    function write_bits_3(buf, bl, v) { var w = bl & 7, h = bl >>> 3;
    	if(w <= 5) buf[h] |= (v & 7) << w;
    	else {
    		buf[h] |= (v << w) & 0xFF;
    		buf[h+1] = (v&7) >> (8-w);
    	}
    	return bl + 3;
    }

    function write_bits_1(buf, bl, v) {
    	var w = bl & 7, h = bl >>> 3;
    	v = (v&1) << w;
    	buf[h] |= v;
    	return bl + 1;
    }
    function write_bits_8(buf, bl, v) {
    	var w = bl & 7, h = bl >>> 3;
    	v <<= w;
    	buf[h] |=  v & 0xFF; v >>>= 8;
    	buf[h+1] = v;
    	return bl + 8;
    }
    function write_bits_16(buf, bl, v) {
    	var w = bl & 7, h = bl >>> 3;
    	v <<= w;
    	buf[h] |=  v & 0xFF; v >>>= 8;
    	buf[h+1] = v & 0xFF;
    	buf[h+2] = v >>> 8;
    	return bl + 16;
    }

    /* until ArrayBuffer#realloc is a thing, fake a realloc */
    function realloc(b, sz/*:number*/) {
    	var L = b.length, M = 2*L > sz ? 2*L : sz + 5, i = 0;
    	if(L >= sz) return b;
    	if(has_buf) {
    		var o = new_unsafe_buf(M);
    		// $FlowIgnore
    		if(b.copy) b.copy(o);
    		else for(; i < b.length; ++i) o[i] = b[i];
    		return o;
    	} else if(use_typed_arrays) {
    		var a = new Uint8Array(M);
    		if(a.set) a.set(b);
    		else for(; i < L; ++i) a[i] = b[i];
    		return a;
    	}
    	b.length = M;
    	return b;
    }

    /* zero-filled arrays for older browsers */
    function zero_fill_array(n) {
    	var o = new Array(n);
    	for(var i = 0; i < n; ++i) o[i] = 0;
    	return o;
    }

    /* build tree (used for literals and lengths) */
    function build_tree(clens, cmap, MAX/*:number*/)/*:number*/ {
    	var maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;

    	var bl_count  = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
    	for(i = 0; i < 32; ++i) bl_count[i] = 0;

    	for(i = L; i < MAX; ++i) clens[i] = 0;
    	L = clens.length;

    	var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []

    	/* build code tree */
    	for(i = 0; i < L; ++i) {
    		bl_count[(w = clens[i])]++;
    		if(maxlen < w) maxlen = w;
    		ctree[i] = 0;
    	}
    	bl_count[0] = 0;
    	for(i = 1; i <= maxlen; ++i) bl_count[i+16] = (ccode = (ccode + bl_count[i-1])<<1);
    	for(i = 0; i < L; ++i) {
    		ccode = clens[i];
    		if(ccode != 0) ctree[i] = bl_count[ccode+16]++;
    	}

    	/* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */
    	var cleni = 0;
    	for(i = 0; i < L; ++i) {
    		cleni = clens[i];
    		if(cleni != 0) {
    			ccode = bit_swap_n(ctree[i], maxlen)>>(maxlen-cleni);
    			for(j = (1<<(maxlen + 4 - cleni)) - 1; j>=0; --j)
    				cmap[ccode|(j<<cleni)] = (cleni&15) | (i<<4);
    		}
    	}
    	return maxlen;
    }

    /* Fixed Huffman */
    var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
    var fix_dmap = use_typed_arrays ? new Uint16Array(32)  : zero_fill_array(32);
    if(!use_typed_arrays) {
    	for(var i = 0; i < 512; ++i) fix_lmap[i] = 0;
    	for(i = 0; i < 32; ++i) fix_dmap[i] = 0;
    }
    (function() {
    	var dlens/*:Array<number>*/ = [];
    	var i = 0;
    	for(;i<32; i++) dlens.push(5);
    	build_tree(dlens, fix_dmap, 32);

    	var clens/*:Array<number>*/ = [];
    	i = 0;
    	for(; i<=143; i++) clens.push(8);
    	for(; i<=255; i++) clens.push(9);
    	for(; i<=279; i++) clens.push(7);
    	for(; i<=287; i++) clens.push(8);
    	build_tree(clens, fix_lmap, 288);
    })();var _deflateRaw = /*#__PURE__*/(function _deflateRawIIFE() {
    	var DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];
    	var j = 0, k = 0;
    	for(; j < DST_LN.length - 1; ++j) {
    		for(; k < DST_LN[j+1]; ++k) DST_LN_RE[k] = j;
    	}
    	for(;k < 32768; ++k) DST_LN_RE[k] = 29;

    	var LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x103) : [];
    	for(j = 0, k = 0; j < LEN_LN.length - 1; ++j) {
    		for(; k < LEN_LN[j+1]; ++k) LEN_LN_RE[k] = j;
    	}

    	function write_stored(data, out) {
    		var boff = 0;
    		while(boff < data.length) {
    			var L = Math.min(0xFFFF, data.length - boff);
    			var h = boff + L == data.length;
    			out.write_shift(1, +h);
    			out.write_shift(2, L);
    			out.write_shift(2, (~L) & 0xFFFF);
    			while(L-- > 0) out[out.l++] = data[boff++];
    		}
    		return out.l;
    	}

    	/* Fixed Huffman */
    	function write_huff_fixed(data, out) {
    		var bl = 0;
    		var boff = 0;
    		var addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];
    		while(boff < data.length) {
    			var L = /* data.length - boff; */ Math.min(0xFFFF, data.length - boff);

    			/* write a stored block for short data */
    			if(L < 10) {
    				bl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line
    				if(bl & 7) bl += 8 - (bl & 7);
    				out.l = (bl / 8) | 0;
    				out.write_shift(2, L);
    				out.write_shift(2, (~L) & 0xFFFF);
    				while(L-- > 0) out[out.l++] = data[boff++];
    				bl = out.l * 8;
    				continue;
    			}

    			bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line
    			var hash = 0;
    			while(L-- > 0) {
    				var d = data[boff];
    				hash = ((hash << 5) ^ d) & 0x7FFF;

    				var match = -1, mlen = 0;

    				if((match = addrs[hash])) {
    					match |= boff & ~0x7FFF;
    					if(match > boff) match -= 0x8000;
    					if(match < boff) while(data[match + mlen] == data[boff + mlen] && mlen < 250) ++mlen;
    				}

    				if(mlen > 2) {
    					/* Copy Token  */
    					d = LEN_LN_RE[mlen];
    					if(d <= 22) bl = write_bits_8(out, bl, bitswap8[d+1]>>1) - 1;
    					else {
    						write_bits_8(out, bl, 3);
    						bl += 5;
    						write_bits_8(out, bl, bitswap8[d-23]>>5);
    						bl += 3;
    					}
    					var len_eb = (d < 8) ? 0 : ((d - 4)>>2);
    					if(len_eb > 0) {
    						write_bits_16(out, bl, mlen - LEN_LN[d]);
    						bl += len_eb;
    					}

    					d = DST_LN_RE[boff - match];
    					bl = write_bits_8(out, bl, bitswap8[d]>>3);
    					bl -= 3;

    					var dst_eb = d < 4 ? 0 : (d-2)>>1;
    					if(dst_eb > 0) {
    						write_bits_16(out, bl, boff - match - DST_LN[d]);
    						bl += dst_eb;
    					}
    					for(var q = 0; q < mlen; ++q) {
    						addrs[hash] = boff & 0x7FFF;
    						hash = ((hash << 5) ^ data[boff]) & 0x7FFF;
    						++boff;
    					}
    					L-= mlen - 1;
    				} else {
    					/* Literal Token */
    					if(d <= 143) d = d + 48;
    					else bl = write_bits_1(out, bl, 1);
    					bl = write_bits_8(out, bl, bitswap8[d]);
    					addrs[hash] = boff & 0x7FFF;
    					++boff;
    				}
    			}

    			bl = write_bits_8(out, bl, 0) - 1;
    		}
    		out.l = ((bl + 7)/8)|0;
    		return out.l;
    	}
    	return function _deflateRaw(data, out) {
    		if(data.length < 8) return write_stored(data, out);
    		return write_huff_fixed(data, out);
    	};
    })();

    function _deflate(data) {
    	var buf = new_buf(50+Math.floor(data.length*1.1));
    	var off = _deflateRaw(data, buf);
    	return buf.slice(0, off);
    }
    /* modified inflate function also moves original read head */

    var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_cmap = use_typed_arrays ? new Uint16Array(128)   : zero_fill_array(128);
    var dyn_len_1 = 1, dyn_len_2 = 1;

    /* 5.5.3 Expanding Huffman Codes */
    function dyn(data, boff/*:number*/) {
    	/* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */
    	var _HLIT = read_bits_5(data, boff) + 257; boff += 5;
    	var _HDIST = read_bits_5(data, boff) + 1; boff += 5;
    	var _HCLEN = read_bits_4(data, boff) + 4; boff += 4;
    	var w = 0;

    	/* grab and store code lengths */
    	var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
    	var ctree = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
    	var maxlen = 1;
    	var bl_count =  use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
    	var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
    	var L = clens.length; /* 19 */
    	for(var i = 0; i < _HCLEN; ++i) {
    		clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);
    		if(maxlen < w) maxlen = w;
    		bl_count[w]++;
    		boff += 3;
    	}

    	/* build code tree */
    	var ccode = 0;
    	bl_count[0] = 0;
    	for(i = 1; i <= maxlen; ++i) next_code[i] = ccode = (ccode + bl_count[i-1])<<1;
    	for(i = 0; i < L; ++i) if((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;
    	/* cmap[7 bits from stream] = (off&7) + (lit<<3) */
    	var cleni = 0;
    	for(i = 0; i < L; ++i) {
    		cleni = clens[i];
    		if(cleni != 0) {
    			ccode = bitswap8[ctree[i]]>>(8-cleni);
    			for(var j = (1<<(7-cleni))-1; j>=0; --j) dyn_cmap[ccode|(j<<cleni)] = (cleni&7) | (i<<3);
    		}
    	}

    	/* read literal and dist codes at once */
    	var hcodes/*:Array<number>*/ = [];
    	maxlen = 1;
    	for(; hcodes.length < _HLIT + _HDIST;) {
    		ccode = dyn_cmap[read_bits_7(data, boff)];
    		boff += ccode & 7;
    		switch((ccode >>>= 3)) {
    			case 16:
    				w = 3 + read_bits_2(data, boff); boff += 2;
    				ccode = hcodes[hcodes.length - 1];
    				while(w-- > 0) hcodes.push(ccode);
    				break;
    			case 17:
    				w = 3 + read_bits_3(data, boff); boff += 3;
    				while(w-- > 0) hcodes.push(0);
    				break;
    			case 18:
    				w = 11 + read_bits_7(data, boff); boff += 7;
    				while(w -- > 0) hcodes.push(0);
    				break;
    			default:
    				hcodes.push(ccode);
    				if(maxlen < ccode) maxlen = ccode;
    				break;
    		}
    	}

    	/* build literal / length trees */
    	var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
    	for(i = _HLIT; i < 286; ++i) h1[i] = 0;
    	for(i = _HDIST; i < 30; ++i) h2[i] = 0;
    	dyn_len_1 = build_tree(h1, dyn_lmap, 286);
    	dyn_len_2 = build_tree(h2, dyn_dmap, 30);
    	return boff;
    }

    /* return [ data, bytesRead ] */
    function inflate(data, usz/*:number*/) {
    	/* shortcircuit for empty buffer [0x03, 0x00] */
    	if(data[0] == 3 && !(data[1] & 0x3)) { return [new_raw_buf(usz), 2]; }

    	/* bit offset */
    	var boff = 0;

    	/* header includes final bit and type bits */
    	var header = 0;

    	var outbuf = new_unsafe_buf(usz ? usz : (1<<18));
    	var woff = 0;
    	var OL = outbuf.length>>>0;
    	var max_len_1 = 0, max_len_2 = 0;

    	while((header&1) == 0) {
    		header = read_bits_3(data, boff); boff += 3;
    		if((header >>> 1) == 0) {
    			/* Stored block */
    			if(boff & 7) boff += 8 - (boff&7);
    			/* 2 bytes sz, 2 bytes bit inverse */
    			var sz = data[boff>>>3] | data[(boff>>>3)+1]<<8;
    			boff += 32;
    			/* push sz bytes */
    			if(sz > 0) {
    				if(!usz && OL < woff + sz) { outbuf = realloc(outbuf, woff + sz); OL = outbuf.length; }
    				while(sz-- > 0) { outbuf[woff++] = data[boff>>>3]; boff += 8; }
    			}
    			continue;
    		} else if((header >> 1) == 1) {
    			/* Fixed Huffman */
    			max_len_1 = 9; max_len_2 = 5;
    		} else {
    			/* Dynamic Huffman */
    			boff = dyn(data, boff);
    			max_len_1 = dyn_len_1; max_len_2 = dyn_len_2;
    		}
    		for(;;) { // while(true) is apparently out of vogue in modern JS circles
    			if(!usz && (OL < woff + 32767)) { outbuf = realloc(outbuf, woff + 32767); OL = outbuf.length; }
    			/* ingest code and move read head */
    			var bits = read_bits_n(data, boff, max_len_1);
    			var code = (header>>>1) == 1 ? fix_lmap[bits] : dyn_lmap[bits];
    			boff += code & 15; code >>>= 4;
    			/* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */
    			if(((code>>>8)&0xFF) === 0) outbuf[woff++] = code;
    			else if(code == 256) break;
    			else {
    				code -= 257;
    				var len_eb = (code < 8) ? 0 : ((code-4)>>2); if(len_eb > 5) len_eb = 0;
    				var tgt = woff + LEN_LN[code];
    				/* length extra bits */
    				if(len_eb > 0) {
    					tgt += read_bits_n(data, boff, len_eb);
    					boff += len_eb;
    				}

    				/* dist code */
    				bits = read_bits_n(data, boff, max_len_2);
    				code = (header>>>1) == 1 ? fix_dmap[bits] : dyn_dmap[bits];
    				boff += code & 15; code >>>= 4;
    				var dst_eb = (code < 4 ? 0 : (code-2)>>1);
    				var dst = DST_LN[code];
    				/* dist extra bits */
    				if(dst_eb > 0) {
    					dst += read_bits_n(data, boff, dst_eb);
    					boff += dst_eb;
    				}

    				/* in the common case, manual byte copy is faster than TA set / Buffer copy */
    				if(!usz && OL < tgt) { outbuf = realloc(outbuf, tgt + 100); OL = outbuf.length; }
    				while(woff < tgt) { outbuf[woff] = outbuf[woff - dst]; ++woff; }
    			}
    		}
    	}
    	if(usz) return [outbuf, (boff+7)>>>3];
    	return [outbuf.slice(0, woff), (boff+7)>>>3];
    }

    function _inflate(payload, usz) {
    	var data = payload.slice(payload.l||0);
    	var out = inflate(data, usz);
    	payload.l += out[1];
    	return out[0];
    }

    function warn_or_throw(wrn, msg) {
    	if(wrn) { if(typeof console !== 'undefined') console.error(msg); }
    	else throw new Error(msg);
    }

    function parse_zip(file/*:RawBytes*/, options/*:CFBReadOpts*/)/*:CFBContainer*/ {
    	var blob/*:CFBlob*/ = /*::(*/file/*:: :any)*/;
    	prep_blob(blob, 0);

    	var FileIndex/*:CFBFileIndex*/ = [], FullPaths/*:Array<string>*/ = [];
    	var o = {
    		FileIndex: FileIndex,
    		FullPaths: FullPaths
    	};
    	init_cfb(o, { root: options.root });

    	/* find end of central directory, start just after signature */
    	var i = blob.length - 4;
    	while((blob[i] != 0x50 || blob[i+1] != 0x4b || blob[i+2] != 0x05 || blob[i+3] != 0x06) && i >= 0) --i;
    	blob.l = i + 4;

    	/* parse end of central directory */
    	blob.l += 4;
    	var fcnt = blob.read_shift(2);
    	blob.l += 6;
    	var start_cd = blob.read_shift(4);

    	/* parse central directory */
    	blob.l = start_cd;

    	for(i = 0; i < fcnt; ++i) {
    		/* trust local file header instead of CD entry */
    		blob.l += 20;
    		var csz = blob.read_shift(4);
    		var usz = blob.read_shift(4);
    		var namelen = blob.read_shift(2);
    		var efsz = blob.read_shift(2);
    		var fcsz = blob.read_shift(2);
    		blob.l += 8;
    		var offset = blob.read_shift(4);
    		var EF = parse_extra_field(/*::(*/blob.slice(blob.l+namelen, blob.l+namelen+efsz)/*:: :any)*/);
    		blob.l += namelen + efsz + fcsz;

    		var L = blob.l;
    		blob.l = offset + 4;
    		parse_local_file(blob, csz, usz, o, EF);
    		blob.l = L;
    	}
    	return o;
    }


    /* head starts just after local file header signature */
    function parse_local_file(blob/*:CFBlob*/, csz/*:number*/, usz/*:number*/, o/*:CFBContainer*/, EF) {
    	/* [local file header] */
    	blob.l += 2;
    	var flags = blob.read_shift(2);
    	var meth = blob.read_shift(2);
    	var date = parse_dos_date(blob);

    	if(flags & 0x2041) throw new Error("Unsupported ZIP encryption");
    	var crc32 = blob.read_shift(4);
    	var _csz = blob.read_shift(4);
    	var _usz = blob.read_shift(4);

    	var namelen = blob.read_shift(2);
    	var efsz = blob.read_shift(2);

    	// TODO: flags & (1<<11) // UTF8
    	var name = ""; for(var i = 0; i < namelen; ++i) name += String.fromCharCode(blob[blob.l++]);
    	if(efsz) {
    		var ef = parse_extra_field(/*::(*/blob.slice(blob.l, blob.l + efsz)/*:: :any)*/);
    		if((ef[0x5455]||{}).mt) date = ef[0x5455].mt;
    		if(((EF||{})[0x5455]||{}).mt) date = EF[0x5455].mt;
    	}
    	blob.l += efsz;

    	/* [encryption header] */

    	/* [file data] */
    	var data = blob.slice(blob.l, blob.l + _csz);
    	switch(meth) {
    		case 8: data = _inflateRawSync(blob, _usz); break;
    		case 0: break; // TODO: scan for magic number
    		default: throw new Error("Unsupported ZIP Compression method " + meth);
    	}

    	/* [data descriptor] */
    	var wrn = false;
    	if(flags & 8) {
    		crc32 = blob.read_shift(4);
    		if(crc32 == 0x08074b50) { crc32 = blob.read_shift(4); wrn = true; }
    		_csz = blob.read_shift(4);
    		_usz = blob.read_shift(4);
    	}

    	if(_csz != csz) warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
    	if(_usz != usz) warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
    	//var _crc32 = CRC32.buf(data, 0);
    	//if((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, "Bad CRC32 checksum: " + crc32 + " != " + _crc32);
    	cfb_add(o, name, data, {unsafe: true, mt: date});
    }
    function write_zip(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:RawBytes*/ {
    	var _opts = options || {};
    	var out = [], cdirs = [];
    	var o/*:CFBlob*/ = new_buf(1);
    	var method = (_opts.compression ? 8 : 0), flags = 0;
    	var i = 0, j = 0;

    	var start_cd = 0, fcnt = 0;
    	var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
    	var crcs = [];
    	var sz_cd = 0;

    	for(i = 1; i < cfb.FullPaths.length; ++i) {
    		fp = cfb.FullPaths[i].slice(root.length); fi = cfb.FileIndex[i];
    		if(!fi.size || !fi.content || fp == "\u0001Sh33tJ5") continue;
    		var start = start_cd;

    		/* TODO: CP437 filename */
    		var namebuf = new_buf(fp.length);
    		for(j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);
    		namebuf = namebuf.slice(0, namebuf.l);
    		crcs[fcnt] = CRC32.buf(/*::((*/fi.content/*::||[]):any)*/, 0);

    		var outbuf = fi.content/*::||[]*/;
    		if(method == 8) outbuf = _deflateRawSync(outbuf);

    		/* local file header */
    		o = new_buf(30);
    		o.write_shift(4, 0x04034b50);
    		o.write_shift(2, 20);
    		o.write_shift(2, flags);
    		o.write_shift(2, method);
    		/* TODO: last mod file time/date */
    		if(fi.mt) write_dos_date(o, fi.mt);
    		else o.write_shift(4, 0);
    		o.write_shift(-4, crcs[fcnt]);
    		o.write_shift(4,  outbuf.length);
    		o.write_shift(4,  /*::(*/fi.content/*::||[])*/.length);
    		o.write_shift(2, namebuf.length);
    		o.write_shift(2, 0);

    		start_cd += o.length;
    		out.push(o);
    		start_cd += namebuf.length;
    		out.push(namebuf);

    		/* TODO: extra fields? */

    		/* TODO: encryption header ? */

    		start_cd += outbuf.length;
    		out.push(outbuf);

    		/* central directory */
    		o = new_buf(46);
    		o.write_shift(4, 0x02014b50);
    		o.write_shift(2, 0);
    		o.write_shift(2, 20);
    		o.write_shift(2, flags);
    		o.write_shift(2, method);
    		o.write_shift(4, 0); /* TODO: last mod file time/date */
    		o.write_shift(-4, crcs[fcnt]);

    		o.write_shift(4, outbuf.length);
    		o.write_shift(4, /*::(*/fi.content/*::||[])*/.length);
    		o.write_shift(2, namebuf.length);
    		o.write_shift(2, 0);
    		o.write_shift(2, 0);
    		o.write_shift(2, 0);
    		o.write_shift(2, 0);
    		o.write_shift(4, 0);
    		o.write_shift(4, start);

    		sz_cd += o.l;
    		cdirs.push(o);
    		sz_cd += namebuf.length;
    		cdirs.push(namebuf);
    		++fcnt;
    	}

    	/* end of central directory */
    	o = new_buf(22);
    	o.write_shift(4, 0x06054b50);
    	o.write_shift(2, 0);
    	o.write_shift(2, 0);
    	o.write_shift(2, fcnt);
    	o.write_shift(2, fcnt);
    	o.write_shift(4, sz_cd);
    	o.write_shift(4, start_cd);
    	o.write_shift(2, 0);

    	return bconcat(([bconcat((out/*:any*/)), bconcat(cdirs), o]/*:any*/));
    }
    var ContentTypeMap = ({
    	"htm": "text/html",
    	"xml": "text/xml",

    	"gif": "image/gif",
    	"jpg": "image/jpeg",
    	"png": "image/png",

    	"mso": "application/x-mso",
    	"thmx": "application/vnd.ms-officetheme",
    	"sh33tj5": "application/octet-stream"
    }/*:any*/);

    function get_content_type(fi/*:CFBEntry*/, fp/*:string*/)/*:string*/ {
    	if(fi.ctype) return fi.ctype;

    	var ext = fi.name || "", m = ext.match(/\.([^\.]+)$/);
    	if(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];

    	if(fp) {
    		m = (ext = fp).match(/[\.\\]([^\.\\])+$/);
    		if(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
    	}

    	return "application/octet-stream";
    }

    /* 76 character chunks TODO: intertwine encoding */
    function write_base64_76(bstr/*:string*/)/*:string*/ {
    	var data = Base64_encode(bstr);
    	var o = [];
    	for(var i = 0; i < data.length; i+= 76) o.push(data.slice(i, i+76));
    	return o.join("\r\n") + "\r\n";
    }

    /*
    Rules for QP:
    	- escape =## applies for all non-display characters and literal "="
    	- space or tab at end of line must be encoded
    	- \r\n newlines can be preserved, but bare \r and \n must be escaped
    	- lines must not exceed 76 characters, use soft breaks =\r\n

    TODO: Some files from word appear to write line extensions with bare equals:

    ```
    <table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=
    ="70%"
    ```
    */
    function write_quoted_printable(text/*:string*/)/*:string*/ {
    	var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c) {
    		var w = c.charCodeAt(0).toString(16).toUpperCase();
    		return "=" + (w.length == 1 ? "0" + w : w);
    	});

    	encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");

    	if(encoded.charAt(0) == "\n") encoded = "=0D" + encoded.slice(1);
    	encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");

    	var o/*:Array<string>*/ = [], split = encoded.split("\r\n");
    	for(var si = 0; si < split.length; ++si) {
    		var str = split[si];
    		if(str.length == 0) { o.push(""); continue; }
    		for(var i = 0; i < str.length;) {
    			var end = 76;
    			var tmp = str.slice(i, i + end);
    			if(tmp.charAt(end - 1) == "=") end --;
    			else if(tmp.charAt(end - 2) == "=") end -= 2;
    			else if(tmp.charAt(end - 3) == "=") end -= 3;
    			tmp = str.slice(i, i + end);
    			i += end;
    			if(i < str.length) tmp += "=";
    			o.push(tmp);
    		}
    	}

    	return o.join("\r\n");
    }
    function parse_quoted_printable(data/*:Array<string>*/)/*:RawBytes*/ {
    	var o = [];

    	/* unify long lines */
    	for(var di = 0; di < data.length; ++di) {
    		var line = data[di];
    		while(di <= data.length && line.charAt(line.length - 1) == "=") line = line.slice(0, line.length - 1) + data[++di];
    		o.push(line);
    	}

    	/* decode */
    	for(var oi = 0; oi < o.length; ++oi) o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) { return String.fromCharCode(parseInt($$.slice(1), 16)); });
    	return s2a(o.join("\r\n"));
    }


    function parse_mime(cfb/*:CFBContainer*/, data/*:Array<string>*/, root/*:string*/)/*:void*/ {
    	var fname = "", cte = "", ctype = "", fdata;
    	var di = 0;
    	for(;di < 10; ++di) {
    		var line = data[di];
    		if(!line || line.match(/^\s*$/)) break;
    		var m = line.match(/^(.*?):\s*([^\s].*)$/);
    		if(m) switch(m[1].toLowerCase()) {
    			case "content-location": fname = m[2].trim(); break;
    			case "content-type": ctype = m[2].trim(); break;
    			case "content-transfer-encoding": cte = m[2].trim(); break;
    		}
    	}
    	++di;
    	switch(cte.toLowerCase()) {
    		case 'base64': fdata = s2a(Base64_decode(data.slice(di).join(""))); break;
    		case 'quoted-printable': fdata = parse_quoted_printable(data.slice(di)); break;
    		default: throw new Error("Unsupported Content-Transfer-Encoding " + cte);
    	}
    	var file = cfb_add(cfb, fname.slice(root.length), fdata, {unsafe: true});
    	if(ctype) file.ctype = ctype;
    }

    function parse_mad(file/*:RawBytes*/, options/*:CFBReadOpts*/)/*:CFBContainer*/ {
    	if(a2s(file.slice(0,13)).toLowerCase() != "mime-version:") throw new Error("Unsupported MAD header");
    	var root = (options && options.root || "");
    	// $FlowIgnore
    	var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s(file)).split("\r\n");
    	var di = 0, row = "";

    	/* if root is not specified, scan for the common prefix */
    	for(di = 0; di < data.length; ++di) {
    		row = data[di];
    		if(!/^Content-Location:/i.test(row)) continue;
    		row = row.slice(row.indexOf("file"));
    		if(!root) root = row.slice(0, row.lastIndexOf("/") + 1);
    		if(row.slice(0, root.length) == root) continue;
    		while(root.length > 0) {
    			root = root.slice(0, root.length - 1);
    			root = root.slice(0, root.lastIndexOf("/") + 1);
    			if(row.slice(0,root.length) == root) break;
    		}
    	}

    	var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
    	if(!mboundary) throw new Error("MAD cannot find boundary");
    	var boundary = "--" + (mboundary[1] || "");

    	var FileIndex/*:CFBFileIndex*/ = [], FullPaths/*:Array<string>*/ = [];
    	var o = {
    		FileIndex: FileIndex,
    		FullPaths: FullPaths
    	};
    	init_cfb(o);
    	var start_di, fcnt = 0;
    	for(di = 0; di < data.length; ++di) {
    		var line = data[di];
    		if(line !== boundary && line !== boundary + "--") continue;
    		if(fcnt++) parse_mime(o, data.slice(start_di, di), root);
    		start_di = di;
    	}
    	return o;
    }

    function write_mad(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:string*/ {
    	var opts = options || {};
    	var boundary = opts.boundary || "SheetJS";
    	boundary = '------=' + boundary;

    	var out = [
    		'MIME-Version: 1.0',
    		'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
    		'',
    		'',
    		''
    	];

    	var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
    	for(var i = 1; i < cfb.FullPaths.length; ++i) {
    		fp = cfb.FullPaths[i].slice(root.length);
    		fi = cfb.FileIndex[i];
    		if(!fi.size || !fi.content || fp == "\u0001Sh33tJ5") continue;

    		/* Normalize filename */
    		fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c) {
    			return "_x" + c.charCodeAt(0).toString(16) + "_";
    		}).replace(/[\u0080-\uFFFF]/g, function(u) {
    			return "_u" + u.charCodeAt(0).toString(16) + "_";
    		});

    		/* Extract content as binary string */
    		var ca = fi.content;
    		// $FlowIgnore
    		var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString("binary") : a2s(ca);

    		/* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */
    		var dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;
    		for(var csl = 0; csl <= L; ++csl) if((cc=cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;
    		var qp = dispcnt >= L * 4 / 5;

    		out.push(boundary);
    		out.push('Content-Location: ' + (opts.root || 'file:///C:/SheetJS/') + fp);
    		out.push('Content-Transfer-Encoding: ' + (qp ? 'quoted-printable' : 'base64'));
    		out.push('Content-Type: ' + get_content_type(fi, fp));
    		out.push('');

    		out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
    	}
    	out.push(boundary + '--\r\n');
    	return out.join("\r\n");
    }
    function cfb_new(opts/*:?any*/)/*:CFBContainer*/ {
    	var o/*:CFBContainer*/ = ({}/*:any*/);
    	init_cfb(o, opts);
    	return o;
    }

    function cfb_add(cfb/*:CFBContainer*/, name/*:string*/, content/*:?RawBytes*/, opts/*:?any*/)/*:CFBEntry*/ {
    	var unsafe = opts && opts.unsafe;
    	if(!unsafe) init_cfb(cfb);
    	var file = !unsafe && CFB.find(cfb, name);
    	if(!file) {
    		var fpath/*:string*/ = cfb.FullPaths[0];
    		if(name.slice(0, fpath.length) == fpath) fpath = name;
    		else {
    			if(fpath.slice(-1) != "/") fpath += "/";
    			fpath = (fpath + name).replace("//","/");
    		}
    		file = ({name: filename(name), type: 2}/*:any*/);
    		cfb.FileIndex.push(file);
    		cfb.FullPaths.push(fpath);
    		if(!unsafe) CFB.utils.cfb_gc(cfb);
    	}
    	/*:: if(!file) throw new Error("unreachable"); */
    	file.content = (content/*:any*/);
    	file.size = content ? content.length : 0;
    	if(opts) {
    		if(opts.CLSID) file.clsid = opts.CLSID;
    		if(opts.mt) file.mt = opts.mt;
    		if(opts.ct) file.ct = opts.ct;
    	}
    	return file;
    }

    function cfb_del(cfb/*:CFBContainer*/, name/*:string*/)/*:boolean*/ {
    	init_cfb(cfb);
    	var file = CFB.find(cfb, name);
    	if(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {
    		cfb.FileIndex.splice(j, 1);
    		cfb.FullPaths.splice(j, 1);
    		return true;
    	}
    	return false;
    }

    function cfb_mov(cfb/*:CFBContainer*/, old_name/*:string*/, new_name/*:string*/)/*:boolean*/ {
    	init_cfb(cfb);
    	var file = CFB.find(cfb, old_name);
    	if(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {
    		cfb.FileIndex[j].name = filename(new_name);
    		cfb.FullPaths[j] = new_name;
    		return true;
    	}
    	return false;
    }

    function cfb_gc(cfb/*:CFBContainer*/)/*:void*/ { rebuild_cfb(cfb, true); }

    exports.find = find;
    exports.read = read;
    exports.parse = parse;
    exports.write = write;
    exports.writeFile = write_file;
    exports.utils = {
    	cfb_new: cfb_new,
    	cfb_add: cfb_add,
    	cfb_del: cfb_del,
    	cfb_mov: cfb_mov,
    	cfb_gc: cfb_gc,
    	ReadShift: ReadShift,
    	CheckField: CheckField,
    	prep_blob: prep_blob,
    	bconcat: bconcat,
    	use_zlib: use_zlib,
    	_deflateRaw: _deflate,
    	_inflateRaw: _inflate,
    	consts: consts
    };

    return exports;
    })();

    let _fs = void 0;
    function set_fs(fs) { _fs = fs; }

    /* normalize data for blob ctor */
    function blobify(data) {
    	if(typeof data === "string") return s2ab(data);
    	if(Array.isArray(data)) return a2u(data);
    	return data;
    }
    /* write or download file */
    function write_dl(fname/*:string*/, payload/*:any*/, enc/*:?string*/) {
    	/*global IE_SaveFile, Blob, navigator, saveAs, document, File, chrome */
    	if(typeof _fs !== 'undefined' && _fs.writeFileSync) return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);
    	if(typeof Deno !== 'undefined') {
    		/* in this spot, it's safe to assume typed arrays and TextEncoder/TextDecoder exist */
    		if(enc && typeof payload == "string") switch(enc) {
    			case "utf8": payload = new TextEncoder(enc).encode(payload); break;
    			case "binary": payload = s2ab(payload); break;
    			/* TODO: binary equivalent */
    			default: throw new Error("Unsupported encoding " + enc);
    		}
    		return Deno.writeFileSync(fname, payload);
    	}
    	var data = (enc == "utf8") ? utf8write(payload) : payload;
    	/*:: declare var IE_SaveFile: any; */
    	if(typeof IE_SaveFile !== 'undefined') return IE_SaveFile(data, fname);
    	if(typeof Blob !== 'undefined') {
    		var blob = new Blob([blobify(data)], {type:"application/octet-stream"});
    		/*:: declare var navigator: any; */
    		if(typeof navigator !== 'undefined' && navigator.msSaveBlob) return navigator.msSaveBlob(blob, fname);
    		/*:: declare var saveAs: any; */
    		if(typeof saveAs !== 'undefined') return saveAs(blob, fname);
    		if(typeof URL !== 'undefined' && typeof document !== 'undefined' && document.createElement && URL.createObjectURL) {
    			var url = URL.createObjectURL(blob);
    			/*:: declare var chrome: any; */
    			if(typeof chrome === 'object' && typeof (chrome.downloads||{}).download == "function") {
    				if(URL.revokeObjectURL && typeof setTimeout !== 'undefined') setTimeout(function() { URL.revokeObjectURL(url); }, 60000);
    				return chrome.downloads.download({ url: url, filename: fname, saveAs: true});
    			}
    			var a = document.createElement("a");
    			if(a.download != null) {
    				/*:: if(document.body == null) throw new Error("unreachable"); */
    				a.download = fname; a.href = url; document.body.appendChild(a); a.click();
    				/*:: if(document.body == null) throw new Error("unreachable"); */ document.body.removeChild(a);
    				if(URL.revokeObjectURL && typeof setTimeout !== 'undefined') setTimeout(function() { URL.revokeObjectURL(url); }, 60000);
    				return url;
    			}
    		}
    	}
    	// $FlowIgnore
    	if(typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try { // extendscript
    		// $FlowIgnore
    		var out = File(fname); out.open("w"); out.encoding = "binary";
    		if(Array.isArray(payload)) payload = a2s(payload);
    		out.write(payload); out.close(); return payload;
    	} catch(e) { if(!e.message || !e.message.match(/onstruct/)) throw e; }
    	throw new Error("cannot save file " + fname);
    }

    /* read binary data from file */
    function read_binary(path/*:string*/) {
    	if(typeof _fs !== 'undefined') return _fs.readFileSync(path);
    	if(typeof Deno !== 'undefined') return Deno.readFileSync(path);
    	// $FlowIgnore
    	if(typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try { // extendscript
    		// $FlowIgnore
    		var infile = File(path); infile.open("r"); infile.encoding = "binary";
    		var data = infile.read(); infile.close();
    		return data;
    	} catch(e) { if(!e.message || !e.message.match(/onstruct/)) throw e; }
    	throw new Error("Cannot access file " + path);
    }
    function keys(o/*:any*/)/*:Array<any>*/ {
    	var ks = Object.keys(o), o2 = [];
    	for(var i = 0; i < ks.length; ++i) if(Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);
    	return o2;
    }

    function evert_key(obj/*:any*/, key/*:string*/)/*:EvertType*/ {
    	var o = ([]/*:any*/), K = keys(obj);
    	for(var i = 0; i !== K.length; ++i) if(o[obj[K[i]][key]] == null) o[obj[K[i]][key]] = K[i];
    	return o;
    }

    function evert(obj/*:any*/)/*:EvertType*/ {
    	var o = ([]/*:any*/), K = keys(obj);
    	for(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];
    	return o;
    }

    function evert_num(obj/*:any*/)/*:EvertNumType*/ {
    	var o = ([]/*:any*/), K = keys(obj);
    	for(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i],10);
    	return o;
    }

    function evert_arr(obj/*:any*/)/*:EvertArrType*/ {
    	var o/*:EvertArrType*/ = ([]/*:any*/), K = keys(obj);
    	for(var i = 0; i !== K.length; ++i) {
    		if(o[obj[K[i]]] == null) o[obj[K[i]]] = [];
    		o[obj[K[i]]].push(K[i]);
    	}
    	return o;
    }

    var basedate = /*#__PURE__*/new Date(1899, 11, 30, 0, 0, 0); // 2209161600000
    function datenum(v/*:Date*/, date1904/*:?boolean*/)/*:number*/ {
    	var epoch = /*#__PURE__*/v.getTime();
    	if(date1904) epoch -= 1462*24*60*60*1000;
    	var dnthresh = /*#__PURE__*/basedate.getTime() + (/*#__PURE__*/v.getTimezoneOffset() - /*#__PURE__*/basedate.getTimezoneOffset()) * 60000;
    	return (epoch - dnthresh) / (24 * 60 * 60 * 1000);
    }
    var refdate = /*#__PURE__*/new Date();
    var dnthresh = /*#__PURE__*/basedate.getTime() + (/*#__PURE__*/refdate.getTimezoneOffset() - /*#__PURE__*/basedate.getTimezoneOffset()) * 60000;
    var refoffset = /*#__PURE__*/refdate.getTimezoneOffset();
    function numdate(v/*:number*/)/*:Date*/ {
    	var out = new Date();
    	out.setTime(v * 24 * 60 * 60 * 1000 + dnthresh);
    	if (out.getTimezoneOffset() !== refoffset) {
    		out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 60000);
    	}
    	return out;
    }

    /* ISO 8601 Duration */
    function parse_isodur(s) {
    	var sec = 0, mt = 0, time = false;
    	var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
    	if(!m) throw new Error("|" + s + "| is not an ISO8601 Duration");
    	for(var i = 1; i != m.length; ++i) {
    		if(!m[i]) continue;
    		mt = 1;
    		if(i > 3) time = true;
    		switch(m[i].slice(m[i].length-1)) {
    			case 'Y':
    				throw new Error("Unsupported ISO Duration Field: " + m[i].slice(m[i].length-1));
    			case 'D': mt *= 24;
    				/* falls through */
    			case 'H': mt *= 60;
    				/* falls through */
    			case 'M':
    				if(!time) throw new Error("Unsupported ISO Duration Field: M");
    				else mt *= 60;
    		}
    		sec += mt * parseInt(m[i], 10);
    	}
    	return sec;
    }

    var good_pd_date_1 = /*#__PURE__*/new Date('2017-02-19T19:06:09.000Z');
    var good_pd_date = /*#__PURE__*/isNaN(/*#__PURE__*/good_pd_date_1.getFullYear()) ? /*#__PURE__*/new Date('2/19/17') : good_pd_date_1;
    var good_pd = /*#__PURE__*/good_pd_date.getFullYear() == 2017;
    /* parses a date as a local date */
    function parseDate(str/*:string|Date*/, fixdate/*:?number*/)/*:Date*/ {
    	var d = new Date(str);
    	if(good_pd) {
    		/*:: if(fixdate == null) fixdate = 0; */
    		if(fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1000);
    		else if(fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1000);
    		return d;
    	}
    	if(str instanceof Date) return str;
    	if(good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
    		var s = d.getFullYear();
    		if(str.indexOf("" + s) > -1) return d;
    		d.setFullYear(d.getFullYear() + 100); return d;
    	}
    	var n = str.match(/\d+/g)||["2017","2","19","0","0","0"];
    	var out = new Date(+n[0], +n[1] - 1, +n[2], (+n[3]||0), (+n[4]||0), (+n[5]||0));
    	if(str.indexOf("Z") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1000);
    	return out;
    }

    function cc2str(arr/*:Array<number>*/, debomit)/*:string*/ {
    	if(has_buf && Buffer.isBuffer(arr)) {
    		if(debomit) {
    			if(arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(arr.slice(2).toString("utf16le"));
    			if(arr[1] == 0xFE && arr[2] == 0xFF) return utf8write(utf16beread(arr.slice(2).toString("binary")));
    		}
    		return arr.toString("binary");
    	}

    	if(typeof TextDecoder !== "undefined") try {
    		if(debomit) {
    			if(arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
    			if(arr[0] == 0xFE && arr[1] == 0xFF) return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
    		}
    		var rev = {
    			"\u20ac": "\x80", "\u201a": "\x82", "\u0192": "\x83", "\u201e": "\x84",
    			"\u2026": "\x85", "\u2020": "\x86", "\u2021": "\x87", "\u02c6": "\x88",
    			"\u2030": "\x89", "\u0160": "\x8a", "\u2039": "\x8b", "\u0152": "\x8c",
    			"\u017d": "\x8e", "\u2018": "\x91", "\u2019": "\x92", "\u201c": "\x93",
    			"\u201d": "\x94", "\u2022": "\x95", "\u2013": "\x96", "\u2014": "\x97",
    			"\u02dc": "\x98", "\u2122": "\x99", "\u0161": "\x9a", "\u203a": "\x9b",
    			"\u0153": "\x9c", "\u017e": "\x9e", "\u0178": "\x9f"
    		};
    		if(Array.isArray(arr)) arr = new Uint8Array(arr);
    		return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c) { return rev[c] || c; });
    	} catch(e) {}

    	var o = [];
    	for(var i = 0; i != arr.length; ++i) o.push(String.fromCharCode(arr[i]));
    	return o.join("");
    }

    function dup(o/*:any*/)/*:any*/ {
    	if(typeof JSON != 'undefined' && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
    	if(typeof o != 'object' || o == null) return o;
    	if(o instanceof Date) return new Date(o.getTime());
    	var out = {};
    	for(var k in o) if(Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);
    	return out;
    }

    function fill(c/*:string*/,l/*:number*/)/*:string*/ { var o = ""; while(o.length < l) o+=c; return o; }

    /* TODO: stress test */
    function fuzzynum(s/*:string*/)/*:number*/ {
    	var v/*:number*/ = Number(s);
    	if(!isNaN(v)) return isFinite(v) ? v : NaN;
    	if(!/\d/.test(s)) return v;
    	var wt = 1;
    	var ss = s.replace(/([\d]),([\d])/g,"$1$2").replace(/[$]/g,"").replace(/[%]/g, function() { wt *= 100; return "";});
    	if(!isNaN(v = Number(ss))) return v / wt;
    	ss = ss.replace(/[(](.*)[)]/,function($$, $1) { wt = -wt; return $1;});
    	if(!isNaN(v = Number(ss))) return v / wt;
    	return v;
    }
    var lower_months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
    function fuzzydate(s/*:string*/)/*:Date*/ {
    	var o = new Date(s), n = new Date(NaN);
    	var y = o.getYear(), m = o.getMonth(), d = o.getDate();
    	if(isNaN(d)) return n;
    	var lower = s.toLowerCase();
    	if(lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
    		lower = lower.replace(/[^a-z]/g,"").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/,"");
    		if(lower.length > 3 && lower_months.indexOf(lower) == -1) return n;
    	} else if(lower.match(/[a-z]/)) return n;
    	if(y < 0 || y > 8099) return n;
    	if((m > 0 || d > 1) && y != 101) return o;
    	if(s.match(/[^-0-9:,\/\\]/)) return n;
    	return o;
    }

    var split_regex = /*#__PURE__*/(function() {
    	var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
    	return function split_regex(str/*:string*/, re, def/*:string*/)/*:Array<string>*/ {
    		if(safe_split_regex || typeof re == "string") return str.split(re);
    		var p = str.split(re), o = [p[0]];
    		for(var i = 1; i < p.length; ++i) { o.push(def); o.push(p[i]); }
    		return o;
    	};
    })();
    function getdatastr(data)/*:?string*/ {
    	if(!data) return null;
    	if(data.content && data.type) return cc2str(data.content, true);
    	if(data.data) return debom(data.data);
    	if(data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString('binary'));
    	if(data.asBinary) return debom(data.asBinary());
    	if(data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(),0)));
    	return null;
    }

    function getdatabin(data) {
    	if(!data) return null;
    	if(data.data) return char_codes(data.data);
    	if(data.asNodeBuffer && has_buf) return data.asNodeBuffer();
    	if(data._data && data._data.getContent) {
    		var o = data._data.getContent();
    		if(typeof o == "string") return char_codes(o);
    		return Array.prototype.slice.call(o);
    	}
    	if(data.content && data.type) return data.content;
    	return null;
    }

    function getdata(data) { return (data && data.name.slice(-4) === ".bin") ? getdatabin(data) : getdatastr(data); }

    /* Part 2 Section 10.1.2 "Mapping Content Types" Names are case-insensitive */
    /* OASIS does not comment on filename case sensitivity */
    function safegetzipfile(zip, file/*:string*/) {
    	var k = zip.FullPaths || keys(zip.files);
    	var f = file.toLowerCase().replace(/[\/]/g, '\\'), g = f.replace(/\\/g,'\/');
    	for(var i=0; i<k.length; ++i) {
    		var n = k[i].replace(/^Root Entry[\/]/,"").toLowerCase();
    		if(f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];
    	}
    	return null;
    }

    function getzipfile(zip, file/*:string*/) {
    	var o = safegetzipfile(zip, file);
    	if(o == null) throw new Error("Cannot find file " + file + " in zip");
    	return o;
    }

    function getzipdata(zip, file/*:string*/, safe/*:?boolean*/)/*:any*/ {
    	if(!safe) return getdata(getzipfile(zip, file));
    	if(!file) return null;
    	try { return getzipdata(zip, file); } catch(e) { return null; }
    }

    function getzipstr(zip, file/*:string*/, safe/*:?boolean*/)/*:?string*/ {
    	if(!safe) return getdatastr(getzipfile(zip, file));
    	if(!file) return null;
    	try { return getzipstr(zip, file); } catch(e) { return null; }
    }

    function getzipbin(zip, file/*:string*/, safe/*:?boolean*/)/*:any*/ {
    	if(!safe) return getdatabin(getzipfile(zip, file));
    	if(!file) return null;
    	try { return getzipbin(zip, file); } catch(e) { return null; }
    }

    function zipentries(zip) {
    	var k = zip.FullPaths || keys(zip.files), o = [];
    	for(var i = 0; i < k.length; ++i) if(k[i].slice(-1) != '/') o.push(k[i].replace(/^Root Entry[\/]/, ""));
    	return o.sort();
    }

    function zip_add_file(zip, path, content) {
    	if(zip.FullPaths) {
    		if(typeof content == "string") {
    			var res;
    			if(has_buf) res = Buffer_from(content);
    			/* TODO: investigate performance in Edge 13 */
    			//else if(typeof TextEncoder !== "undefined") res = new TextEncoder().encode(content);
    			else res = utf8decode(content);
    			return CFB.utils.cfb_add(zip, path, res);
    		}
    		CFB.utils.cfb_add(zip, path, content);
    	}
    	else zip.file(path, content);
    }

    function zip_new() { return CFB.utils.cfb_new(); }

    function zip_read(d, o) {
    	switch(o.type) {
    		case "base64": return CFB.read(d, { type: "base64" });
    		case "binary": return CFB.read(d, { type: "binary" });
    		case "buffer": case "array": return CFB.read(d, { type: "buffer" });
    	}
    	throw new Error("Unrecognized type " + o.type);
    }

    function resolve_path(path/*:string*/, base/*:string*/)/*:string*/ {
    	if(path.charAt(0) == "/") return path.slice(1);
    	var result = base.split('/');
    	if(base.slice(-1) != "/") result.pop(); // folder path
    	var target = path.split('/');
    	while (target.length !== 0) {
    		var step = target.shift();
    		if (step === '..') result.pop();
    		else if (step !== '.') result.push(step);
    	}
    	return result.join('/');
    }
    var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
    var attregexg=/([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
    var tagregex1=/<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^>]*>/g;
    var tagregex = /*#__PURE__*/XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
    var nsregex=/<\w*:/, nsregex2 = /<(\/?)\w+:/;
    function parsexmltag(tag/*:string*/, skip_root/*:?boolean*/, skip_LC/*:?boolean*/)/*:any*/ {
    	var z = ({}/*:any*/);
    	var eq = 0, c = 0;
    	for(; eq !== tag.length; ++eq) if((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;
    	if(!skip_root) z[0] = tag.slice(0, eq);
    	if(eq === tag.length) return z;
    	var m = tag.match(attregexg), j=0, v="", i=0, q="", cc="", quot = 1;
    	if(m) for(i = 0; i != m.length; ++i) {
    		cc = m[i];
    		for(c=0; c != cc.length; ++c) if(cc.charCodeAt(c) === 61) break;
    		q = cc.slice(0,c).trim();
    		while(cc.charCodeAt(c+1) == 32) ++c;
    		quot = ((eq=cc.charCodeAt(c+1)) == 34 || eq == 39) ? 1 : 0;
    		v = cc.slice(c+1+quot, cc.length-quot);
    		for(j=0;j!=q.length;++j) if(q.charCodeAt(j) === 58) break;
    		if(j===q.length) {
    			if(q.indexOf("_") > 0) q = q.slice(0, q.indexOf("_")); // from ods
    			z[q] = v;
    			if(!skip_LC) z[q.toLowerCase()] = v;
    		}
    		else {
    			var k = (j===5 && q.slice(0,5)==="xmlns"?"xmlns":"")+q.slice(j+1);
    			if(z[k] && q.slice(j-3,j) == "ext") continue; // from ods
    			z[k] = v;
    			if(!skip_LC) z[k.toLowerCase()] = v;
    		}
    	}
    	return z;
    }
    function strip_ns(x/*:string*/)/*:string*/ { return x.replace(nsregex2, "<$1"); }

    var encodings = {
    	'&quot;': '"',
    	'&apos;': "'",
    	'&gt;': '>',
    	'&lt;': '<',
    	'&amp;': '&'
    };
    var rencoding = /*#__PURE__*/evert(encodings);
    //var rencstr = "&<>'\"".split("");

    // TODO: CP remap (need to read file version to determine OS)
    var unescapexml/*:StringConv*/ = /*#__PURE__*/(function() {
    	/* 22.4.2.4 bstr (Basic String) */
    	var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
    	return function unescapexml(text/*:string*/)/*:string*/ {
    		var s = text + '', i = s.indexOf("<![CDATA[");
    		if(i == -1) return s.replace(encregex, function($$, $1) { return encodings[$$]||String.fromCharCode(parseInt($1,$$.indexOf("x")>-1?16:10))||$$; }).replace(coderegex,function(m,c) {return String.fromCharCode(parseInt(c,16));});
    		var j = s.indexOf("]]>");
    		return unescapexml(s.slice(0, i)) + s.slice(i+9,j) + unescapexml(s.slice(j+3));
    	};
    })();

    var decregex=/[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f]/g;
    function escapexml(text/*:string*/)/*:string*/{
    	var s = text + '';
    	return s.replace(decregex, function(y) { return rencoding[y]; }).replace(charegex,function(s) { return "_x" + ("000"+s.charCodeAt(0).toString(16)).slice(-4) + "_";});
    }
    function escapexmltag(text/*:string*/)/*:string*/{ return escapexml(text).replace(/ /g,"_x0020_"); }

    var htmlcharegex = /[\u0000-\u001f]/g;
    function escapehtml(text/*:string*/)/*:string*/{
    	var s = text + '';
    	return s.replace(decregex, function(y) { return rencoding[y]; }).replace(/\n/g, "<br/>").replace(htmlcharegex,function(s) { return "&#x" + ("000"+s.charCodeAt(0).toString(16)).slice(-4) + ";"; });
    }

    function escapexlml(text/*:string*/)/*:string*/{
    	var s = text + '';
    	return s.replace(decregex, function(y) { return rencoding[y]; }).replace(htmlcharegex,function(s) { return "&#x" + (s.charCodeAt(0).toString(16)).toUpperCase() + ";"; });
    }

    /* TODO: handle codepages */
    var xlml_fixstr/*:StringConv*/ = /*#__PURE__*/(function() {
    	var entregex = /&#(\d+);/g;
    	function entrepl($$/*:string*/,$1/*:string*/)/*:string*/ { return String.fromCharCode(parseInt($1,10)); }
    	return function xlml_fixstr(str/*:string*/)/*:string*/ { return str.replace(entregex,entrepl); };
    })();
    function xlml_unfixstr(str/*:string*/)/*:string*/ { return str.replace(/(\r\n|[\r\n])/g,"\&#10;"); }

    function parsexmlbool(value/*:any*/)/*:boolean*/ {
    	switch(value) {
    		case 1: case true: case '1': case 'true': case 'TRUE': return true;
    		/* case '0': case 'false': case 'FALSE':*/
    		default: return false;
    	}
    }

    function utf8reada(orig/*:string*/)/*:string*/ {
    	var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
    	while (i < orig.length) {
    		c = orig.charCodeAt(i++);
    		if (c < 128) { out += String.fromCharCode(c); continue; }
    		d = orig.charCodeAt(i++);
    		if (c>191 && c<224) { f = ((c & 31) << 6); f |= (d & 63); out += String.fromCharCode(f); continue; }
    		e = orig.charCodeAt(i++);
    		if (c < 240) { out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63)); continue; }
    		f = orig.charCodeAt(i++);
    		w = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63))-65536;
    		out += String.fromCharCode(0xD800 + ((w>>>10)&1023));
    		out += String.fromCharCode(0xDC00 + (w&1023));
    	}
    	return out;
    }

    function utf8readb(data) {
    	var out = new_raw_buf(2*data.length), w, i, j = 1, k = 0, ww=0, c;
    	for(i = 0; i < data.length; i+=j) {
    		j = 1;
    		if((c=data.charCodeAt(i)) < 128) w = c;
    		else if(c < 224) { w = (c&31)*64+(data.charCodeAt(i+1)&63); j=2; }
    		else if(c < 240) { w=(c&15)*4096+(data.charCodeAt(i+1)&63)*64+(data.charCodeAt(i+2)&63); j=3; }
    		else { j = 4;
    			w = (c & 7)*262144+(data.charCodeAt(i+1)&63)*4096+(data.charCodeAt(i+2)&63)*64+(data.charCodeAt(i+3)&63);
    			w -= 65536; ww = 0xD800 + ((w>>>10)&1023); w = 0xDC00 + (w&1023);
    		}
    		if(ww !== 0) { out[k++] = ww&255; out[k++] = ww>>>8; ww = 0; }
    		out[k++] = w%256; out[k++] = w>>>8;
    	}
    	return out.slice(0,k).toString('ucs2');
    }

    function utf8readc(data) { return Buffer_from(data, 'binary').toString('utf8'); }

    var utf8corpus = "foo bar baz\u00e2\u0098\u0083\u00f0\u009f\u008d\u00a3";
    var utf8read = has_buf && (/*#__PURE__*/utf8readc(utf8corpus) == /*#__PURE__*/utf8reada(utf8corpus) && utf8readc || /*#__PURE__*/utf8readb(utf8corpus) == /*#__PURE__*/utf8reada(utf8corpus) && utf8readb) || utf8reada;

    var utf8write/*:StringConv*/ = has_buf ? function(data) { return Buffer_from(data, 'utf8').toString("binary"); } : function(orig/*:string*/)/*:string*/ {
    	var out/*:Array<string>*/ = [], i = 0, c = 0, d = 0;
    	while(i < orig.length) {
    		c = orig.charCodeAt(i++);
    		switch(true) {
    			case c < 128: out.push(String.fromCharCode(c)); break;
    			case c < 2048:
    				out.push(String.fromCharCode(192 + (c >> 6)));
    				out.push(String.fromCharCode(128 + (c & 63)));
    				break;
    			case c >= 55296 && c < 57344:
    				c -= 55296; d = orig.charCodeAt(i++) - 56320 + (c<<10);
    				out.push(String.fromCharCode(240 + ((d >>18) & 7)));
    				out.push(String.fromCharCode(144 + ((d >>12) & 63)));
    				out.push(String.fromCharCode(128 + ((d >> 6) & 63)));
    				out.push(String.fromCharCode(128 + (d & 63)));
    				break;
    			default:
    				out.push(String.fromCharCode(224 + (c >> 12)));
    				out.push(String.fromCharCode(128 + ((c >> 6) & 63)));
    				out.push(String.fromCharCode(128 + (c & 63)));
    		}
    	}
    	return out.join("");
    };

    // matches <foo>...</foo> extracts content
    var matchtag = /*#__PURE__*/(function() {
    	var mtcache/*:{[k:string]:RegExp}*/ = ({}/*:any*/);
    	return function matchtag(f/*:string*/,g/*:?string*/)/*:RegExp*/ {
    		var t = f+"|"+(g||"");
    		if(mtcache[t]) return mtcache[t];
    		return (mtcache[t] = new RegExp('<(?:\\w+:)?'+f+'(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?'+f+'>',((g||"")/*:any*/)));
    	};
    })();

    var htmldecode/*:{(s:string):string}*/ = /*#__PURE__*/(function() {
    	var entities/*:Array<[RegExp, string]>*/ = [
    		['nbsp', ' '], ['middot', '·'],
    		['quot', '"'], ['apos', "'"], ['gt',   '>'], ['lt',   '<'], ['amp',  '&']
    	].map(function(x/*:[string, string]*/) { return [new RegExp('&' + x[0] + ';', "ig"), x[1]]; });
    	return function htmldecode(str/*:string*/)/*:string*/ {
    		var o = str
    				// Remove new lines and spaces from start of content
    				.replace(/^[\t\n\r ]+/, "")
    				// Remove new lines and spaces from end of content
    				.replace(/[\t\n\r ]+$/,"")
    				// Added line which removes any white space characters after and before html tags
    				.replace(/>\s+/g,">").replace(/\s+</g,"<")
    				// Replace remaining new lines and spaces with space
    				.replace(/[\t\n\r ]+/g, " ")
    				// Replace <br> tags with new lines
    				.replace(/<\s*[bB][rR]\s*\/?>/g,"\n")
    				// Strip HTML elements
    				.replace(/<[^>]*>/g,"");
    		for(var i = 0; i < entities.length; ++i) o = o.replace(entities[i][0], entities[i][1]);
    		return o;
    	};
    })();

    var vtregex = /*#__PURE__*/(function(){ var vt_cache = {};
    	return function vt_regex(bt) {
    		if(vt_cache[bt] !== undefined) return vt_cache[bt];
    		return (vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", 'g') );
    };})();
    var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
    function parseVector(data/*:string*/, opts)/*:Array<{v:string,t:string}>*/ {
    	var h = parsexmltag(data);

    	var matches/*:Array<string>*/ = data.match(vtregex(h.baseType))||[];
    	var res/*:Array<any>*/ = [];
    	if(matches.length != h.size) {
    		if(opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
    		return res;
    	}
    	matches.forEach(function(x/*:string*/) {
    		var v = x.replace(vtvregex,"").match(vtmregex);
    		if(v) res.push({v:utf8read(v[2]), t:v[1]});
    	});
    	return res;
    }

    var wtregex = /(^\s|\s$|\n)/;
    function writetag(f/*:string*/,g/*:string*/)/*:string*/ { return '<' + f + (g.match(wtregex)?' xml:space="preserve"' : "") + '>' + g + '</' + f + '>'; }

    function wxt_helper(h)/*:string*/ { return keys(h).map(function(k) { return " " + k + '="' + h[k] + '"';}).join(""); }
    function writextag(f/*:string*/,g/*:?string*/,h) { return '<' + f + ((h != null) ? wxt_helper(h) : "") + ((g != null) ? (g.match(wtregex)?' xml:space="preserve"' : "") + '>' + g + '</' + f : "/") + '>';}

    function write_w3cdtf(d/*:Date*/, t/*:?boolean*/)/*:string*/ { try { return d.toISOString().replace(/\.\d*/,""); } catch(e) { if(t) throw e; } return ""; }

    function write_vt(s, xlsx/*:?boolean*/)/*:string*/ {
    	switch(typeof s) {
    		case 'string':
    			var o = writextag('vt:lpwstr', escapexml(s));
    			if(xlsx) o = o.replace(/&quot;/g, "_x0022_");
    			return o;
    		case 'number': return writextag((s|0)==s?'vt:i4':'vt:r8', escapexml(String(s)));
    		case 'boolean': return writextag('vt:bool',s?'true':'false');
    	}
    	if(s instanceof Date) return writextag('vt:filetime', write_w3cdtf(s));
    	throw new Error("Unable to serialize " + s);
    }

    function xlml_normalize(d)/*:string*/ {
    	if(has_buf &&/*::typeof Buffer !== "undefined" && d != null && d instanceof Buffer &&*/ Buffer.isBuffer(d)) return d.toString('utf8');
    	if(typeof d === 'string') return d;
    	/* duktape */
    	if(typeof Uint8Array !== 'undefined' && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));
    	throw new Error("Bad input format: expected Buffer or string");
    }
    /* UOS uses CJK in tags */
    var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
    //var xlmlregex = /<(\/?)([a-z0-9]*:|)(\w+)[^>]*>/mg;

    var XMLNS = ({
    	CORE_PROPS: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',
    	CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
    	EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
    	CT: 'http://schemas.openxmlformats.org/package/2006/content-types',
    	RELS: 'http://schemas.openxmlformats.org/package/2006/relationships',
    	TCMNT: 'http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments',
    	'dc': 'http://purl.org/dc/elements/1.1/',
    	'dcterms': 'http://purl.org/dc/terms/',
    	'dcmitype': 'http://purl.org/dc/dcmitype/',
    	'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',
    	'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
    	'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',
    	'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',
    	'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
    	'xsd': 'http://www.w3.org/2001/XMLSchema'
    }/*:any*/);

    var XMLNS_main = [
    	'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
    	'http://purl.oclc.org/ooxml/spreadsheetml/main',
    	'http://schemas.microsoft.com/office/excel/2006/main',
    	'http://schemas.microsoft.com/office/excel/2006/2'
    ];

    var XLMLNS = ({
    	'o':    'urn:schemas-microsoft-com:office:office',
    	'x':    'urn:schemas-microsoft-com:office:excel',
    	'ss':   'urn:schemas-microsoft-com:office:spreadsheet',
    	'dt':   'uuid:C2F41010-65B3-11d1-A29F-00AA00C14882',
    	'mv':   'http://macVmlSchemaUri',
    	'v':    'urn:schemas-microsoft-com:vml',
    	'html': 'http://www.w3.org/TR/REC-html40'
    }/*:any*/);
    function read_double_le(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ {
    	var s = 1 - 2 * (b[idx + 7] >>> 7);
    	var e = ((b[idx + 7] & 0x7f) << 4) + ((b[idx + 6] >>> 4) & 0x0f);
    	var m = (b[idx+6]&0x0f);
    	for(var i = 5; i >= 0; --i) m = m * 256 + b[idx + i];
    	if(e == 0x7ff) return m == 0 ? (s * Infinity) : NaN;
    	if(e == 0) e = -1022;
    	else { e -= 1023; m += Math.pow(2,52); }
    	return s * Math.pow(2, e - 52) * m;
    }

    function write_double_le(b/*:RawBytes|CFBlob*/, v/*:number*/, idx/*:number*/) {
    	var bs = ((((v < 0) || (1/v == -Infinity)) ? 1 : 0) << 7), e = 0, m = 0;
    	var av = bs ? (-v) : v;
    	if(!isFinite(av)) { e = 0x7ff; m = isNaN(v) ? 0x6969 : 0; }
    	else if(av == 0) e = m = 0;
    	else {
    		e = Math.floor(Math.log(av) / Math.LN2);
    		m = av * Math.pow(2, 52 - e);
    		if((e <= -1023) && (!isFinite(m) || (m < Math.pow(2,52)))) { e = -1022; }
    		else { m -= Math.pow(2,52); e+=1023; }
    	}
    	for(var i = 0; i <= 5; ++i, m/=256) b[idx + i] = m & 0xff;
    	b[idx + 6] = ((e & 0x0f) << 4) | (m & 0xf);
    	b[idx + 7] = (e >> 4) | bs;
    }

    var ___toBuffer = function(bufs/*:Array<Array<RawBytes> >*/)/*:RawBytes*/ { var x=[],w=10240; for(var i=0;i<bufs[0].length;++i) if(bufs[0][i]) for(var j=0,L=bufs[0][i].length;j<L;j+=w) x.push.apply(x, bufs[0][i].slice(j,j+w)); return x; };
    var __toBuffer = has_buf ? function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0].map(function(x) { return Buffer.isBuffer(x) ? x : Buffer_from(x); })) : ___toBuffer(bufs);} : ___toBuffer;

    var ___utf16le = function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/)/*:string*/ { var ss/*:Array<string>*/=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join("").replace(chr0,''); };
    var __utf16le = has_buf ? function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/)/*:string*/ { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___utf16le(b,s,e); return b.toString('utf16le',s,e).replace(chr0,'')/*.replace(chr1,'!')*/; } : ___utf16le;

    var ___hexlify = function(b/*:RawBytes|CFBlob*/,s/*:number*/,l/*:number*/)/*:string*/ { var ss/*:Array<string>*/=[]; for(var i=s; i<s+l; ++i) ss.push(("0" + b[i].toString(16)).slice(-2)); return ss.join(""); };
    var __hexlify = has_buf ? function(b/*:RawBytes|CFBlob*/,s/*:number*/,l/*:number*/)/*:string*/ { return Buffer.isBuffer(b)/*:: && b instanceof Buffer*/ ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); } : ___hexlify;

    var ___utf8 = function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/) { var ss=[]; for(var i=s; i<e; i++) ss.push(String.fromCharCode(__readUInt8(b,i))); return ss.join(""); };
    var __utf8 = has_buf ? function utf8_b(b/*:RawBytes|CFBlob*/, s/*:number*/, e/*:number*/) { return (Buffer.isBuffer(b)/*:: && (b instanceof Buffer)*/) ? b.toString('utf8',s,e) : ___utf8(b,s,e); } : ___utf8;

    var ___lpstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
    var __lpstr = ___lpstr;

    var ___cpstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
    var __cpstr = ___cpstr;

    var ___lpwstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = 2*__readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
    var __lpwstr = ___lpwstr;

    var ___lpp4 = function lpp4_(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf16le(b, i+4,i+4+len) : "";};
    var __lpp4 = ___lpp4;

    var ___8lpp4 = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len) : "";};
    var __8lpp4 = ___8lpp4;

    var ___double = function(b/*:RawBytes|CFBlob*/, idx/*:number*/) { return read_double_le(b, idx);};
    var __double = ___double;

    var is_buf = function is_buf_a(a) { return Array.isArray(a) || (typeof Uint8Array !== "undefined" && a instanceof Uint8Array); };

    if(has_buf/*:: && typeof Buffer !== 'undefined'*/) {
    	__lpstr = function lpstr_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___lpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : "";};
    	__cpstr = function cpstr_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___cpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : "";};
    	__lpwstr = function lpwstr_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___lpwstr(b, i); var len = 2*b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len-1);};
    	__lpp4 = function lpp4_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len);};
    	__8lpp4 = function lpp4_8b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___8lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf8',i+4,i+4+len);};
    	__double = function double_(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(Buffer.isBuffer(b)/*::&& b instanceof Buffer*/) return b.readDoubleLE(i); return ___double(b,i); };
    	is_buf = function is_buf_b(a) { return Buffer.isBuffer(a) || Array.isArray(a) || (typeof Uint8Array !== "undefined" && a instanceof Uint8Array); };
    }

    /* from js-xls */
    function cpdoit() {
    	__utf16le = function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/) { return $cptable.utils.decode(1200, b.slice(s,e)).replace(chr0, ''); };
    	__utf8 = function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/) { return $cptable.utils.decode(65001, b.slice(s,e)); };
    	__lpstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? $cptable.utils.decode(current_ansi, b.slice(i+4, i+4+len-1)) : "";};
    	__cpstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? $cptable.utils.decode(current_codepage, b.slice(i+4, i+4+len-1)) : "";};
    	__lpwstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = 2*__readUInt32LE(b,i); return len > 0 ? $cptable.utils.decode(1200, b.slice(i+4,i+4+len-1)) : "";};
    	__lpp4 = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? $cptable.utils.decode(1200, b.slice(i+4,i+4+len)) : "";};
    	__8lpp4 = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? $cptable.utils.decode(65001, b.slice(i+4,i+4+len)) : "";};
    }
    if(typeof $cptable !== 'undefined') cpdoit();

    var __readUInt8 = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return b[idx]; };
    var __readUInt16LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return (b[idx+1]*(1<<8))+b[idx]; };
    var __readInt16LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { var u = (b[idx+1]*(1<<8))+b[idx]; return (u < 0x8000) ? u : ((0xffff - u + 1) * -1); };
    var __readUInt32LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };
    var __readInt32LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return (b[idx+3]<<24)|(b[idx+2]<<16)|(b[idx+1]<<8)|b[idx]; };
    var __readInt32BE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return (b[idx]<<24)|(b[idx+1]<<16)|(b[idx+2]<<8)|b[idx+3]; };

    function ReadShift(size/*:number*/, t/*:?string*/)/*:number|string*/ {
    	var o="", oI/*:: :number = 0*/, oR, oo=[], w, vv, i, loc;
    	switch(t) {
    		case 'dbcs':
    			loc = this.l;
    			if(has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l+2*size).toString("utf16le");
    			else for(i = 0; i < size; ++i) { o+=String.fromCharCode(__readUInt16LE(this, loc)); loc+=2; }
    			size *= 2;
    			break;

    		case 'utf8': o = __utf8(this, this.l, this.l + size); break;
    		case 'utf16le': size *= 2; o = __utf16le(this, this.l, this.l + size); break;

    		case 'wstr':
    			if(typeof $cptable !== 'undefined') o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l+2*size));
    			else return ReadShift.call(this, size, 'dbcs');
    			size = 2 * size; break;

    		/* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */
    		case 'lpstr-ansi': o = __lpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;
    		case 'lpstr-cp': o = __cpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;
    		/* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */
    		case 'lpwstr': o = __lpwstr(this, this.l); size = 4 + 2 * __readUInt32LE(this, this.l); break;
    		/* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */
    		case 'lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __lpp4(this, this.l); if(size & 0x02) size += 2; break;
    		/* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */
    		case '8lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __8lpp4(this, this.l); if(size & 0x03) size += 4 - (size & 0x03); break;

    		case 'cstr': size = 0; o = "";
    			while((w=__readUInt8(this, this.l + size++))!==0) oo.push(_getchar(w));
    			o = oo.join(""); break;
    		case '_wstr': size = 0; o = "";
    			while((w=__readUInt16LE(this,this.l +size))!==0){oo.push(_getchar(w));size+=2;}
    			size+=2; o = oo.join(""); break;

    		/* sbcs and dbcs support continue records in the SST way TODO codepages */
    		case 'dbcs-cont': o = ""; loc = this.l;
    			for(i = 0; i < size; ++i) {
    				if(this.lens && this.lens.indexOf(loc) !== -1) {
    					w = __readUInt8(this, loc);
    					this.l = loc + 1;
    					vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
    					return oo.join("") + vv;
    				}
    				oo.push(_getchar(__readUInt16LE(this, loc)));
    				loc+=2;
    			} o = oo.join(""); size *= 2; break;

    		case 'cpstr':
    			if(typeof $cptable !== 'undefined') {
    				o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
    				break;
    			}
    		/* falls through */
    		case 'sbcs-cont': o = ""; loc = this.l;
    			for(i = 0; i != size; ++i) {
    				if(this.lens && this.lens.indexOf(loc) !== -1) {
    					w = __readUInt8(this, loc);
    					this.l = loc + 1;
    					vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
    					return oo.join("") + vv;
    				}
    				oo.push(_getchar(__readUInt8(this, loc)));
    				loc+=1;
    			} o = oo.join(""); break;

    		default:
    	switch(size) {
    		case 1: oI = __readUInt8(this, this.l); this.l++; return oI;
    		case 2: oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l); this.l += 2; return oI;
    		case 4: case -4:
    			if(t === 'i' || ((this[this.l+3] & 0x80)===0)) { oI = ((size > 0) ? __readInt32LE : __readInt32BE)(this, this.l); this.l += 4; return oI; }
    			else { oR = __readUInt32LE(this, this.l); this.l += 4; } return oR;
    		case 8: case -8:
    			if(t === 'f') {
    				if(size == 8) oR = __double(this, this.l);
    				else oR = __double([this[this.l+7],this[this.l+6],this[this.l+5],this[this.l+4],this[this.l+3],this[this.l+2],this[this.l+1],this[this.l+0]], 0);
    				this.l += 8; return oR;
    			} else size = 8;
    		/* falls through */
    		case 16: o = __hexlify(this, this.l, size); break;
    	}}
    	this.l+=size; return o;
    }

    var __writeUInt32LE = function(b/*:RawBytes|CFBlob*/, val/*:number*/, idx/*:number*/)/*:void*/ { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); b[idx+2] = ((val >>> 16) & 0xFF); b[idx+3] = ((val >>> 24) & 0xFF); };
    var __writeInt32LE  = function(b/*:RawBytes|CFBlob*/, val/*:number*/, idx/*:number*/)/*:void*/ { b[idx] = (val & 0xFF); b[idx+1] = ((val >> 8) & 0xFF); b[idx+2] = ((val >> 16) & 0xFF); b[idx+3] = ((val >> 24) & 0xFF); };
    var __writeUInt16LE = function(b/*:RawBytes|CFBlob*/, val/*:number*/, idx/*:number*/)/*:void*/ { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); };

    function WriteShift(t/*:number*/, val/*:string|number*/, f/*:?string*/)/*:any*/ {
    	var size = 0, i = 0;
    	if(f === 'dbcs') {
    		/*:: if(typeof val !== 'string') throw new Error("unreachable"); */
    		for(i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
    		size = 2 * val.length;
    	} else if(f === 'sbcs') {
    		if(typeof $cptable !== 'undefined' && current_ansi == 874) {
    			/* TODO: use tables directly, don't encode */
    			/*:: if(typeof val !== "string") throw new Error("unreachable"); */
    			for(i = 0; i != val.length; ++i) {
    				var cppayload = $cptable.utils.encode(current_ansi, val.charAt(i));
    				this[this.l + i] = cppayload[0];
    			}
    		} else {
    			/*:: if(typeof val !== 'string') throw new Error("unreachable"); */
    			val = val.replace(/[^\x00-\x7F]/g, "_");
    			/*:: if(typeof val !== 'string') throw new Error("unreachable"); */
    			for(i = 0; i != val.length; ++i) this[this.l + i] = (val.charCodeAt(i) & 0xFF);
    		}
    		size = val.length;
    	} else if(f === 'hex') {
    		for(; i < t; ++i) {
    			/*:: if(typeof val !== "string") throw new Error("unreachable"); */
    			this[this.l++] = (parseInt(val.slice(2*i, 2*i+2), 16)||0);
    		} return this;
    	} else if(f === 'utf16le') {
    			/*:: if(typeof val !== "string") throw new Error("unreachable"); */
    			var end/*:number*/ = Math.min(this.l + t, this.length);
    			for(i = 0; i < Math.min(val.length, t); ++i) {
    				var cc = val.charCodeAt(i);
    				this[this.l++] = (cc & 0xff);
    				this[this.l++] = (cc >> 8);
    			}
    			while(this.l < end) this[this.l++] = 0;
    			return this;
    	} else /*:: if(typeof val === 'number') */ switch(t) {
    		case  1: size = 1; this[this.l] = val&0xFF; break;
    		case  2: size = 2; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; break;
    		case  3: size = 3; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; val >>>= 8; this[this.l+2] = val&0xFF; break;
    		case  4: size = 4; __writeUInt32LE(this, val, this.l); break;
    		case  8: size = 8; if(f === 'f') { write_double_le(this, val, this.l); break; }
    		/* falls through */
    		case 16: break;
    		case -4: size = 4; __writeInt32LE(this, val, this.l); break;
    	}
    	this.l += size; return this;
    }

    function CheckField(hexstr/*:string*/, fld/*:string*/)/*:void*/ {
    	var m = __hexlify(this,this.l,hexstr.length>>1);
    	if(m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);
    	this.l += hexstr.length>>1;
    }

    function prep_blob(blob, pos/*:number*/)/*:void*/ {
    	blob.l = pos;
    	blob.read_shift = /*::(*/ReadShift/*:: :any)*/;
    	blob.chk = CheckField;
    	blob.write_shift = WriteShift;
    }

    function parsenoop(blob, length/*:: :number, opts?:any */) { blob.l += length; }

    function new_buf(sz/*:number*/)/*:Block*/ {
    	var o = new_raw_buf(sz);
    	prep_blob(o, 0);
    	return o;
    }

    /* [MS-XLSB] 2.1.4 Record */
    function recordhopper(data, cb/*:RecordHopperCB*/, opts/*:?any*/) {
    	if(!data) return;
    	var tmpbyte, cntbyte, length;
    	prep_blob(data, data.l || 0);
    	var L = data.length, RT = 0, tgt = 0;
    	while(data.l < L) {
    		RT = data.read_shift(1);
    		if(RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F)<<7);
    		var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];
    		tmpbyte = data.read_shift(1);
    		length = tmpbyte & 0x7F;
    		for(cntbyte = 1; cntbyte <4 && (tmpbyte & 0x80); ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 0x7F)<<(7*cntbyte);
    		tgt = data.l + length;
    		var d = R.f && R.f(data, length, opts);
    		data.l = tgt;
    		if(cb(d, R, RT)) return;
    	}
    }

    /* control buffer usage for fixed-length buffers */
    function buf_array()/*:BufArray*/ {
    	var bufs/*:Array<Block>*/ = [], blksz = has_buf ? 256 : 2048;
    	var newblk = function ba_newblk(sz/*:number*/)/*:Block*/ {
    		var o/*:Block*/ = (new_buf(sz)/*:any*/);
    		prep_blob(o, 0);
    		return o;
    	};

    	var curbuf/*:Block*/ = newblk(blksz);

    	var endbuf = function ba_endbuf() {
    		if(!curbuf) return;
    		if(curbuf.length > curbuf.l) { curbuf = curbuf.slice(0, curbuf.l); curbuf.l = curbuf.length; }
    		if(curbuf.length > 0) bufs.push(curbuf);
    		curbuf = null;
    	};

    	var next = function ba_next(sz/*:number*/)/*:Block*/ {
    		if(curbuf && (sz < (curbuf.length - curbuf.l))) return curbuf;
    		endbuf();
    		return (curbuf = newblk(Math.max(sz+1, blksz)));
    	};

    	var end = function ba_end() {
    		endbuf();
    		return bconcat(bufs);
    	};

    	var push = function ba_push(buf) { endbuf(); curbuf = buf; if(curbuf.l == null) curbuf.l = curbuf.length; next(blksz); };

    	return ({ next:next, push:push, end:end, _bufs:bufs }/*:any*/);
    }

    function write_record(ba/*:BufArray*/, type/*:number*/, payload, length/*:?number*/) {
    	var t/*:number*/ = +type, l;
    	if(isNaN(t)) return; // TODO: throw something here?
    	if(!length) length = XLSBRecordEnum[t].p || (payload||[]).length || 0;
    	l = 1 + (t >= 0x80 ? 1 : 0) + 1/* + length*/;
    	if(length >= 0x80) ++l; if(length >= 0x4000) ++l; if(length >= 0x200000) ++l;
    	var o = ba.next(l);
    	if(t <= 0x7F) o.write_shift(1, t);
    	else {
    		o.write_shift(1, (t & 0x7F) + 0x80);
    		o.write_shift(1, (t >> 7));
    	}
    	for(var i = 0; i != 4; ++i) {
    		if(length >= 0x80) { o.write_shift(1, (length & 0x7F)+0x80); length >>= 7; }
    		else { o.write_shift(1, length); break; }
    	}
    	if(/*:: length != null &&*/length > 0 && is_buf(payload)) ba.push(payload);
    }
    /* XLS ranges enforced */
    function shift_cell_xls(cell/*:CellAddress*/, tgt/*:any*/, opts/*:?any*/)/*:CellAddress*/ {
    	var out = dup(cell);
    	if(tgt.s) {
    		if(out.cRel) out.c += tgt.s.c;
    		if(out.rRel) out.r += tgt.s.r;
    	} else {
    		if(out.cRel) out.c += tgt.c;
    		if(out.rRel) out.r += tgt.r;
    	}
    	if(!opts || opts.biff < 12) {
    		while(out.c >= 0x100) out.c -= 0x100;
    		while(out.r >= 0x10000) out.r -= 0x10000;
    	}
    	return out;
    }

    function shift_range_xls(cell, range, opts) {
    	var out = dup(cell);
    	out.s = shift_cell_xls(out.s, range.s, opts);
    	out.e = shift_cell_xls(out.e, range.s, opts);
    	return out;
    }

    function encode_cell_xls(c/*:CellAddress*/, biff/*:number*/)/*:string*/ {
    	if(c.cRel && c.c < 0) { c = dup(c); while(c.c < 0) c.c += (biff > 8) ? 0x4000 : 0x100; }
    	if(c.rRel && c.r < 0) { c = dup(c); while(c.r < 0) c.r += (biff > 8) ? 0x100000 : ((biff > 5) ? 0x10000 : 0x4000); }
    	var s = encode_cell(c);
    	if(!c.cRel && c.cRel != null) s = fix_col(s);
    	if(!c.rRel && c.rRel != null) s = fix_row(s);
    	return s;
    }

    function encode_range_xls(r, opts)/*:string*/ {
    	if(r.s.r == 0 && !r.s.rRel) {
    		if(r.e.r == (opts.biff >= 12 ? 0xFFFFF : (opts.biff >= 8 ? 0x10000 : 0x4000)) && !r.e.rRel) {
    			return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
    		}
    	}
    	if(r.s.c == 0 && !r.s.cRel) {
    		if(r.e.c == (opts.biff >= 12 ? 0x3FFF : 0xFF) && !r.e.cRel) {
    			return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
    		}
    	}
    	return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
    }
    function decode_row(rowstr/*:string*/)/*:number*/ { return parseInt(unfix_row(rowstr),10) - 1; }
    function encode_row(row/*:number*/)/*:string*/ { return "" + (row + 1); }
    function fix_row(cstr/*:string*/)/*:string*/ { return cstr.replace(/([A-Z]|^)(\d+)$/,"$1$$$2"); }
    function unfix_row(cstr/*:string*/)/*:string*/ { return cstr.replace(/\$(\d+)$/,"$1"); }

    function decode_col(colstr/*:string*/)/*:number*/ { var c = unfix_col(colstr), d = 0, i = 0; for(; i !== c.length; ++i) d = 26*d + c.charCodeAt(i) - 64; return d - 1; }
    function encode_col(col/*:number*/)/*:string*/ { if(col < 0) throw new Error("invalid column " + col); var s=""; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }
    function fix_col(cstr/*:string*/)/*:string*/ { return cstr.replace(/^([A-Z])/,"$$$1"); }
    function unfix_col(cstr/*:string*/)/*:string*/ { return cstr.replace(/^\$([A-Z])/,"$1"); }

    function split_cell(cstr/*:string*/)/*:Array<string>*/ { return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/,"$1,$2").split(","); }
    //function decode_cell(cstr/*:string*/)/*:CellAddress*/ { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }
    function decode_cell(cstr/*:string*/)/*:CellAddress*/ {
    	var R = 0, C = 0;
    	for(var i = 0; i < cstr.length; ++i) {
    		var cc = cstr.charCodeAt(i);
    		if(cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);
    		else if(cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);
    	}
    	return { c: C - 1, r:R - 1 };
    }
    //function encode_cell(cell/*:CellAddress*/)/*:string*/ { return encode_col(cell.c) + encode_row(cell.r); }
    function encode_cell(cell/*:CellAddress*/)/*:string*/ {
    	var col = cell.c + 1;
    	var s="";
    	for(; col; col=((col-1)/26)|0) s = String.fromCharCode(((col-1)%26) + 65) + s;
    	return s + (cell.r + 1);
    }
    function decode_range(range/*:string*/)/*:Range*/ {
    	var idx = range.indexOf(":");
    	if(idx == -1) return { s: decode_cell(range), e: decode_cell(range) };
    	return { s: decode_cell(range.slice(0, idx)), e: decode_cell(range.slice(idx + 1)) };
    }
    /*# if only one arg, it is assumed to be a Range.  If 2 args, both are cell addresses */
    function encode_range(cs/*:CellAddrSpec|Range*/,ce/*:?CellAddrSpec*/)/*:string*/ {
    	if(typeof ce === 'undefined' || typeof ce === 'number') {
    /*:: if(!(cs instanceof Range)) throw "unreachable"; */
    		return encode_range(cs.s, cs.e);
    	}
    /*:: if((cs instanceof Range)) throw "unreachable"; */
    	if(typeof cs !== 'string') cs = encode_cell((cs/*:any*/));
    	if(typeof ce !== 'string') ce = encode_cell((ce/*:any*/));
    /*:: if(typeof cs !== 'string') throw "unreachable"; */
    /*:: if(typeof ce !== 'string') throw "unreachable"; */
    	return cs == ce ? cs : cs + ":" + ce;
    }

    function safe_decode_range(range/*:string*/)/*:Range*/ {
    	var o = {s:{c:0,r:0},e:{c:0,r:0}};
    	var idx = 0, i = 0, cc = 0;
    	var len = range.length;
    	for(idx = 0; i < len; ++i) {
    		if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
    		idx = 26*idx + cc;
    	}
    	o.s.c = --idx;

    	for(idx = 0; i < len; ++i) {
    		if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
    		idx = 10*idx + cc;
    	}
    	o.s.r = --idx;

    	if(i === len || cc != 10) { o.e.c=o.s.c; o.e.r=o.s.r; return o; }
    	++i;

    	for(idx = 0; i != len; ++i) {
    		if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
    		idx = 26*idx + cc;
    	}
    	o.e.c = --idx;

    	for(idx = 0; i != len; ++i) {
    		if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
    		idx = 10*idx + cc;
    	}
    	o.e.r = --idx;
    	return o;
    }

    function safe_format_cell(cell/*:Cell*/, v/*:any*/) {
    	var q = (cell.t == 'd' && v instanceof Date);
    	if(cell.z != null) try { return (cell.w = SSF_format(cell.z, q ? datenum(v) : v)); } catch(e) { }
    	try { return (cell.w = SSF_format((cell.XF||{}).numFmtId||(q ? 14 : 0),  q ? datenum(v) : v)); } catch(e) { return ''+v; }
    }

    function format_cell(cell/*:Cell*/, v/*:any*/, o/*:any*/) {
    	if(cell == null || cell.t == null || cell.t == 'z') return "";
    	if(cell.w !== undefined) return cell.w;
    	if(cell.t == 'd' && !cell.z && o && o.dateNF) cell.z = o.dateNF;
    	if(cell.t == "e") return BErr[cell.v] || cell.v;
    	if(v == undefined) return safe_format_cell(cell, cell.v);
    	return safe_format_cell(cell, v);
    }

    function sheet_to_workbook(sheet/*:Worksheet*/, opts)/*:Workbook*/ {
    	var n = opts && opts.sheet ? opts.sheet : "Sheet1";
    	var sheets = {}; sheets[n] = sheet;
    	return { SheetNames: [n], Sheets: sheets };
    }

    function sheet_add_aoa(_ws/*:?Worksheet*/, data/*:AOA*/, opts/*:?any*/)/*:Worksheet*/ {
    	var o = opts || {};
    	var dense = _ws ? Array.isArray(_ws) : o.dense;
    	var ws/*:Worksheet*/ = _ws || (dense ? ([]/*:any*/) : ({}/*:any*/));
    	var _R = 0, _C = 0;
    	if(ws && o.origin != null) {
    		if(typeof o.origin == 'number') _R = o.origin;
    		else {
    			var _origin/*:CellAddress*/ = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
    			_R = _origin.r; _C = _origin.c;
    		}
    		if(!ws["!ref"]) ws["!ref"] = "A1:A1";
    	}
    	var range/*:Range*/ = ({s: {c:10000000, r:10000000}, e: {c:0, r:0}}/*:any*/);
    	if(ws['!ref']) {
    		var _range = safe_decode_range(ws['!ref']);
    		range.s.c = _range.s.c;
    		range.s.r = _range.s.r;
    		range.e.c = Math.max(range.e.c, _range.e.c);
    		range.e.r = Math.max(range.e.r, _range.e.r);
    		if(_R == -1) range.e.r = _R = _range.e.r + 1;
    	}
    	for(var R = 0; R != data.length; ++R) {
    		if(!data[R]) continue;
    		if(!Array.isArray(data[R])) throw new Error("aoa_to_sheet expects an array of arrays");
    		for(var C = 0; C != data[R].length; ++C) {
    			if(typeof data[R][C] === 'undefined') continue;
    			var cell/*:Cell*/ = ({v: data[R][C] }/*:any*/);
    			var __R = _R + R, __C = _C + C;
    			if(range.s.r > __R) range.s.r = __R;
    			if(range.s.c > __C) range.s.c = __C;
    			if(range.e.r < __R) range.e.r = __R;
    			if(range.e.c < __C) range.e.c = __C;
    			if(data[R][C] && typeof data[R][C] === 'object' && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];
    			else {
    				if(Array.isArray(cell.v)) { cell.f = data[R][C][1]; cell.v = cell.v[0]; }
    				if(cell.v === null) {
    					if(cell.f) cell.t = 'n';
    					else if(o.nullError) { cell.t = 'e'; cell.v = 0; }
    					else if(!o.sheetStubs) continue;
    					else cell.t = 'z';
    				}
    				else if(typeof cell.v === 'number') cell.t = 'n';
    				else if(typeof cell.v === 'boolean') cell.t = 'b';
    				else if(cell.v instanceof Date) {
    					cell.z = o.dateNF || table_fmt[14];
    					if(o.cellDates) { cell.t = 'd'; cell.w = SSF_format(cell.z, datenum(cell.v)); }
    					else { cell.t = 'n'; cell.v = datenum(cell.v); cell.w = SSF_format(cell.z, cell.v); }
    				}
    				else cell.t = 's';
    			}
    			if(dense) {
    				if(!ws[__R]) ws[__R] = [];
    				if(ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;
    				ws[__R][__C] = cell;
    			} else {
    				var cell_ref = encode_cell(({c:__C,r:__R}/*:any*/));
    				if(ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
    				ws[cell_ref] = cell;
    			}
    		}
    	}
    	if(range.s.c < 10000000) ws['!ref'] = encode_range(range);
    	return ws;
    }
    function aoa_to_sheet(data/*:AOA*/, opts/*:?any*/)/*:Worksheet*/ { return sheet_add_aoa(null, data, opts); }

    function parse_Int32LE(data) {
    	return data.read_shift(4, 'i');
    }
    function write_UInt32LE(x/*:number*/, o) {
    	if (!o) o = new_buf(4);
    	o.write_shift(4, x);
    	return o;
    }

    /* [MS-XLSB] 2.5.168 */
    function parse_XLWideString(data/*::, length*/)/*:string*/ {
    	var cchCharacters = data.read_shift(4);
    	return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, 'dbcs');
    }
    function write_XLWideString(data/*:string*/, o) {
    	var _null = false; if (o == null) { _null = true; o = new_buf(4 + 2 * data.length); }
    	o.write_shift(4, data.length);
    	if (data.length > 0) o.write_shift(0, data, 'dbcs');
    	return _null ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.5.91 */
    //function parse_LPWideString(data/*::, length*/)/*:string*/ {
    //	var cchCharacters = data.read_shift(2);
    //	return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "utf16le");
    //}

    /* [MS-XLSB] 2.5.143 */
    function parse_StrRun(data) {
    	return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
    }
    function write_StrRun(run, o) {
    	if (!o) o = new_buf(4);
    	o.write_shift(2, run.ich || 0);
    	o.write_shift(2, run.ifnt || 0);
    	return o;
    }

    /* [MS-XLSB] 2.5.121 */
    function parse_RichStr(data, length/*:number*/)/*:XLString*/ {
    	var start = data.l;
    	var flags = data.read_shift(1);
    	var str = parse_XLWideString(data);
    	var rgsStrRun = [];
    	var z = ({ t: str, h: str }/*:any*/);
    	if ((flags & 1) !== 0) { /* fRichStr */
    		/* TODO: formatted string */
    		var dwSizeStrRun = data.read_shift(4);
    		for (var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));
    		z.r = rgsStrRun;
    	}
    	else z.r = [{ ich: 0, ifnt: 0 }];
    	//if((flags & 2) !== 0) { /* fExtStr */
    	//	/* TODO: phonetic string */
    	//}
    	data.l = start + length;
    	return z;
    }
    function write_RichStr(str/*:XLString*/, o/*:?Block*/)/*:Block*/ {
    	/* TODO: formatted string */
    	var _null = false; if (o == null) { _null = true; o = new_buf(15 + 4 * str.t.length); }
    	o.write_shift(1, 0);
    	write_XLWideString(str.t, o);
    	return _null ? o.slice(0, o.l) : o;
    }
    /* [MS-XLSB] 2.4.328 BrtCommentText (RichStr w/1 run) */
    var parse_BrtCommentText = parse_RichStr;
    function write_BrtCommentText(str/*:XLString*/, o/*:?Block*/)/*:Block*/ {
    	/* TODO: formatted string */
    	var _null = false; if (o == null) { _null = true; o = new_buf(23 + 4 * str.t.length); }
    	o.write_shift(1, 1);
    	write_XLWideString(str.t, o);
    	o.write_shift(4, 1);
    	write_StrRun({ ich: 0, ifnt: 0 }, o);
    	return _null ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.5.9 */
    function parse_XLSBCell(data)/*:any*/ {
    	var col = data.read_shift(4);
    	var iStyleRef = data.read_shift(2);
    	iStyleRef += data.read_shift(1) << 16;
    	data.l++; //var fPhShow = data.read_shift(1);
    	return { c: col, iStyleRef: iStyleRef };
    }
    function write_XLSBCell(cell/*:any*/, o/*:?Block*/) {
    	if (o == null) o = new_buf(8);
    	o.write_shift(-4, cell.c);
    	o.write_shift(3, cell.iStyleRef || cell.s);
    	o.write_shift(1, 0); /* fPhShow */
    	return o;
    }

    /* Short XLSB Cell does not include column */
    function parse_XLSBShortCell(data)/*:any*/ {
    	var iStyleRef = data.read_shift(2);
    	iStyleRef += data.read_shift(1) <<16;
    	data.l++; //var fPhShow = data.read_shift(1);
    	return { c:-1, iStyleRef: iStyleRef };
    }
    function write_XLSBShortCell(cell/*:any*/, o/*:?Block*/) {
    	if(o == null) o = new_buf(4);
    	o.write_shift(3, cell.iStyleRef || cell.s);
    	o.write_shift(1, 0); /* fPhShow */
    	return o;
    }

    /* [MS-XLSB] 2.5.21 */
    var parse_XLSBCodeName = parse_XLWideString;
    var write_XLSBCodeName = write_XLWideString;

    /* [MS-XLSB] 2.5.166 */
    function parse_XLNullableWideString(data/*::, length*/)/*:string*/ {
    	var cchCharacters = data.read_shift(4);
    	return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? "" : data.read_shift(cchCharacters, 'dbcs');
    }
    function write_XLNullableWideString(data/*:string*/, o) {
    	var _null = false; if (o == null) { _null = true; o = new_buf(127); }
    	o.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);
    	if (data.length > 0) o.write_shift(0, data, 'dbcs');
    	return _null ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.5.165 */
    var parse_XLNameWideString = parse_XLWideString;
    //var write_XLNameWideString = write_XLWideString;

    /* [MS-XLSB] 2.5.114 */
    var parse_RelID = parse_XLNullableWideString;
    var write_RelID = write_XLNullableWideString;


    /* [MS-XLS] 2.5.217 ; [MS-XLSB] 2.5.122 */
    function parse_RkNumber(data)/*:number*/ {
    	var b = data.slice(data.l, data.l + 4);
    	var fX100 = (b[0] & 1), fInt = (b[0] & 2);
    	data.l += 4;
    	var RK = fInt === 0 ? __double([0, 0, 0, 0, (b[0] & 0xFC), b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;
    	return fX100 ? (RK / 100) : RK;
    }
    function write_RkNumber(data/*:number*/, o) {
    	if (o == null) o = new_buf(4);
    	var fX100 = 0, fInt = 0, d100 = data * 100;
    	if ((data == (data | 0)) && (data >= -(1 << 29)) && (data < (1 << 29))) { fInt = 1; }
    	else if ((d100 == (d100 | 0)) && (d100 >= -(1 << 29)) && (d100 < (1 << 29))) { fInt = 1; fX100 = 1; }
    	if (fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));
    	else throw new Error("unsupported RkNumber " + data); // TODO
    }


    /* [MS-XLSB] 2.5.117 RfX */
    function parse_RfX(data /*::, length*/)/*:Range*/ {
    	var cell/*:Range*/ = ({ s: {}, e: {} }/*:any*/);
    	cell.s.r = data.read_shift(4);
    	cell.e.r = data.read_shift(4);
    	cell.s.c = data.read_shift(4);
    	cell.e.c = data.read_shift(4);
    	return cell;
    }
    function write_RfX(r/*:Range*/, o) {
    	if (!o) o = new_buf(16);
    	o.write_shift(4, r.s.r);
    	o.write_shift(4, r.e.r);
    	o.write_shift(4, r.s.c);
    	o.write_shift(4, r.e.c);
    	return o;
    }

    /* [MS-XLSB] 2.5.153 UncheckedRfX */
    var parse_UncheckedRfX = parse_RfX;
    var write_UncheckedRfX = write_RfX;

    /* [MS-XLSB] 2.5.155 UncheckedSqRfX */
    //function parse_UncheckedSqRfX(data) {
    //	var cnt = data.read_shift(4);
    //	var out = [];
    //	for(var i = 0; i < cnt; ++i) {
    //		var rng = parse_UncheckedRfX(data);
    //		out.push(encode_range(rng));
    //	}
    //	return out.join(",");
    //}
    //function write_UncheckedSqRfX(sqrfx/*:string*/) {
    //	var parts = sqrfx.split(/\s*,\s*/);
    //	var o = new_buf(4); o.write_shift(4, parts.length);
    //	var out = [o];
    //	parts.forEach(function(rng) {
    //		out.push(write_UncheckedRfX(safe_decode_range(rng)));
    //	});
    //	return bconcat(out);
    //}

    /* [MS-XLS] 2.5.342 ; [MS-XLSB] 2.5.171 */
    /* TODO: error checking, NaN and Infinity values are not valid Xnum */
    function parse_Xnum(data/*::, length*/) {
    	if(data.length - data.l < 8) throw "XLS Xnum Buffer underflow";
    	return data.read_shift(8, 'f');
    }
    function write_Xnum(data, o) { return (o || new_buf(8)).write_shift(8, data, 'f'); }

    /* [MS-XLSB] 2.4.324 BrtColor */
    function parse_BrtColor(data/*::, length*/) {
    	var out = {};
    	var d = data.read_shift(1);

    	//var fValidRGB = d & 1;
    	var xColorType = d >>> 1;

    	var index = data.read_shift(1);
    	var nTS = data.read_shift(2, 'i');
    	var bR = data.read_shift(1);
    	var bG = data.read_shift(1);
    	var bB = data.read_shift(1);
    	data.l++; //var bAlpha = data.read_shift(1);

    	switch (xColorType) {
    		case 0: out.auto = 1; break;
    		case 1:
    			out.index = index;
    			var icv = XLSIcv[index];
    			/* automatic pseudo index 81 */
    			if (icv) out.rgb = rgb2Hex(icv);
    			break;
    		case 2:
    			/* if(!fValidRGB) throw new Error("invalid"); */
    			out.rgb = rgb2Hex([bR, bG, bB]);
    			break;
    		case 3: out.theme = index; break;
    	}
    	if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;

    	return out;
    }
    function write_BrtColor(color, o) {
    	if (!o) o = new_buf(8);
    	if (!color || color.auto) { o.write_shift(4, 0); o.write_shift(4, 0); return o; }
    	if (color.index != null) {
    		o.write_shift(1, 0x02);
    		o.write_shift(1, color.index);
    	} else if (color.theme != null) {
    		o.write_shift(1, 0x06);
    		o.write_shift(1, color.theme);
    	} else {
    		o.write_shift(1, 0x05);
    		o.write_shift(1, 0);
    	}
    	var nTS = color.tint || 0;
    	if (nTS > 0) nTS *= 32767;
    	else if (nTS < 0) nTS *= 32768;
    	o.write_shift(2, nTS);
    	if (!color.rgb || color.theme != null) {
    		o.write_shift(2, 0);
    		o.write_shift(1, 0);
    		o.write_shift(1, 0);
    	} else {
    		var rgb = (color.rgb || 'FFFFFF');
    		if (typeof rgb == 'number') rgb = ("000000" + rgb.toString(16)).slice(-6);
    		o.write_shift(1, parseInt(rgb.slice(0, 2), 16));
    		o.write_shift(1, parseInt(rgb.slice(2, 4), 16));
    		o.write_shift(1, parseInt(rgb.slice(4, 6), 16));
    		o.write_shift(1, 0xFF);
    	}
    	return o;
    }

    /* [MS-XLSB] 2.5.52 */
    function parse_FontFlags(data/*::, length, opts*/) {
    	var d = data.read_shift(1);
    	data.l++;
    	var out = {
    		fBold: d & 0x01,
    		fItalic: d & 0x02,
    		fUnderline: d & 0x04,
    		fStrikeout: d & 0x08,
    		fOutline: d & 0x10,
    		fShadow: d & 0x20,
    		fCondense: d & 0x40,
    		fExtend: d & 0x80
    	};
    	return out;
    }
    function write_FontFlags(font, o) {
    	if (!o) o = new_buf(2);
    	var grbit =
    		(font.italic ? 0x02 : 0) |
    		(font.strike ? 0x08 : 0) |
    		(font.outline ? 0x10 : 0) |
    		(font.shadow ? 0x20 : 0) |
    		(font.condense ? 0x40 : 0) |
    		(font.extend ? 0x80 : 0);
    	o.write_shift(1, grbit);
    	o.write_shift(1, 0);
    	return o;
    }

    /* [MS-OLEDS] 2.3.1 and 2.3.2 */
    function parse_ClipboardFormatOrString(o, w/*:number*/)/*:string*/ {
    	// $FlowIgnore
    	var ClipFmt = { 2: "BITMAP", 3: "METAFILEPICT", 8: "DIB", 14: "ENHMETAFILE" };
    	var m/*:number*/ = o.read_shift(4);
    	switch (m) {
    		case 0x00000000: return "";
    		case 0xffffffff: case 0xfffffffe: return ClipFmt[o.read_shift(4)] || "";
    	}
    	if (m > 0x190) throw new Error("Unsupported Clipboard: " + m.toString(16));
    	o.l -= 4;
    	return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
    }
    function parse_ClipboardFormatOrAnsiString(o) { return parse_ClipboardFormatOrString(o, 1); }
    function parse_ClipboardFormatOrUnicodeString(o) { return parse_ClipboardFormatOrString(o, 2); }

    /* [MS-OLEPS] 2.2 PropertyType */
    // Note: some tree shakers cannot handle VT_VECTOR | $CONST, hence extra vars
    //var VT_EMPTY    = 0x0000;
    //var VT_NULL     = 0x0001;
    var VT_I2       = 0x0002;
    var VT_I4       = 0x0003;
    //var VT_R4       = 0x0004;
    //var VT_R8       = 0x0005;
    //var VT_CY       = 0x0006;
    //var VT_DATE     = 0x0007;
    //var VT_BSTR     = 0x0008;
    //var VT_ERROR    = 0x000A;
    var VT_BOOL     = 0x000B;
    var VT_VARIANT  = 0x000C;
    //var VT_DECIMAL  = 0x000E;
    //var VT_I1       = 0x0010;
    //var VT_UI1      = 0x0011;
    //var VT_UI2      = 0x0012;
    var VT_UI4      = 0x0013;
    //var VT_LPWSTR   = 0x001F;
    var VT_FILETIME = 0x0040;
    var VT_BLOB     = 0x0041;
    //var VT_STREAM   = 0x0042;
    //var VT_STORAGE  = 0x0043;
    //var VT_STREAMED_Object  = 0x0044;
    //var VT_STORED_Object    = 0x0045;
    //var VT_BLOB_Object      = 0x0046;
    var VT_CF       = 0x0047;
    var VT_VECTOR_VARIANT = 0x100C;
    var VT_VECTOR_LPSTR   = 0x101E;
    //var VT_ARRAY    = 0x2000;

    var VT_STRING   = 0x0050; // 2.3.3.1.11 VtString
    var VT_USTR     = 0x0051; // 2.3.3.1.12 VtUnalignedString
    var VT_CUSTOM   = [VT_STRING, VT_USTR];

    /* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */
    var DocSummaryPIDDSI = {
    	/*::[*/0x01/*::]*/: { n: 'CodePage', t: VT_I2 },
    	/*::[*/0x02/*::]*/: { n: 'Category', t: VT_STRING },
    	/*::[*/0x03/*::]*/: { n: 'PresentationFormat', t: VT_STRING },
    	/*::[*/0x04/*::]*/: { n: 'ByteCount', t: VT_I4 },
    	/*::[*/0x05/*::]*/: { n: 'LineCount', t: VT_I4 },
    	/*::[*/0x06/*::]*/: { n: 'ParagraphCount', t: VT_I4 },
    	/*::[*/0x07/*::]*/: { n: 'SlideCount', t: VT_I4 },
    	/*::[*/0x08/*::]*/: { n: 'NoteCount', t: VT_I4 },
    	/*::[*/0x09/*::]*/: { n: 'HiddenCount', t: VT_I4 },
    	/*::[*/0x0a/*::]*/: { n: 'MultimediaClipCount', t: VT_I4 },
    	/*::[*/0x0b/*::]*/: { n: 'ScaleCrop', t: VT_BOOL },
    	/*::[*/0x0c/*::]*/: { n: 'HeadingPairs', t: VT_VECTOR_VARIANT /* VT_VECTOR | VT_VARIANT */ },
    	/*::[*/0x0d/*::]*/: { n: 'TitlesOfParts', t: VT_VECTOR_LPSTR /* VT_VECTOR | VT_LPSTR */ },
    	/*::[*/0x0e/*::]*/: { n: 'Manager', t: VT_STRING },
    	/*::[*/0x0f/*::]*/: { n: 'Company', t: VT_STRING },
    	/*::[*/0x10/*::]*/: { n: 'LinksUpToDate', t: VT_BOOL },
    	/*::[*/0x11/*::]*/: { n: 'CharacterCount', t: VT_I4 },
    	/*::[*/0x13/*::]*/: { n: 'SharedDoc', t: VT_BOOL },
    	/*::[*/0x16/*::]*/: { n: 'HyperlinksChanged', t: VT_BOOL },
    	/*::[*/0x17/*::]*/: { n: 'AppVersion', t: VT_I4, p: 'version' },
    	/*::[*/0x18/*::]*/: { n: 'DigSig', t: VT_BLOB },
    	/*::[*/0x1A/*::]*/: { n: 'ContentType', t: VT_STRING },
    	/*::[*/0x1B/*::]*/: { n: 'ContentStatus', t: VT_STRING },
    	/*::[*/0x1C/*::]*/: { n: 'Language', t: VT_STRING },
    	/*::[*/0x1D/*::]*/: { n: 'Version', t: VT_STRING },
    	/*::[*/0xFF/*::]*/: {},
    	/* [MS-OLEPS] 2.18 */
    	/*::[*/0x80000000/*::]*/: { n: 'Locale', t: VT_UI4 },
    	/*::[*/0x80000003/*::]*/: { n: 'Behavior', t: VT_UI4 },
    	/*::[*/0x72627262/*::]*/: {}
    };

    /* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */
    var SummaryPIDSI = {
    	/*::[*/0x01/*::]*/: { n: 'CodePage', t: VT_I2 },
    	/*::[*/0x02/*::]*/: { n: 'Title', t: VT_STRING },
    	/*::[*/0x03/*::]*/: { n: 'Subject', t: VT_STRING },
    	/*::[*/0x04/*::]*/: { n: 'Author', t: VT_STRING },
    	/*::[*/0x05/*::]*/: { n: 'Keywords', t: VT_STRING },
    	/*::[*/0x06/*::]*/: { n: 'Comments', t: VT_STRING },
    	/*::[*/0x07/*::]*/: { n: 'Template', t: VT_STRING },
    	/*::[*/0x08/*::]*/: { n: 'LastAuthor', t: VT_STRING },
    	/*::[*/0x09/*::]*/: { n: 'RevNumber', t: VT_STRING },
    	/*::[*/0x0A/*::]*/: { n: 'EditTime', t: VT_FILETIME },
    	/*::[*/0x0B/*::]*/: { n: 'LastPrinted', t: VT_FILETIME },
    	/*::[*/0x0C/*::]*/: { n: 'CreatedDate', t: VT_FILETIME },
    	/*::[*/0x0D/*::]*/: { n: 'ModifiedDate', t: VT_FILETIME },
    	/*::[*/0x0E/*::]*/: { n: 'PageCount', t: VT_I4 },
    	/*::[*/0x0F/*::]*/: { n: 'WordCount', t: VT_I4 },
    	/*::[*/0x10/*::]*/: { n: 'CharCount', t: VT_I4 },
    	/*::[*/0x11/*::]*/: { n: 'Thumbnail', t: VT_CF },
    	/*::[*/0x12/*::]*/: { n: 'Application', t: VT_STRING },
    	/*::[*/0x13/*::]*/: { n: 'DocSecurity', t: VT_I4 },
    	/*::[*/0xFF/*::]*/: {},
    	/* [MS-OLEPS] 2.18 */
    	/*::[*/0x80000000/*::]*/: { n: 'Locale', t: VT_UI4 },
    	/*::[*/0x80000003/*::]*/: { n: 'Behavior', t: VT_UI4 },
    	/*::[*/0x72627262/*::]*/: {}
    };

    /* [MS-XLS] 2.4.63 Country/Region codes */
    var CountryEnum = {
    	/*::[*/0x0001/*::]*/: "US", // United States
    	/*::[*/0x0002/*::]*/: "CA", // Canada
    	/*::[*/0x0003/*::]*/: "", // Latin America (except Brazil)
    	/*::[*/0x0007/*::]*/: "RU", // Russia
    	/*::[*/0x0014/*::]*/: "EG", // Egypt
    	/*::[*/0x001E/*::]*/: "GR", // Greece
    	/*::[*/0x001F/*::]*/: "NL", // Netherlands
    	/*::[*/0x0020/*::]*/: "BE", // Belgium
    	/*::[*/0x0021/*::]*/: "FR", // France
    	/*::[*/0x0022/*::]*/: "ES", // Spain
    	/*::[*/0x0024/*::]*/: "HU", // Hungary
    	/*::[*/0x0027/*::]*/: "IT", // Italy
    	/*::[*/0x0029/*::]*/: "CH", // Switzerland
    	/*::[*/0x002B/*::]*/: "AT", // Austria
    	/*::[*/0x002C/*::]*/: "GB", // United Kingdom
    	/*::[*/0x002D/*::]*/: "DK", // Denmark
    	/*::[*/0x002E/*::]*/: "SE", // Sweden
    	/*::[*/0x002F/*::]*/: "NO", // Norway
    	/*::[*/0x0030/*::]*/: "PL", // Poland
    	/*::[*/0x0031/*::]*/: "DE", // Germany
    	/*::[*/0x0034/*::]*/: "MX", // Mexico
    	/*::[*/0x0037/*::]*/: "BR", // Brazil
    	/*::[*/0x003d/*::]*/: "AU", // Australia
    	/*::[*/0x0040/*::]*/: "NZ", // New Zealand
    	/*::[*/0x0042/*::]*/: "TH", // Thailand
    	/*::[*/0x0051/*::]*/: "JP", // Japan
    	/*::[*/0x0052/*::]*/: "KR", // Korea
    	/*::[*/0x0054/*::]*/: "VN", // Viet Nam
    	/*::[*/0x0056/*::]*/: "CN", // China
    	/*::[*/0x005A/*::]*/: "TR", // Turkey
    	/*::[*/0x0069/*::]*/: "JS", // Ramastan
    	/*::[*/0x00D5/*::]*/: "DZ", // Algeria
    	/*::[*/0x00D8/*::]*/: "MA", // Morocco
    	/*::[*/0x00DA/*::]*/: "LY", // Libya
    	/*::[*/0x015F/*::]*/: "PT", // Portugal
    	/*::[*/0x0162/*::]*/: "IS", // Iceland
    	/*::[*/0x0166/*::]*/: "FI", // Finland
    	/*::[*/0x01A4/*::]*/: "CZ", // Czech Republic
    	/*::[*/0x0376/*::]*/: "TW", // Taiwan
    	/*::[*/0x03C1/*::]*/: "LB", // Lebanon
    	/*::[*/0x03C2/*::]*/: "JO", // Jordan
    	/*::[*/0x03C3/*::]*/: "SY", // Syria
    	/*::[*/0x03C4/*::]*/: "IQ", // Iraq
    	/*::[*/0x03C5/*::]*/: "KW", // Kuwait
    	/*::[*/0x03C6/*::]*/: "SA", // Saudi Arabia
    	/*::[*/0x03CB/*::]*/: "AE", // United Arab Emirates
    	/*::[*/0x03CC/*::]*/: "IL", // Israel
    	/*::[*/0x03CE/*::]*/: "QA", // Qatar
    	/*::[*/0x03D5/*::]*/: "IR", // Iran
    	/*::[*/0xFFFF/*::]*/: "US"  // United States
    };

    /* [MS-XLS] 2.5.127 */
    var XLSFillPattern = [
    	null,
    	'solid',
    	'mediumGray',
    	'darkGray',
    	'lightGray',
    	'darkHorizontal',
    	'darkVertical',
    	'darkDown',
    	'darkUp',
    	'darkGrid',
    	'darkTrellis',
    	'lightHorizontal',
    	'lightVertical',
    	'lightDown',
    	'lightUp',
    	'lightGrid',
    	'lightTrellis',
    	'gray125',
    	'gray0625'
    ];

    function rgbify(arr/*:Array<number>*/)/*:Array<[number, number, number]>*/ { return arr.map(function(x) { return [(x>>16)&255,(x>>8)&255,x&255]; }); }

    /* [MS-XLS] 2.5.161 */
    /* [MS-XLSB] 2.5.75 Icv */
    var _XLSIcv = /*#__PURE__*/ rgbify([
    	/* Color Constants */
    	0x000000,
    	0xFFFFFF,
    	0xFF0000,
    	0x00FF00,
    	0x0000FF,
    	0xFFFF00,
    	0xFF00FF,
    	0x00FFFF,

    	/* Overridable Defaults */
    	0x000000,
    	0xFFFFFF,
    	0xFF0000,
    	0x00FF00,
    	0x0000FF,
    	0xFFFF00,
    	0xFF00FF,
    	0x00FFFF,

    	0x800000,
    	0x008000,
    	0x000080,
    	0x808000,
    	0x800080,
    	0x008080,
    	0xC0C0C0,
    	0x808080,
    	0x9999FF,
    	0x993366,
    	0xFFFFCC,
    	0xCCFFFF,
    	0x660066,
    	0xFF8080,
    	0x0066CC,
    	0xCCCCFF,

    	0x000080,
    	0xFF00FF,
    	0xFFFF00,
    	0x00FFFF,
    	0x800080,
    	0x800000,
    	0x008080,
    	0x0000FF,
    	0x00CCFF,
    	0xCCFFFF,
    	0xCCFFCC,
    	0xFFFF99,
    	0x99CCFF,
    	0xFF99CC,
    	0xCC99FF,
    	0xFFCC99,

    	0x3366FF,
    	0x33CCCC,
    	0x99CC00,
    	0xFFCC00,
    	0xFF9900,
    	0xFF6600,
    	0x666699,
    	0x969696,
    	0x003366,
    	0x339966,
    	0x003300,
    	0x333300,
    	0x993300,
    	0x993366,
    	0x333399,
    	0x333333,

    	/* Other entries to appease BIFF8/12 */
    	0xFFFFFF, /* 0x40 icvForeground ?? */
    	0x000000, /* 0x41 icvBackground ?? */
    	0x000000, /* 0x42 icvFrame ?? */
    	0x000000, /* 0x43 icv3D ?? */
    	0x000000, /* 0x44 icv3DText ?? */
    	0x000000, /* 0x45 icv3DHilite ?? */
    	0x000000, /* 0x46 icv3DShadow ?? */
    	0x000000, /* 0x47 icvHilite ?? */
    	0x000000, /* 0x48 icvCtlText ?? */
    	0x000000, /* 0x49 icvCtlScrl ?? */
    	0x000000, /* 0x4A icvCtlInv ?? */
    	0x000000, /* 0x4B icvCtlBody ?? */
    	0x000000, /* 0x4C icvCtlFrame ?? */
    	0x000000, /* 0x4D icvCtlFore ?? */
    	0x000000, /* 0x4E icvCtlBack ?? */
    	0x000000, /* 0x4F icvCtlNeutral */
    	0x000000, /* 0x50 icvInfoBk ?? */
    	0x000000 /* 0x51 icvInfoText ?? */
    ]);
    var XLSIcv = /*#__PURE__*/dup(_XLSIcv);

    /* [MS-XLSB] 2.5.97.2 */
    var BErr = {
    	/*::[*/0x00/*::]*/: "#NULL!",
    	/*::[*/0x07/*::]*/: "#DIV/0!",
    	/*::[*/0x0F/*::]*/: "#VALUE!",
    	/*::[*/0x17/*::]*/: "#REF!",
    	/*::[*/0x1D/*::]*/: "#NAME?",
    	/*::[*/0x24/*::]*/: "#NUM!",
    	/*::[*/0x2A/*::]*/: "#N/A",
    	/*::[*/0x2B/*::]*/: "#GETTING_DATA",
    	/*::[*/0xFF/*::]*/: "#WTF?"
    };
    //var RBErr = evert_num(BErr);
    var RBErr = {
    	"#NULL!":        0x00,
    	"#DIV/0!":       0x07,
    	"#VALUE!":       0x0F,
    	"#REF!":         0x17,
    	"#NAME?":        0x1D,
    	"#NUM!":         0x24,
    	"#N/A":          0x2A,
    	"#GETTING_DATA": 0x2B,
    	"#WTF?":         0xFF
    };

    /* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */
    /* 12.3 Part Summary <SpreadsheetML> */
    /* 14.2 Part Summary <DrawingML> */
    /* [MS-XLSX] 2.1 Part Enumerations ; [MS-XLSB] 2.1.7 Part Enumeration */
    var ct2type/*{[string]:string}*/ = ({
    	/* Workbook */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
    	"application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
    	"application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
    	"application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",

    	/* Worksheet */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
    	"application/vnd.ms-excel.worksheet": "sheets",
    	"application/vnd.ms-excel.binIndexWs": "TODO", /* Binary Index */

    	/* Chartsheet */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
    	"application/vnd.ms-excel.chartsheet": "charts",

    	/* Macrosheet */
    	"application/vnd.ms-excel.macrosheet+xml": "macros",
    	"application/vnd.ms-excel.macrosheet": "macros",
    	"application/vnd.ms-excel.intlmacrosheet": "TODO",
    	"application/vnd.ms-excel.binIndexMs": "TODO", /* Binary Index */

    	/* Dialogsheet */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
    	"application/vnd.ms-excel.dialogsheet": "dialogs",

    	/* Shared Strings */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
    	"application/vnd.ms-excel.sharedStrings": "strs",

    	/* Styles */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
    	"application/vnd.ms-excel.styles": "styles",

    	/* File Properties */
    	"application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
    	"application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
    	"application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",

    	/* Custom Data Properties */
    	"application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",

    	/* Comments */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
    	"application/vnd.ms-excel.comments": "comments",
    	"application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
    	"application/vnd.ms-excel.person+xml": "people",

    	/* Metadata (Stock/Geography and Dynamic Array) */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
    	"application/vnd.ms-excel.sheetMetadata": "metadata",

    	/* PivotTable */
    	"application/vnd.ms-excel.pivotTable": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",

    	/* Chart Objects */
    	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",

    	/* Chart Colors */
    	"application/vnd.ms-office.chartcolorstyle+xml": "TODO",

    	/* Chart Style */
    	"application/vnd.ms-office.chartstyle+xml": "TODO",

    	/* Chart Advanced */
    	"application/vnd.ms-office.chartex+xml": "TODO",

    	/* Calculation Chain */
    	"application/vnd.ms-excel.calcChain": "calcchains",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",

    	/* Printer Settings */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",

    	/* ActiveX */
    	"application/vnd.ms-office.activeX": "TODO",
    	"application/vnd.ms-office.activeX+xml": "TODO",

    	/* Custom Toolbars */
    	"application/vnd.ms-excel.attachedToolbars": "TODO",

    	/* External Data Connections */
    	"application/vnd.ms-excel.connections": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",

    	/* External Links */
    	"application/vnd.ms-excel.externalLink": "links",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",

    	/* PivotCache */
    	"application/vnd.ms-excel.pivotCacheDefinition": "TODO",
    	"application/vnd.ms-excel.pivotCacheRecords": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",

    	/* Query Table */
    	"application/vnd.ms-excel.queryTable": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",

    	/* Shared Workbook */
    	"application/vnd.ms-excel.userNames": "TODO",
    	"application/vnd.ms-excel.revisionHeaders": "TODO",
    	"application/vnd.ms-excel.revisionLog": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",

    	/* Single Cell Table */
    	"application/vnd.ms-excel.tableSingleCells": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",

    	/* Slicer */
    	"application/vnd.ms-excel.slicer": "TODO",
    	"application/vnd.ms-excel.slicerCache": "TODO",
    	"application/vnd.ms-excel.slicer+xml": "TODO",
    	"application/vnd.ms-excel.slicerCache+xml": "TODO",

    	/* Sort Map */
    	"application/vnd.ms-excel.wsSortMap": "TODO",

    	/* Table */
    	"application/vnd.ms-excel.table": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",

    	/* Themes */
    	"application/vnd.openxmlformats-officedocument.theme+xml": "themes",

    	/* Theme Override */
    	"application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",

    	/* Timeline */
    	"application/vnd.ms-excel.Timeline+xml": "TODO", /* verify */
    	"application/vnd.ms-excel.TimelineCache+xml": "TODO", /* verify */

    	/* VBA */
    	"application/vnd.ms-office.vbaProject": "vba",
    	"application/vnd.ms-office.vbaProjectSignature": "TODO",

    	/* Volatile Dependencies */
    	"application/vnd.ms-office.volatileDependencies": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",

    	/* Control Properties */
    	"application/vnd.ms-excel.controlproperties+xml": "TODO",

    	/* Data Model */
    	"application/vnd.openxmlformats-officedocument.model+data": "TODO",

    	/* Survey */
    	"application/vnd.ms-excel.Survey+xml": "TODO",

    	/* Drawing */
    	"application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
    	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",

    	/* VML */
    	"application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",

    	"application/vnd.openxmlformats-package.relationships+xml": "rels",
    	"application/vnd.openxmlformats-officedocument.oleObject": "TODO",

    	/* Image */
    	"image/png": "TODO",

    	"sheet": "js"
    }/*:any*/);

    var CT_LIST = {
    		workbooks: {
    			xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
    			xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
    			xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
    			xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
    			xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
    		},
    		strs: { /* Shared Strings */
    			xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
    			xlsb: "application/vnd.ms-excel.sharedStrings"
    		},
    		comments: { /* Comments */
    			xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
    			xlsb: "application/vnd.ms-excel.comments"
    		},
    		sheets: { /* Worksheet */
    			xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
    			xlsb: "application/vnd.ms-excel.worksheet"
    		},
    		charts: { /* Chartsheet */
    			xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
    			xlsb: "application/vnd.ms-excel.chartsheet"
    		},
    		dialogs: { /* Dialogsheet */
    			xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
    			xlsb: "application/vnd.ms-excel.dialogsheet"
    		},
    		macros: { /* Macrosheet (Excel 4.0 Macros) */
    			xlsx: "application/vnd.ms-excel.macrosheet+xml",
    			xlsb: "application/vnd.ms-excel.macrosheet"
    		},
    		metadata: { /* Metadata (Stock/Geography and Dynamic Array) */
    			xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml",
    			xlsb: "application/vnd.ms-excel.sheetMetadata"
    		},
    		styles: { /* Styles */
    			xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
    			xlsb: "application/vnd.ms-excel.styles"
    		}
    };

    function new_ct()/*:any*/ {
    	return ({
    		workbooks:[], sheets:[], charts:[], dialogs:[], macros:[],
    		rels:[], strs:[], comments:[], threadedcomments:[], links:[],
    		coreprops:[], extprops:[], custprops:[], themes:[], styles:[],
    		calcchains:[], vba: [], drawings: [], metadata: [], people:[],
    		TODO:[], xmlns: "" }/*:any*/);
    }

    function parse_ct(data/*:?string*/) {
    	var ct = new_ct();
    	if(!data || !data.match) return ct;
    	var ctext = {};
    	(data.match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(y[0].replace(nsregex,"<")) {
    			case '<?xml': break;
    			case '<Types': ct.xmlns = y['xmlns' + (y[0].match(/<(\w+):/)||["",""])[1] ]; break;
    			case '<Default': ctext[y.Extension] = y.ContentType; break;
    			case '<Override':
    				if(ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);
    				break;
    		}
    	});
    	if(ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
    	ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
    	ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
    	ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
    	ct.defaults = ctext;
    	delete ct.calcchains;
    	return ct;
    }

    function write_ct(ct, opts)/*:string*/ {
    	var type2ct/*{[string]:Array<string>}*/ = evert_arr(ct2type);

    	var o/*:Array<string>*/ = [], v;
    	o[o.length] = (XML_HEADER);
    	o[o.length] = writextag('Types', null, {
    		'xmlns': XMLNS.CT,
    		'xmlns:xsd': XMLNS.xsd,
    		'xmlns:xsi': XMLNS.xsi
    	});

    	o = o.concat([
    		['xml', 'application/xml'],
    		['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'],
    		['vml', 'application/vnd.openxmlformats-officedocument.vmlDrawing'],
    		['data', 'application/vnd.openxmlformats-officedocument.model+data'],
    		/* from test files */
    		['bmp', 'image/bmp'],
    		['png', 'image/png'],
    		['gif', 'image/gif'],
    		['emf', 'image/x-emf'],
    		['wmf', 'image/x-wmf'],
    		['jpg', 'image/jpeg'], ['jpeg', 'image/jpeg'],
    		['tif', 'image/tiff'], ['tiff', 'image/tiff'],
    		['pdf', 'application/pdf'],
    		['rels', 'application/vnd.openxmlformats-package.relationships+xml']
    	].map(function(x) {
    		return writextag('Default', null, {'Extension':x[0], 'ContentType': x[1]});
    	}));

    	/* only write first instance */
    	var f1 = function(w) {
    		if(ct[w] && ct[w].length > 0) {
    			v = ct[w][0];
    			o[o.length] = (writextag('Override', null, {
    				'PartName': (v[0] == '/' ? "":"/") + v,
    				'ContentType': CT_LIST[w][opts.bookType] || CT_LIST[w]['xlsx']
    			}));
    		}
    	};

    	/* book type-specific */
    	var f2 = function(w) {
    		(ct[w]||[]).forEach(function(v) {
    			o[o.length] = (writextag('Override', null, {
    				'PartName': (v[0] == '/' ? "":"/") + v,
    				'ContentType': CT_LIST[w][opts.bookType] || CT_LIST[w]['xlsx']
    			}));
    		});
    	};

    	/* standard type */
    	var f3 = function(t) {
    		(ct[t]||[]).forEach(function(v) {
    			o[o.length] = (writextag('Override', null, {
    				'PartName': (v[0] == '/' ? "":"/") + v,
    				'ContentType': type2ct[t][0]
    			}));
    		});
    	};

    	f1('workbooks');
    	f2('sheets');
    	f2('charts');
    	f3('themes');
    	['strs', 'styles'].forEach(f1);
    	['coreprops', 'extprops', 'custprops'].forEach(f3);
    	f3('vba');
    	f3('comments');
    	f3('threadedcomments');
    	f3('drawings');
    	f2('metadata');
    	f3('people');
    	if(o.length>2){ o[o.length] = ('</Types>'); o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }
    /* 9.3 Relationships */
    var RELS = ({
    	WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    	SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    	HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
    	VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
    	XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
    	XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
    	XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
    	CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
    	CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
    	CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
    	CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
    	EXT_PROPS: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties',
    	CUST_PROPS: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties',
    	SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
    	STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
    	THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
    	CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
    	CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
    	CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
    	WS: [
    		"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
    		"http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
    	],
    	DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
    	MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
    	IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
    	DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
    	XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
    	TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
    	PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
    	VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
    }/*:any*/);


    /* 9.3.3 Representing Relationships */
    function get_rels_path(file/*:string*/)/*:string*/ {
    	var n = file.lastIndexOf("/");
    	return file.slice(0,n+1) + '_rels/' + file.slice(n+1) + ".rels";
    }

    function parse_rels(data/*:?string*/, currentFilePath/*:string*/) {
    	var rels = {"!id":{}};
    	if (!data) return rels;
    	if (currentFilePath.charAt(0) !== '/') {
    		currentFilePath = '/'+currentFilePath;
    	}
    	var hash = {};

    	(data.match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		/* 9.3.2.2 OPC_Relationships */
    		if (y[0] === '<Relationship') {
    			var rel = {}; rel.Type = y.Type; rel.Target = y.Target; rel.Id = y.Id; if(y.TargetMode) rel.TargetMode = y.TargetMode;
    			var canonictarget = y.TargetMode === 'External' ? y.Target : resolve_path(y.Target, currentFilePath);
    			rels[canonictarget] = rel;
    			hash[y.Id] = rel;
    		}
    	});
    	rels["!id"] = hash;
    	return rels;
    }


    /* TODO */
    function write_rels(rels)/*:string*/ {
    	var o = [XML_HEADER, writextag('Relationships', null, {
    		//'xmlns:ns0': XMLNS.RELS,
    		'xmlns': XMLNS.RELS
    	})];
    	keys(rels['!id']).forEach(function(rid) {
    		o[o.length] = (writextag('Relationship', null, rels['!id'][rid]));
    	});
    	if(o.length>2){ o[o.length] = ('</Relationships>'); o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }

    function add_rels(rels, rId/*:number*/, f, type, relobj, targetmode/*:?string*/)/*:number*/ {
    	if(!relobj) relobj = {};
    	if(!rels['!id']) rels['!id'] = {};
    	if(!rels['!idx']) rels['!idx'] = 1;
    	if(rId < 0) for(rId = rels['!idx']; rels['!id']['rId' + rId]; ++rId){/* empty */}
    	rels['!idx'] = rId + 1;
    	relobj.Id = 'rId' + rId;
    	relobj.Type = type;
    	relobj.Target = f;
    	if(targetmode) relobj.TargetMode = targetmode;
    	else if([RELS.HLINK, RELS.XPATH, RELS.XMISS].indexOf(relobj.Type) > -1) relobj.TargetMode = "External";
    	if(rels['!id'][relobj.Id]) throw new Error("Cannot rewrite rId " + rId);
    	rels['!id'][relobj.Id] = relobj;
    	rels[('/' + relobj.Target).replace("//","/")] = relobj;
    	return rId;
    }
    /* Open Document Format for Office Applications (OpenDocument) Version 1.2 */
    /* Part 3 Section 4 Manifest File */
    var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
    function parse_manifest(d, opts) {
    	var str = xlml_normalize(d);
    	var Rn;
    	var FEtag;
    	while((Rn = xlmlregex.exec(str))) switch(Rn[3]) {
    		case 'manifest': break; // 4.2 <manifest:manifest>
    		case 'file-entry': // 4.3 <manifest:file-entry>
    			FEtag = parsexmltag(Rn[0], false);
    			if(FEtag.path == '/' && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
    			break;
    		case 'encryption-data': // 4.4 <manifest:encryption-data>
    		case 'algorithm': // 4.5 <manifest:algorithm>
    		case 'start-key-generation': // 4.6 <manifest:start-key-generation>
    		case 'key-derivation': // 4.7 <manifest:key-derivation>
    			throw new Error("Unsupported ODS Encryption");
    		default: if(opts && opts.WTF) throw Rn;
    	}
    }

    function write_manifest(manifest/*:Array<Array<string> >*/)/*:string*/ {
    	var o = [XML_HEADER];
    	o.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
    	o.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');
    	for(var i = 0; i < manifest.length; ++i) o.push('  <manifest:file-entry manifest:full-path="' + manifest[i][0] + '" manifest:media-type="' + manifest[i][1] + '"/>\n');
    	o.push('</manifest:manifest>');
    	return o.join("");
    }

    /* Part 3 Section 6 Metadata Manifest File */
    function write_rdf_type(file/*:string*/, res/*:string*/, tag/*:?string*/) {
    	return [
    		'  <rdf:Description rdf:about="' + file + '">\n',
    		'    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + '#' + res + '"/>\n',
    		'  </rdf:Description>\n'
    	].join("");
    }
    function write_rdf_has(base/*:string*/, file/*:string*/) {
    	return [
    		'  <rdf:Description rdf:about="' + base + '">\n',
    		'    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n',
    		'  </rdf:Description>\n'
    	].join("");
    }
    function write_rdf(rdf) {
    	var o = [XML_HEADER];
    	o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
    	for(var i = 0; i != rdf.length; ++i) {
    		o.push(write_rdf_type(rdf[i][0], rdf[i][1]));
    		o.push(write_rdf_has("",rdf[i][0]));
    	}
    	o.push(write_rdf_type("","Document", "pkg"));
    	o.push('</rdf:RDF>');
    	return o.join("");
    }
    /* TODO: pull properties */
    function write_meta_ods(/*:: wb: Workbook, opts: any*/)/*:string*/ {
    	return '<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>Sheet' + 'JS ' + XLSX.version + '</meta:generator></office:meta></office:document-meta>';
    }

    /* ECMA-376 Part II 11.1 Core Properties Part */
    /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
    var CORE_PROPS/*:Array<Array<string> >*/ = [
    	["cp:category", "Category"],
    	["cp:contentStatus", "ContentStatus"],
    	["cp:keywords", "Keywords"],
    	["cp:lastModifiedBy", "LastAuthor"],
    	["cp:lastPrinted", "LastPrinted"],
    	["cp:revision", "RevNumber"],
    	["cp:version", "Version"],
    	["dc:creator", "Author"],
    	["dc:description", "Comments"],
    	["dc:identifier", "Identifier"],
    	["dc:language", "Language"],
    	["dc:subject", "Subject"],
    	["dc:title", "Title"],
    	["dcterms:created", "CreatedDate", 'date'],
    	["dcterms:modified", "ModifiedDate", 'date']
    ];

    var CORE_PROPS_REGEX/*:Array<RegExp>*/ = /*#__PURE__*/(function() {
    	var r = new Array(CORE_PROPS.length);
    	for(var i = 0; i < CORE_PROPS.length; ++i) {
    		var f = CORE_PROPS[i];
    		var g = "(?:"+ f[0].slice(0,f[0].indexOf(":")) +":)"+ f[0].slice(f[0].indexOf(":")+1);
    		r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)<\/" + g + ">");
    	}
    	return r;
    })();

    function parse_core_props(data) {
    	var p = {};
    	data = utf8read(data);

    	for(var i = 0; i < CORE_PROPS.length; ++i) {
    		var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
    		if(cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);
    		if(f[2] === 'date' && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
    	}

    	return p;
    }

    function cp_doit(f, g, h, o, p) {
    	if(p[f] != null || g == null || g === "") return;
    	p[f] = g;
    	g = escapexml(g);
    	o[o.length] = (h ? writextag(f,g,h) : writetag(f,g));
    }

    function write_core_props(cp, _opts) {
    	var opts = _opts || {};
    	var o = [XML_HEADER, writextag('cp:coreProperties', null, {
    		//'xmlns': XMLNS.CORE_PROPS,
    		'xmlns:cp': XMLNS.CORE_PROPS,
    		'xmlns:dc': XMLNS.dc,
    		'xmlns:dcterms': XMLNS.dcterms,
    		'xmlns:dcmitype': XMLNS.dcmitype,
    		'xmlns:xsi': XMLNS.xsi
    	})], p = {};
    	if(!cp && !opts.Props) return o.join("");

    	if(cp) {
    		if(cp.CreatedDate != null) cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {"xsi:type":"dcterms:W3CDTF"}, o, p);
    		if(cp.ModifiedDate != null) cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {"xsi:type":"dcterms:W3CDTF"}, o, p);
    	}

    	for(var i = 0; i != CORE_PROPS.length; ++i) {
    		var f = CORE_PROPS[i];
    		var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;
    		if(v === true) v = "1";
    		else if(v === false) v = "0";
    		else if(typeof v == "number") v = String(v);
    		if(v != null) cp_doit(f[0], v, null, o, p);
    	}
    	if(o.length>2){ o[o.length] = ('</cp:coreProperties>'); o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }
    /* 15.2.12.3 Extended File Properties Part */
    /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
    var EXT_PROPS/*:Array<Array<string> >*/ = [
    	["Application", "Application", "string"],
    	["AppVersion", "AppVersion", "string"],
    	["Company", "Company", "string"],
    	["DocSecurity", "DocSecurity", "string"],
    	["Manager", "Manager", "string"],
    	["HyperlinksChanged", "HyperlinksChanged", "bool"],
    	["SharedDoc", "SharedDoc", "bool"],
    	["LinksUpToDate", "LinksUpToDate", "bool"],
    	["ScaleCrop", "ScaleCrop", "bool"],
    	["HeadingPairs", "HeadingPairs", "raw"],
    	["TitlesOfParts", "TitlesOfParts", "raw"]
    ];

    var PseudoPropsPairs = [
    	"Worksheets",  "SheetNames",
    	"NamedRanges", "DefinedNames",
    	"Chartsheets", "ChartNames"
    ];
    function load_props_pairs(HP/*:string|Array<Array<any>>*/, TOP, props, opts) {
    	var v = [];
    	if(typeof HP == "string") v = parseVector(HP, opts);
    	else for(var j = 0; j < HP.length; ++j) v = v.concat(HP[j].map(function(hp) { return {v:hp}; }));
    	var parts = (typeof TOP == "string") ? parseVector(TOP, opts).map(function (x) { return x.v; }) : TOP;
    	var idx = 0, len = 0;
    	if(parts.length > 0) for(var i = 0; i !== v.length; i += 2) {
    		len = +(v[i+1].v);
    		switch(v[i].v) {
    			case "Worksheets":
    			case "工作表":
    			case "Листы":
    			case "أوراق العمل":
    			case "ワークシート":
    			case "גליונות עבודה":
    			case "Arbeitsblätter":
    			case "Çalışma Sayfaları":
    			case "Feuilles de calcul":
    			case "Fogli di lavoro":
    			case "Folhas de cálculo":
    			case "Planilhas":
    			case "Regneark":
    			case "Hojas de cálculo":
    			case "Werkbladen":
    				props.Worksheets = len;
    				props.SheetNames = parts.slice(idx, idx + len);
    				break;

    			case "Named Ranges":
    			case "Rangos con nombre":
    			case "名前付き一覧":
    			case "Benannte Bereiche":
    			case "Navngivne områder":
    				props.NamedRanges = len;
    				props.DefinedNames = parts.slice(idx, idx + len);
    				break;

    			case "Charts":
    			case "Diagramme":
    				props.Chartsheets = len;
    				props.ChartNames = parts.slice(idx, idx + len);
    				break;
    		}
    		idx += len;
    	}
    }

    function parse_ext_props(data, p, opts) {
    	var q = {}; if(!p) p = {};
    	data = utf8read(data);

    	EXT_PROPS.forEach(function(f) {
    		var xml = (data.match(matchtag(f[0]))||[])[1];
    		switch(f[2]) {
    			case "string": if(xml) p[f[1]] = unescapexml(xml); break;
    			case "bool": p[f[1]] = xml === "true"; break;
    			case "raw":
    				var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)<\/" + f[0] + ">"));
    				if(cur && cur.length > 0) q[f[1]] = cur[1];
    				break;
    		}
    	});

    	if(q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);

    	return p;
    }

    function write_ext_props(cp/*::, opts*/)/*:string*/ {
    	var o/*:Array<string>*/ = [], W = writextag;
    	if(!cp) cp = {};
    	cp.Application = "SheetJS";
    	o[o.length] = (XML_HEADER);
    	o[o.length] = (writextag('Properties', null, {
    		'xmlns': XMLNS.EXT_PROPS,
    		'xmlns:vt': XMLNS.vt
    	}));

    	EXT_PROPS.forEach(function(f) {
    		if(cp[f[1]] === undefined) return;
    		var v;
    		switch(f[2]) {
    			case 'string': v = escapexml(String(cp[f[1]])); break;
    			case 'bool': v = cp[f[1]] ? 'true' : 'false'; break;
    		}
    		if(v !== undefined) o[o.length] = (W(f[0], v));
    	});

    	/* TODO: HeadingPairs, TitlesOfParts */
    	o[o.length] = (W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>')+W('vt:variant', W('vt:i4', String(cp.Worksheets))), {size:2, baseType:"variant"})));
    	o[o.length] = (W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function(s) { return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>"; }).join(""), {size: cp.Worksheets, baseType:"lpstr"})));
    	if(o.length>2){ o[o.length] = ('</Properties>'); o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }
    /* 15.2.12.2 Custom File Properties Part */
    var custregex = /<[^>]+>[^<]*/g;
    function parse_cust_props(data/*:string*/, opts) {
    	var p = {}, name = "";
    	var m = data.match(custregex);
    	if(m) for(var i = 0; i != m.length; ++i) {
    		var x = m[i], y = parsexmltag(x);
    		switch(y[0]) {
    			case '<?xml': break;
    			case '<Properties': break;
    			case '<property': name = unescapexml(y.name); break;
    			case '</property>': name = null; break;
    			default: if (x.indexOf('<vt:') === 0) {
    				var toks = x.split('>');
    				var type = toks[0].slice(4), text = toks[1];
    				/* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */
    				switch(type) {
    					case 'lpstr': case 'bstr': case 'lpwstr':
    						p[name] = unescapexml(text);
    						break;
    					case 'bool':
    						p[name] = parsexmlbool(text);
    						break;
    					case 'i1': case 'i2': case 'i4': case 'i8': case 'int': case 'uint':
    						p[name] = parseInt(text, 10);
    						break;
    					case 'r4': case 'r8': case 'decimal':
    						p[name] = parseFloat(text);
    						break;
    					case 'filetime': case 'date':
    						p[name] = parseDate(text);
    						break;
    					case 'cy': case 'error':
    						p[name] = unescapexml(text);
    						break;
    					default:
    						if(type.slice(-1) == '/') break;
    						if(opts.WTF && typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);
    				}
    			} else if(x.slice(0,2) === "</") ; else if(opts.WTF) throw new Error(x);
    		}
    	}
    	return p;
    }

    function write_cust_props(cp/*::, opts*/)/*:string*/ {
    	var o = [XML_HEADER, writextag('Properties', null, {
    		'xmlns': XMLNS.CUST_PROPS,
    		'xmlns:vt': XMLNS.vt
    	})];
    	if(!cp) return o.join("");
    	var pid = 1;
    	keys(cp).forEach(function custprop(k) { ++pid;
    		o[o.length] = (writextag('property', write_vt(cp[k], true), {
    			'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',
    			'pid': pid,
    			'name': escapexml(k)
    		}));
    	});
    	if(o.length>2){ o[o.length] = '</Properties>'; o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }
    /* Common Name -> XLML Name */
    var XLMLDocPropsMap = {
    	Title: 'Title',
    	Subject: 'Subject',
    	Author: 'Author',
    	Keywords: 'Keywords',
    	Comments: 'Description',
    	LastAuthor: 'LastAuthor',
    	RevNumber: 'Revision',
    	Application: 'AppName',
    	/* TotalTime: 'TotalTime', */
    	LastPrinted: 'LastPrinted',
    	CreatedDate: 'Created',
    	ModifiedDate: 'LastSaved',
    	/* Pages */
    	/* Words */
    	/* Characters */
    	Category: 'Category',
    	/* PresentationFormat */
    	Manager: 'Manager',
    	Company: 'Company',
    	/* Guid */
    	/* HyperlinkBase */
    	/* Bytes */
    	/* Lines */
    	/* Paragraphs */
    	/* CharactersWithSpaces */
    	AppVersion: 'Version',

    	ContentStatus: 'ContentStatus', /* NOTE: missing from schema */
    	Identifier: 'Identifier', /* NOTE: missing from schema */
    	Language: 'Language' /* NOTE: missing from schema */
    };
    var evert_XLMLDPM;

    function xlml_set_prop(Props, tag/*:string*/, val) {
    	if(!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);
    	tag = evert_XLMLDPM[tag] || tag;
    	Props[tag] = val;
    }

    function xlml_write_docprops(Props, opts) {
    	var o/*:Array<string>*/ = [];
    	keys(XLMLDocPropsMap).map(function(m) {
    		for(var i = 0; i < CORE_PROPS.length; ++i) if(CORE_PROPS[i][1] == m) return CORE_PROPS[i];
    		for(i = 0; i < EXT_PROPS.length; ++i) if(EXT_PROPS[i][1] == m) return EXT_PROPS[i];
    		throw m;
    	}).forEach(function(p) {
    		if(Props[p[1]] == null) return;
    		var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];
    		switch(p[2]) {
    			case 'date': m = new Date(m).toISOString().replace(/\.\d*Z/,"Z"); break;
    		}
    		if(typeof m == 'number') m = String(m);
    		else if(m === true || m === false) { m = m ? "1" : "0"; }
    		else if(m instanceof Date) m = new Date(m).toISOString().replace(/\.\d*Z/,"");
    		o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));
    	});
    	return writextag('DocumentProperties', o.join(""), {xmlns:XLMLNS.o });
    }
    function xlml_write_custprops(Props, Custprops/*::, opts*/) {
    	var BLACKLIST = ["Worksheets","SheetNames"];
    	var T = 'CustomDocumentProperties';
    	var o/*:Array<string>*/ = [];
    	if(Props) keys(Props).forEach(function(k) {
    		/*:: if(!Props) return; */
    		if(!Object.prototype.hasOwnProperty.call(Props, k)) return;
    		for(var i = 0; i < CORE_PROPS.length; ++i) if(k == CORE_PROPS[i][1]) return;
    		for(i = 0; i < EXT_PROPS.length; ++i) if(k == EXT_PROPS[i][1]) return;
    		for(i = 0; i < BLACKLIST.length; ++i) if(k == BLACKLIST[i]) return;

    		var m = Props[k];
    		var t = "string";
    		if(typeof m == 'number') { t = "float"; m = String(m); }
    		else if(m === true || m === false) { t = "boolean"; m = m ? "1" : "0"; }
    		else m = String(m);
    		o.push(writextag(escapexmltag(k), m, {"dt:dt":t}));
    	});
    	if(Custprops) keys(Custprops).forEach(function(k) {
    		/*:: if(!Custprops) return; */
    		if(!Object.prototype.hasOwnProperty.call(Custprops, k)) return;
    		if(Props && Object.prototype.hasOwnProperty.call(Props, k)) return;
    		var m = Custprops[k];
    		var t = "string";
    		if(typeof m == 'number') { t = "float"; m = String(m); }
    		else if(m === true || m === false) { t = "boolean"; m = m ? "1" : "0"; }
    		else if(m instanceof Date) { t = "dateTime.tz"; m = m.toISOString(); }
    		else m = String(m);
    		o.push(writextag(escapexmltag(k), m, {"dt:dt":t}));
    	});
    	return '<' + T + ' xmlns="' + XLMLNS.o + '">' + o.join("") + '</' + T + '>';
    }
    /* [MS-DTYP] 2.3.3 FILETIME */
    /* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */
    /* [MS-OLEPS] 2.8 FILETIME (Packet Version) */
    function parse_FILETIME(blob) {
    	var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
    	return new Date(((dwHighDateTime/1e7*Math.pow(2,32) + dwLowDateTime/1e7) - 11644473600)*1000).toISOString().replace(/\.000/,"");
    }
    function write_FILETIME(time/*:string|Date*/) {
    	var date = (typeof time == "string") ? new Date(Date.parse(time)) : time;
    	var t = date.getTime() / 1000 + 11644473600;
    	var l = t % Math.pow(2,32), h = (t - l) / Math.pow(2,32);
    	l *= 1e7; h *= 1e7;
    	var w = (l / Math.pow(2,32)) | 0;
    	if(w > 0) { l = l % Math.pow(2,32); h += w; }
    	var o = new_buf(8); o.write_shift(4, l); o.write_shift(4, h); return o;
    }

    /* [MS-OSHARED] 2.3.3.1.4 Lpstr */
    function parse_lpstr(blob, type, pad/*:?number*/) {
    	var start = blob.l;
    	var str = blob.read_shift(0, 'lpstr-cp');
    	if(pad) while((blob.l - start) & 3) ++blob.l;
    	return str;
    }

    /* [MS-OSHARED] 2.3.3.1.6 Lpwstr */
    function parse_lpwstr(blob, type, pad) {
    	var str = blob.read_shift(0, 'lpwstr');
    	if(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;
    	return str;
    }


    /* [MS-OSHARED] 2.3.3.1.11 VtString */
    /* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */
    function parse_VtStringBase(blob, stringType, pad) {
    	if(stringType === 0x1F /*VT_LPWSTR*/) return parse_lpwstr(blob);
    	return parse_lpstr(blob, stringType, pad);
    }

    function parse_VtString(blob, t/*:number*/, pad/*:?boolean*/) { return parse_VtStringBase(blob, t, pad === false ? 0: 4); }
    function parse_VtUnalignedString(blob, t/*:number*/) { if(!t) throw new Error("VtUnalignedString must have positive length"); return parse_VtStringBase(blob, t, 0); }

    /* [MS-OSHARED] 2.3.3.1.7 VtVecLpwstrValue */
    function parse_VtVecLpwstrValue(blob)/*:Array<string>*/ {
    	var length = blob.read_shift(4);
    	var ret/*:Array<string>*/ = [];
    	for(var i = 0; i != length; ++i) {
    		var start = blob.l;
    		ret[i] = blob.read_shift(0, 'lpwstr').replace(chr0,'');
    		if((blob.l - start) & 0x02) blob.l += 2;
    	}
    	return ret;
    }

    /* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */
    function parse_VtVecUnalignedLpstrValue(blob)/*:Array<string>*/ {
    	var length = blob.read_shift(4);
    	var ret/*:Array<string>*/ = [];
    	for(var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr-cp').replace(chr0,'');
    	return ret;
    }


    /* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */
    function parse_VtHeadingPair(blob) {
    	var start = blob.l;
    	var headingString = parse_TypedPropertyValue(blob, VT_USTR);
    	if(blob[blob.l] == 0x00 && blob[blob.l+1] == 0x00 && ((blob.l - start) & 0x02)) blob.l += 2;
    	var headerParts = parse_TypedPropertyValue(blob, VT_I4);
    	return [headingString, headerParts];
    }

    /* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */
    function parse_VtVecHeadingPairValue(blob) {
    	var cElements = blob.read_shift(4);
    	var out = [];
    	for(var i = 0; i < cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));
    	return out;
    }

    /* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */
    function parse_dictionary(blob,CodePage) {
    	var cnt = blob.read_shift(4);
    	var dict/*:{[number]:string}*/ = ({}/*:any*/);
    	for(var j = 0; j != cnt; ++j) {
    		var pid = blob.read_shift(4);
    		var len = blob.read_shift(4);
    		dict[pid] = blob.read_shift(len, (CodePage === 0x4B0 ?'utf16le':'utf8')).replace(chr0,'').replace(chr1,'!');
    		if(CodePage === 0x4B0 && (len % 2)) blob.l += 2;
    	}
    	if(blob.l & 3) blob.l = (blob.l>>2+1)<<2;
    	return dict;
    }

    /* [MS-OLEPS] 2.9 BLOB */
    function parse_BLOB(blob) {
    	var size = blob.read_shift(4);
    	var bytes = blob.slice(blob.l,blob.l+size);
    	blob.l += size;
    	if((size & 3) > 0) blob.l += (4 - (size & 3)) & 3;
    	return bytes;
    }

    /* [MS-OLEPS] 2.11 ClipboardData */
    function parse_ClipboardData(blob) {
    	// TODO
    	var o = {};
    	o.Size = blob.read_shift(4);
    	//o.Format = blob.read_shift(4);
    	blob.l += o.Size + 3 - (o.Size - 1) % 4;
    	return o;
    }

    /* [MS-OLEPS] 2.15 TypedPropertyValue */
    function parse_TypedPropertyValue(blob, type/*:number*/, _opts)/*:any*/ {
    	var t = blob.read_shift(2), ret, opts = _opts||{};
    	blob.l += 2;
    	if(type !== VT_VARIANT)
    	if(t !== type && VT_CUSTOM.indexOf(type)===-1 && !((type & 0xFFFE) == 0x101E && (t & 0xFFFE) == 0x101E)) throw new Error('Expected type ' + type + ' saw ' + t);
    	switch(type === VT_VARIANT ? t : type) {
    		case 0x02 /*VT_I2*/: ret = blob.read_shift(2, 'i'); if(!opts.raw) blob.l += 2; return ret;
    		case 0x03 /*VT_I4*/: ret = blob.read_shift(4, 'i'); return ret;
    		case 0x0B /*VT_BOOL*/: return blob.read_shift(4) !== 0x0;
    		case 0x13 /*VT_UI4*/: ret = blob.read_shift(4); return ret;
    		case 0x1E /*VT_LPSTR*/: return parse_lpstr(blob, t, 4).replace(chr0,'');
    		case 0x1F /*VT_LPWSTR*/: return parse_lpwstr(blob);
    		case 0x40 /*VT_FILETIME*/: return parse_FILETIME(blob);
    		case 0x41 /*VT_BLOB*/: return parse_BLOB(blob);
    		case 0x47 /*VT_CF*/: return parse_ClipboardData(blob);
    		case 0x50 /*VT_STRING*/: return parse_VtString(blob, t, !opts.raw).replace(chr0,'');
    		case 0x51 /*VT_USTR*/: return parse_VtUnalignedString(blob, t/*, 4*/).replace(chr0,'');
    		case 0x100C /*VT_VECTOR|VT_VARIANT*/: return parse_VtVecHeadingPairValue(blob);
    		case 0x101E /*VT_VECTOR|VT_LPSTR*/:
    		case 0x101F /*VT_VECTOR|VT_LPWSTR*/:
    			return t == 0x101F ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
    		default: throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
    	}
    }
    function write_TypedPropertyValue(type/*:number*/, value) {
    	var o = new_buf(4), p = new_buf(4);
    	o.write_shift(4, type == 0x50 ? 0x1F : type);
    	switch(type) {
    		case 0x03 /*VT_I4*/: p.write_shift(-4, value); break;
    		case 0x05 /*VT_I4*/: p = new_buf(8); p.write_shift(8, value, 'f'); break;
    		case 0x0B /*VT_BOOL*/: p.write_shift(4, value ? 0x01 : 0x00); break;
    		case 0x40 /*VT_FILETIME*/: /*:: if(typeof value !== "string" && !(value instanceof Date)) throw "unreachable"; */ p = write_FILETIME(value); break;
    		case 0x1F /*VT_LPWSTR*/:
    		case 0x50 /*VT_STRING*/:
    			/*:: if(typeof value !== "string") throw "unreachable"; */
    			p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
    			p.write_shift(4, value.length + 1);
    			p.write_shift(0, value, "dbcs");
    			while(p.l != p.length) p.write_shift(1, 0);
    			break;
    		default: throw new Error("TypedPropertyValue unrecognized type " + type + " " + value);
    	}
    	return bconcat([o, p]);
    }

    /* [MS-OLEPS] 2.20 PropertySet */
    function parse_PropertySet(blob, PIDSI) {
    	var start_addr = blob.l;
    	var size = blob.read_shift(4);
    	var NumProps = blob.read_shift(4);
    	var Props = [], i = 0;
    	var CodePage = 0;
    	var Dictionary = -1, DictObj/*:{[number]:string}*/ = ({}/*:any*/);
    	for(i = 0; i != NumProps; ++i) {
    		var PropID = blob.read_shift(4);
    		var Offset = blob.read_shift(4);
    		Props[i] = [PropID, Offset + start_addr];
    	}
    	Props.sort(function(x,y) { return x[1] - y[1]; });
    	var PropH = {};
    	for(i = 0; i != NumProps; ++i) {
    		if(blob.l !== Props[i][1]) {
    			var fail = true;
    			if(i>0 && PIDSI) switch(PIDSI[Props[i-1][0]].t) {
    				case 0x02 /*VT_I2*/: if(blob.l+2 === Props[i][1]) { blob.l+=2; fail = false; } break;
    				case 0x50 /*VT_STRING*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
    				case 0x100C /*VT_VECTOR|VT_VARIANT*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
    			}
    			if((!PIDSI||i==0) && blob.l <= Props[i][1]) { fail=false; blob.l = Props[i][1]; }
    			if(fail) throw new Error("Read Error: Expected address " + Props[i][1] + ' at ' + blob.l + ' :' + i);
    		}
    		if(PIDSI) {
    			var piddsi = PIDSI[Props[i][0]];
    			PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {raw:true});
    			if(piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 0xFFFF)).slice(-4);
    			if(piddsi.n == "CodePage") switch(PropH[piddsi.n]) {
    				case 0: PropH[piddsi.n] = 1252;
    					/* falls through */
    				case 874:
    				case 932:
    				case 936:
    				case 949:
    				case 950:
    				case 1250:
    				case 1251:
    				case 1253:
    				case 1254:
    				case 1255:
    				case 1256:
    				case 1257:
    				case 1258:
    				case 10000:
    				case 1200:
    				case 1201:
    				case 1252:
    				case 65000: case -536:
    				case 65001: case -535:
    					set_cp(CodePage = (PropH[piddsi.n]>>>0) & 0xFFFF); break;
    				default: throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
    			}
    		} else {
    			if(Props[i][0] === 0x1) {
    				CodePage = PropH.CodePage = (parse_TypedPropertyValue(blob, VT_I2)/*:number*/);
    				set_cp(CodePage);
    				if(Dictionary !== -1) {
    					var oldpos = blob.l;
    					blob.l = Props[Dictionary][1];
    					DictObj = parse_dictionary(blob,CodePage);
    					blob.l = oldpos;
    				}
    			} else if(Props[i][0] === 0) {
    				if(CodePage === 0) { Dictionary = i; blob.l = Props[i+1][1]; continue; }
    				DictObj = parse_dictionary(blob,CodePage);
    			} else {
    				var name = DictObj[Props[i][0]];
    				var val;
    				/* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */
    				switch(blob[blob.l]) {
    					case 0x41 /*VT_BLOB*/: blob.l += 4; val = parse_BLOB(blob); break;
    					case 0x1E /*VT_LPSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]).replace(/\u0000+$/,""); break;
    					case 0x1F /*VT_LPWSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]).replace(/\u0000+$/,""); break;
    					case 0x03 /*VT_I4*/: blob.l += 4; val = blob.read_shift(4, 'i'); break;
    					case 0x13 /*VT_UI4*/: blob.l += 4; val = blob.read_shift(4); break;
    					case 0x05 /*VT_R8*/: blob.l += 4; val = blob.read_shift(8, 'f'); break;
    					case 0x0B /*VT_BOOL*/: blob.l += 4; val = parsebool(blob, 4); break;
    					case 0x40 /*VT_FILETIME*/: blob.l += 4; val = parseDate(parse_FILETIME(blob)); break;
    					default: throw new Error("unparsed value: " + blob[blob.l]);
    				}
    				PropH[name] = val;
    			}
    		}
    	}
    	blob.l = start_addr + size; /* step ahead to skip padding */
    	return PropH;
    }
    var XLSPSSkip = [ "CodePage", "Thumbnail", "_PID_LINKBASE", "_PID_HLINKS", "SystemIdentifier", "FMTID" ]; //.concat(PseudoPropsPairs);
    function guess_property_type(val/*:any*/)/*:number*/ {
    	switch(typeof val) {
    		case "boolean": return 0x0B;
    		case "number": return ((val|0)==val) ? 0x03 : 0x05;
    		case "string": return 0x1F;
    		case "object": if(val instanceof Date) return 0x40; break;
    	}
    	return -1;
    }
    function write_PropertySet(entries, RE, PIDSI) {
    	var hdr = new_buf(8), piao = [], prop = [];
    	var sz = 8, i = 0;

    	var pr = new_buf(8), pio = new_buf(8);
    	pr.write_shift(4, 0x0002);
    	pr.write_shift(4, 0x04B0);
    	pio.write_shift(4, 0x0001);
    	prop.push(pr); piao.push(pio);
    	sz += 8 + pr.length;

    	if(!RE) {
    		pio = new_buf(8);
    		pio.write_shift(4, 0);
    		piao.unshift(pio);

    		var bufs = [new_buf(4)];
    		bufs[0].write_shift(4, entries.length);
    		for(i = 0; i < entries.length; ++i) {
    			var value = entries[i][0];
    			pr = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
    			pr.write_shift(4, i+2);
    			pr.write_shift(4, value.length + 1);
    			pr.write_shift(0, value, "dbcs");
    			while(pr.l != pr.length) pr.write_shift(1, 0);
    			bufs.push(pr);
    		}
    		pr = bconcat(bufs);
    		prop.unshift(pr);
    		sz += 8 + pr.length;
    	}

    	for(i = 0; i < entries.length; ++i) {
    		if(RE && !RE[entries[i][0]]) continue;
    		if(XLSPSSkip.indexOf(entries[i][0]) > -1 || PseudoPropsPairs.indexOf(entries[i][0]) > -1) continue;
    		if(entries[i][1] == null) continue;

    		var val = entries[i][1], idx = 0;
    		if(RE) {
    			idx = +RE[entries[i][0]];
    			var pinfo = (PIDSI/*:: || {}*/)[idx]/*:: || {} */;
    			if(pinfo.p == "version" && typeof val == "string") {
    				/*:: if(typeof val !== "string") throw "unreachable"; */
    				var arr = val.split(".");
    				val = ((+arr[0])<<16) + ((+arr[1])||0);
    			}
    			pr = write_TypedPropertyValue(pinfo.t, val);
    		} else {
    			var T = guess_property_type(val);
    			if(T == -1) { T = 0x1F; val = String(val); }
    			pr = write_TypedPropertyValue(T, val);
    		}
    		prop.push(pr);

    		pio = new_buf(8);
    		pio.write_shift(4, !RE ? 2+i : idx);
    		piao.push(pio);

    		sz += 8 + pr.length;
    	}

    	var w = 8 * (prop.length + 1);
    	for(i = 0; i < prop.length; ++i) { piao[i].write_shift(4, w); w += prop[i].length; }
    	hdr.write_shift(4, sz);
    	hdr.write_shift(4, prop.length);
    	return bconcat([hdr].concat(piao).concat(prop));
    }

    /* [MS-OLEPS] 2.21 PropertySetStream */
    function parse_PropertySetStream(file, PIDSI, clsid) {
    	var blob = file.content;
    	if(!blob) return ({}/*:any*/);
    	prep_blob(blob, 0);

    	var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
    	blob.chk('feff', 'Byte Order: ');

    	/*var vers = */blob.read_shift(2); // TODO: check version
    	var SystemIdentifier = blob.read_shift(4);
    	var CLSID = blob.read_shift(16);
    	if(CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error("Bad PropertySet CLSID " + CLSID);
    	NumSets = blob.read_shift(4);
    	if(NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
    	FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);

    	if(NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
    	else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }
    	var PSet0 = parse_PropertySet(blob, PIDSI);

    	var rval = ({ SystemIdentifier: SystemIdentifier }/*:any*/);
    	for(var y in PSet0) rval[y] = PSet0[y];
    	//rval.blob = blob;
    	rval.FMTID = FMTID0;
    	//rval.PSet0 = PSet0;
    	if(NumSets === 1) return rval;
    	if(Offset1 - blob.l == 2) blob.l += 2;
    	if(blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
    	var PSet1;
    	try { PSet1 = parse_PropertySet(blob, null); } catch(e) {/* empty */}
    	for(y in PSet1) rval[y] = PSet1[y];
    	rval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1
    	return rval;
    }
    function write_PropertySetStream(entries, clsid, RE, PIDSI/*:{[key:string|number]:any}*/, entries2/*:?any*/, clsid2/*:?any*/) {
    	var hdr = new_buf(entries2 ? 68 : 48);
    	var bufs = [hdr];
    	hdr.write_shift(2, 0xFFFE);
    	hdr.write_shift(2, 0x0000); /* TODO: type 1 props */
    	hdr.write_shift(4, 0x32363237);
    	hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, "hex");
    	hdr.write_shift(4, (entries2 ? 2 : 1));
    	hdr.write_shift(16, clsid, "hex");
    	hdr.write_shift(4, (entries2 ? 68 : 48));
    	var ps0 = write_PropertySet(entries, RE, PIDSI);
    	bufs.push(ps0);

    	if(entries2) {
    		var ps1 = write_PropertySet(entries2, null, null);
    		hdr.write_shift(16, clsid2, "hex");
    		hdr.write_shift(4, 68 + ps0.length);
    		bufs.push(ps1);
    	}
    	return bconcat(bufs);
    }

    function parsenoop2(blob, length) { blob.read_shift(length); return null; }
    function writezeroes(n, o) { if(!o) o=new_buf(n); for(var j=0; j<n; ++j) o.write_shift(1, 0); return o; }

    function parslurp(blob, length, cb) {
    	var arr = [], target = blob.l + length;
    	while(blob.l < target) arr.push(cb(blob, target - blob.l));
    	if(target !== blob.l) throw new Error("Slurp error");
    	return arr;
    }

    function parsebool(blob, length/*:number*/) { return blob.read_shift(length) === 0x1; }
    function writebool(v/*:any*/, o) { if(!o) o=new_buf(2); o.write_shift(2, +!!v); return o; }

    function parseuint16(blob/*::, length:?number, opts:?any*/) { return blob.read_shift(2, 'u'); }
    function writeuint16(v/*:number*/, o) { if(!o) o=new_buf(2); o.write_shift(2, v); return o; }
    function parseuint16a(blob, length/*:: :?number, opts:?any*/) { return parslurp(blob,length,parseuint16);}

    /* --- 2.5 Structures --- */

    /* [MS-XLS] 2.5.10 Bes (boolean or error) */
    function parse_Bes(blob/*::, length*/) {
    	var v = blob.read_shift(1), t = blob.read_shift(1);
    	return t === 0x01 ? v : v === 0x01;
    }
    function write_Bes(v, t/*:string*/, o) {
    	if(!o) o = new_buf(2);
    	o.write_shift(1, ((t == 'e') ? +v : +!!v));
    	o.write_shift(1, ((t == 'e') ? 1 : 0));
    	return o;
    }

    /* [MS-XLS] 2.5.240 ShortXLUnicodeString */
    function parse_ShortXLUnicodeString(blob, length, opts) {
    	var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
    	var encoding = 'sbcs-cont';
    	var cp = current_codepage;
    	if(opts && opts.biff >= 8) current_codepage = 1200;
    	if(!opts || opts.biff == 8 ) {
    		var fHighByte = blob.read_shift(1);
    		if(fHighByte) { encoding = 'dbcs-cont'; }
    	} else if(opts.biff == 12) {
    		encoding = 'wstr';
    	}
    	if(opts.biff >= 2 && opts.biff <= 5) encoding = 'cpstr';
    	var o = cch ? blob.read_shift(cch, encoding) : "";
    	current_codepage = cp;
    	return o;
    }

    /* 2.5.293 XLUnicodeRichExtendedString */
    function parse_XLUnicodeRichExtendedString(blob) {
    	var cp = current_codepage;
    	current_codepage = 1200;
    	var cch = blob.read_shift(2), flags = blob.read_shift(1);
    	var /*fHighByte = flags & 0x1,*/ fExtSt = flags & 0x4, fRichSt = flags & 0x8;
    	var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs
    	var cRun = 0, cbExtRst;
    	var z = {};
    	if(fRichSt) cRun = blob.read_shift(2);
    	if(fExtSt) cbExtRst = blob.read_shift(4);
    	var encoding = width == 2 ? 'dbcs-cont' : 'sbcs-cont';
    	var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
    	if(fRichSt) blob.l += 4 * cRun; //TODO: parse this
    	if(fExtSt) blob.l += cbExtRst; //TODO: parse this
    	z.t = msg;
    	if(!fRichSt) { z.raw = "<t>" + z.t + "</t>"; z.r = z.t; }
    	current_codepage = cp;
    	return z;
    }
    function write_XLUnicodeRichExtendedString(xlstr/*:: :XLString, opts*/) {
    	var str = (xlstr.t||"");

    	var hdr = new_buf(3 + (0));
    	hdr.write_shift(2, str.length);
    	hdr.write_shift(1, (0x00) | 0x01);

    	var otext = new_buf(2 * str.length);
    	otext.write_shift(2 * str.length, str, 'utf16le');

    	var out = [hdr, otext];

    	return bconcat(out);
    }

    /* 2.5.296 XLUnicodeStringNoCch */
    function parse_XLUnicodeStringNoCch(blob, cch, opts) {
    	var retval;
    	if(opts) {
    		if(opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, 'cpstr');
    		if(opts.biff >= 12) return blob.read_shift(cch, 'dbcs-cont');
    	}
    	var fHighByte = blob.read_shift(1);
    	if(fHighByte===0) { retval = blob.read_shift(cch, 'sbcs-cont'); }
    	else { retval = blob.read_shift(cch, 'dbcs-cont'); }
    	return retval;
    }

    /* 2.5.294 XLUnicodeString */
    function parse_XLUnicodeString(blob, length, opts) {
    	var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	if(cch === 0) { blob.l++; return ""; }
    	return parse_XLUnicodeStringNoCch(blob, cch, opts);
    }
    /* BIFF5 override */
    function parse_XLUnicodeString2(blob, length, opts) {
    	if(opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
    	var cch = blob.read_shift(1);
    	if(cch === 0) { blob.l++; return ""; }
    	return blob.read_shift(cch, (opts.biff <= 4 || !blob.lens ) ? 'cpstr' : 'sbcs-cont');
    }
    /* TODO: BIFF5 and lower, codepage awareness */
    function write_XLUnicodeString(str, opts, o) {
    	if(!o) o = new_buf(3 + 2 * str.length);
    	o.write_shift(2, str.length);
    	o.write_shift(1, 1);
    	o.write_shift(31, str, 'utf16le');
    	return o;
    }

    /* [MS-XLS] 2.5.61 ControlInfo */
    function parse_ControlInfo(blob/*::, length, opts*/) {
    	var flags = blob.read_shift(1);
    	blob.l++;
    	var accel = blob.read_shift(2);
    	blob.l += 2;
    	return [flags, accel];
    }

    /* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */
    function parse_URLMoniker(blob/*::, length, opts*/) {
    	var len = blob.read_shift(4), start = blob.l;
    	var extra = false;
    	if(len > 24) {
    		/* look ahead */
    		blob.l += len - 24;
    		if(blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
    		blob.l = start;
    	}
    	var url = blob.read_shift((extra?len-24:len)>>1, 'utf16le').replace(chr0,"");
    	if(extra) blob.l += 24;
    	return url;
    }

    /* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */
    function parse_FileMoniker(blob/*::, length*/) {
    	var cAnti = blob.read_shift(2);
    	var preamble = ""; while(cAnti-- > 0) preamble += "../";
    	var ansiPath = blob.read_shift(0, 'lpstr-ansi');
    	blob.l += 2; //var endServer = blob.read_shift(2);
    	if(blob.read_shift(2) != 0xDEAD) throw new Error("Bad FileMoniker");
    	var sz = blob.read_shift(4);
    	if(sz === 0) return preamble + ansiPath.replace(/\\/g,"/");
    	var bytes = blob.read_shift(4);
    	if(blob.read_shift(2) != 3) throw new Error("Bad FileMoniker");
    	var unicodePath = blob.read_shift(bytes>>1, 'utf16le').replace(chr0,"");
    	return preamble + unicodePath;
    }

    /* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */
    function parse_HyperlinkMoniker(blob, length) {
    	var clsid = blob.read_shift(16);	switch(clsid) {
    		case "e0c9ea79f9bace118c8200aa004ba90b": return parse_URLMoniker(blob);
    		case "0303000000000000c000000000000046": return parse_FileMoniker(blob);
    		default: throw new Error("Unsupported Moniker " + clsid);
    	}
    }

    /* [MS-OSHARED] 2.3.7.9 HyperlinkString */
    function parse_HyperlinkString(blob/*::, length*/) {
    	var len = blob.read_shift(4);
    	var o = len > 0 ? blob.read_shift(len, 'utf16le').replace(chr0, "") : "";
    	return o;
    }
    function write_HyperlinkString(str/*:string*/, o) {
    	if(!o) o = new_buf(6 + str.length * 2);
    	o.write_shift(4, 1 + str.length);
    	for(var i = 0; i < str.length; ++i) o.write_shift(2, str.charCodeAt(i));
    	o.write_shift(2, 0);
    	return o;
    }

    /* [MS-OSHARED] 2.3.7.1 Hyperlink Object */
    function parse_Hyperlink(blob, length)/*:Hyperlink*/ {
    	var end = blob.l + length;
    	var sVer = blob.read_shift(4);
    	if(sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
    	var flags = blob.read_shift(2);
    	blob.l += 2;
    	var displayName, targetFrameName, moniker, oleMoniker, Loc="", guid, fileTime;
    	if(flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);
    	if(flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
    	if((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);
    	if((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
    	if(flags & 0x0008) Loc = parse_HyperlinkString(blob, end - blob.l);
    	if(flags & 0x0020) guid = blob.read_shift(16);
    	if(flags & 0x0040) fileTime = parse_FILETIME(blob/*, 8*/);
    	blob.l = end;
    	var target = targetFrameName||moniker||oleMoniker||"";
    	if(target && Loc) target+="#"+Loc;
    	if(!target) target = "#" + Loc;
    	if((flags & 0x0002) && target.charAt(0) == "/" && target.charAt(1) != "/") target = "file://" + target;
    	var out = ({Target:target}/*:any*/);
    	if(guid) out.guid = guid;
    	if(fileTime) out.time = fileTime;
    	if(displayName) out.Tooltip = displayName;
    	return out;
    }
    function write_Hyperlink(hl) {
    	var out = new_buf(512), i = 0;
    	var Target = hl.Target;
    	if(Target.slice(0,7) == "file://") Target = Target.slice(7);
    	var hashidx = Target.indexOf("#");
    	var F = hashidx > -1 ? 0x1f : 0x17;
    	switch(Target.charAt(0)) { case "#": F=0x1c; break; case ".": F&=~2; break; }
    	out.write_shift(4,2); out.write_shift(4, F);
    	var data = [8,6815827,6619237,4849780,83]; for(i = 0; i < data.length; ++i) out.write_shift(4, data[i]);
    	if(F == 0x1C) {
    		Target = Target.slice(1);
    		write_HyperlinkString(Target, out);
    	} else if(F & 0x02) {
    		data = "e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
    		for(i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));
    		var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;
    		out.write_shift(4, 2*(Pretarget.length + 1));
    		for(i = 0; i < Pretarget.length; ++i) out.write_shift(2, Pretarget.charCodeAt(i));
    		out.write_shift(2, 0);
    		if(F & 0x08) write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx+1): "", out);
    	} else {
    		data = "03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" ");
    		for(i = 0; i < data.length; ++i) out.write_shift(1, parseInt(data[i], 16));
    		var P = 0;
    		while(Target.slice(P*3,P*3+3)=="../"||Target.slice(P*3,P*3+3)=="..\\") ++P;
    		out.write_shift(2, P);
    		out.write_shift(4, Target.length - 3 * P + 1);
    		for(i = 0; i < Target.length - 3 * P; ++i) out.write_shift(1, Target.charCodeAt(i + 3 * P) & 0xFF);
    		out.write_shift(1, 0);
    		out.write_shift(2, 0xFFFF);
    		out.write_shift(2, 0xDEAD);
    		for(i = 0; i < 6; ++i) out.write_shift(4, 0);
    	}
    	return out.slice(0, out.l);
    }

    /* 2.5.178 LongRGBA */
    function parse_LongRGBA(blob/*::, length*/) { var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1); return [r,g,b,a]; }

    /* 2.5.177 LongRGB */
    function parse_LongRGB(blob, length) { var x = parse_LongRGBA(blob); x[3] = 0; return x; }


    /* [MS-XLS] 2.5.19 */
    function parse_XLSCell(blob/*::, length*/)/*:Cell*/ {
    	var rw = blob.read_shift(2); // 0-indexed
    	var col = blob.read_shift(2);
    	var ixfe = blob.read_shift(2);
    	return ({r:rw, c:col, ixfe:ixfe}/*:any*/);
    }
    function write_XLSCell(R/*:number*/, C/*:number*/, ixfe/*:?number*/, o) {
    	if(!o) o = new_buf(6);
    	o.write_shift(2, R);
    	o.write_shift(2, C);
    	o.write_shift(2, ixfe||0);
    	return o;
    }

    /* [MS-XLS] 2.5.134 */
    function parse_frtHeader(blob) {
    	var rt = blob.read_shift(2);
    	var flags = blob.read_shift(2); // TODO: parse these flags
    	blob.l += 8;
    	return {type: rt, flags: flags};
    }



    function parse_OptXLUnicodeString(blob, length, opts) { return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts); }

    /* [MS-XLS] 2.5.344 */
    function parse_XTI(blob, length, opts) {
    	var w = opts.biff > 8 ? 4 : 2;
    	var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w,'i'), itabLast = blob.read_shift(w,'i');
    	return [iSupBook, itabFirst, itabLast];
    }

    /* [MS-XLS] 2.5.218 */
    function parse_RkRec(blob) {
    	var ixfe = blob.read_shift(2);
    	var RK = parse_RkNumber(blob);
    	return [ixfe, RK];
    }

    /* [MS-XLS] 2.5.1 */
    function parse_AddinUdf(blob, length, opts) {
    	blob.l += 4; length -= 4;
    	var l = blob.l + length;
    	var udfName = parse_ShortXLUnicodeString(blob, length, opts);
    	var cb = blob.read_shift(2);
    	l -= blob.l;
    	if(cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
    	blob.l += cb;
    	return udfName;
    }

    /* [MS-XLS] 2.5.209 TODO: Check sizes */
    function parse_Ref8U(blob/*::, length*/) {
    	var rwFirst = blob.read_shift(2);
    	var rwLast = blob.read_shift(2);
    	var colFirst = blob.read_shift(2);
    	var colLast = blob.read_shift(2);
    	return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
    }
    function write_Ref8U(r/*:Range*/, o) {
    	if(!o) o = new_buf(8);
    	o.write_shift(2, r.s.r);
    	o.write_shift(2, r.e.r);
    	o.write_shift(2, r.s.c);
    	o.write_shift(2, r.e.c);
    	return o;
    }

    /* [MS-XLS] 2.5.211 */
    function parse_RefU(blob/*::, length*/) {
    	var rwFirst = blob.read_shift(2);
    	var rwLast = blob.read_shift(2);
    	var colFirst = blob.read_shift(1);
    	var colLast = blob.read_shift(1);
    	return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
    }

    /* [MS-XLS] 2.5.207 */
    var parse_Ref = parse_RefU;

    /* [MS-XLS] 2.5.143 */
    function parse_FtCmo(blob/*::, length*/) {
    	blob.l += 4;
    	var ot = blob.read_shift(2);
    	var id = blob.read_shift(2);
    	var flags = blob.read_shift(2);
    	blob.l+=12;
    	return [id, ot, flags];
    }

    /* [MS-XLS] 2.5.149 */
    function parse_FtNts(blob) {
    	var out = {};
    	blob.l += 4;
    	blob.l += 16; // GUID TODO
    	out.fSharedNote = blob.read_shift(2);
    	blob.l += 4;
    	return out;
    }

    /* [MS-XLS] 2.5.142 */
    function parse_FtCf(blob) {
    	var out = {};
    	blob.l += 4;
    	blob.cf = blob.read_shift(2);
    	return out;
    }

    /* [MS-XLS] 2.5.140 - 2.5.154 and friends */
    function parse_FtSkip(blob) { blob.l += 2; blob.l += blob.read_shift(2); }
    var FtTab = {
    	/*::[*/0x00/*::]*/: parse_FtSkip,      /* FtEnd */
    	/*::[*/0x04/*::]*/: parse_FtSkip,      /* FtMacro */
    	/*::[*/0x05/*::]*/: parse_FtSkip,      /* FtButton */
    	/*::[*/0x06/*::]*/: parse_FtSkip,      /* FtGmo */
    	/*::[*/0x07/*::]*/: parse_FtCf,        /* FtCf */
    	/*::[*/0x08/*::]*/: parse_FtSkip,      /* FtPioGrbit */
    	/*::[*/0x09/*::]*/: parse_FtSkip,      /* FtPictFmla */
    	/*::[*/0x0A/*::]*/: parse_FtSkip,      /* FtCbls */
    	/*::[*/0x0B/*::]*/: parse_FtSkip,      /* FtRbo */
    	/*::[*/0x0C/*::]*/: parse_FtSkip,      /* FtSbs */
    	/*::[*/0x0D/*::]*/: parse_FtNts,       /* FtNts */
    	/*::[*/0x0E/*::]*/: parse_FtSkip,      /* FtSbsFmla */
    	/*::[*/0x0F/*::]*/: parse_FtSkip,      /* FtGboData */
    	/*::[*/0x10/*::]*/: parse_FtSkip,      /* FtEdoData */
    	/*::[*/0x11/*::]*/: parse_FtSkip,      /* FtRboData */
    	/*::[*/0x12/*::]*/: parse_FtSkip,      /* FtCblsData */
    	/*::[*/0x13/*::]*/: parse_FtSkip,      /* FtLbsData */
    	/*::[*/0x14/*::]*/: parse_FtSkip,      /* FtCblsFmla */
    	/*::[*/0x15/*::]*/: parse_FtCmo
    };
    function parse_FtArray(blob, length/*::, ot*/) {
    	var tgt = blob.l + length;
    	var fts = [];
    	while(blob.l < tgt) {
    		var ft = blob.read_shift(2);
    		blob.l-=2;
    		try {
    			fts.push(FtTab[ft](blob, tgt - blob.l));
    		} catch(e) { blob.l = tgt; return fts; }
    	}
    	if(blob.l != tgt) blob.l = tgt; //throw new Error("bad Object Ft-sequence");
    	return fts;
    }

    /* --- 2.4 Records --- */

    /* [MS-XLS] 2.4.21 */
    function parse_BOF(blob, length) {
    	var o = {BIFFVer:0, dt:0};
    	o.BIFFVer = blob.read_shift(2); length -= 2;
    	if(length >= 2) { o.dt = blob.read_shift(2); blob.l -= 2; }
    	switch(o.BIFFVer) {
    		case 0x0600: /* BIFF8 */
    		case 0x0500: /* BIFF5 */
    		case 0x0400: /* BIFF4 */
    		case 0x0300: /* BIFF3 */
    		case 0x0200: /* BIFF2 */
    		case 0x0002: case 0x0007: /* BIFF2 */
    			break;
    		default: if(length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
    	}

    	blob.read_shift(length);
    	return o;
    }
    function write_BOF(wb/*:Workbook*/, t/*:number*/, o) {
    	var h = 0x0600, w = 16;
    	switch(o.bookType) {
    		case 'biff8': break;
    		case 'biff5': h = 0x0500; w = 8; break;
    		case 'biff4': h = 0x0004; w = 6; break;
    		case 'biff3': h = 0x0003; w = 6; break;
    		case 'biff2': h = 0x0002; w = 4; break;
    		case 'xla': break;
    		default: throw new Error("unsupported BIFF version");
    	}
    	var out = new_buf(w);
    	out.write_shift(2, h);
    	out.write_shift(2, t);
    	if(w > 4) out.write_shift(2, 0x7262);
    	if(w > 6) out.write_shift(2, 0x07CD);
    	if(w > 8) {
    		out.write_shift(2, 0xC009);
    		out.write_shift(2, 0x0001);
    		out.write_shift(2, 0x0706);
    		out.write_shift(2, 0x0000);
    	}
    	return out;
    }


    /* [MS-XLS] 2.4.146 */
    function parse_InterfaceHdr(blob, length) {
    	if(length === 0) return 0x04b0;
    	if((blob.read_shift(2))!==0x04b0);
    	return 0x04b0;
    }


    /* [MS-XLS] 2.4.349 */
    function parse_WriteAccess(blob, length, opts) {
    	if(opts.enc) { blob.l += length; return ""; }
    	var l = blob.l;
    	// TODO: make sure XLUnicodeString doesnt overrun
    	var UserName = parse_XLUnicodeString2(blob, 0, opts);
    	blob.read_shift(length + l - blob.l);
    	return UserName;
    }
    function write_WriteAccess(s/*:string*/, opts) {
    	var b8 = !opts || opts.biff == 8;
    	var o = new_buf(b8 ? 112 : 54);
    	o.write_shift(opts.biff == 8 ? 2 : 1, 7);
    	if(b8) o.write_shift(1, 0);
    	o.write_shift(4, 0x33336853);
    	o.write_shift(4, (0x00534A74 | (b8 ? 0 : 0x20000000)));
    	while(o.l < o.length) o.write_shift(1, (b8 ? 0 : 32));
    	return o;
    }

    /* [MS-XLS] 2.4.351 */
    function parse_WsBool(blob, length, opts) {
    	var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
    	return { fDialog: flags & 0x10, fBelow: flags & 0x40, fRight: flags & 0x80 };
    }

    /* [MS-XLS] 2.4.28 */
    function parse_BoundSheet8(blob, length, opts) {
    	var pos = blob.read_shift(4);
    	var hidden = blob.read_shift(1) & 0x03;
    	var dt = blob.read_shift(1);
    	switch(dt) {
    		case 0: dt = 'Worksheet'; break;
    		case 1: dt = 'Macrosheet'; break;
    		case 2: dt = 'Chartsheet'; break;
    		case 6: dt = 'VBAModule'; break;
    	}
    	var name = parse_ShortXLUnicodeString(blob, 0, opts);
    	if(name.length === 0) name = "Sheet1";
    	return { pos:pos, hs:hidden, dt:dt, name:name };
    }
    function write_BoundSheet8(data, opts) {
    	var w = (!opts || opts.biff >= 8 ? 2 : 1);
    	var o = new_buf(8 + w * data.name.length);
    	o.write_shift(4, data.pos);
    	o.write_shift(1, data.hs || 0);
    	o.write_shift(1, data.dt);
    	o.write_shift(1, data.name.length);
    	if(opts.biff >= 8) o.write_shift(1, 1);
    	o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? 'sbcs' : 'utf16le');
    	var out = o.slice(0, o.l);
    	out.l = o.l; return out;
    }

    /* [MS-XLS] 2.4.265 TODO */
    function parse_SST(blob, length)/*:SST*/ {
    	var end = blob.l + length;
    	var cnt = blob.read_shift(4);
    	var ucnt = blob.read_shift(4);
    	var strs/*:SST*/ = ([]/*:any*/);
    	for(var i = 0; i != ucnt && blob.l < end; ++i) {
    		strs.push(parse_XLUnicodeRichExtendedString(blob));
    	}
    	strs.Count = cnt; strs.Unique = ucnt;
    	return strs;
    }
    function write_SST(sst, opts) {
    	var header = new_buf(8);
    	header.write_shift(4, sst.Count);
    	header.write_shift(4, sst.Unique);
    	var strs = [];
    	for(var j = 0; j < sst.length; ++j) strs[j] = write_XLUnicodeRichExtendedString(sst[j]);
    	var o = bconcat([header].concat(strs));
    	/*::(*/o/*:: :any)*/.parts = [header.length].concat(strs.map(function(str) { return str.length; }));
    	return o;
    }

    /* [MS-XLS] 2.4.107 */
    function parse_ExtSST(blob, length) {
    	var extsst = {};
    	extsst.dsst = blob.read_shift(2);
    	blob.l += length-2;
    	return extsst;
    }


    /* [MS-XLS] 2.4.221 TODO: check BIFF2-4 */
    function parse_Row(blob) {
    	var z = ({}/*:any*/);
    	z.r = blob.read_shift(2);
    	z.c = blob.read_shift(2);
    	z.cnt = blob.read_shift(2) - z.c;
    	var miyRw = blob.read_shift(2);
    	blob.l += 4; // reserved(2), unused(2)
    	var flags = blob.read_shift(1); // various flags
    	blob.l += 3; // reserved(8), ixfe(12), flags(4)
    	if(flags & 0x07) z.level = flags & 0x07;
    	// collapsed: flags & 0x10
    	if(flags & 0x20) z.hidden = true;
    	if(flags & 0x40) z.hpt = miyRw / 20;
    	return z;
    }


    /* [MS-XLS] 2.4.125 */
    function parse_ForceFullCalculation(blob) {
    	var header = parse_frtHeader(blob);
    	if(header.type != 0x08A3) throw new Error("Invalid Future Record " + header.type);
    	var fullcalc = blob.read_shift(4);
    	return fullcalc !== 0x0;
    }





    /* [MS-XLS] 2.4.215 rt */
    function parse_RecalcId(blob) {
    	blob.read_shift(2);
    	return blob.read_shift(4);
    }

    /* [MS-XLS] 2.4.87 */
    function parse_DefaultRowHeight(blob, length, opts) {
    	var f = 0;
    	if(!(opts && opts.biff == 2)) {
    		f = blob.read_shift(2);
    	}
    	var miyRw = blob.read_shift(2);
    	if((opts && opts.biff == 2)) {
    		f = 1 - (miyRw >> 15); miyRw &= 0x7fff;
    	}
    	var fl = {Unsynced:f&1,DyZero:(f&2)>>1,ExAsc:(f&4)>>2,ExDsc:(f&8)>>3};
    	return [fl, miyRw];
    }

    /* [MS-XLS] 2.4.345 TODO */
    function parse_Window1(blob) {
    	var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
    	var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
    	var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
    	return { Pos: [xWn, yWn], Dim: [dxWn, dyWn], Flags: flags, CurTab: iTabCur,
    		FirstTab: iTabFirst, Selected: ctabSel, TabRatio: wTabRatio };
    }
    function write_Window1(/*::opts*/) {
    	var o = new_buf(18);
    	o.write_shift(2, 0);
    	o.write_shift(2, 0);
    	o.write_shift(2, 0x7260);
    	o.write_shift(2, 0x44c0);
    	o.write_shift(2, 0x38);
    	o.write_shift(2, 0);
    	o.write_shift(2, 0);
    	o.write_shift(2, 1);
    	o.write_shift(2, 0x01f4);
    	return o;
    }
    /* [MS-XLS] 2.4.346 TODO */
    function parse_Window2(blob, length, opts) {
    	if(opts && opts.biff >= 2 && opts.biff < 5) return {};
    	var f = blob.read_shift(2);
    	return { RTL: f & 0x40 };
    }
    function write_Window2(view) {
    	var o = new_buf(18), f = 0x6b6;
    	if(view && view.RTL) f |= 0x40;
    	o.write_shift(2, f);
    	o.write_shift(4, 0);
    	o.write_shift(4, 64);
    	o.write_shift(4, 0);
    	o.write_shift(4, 0);
    	return o;
    }

    /* [MS-XLS] 2.4.189 TODO */
    function parse_Pane(/*blob, length, opts*/) {
    }

    /* [MS-XLS] 2.4.122 TODO */
    function parse_Font(blob, length, opts) {
    	var o/*:any*/ = {
    		dyHeight: blob.read_shift(2),
    		fl: blob.read_shift(2)
    	};
    	switch((opts && opts.biff) || 8) {
    		case 2: break;
    		case 3: case 4: blob.l += 2; break;
    		default: blob.l += 10; break;
    	}
    	o.name = parse_ShortXLUnicodeString(blob, 0, opts);
    	return o;
    }
    function write_Font(data, opts) {
    	var name = data.name || "Arial";
    	var b5 = (opts && (opts.biff == 5)), w = (b5 ? (15 + name.length) : (16 + 2 * name.length));
    	var o = new_buf(w);
    	o.write_shift(2, (data.sz || 12) * 20);
    	o.write_shift(4, 0);
    	o.write_shift(2, 400);
    	o.write_shift(4, 0);
    	o.write_shift(2, 0);
    	o.write_shift(1, name.length);
    	if(!b5) o.write_shift(1, 1);
    	o.write_shift((b5 ? 1 : 2) * name.length, name, (b5 ? "sbcs" : "utf16le"));
    	return o;
    }

    /* [MS-XLS] 2.4.149 */
    function parse_LabelSst(blob) {
    	var cell = parse_XLSCell(blob);
    	cell.isst = blob.read_shift(4);
    	return cell;
    }
    function write_LabelSst(R/*:number*/, C/*:number*/, v/*:number*/, os/*:number*/ /*::, opts*/) {
    	var o = new_buf(10);
    	write_XLSCell(R, C, os, o);
    	o.write_shift(4, v);
    	return o;
    }

    /* [MS-XLS] 2.4.148 */
    function parse_Label(blob, length, opts) {
    	if(opts.biffguess && opts.biff == 2) opts.biff = 5;
    	var target = blob.l + length;
    	var cell = parse_XLSCell(blob);
    	if(opts.biff == 2) blob.l++;
    	var str = parse_XLUnicodeString(blob, target - blob.l, opts);
    	cell.val = str;
    	return cell;
    }
    function write_Label(R/*:number*/, C/*:number*/, v/*:string*/, os/*:number*/, opts) {
    	var b8 = !opts || opts.biff == 8;
    	var o = new_buf(6 + 2 + (+b8) + (1 + b8) * v.length);
    	write_XLSCell(R, C, os, o);
    	o.write_shift(2, v.length);
    	if(b8) o.write_shift(1, 1);
    	o.write_shift((1 + b8) * v.length, v, b8 ? 'utf16le' : 'sbcs');
    	return o;
    }


    /* [MS-XLS] 2.4.126 Number Formats */
    function parse_Format(blob, length, opts) {
    	var numFmtId = blob.read_shift(2);
    	var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
    	return [numFmtId, fmtstr];
    }
    function write_Format(i/*:number*/, f/*:string*/, opts, o) {
    	var b5 = (opts && (opts.biff == 5));
    	if(!o) o = new_buf(b5 ? (3 + f.length) : (5 + 2 * f.length));
    	o.write_shift(2, i);
    	o.write_shift((b5 ? 1 : 2), f.length);
    	if(!b5) o.write_shift(1, 1);
    	o.write_shift((b5 ? 1 : 2) * f.length, f, (b5 ? 'sbcs' : 'utf16le'));
    	var out = (o.length > o.l) ? o.slice(0, o.l) : o;
    	if(out.l == null) out.l = out.length;
    	return out;
    }
    var parse_BIFF2Format = parse_XLUnicodeString2;

    /* [MS-XLS] 2.4.90 */
    function parse_Dimensions(blob, length, opts) {
    	var end = blob.l + length;
    	var w = opts.biff == 8 || !opts.biff ? 4 : 2;
    	var r = blob.read_shift(w), R = blob.read_shift(w);
    	var c = blob.read_shift(2), C = blob.read_shift(2);
    	blob.l = end;
    	return {s: {r:r, c:c}, e: {r:R, c:C}};
    }
    function write_Dimensions(range, opts) {
    	var w = opts.biff == 8 || !opts.biff ? 4 : 2;
    	var o = new_buf(2*w + 6);
    	o.write_shift(w, range.s.r);
    	o.write_shift(w, range.e.r + 1);
    	o.write_shift(2, range.s.c);
    	o.write_shift(2, range.e.c + 1);
    	o.write_shift(2, 0);
    	return o;
    }

    /* [MS-XLS] 2.4.220 */
    function parse_RK(blob) {
    	var rw = blob.read_shift(2), col = blob.read_shift(2);
    	var rkrec = parse_RkRec(blob);
    	return {r:rw, c:col, ixfe:rkrec[0], rknum:rkrec[1]};
    }

    /* [MS-XLS] 2.4.175 */
    function parse_MulRk(blob, length) {
    	var target = blob.l + length - 2;
    	var rw = blob.read_shift(2), col = blob.read_shift(2);
    	var rkrecs = [];
    	while(blob.l < target) rkrecs.push(parse_RkRec(blob));
    	if(blob.l !== target) throw new Error("MulRK read error");
    	var lastcol = blob.read_shift(2);
    	if(rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
    	return {r:rw, c:col, C:lastcol, rkrec:rkrecs};
    }
    /* [MS-XLS] 2.4.174 */
    function parse_MulBlank(blob, length) {
    	var target = blob.l + length - 2;
    	var rw = blob.read_shift(2), col = blob.read_shift(2);
    	var ixfes = [];
    	while(blob.l < target) ixfes.push(blob.read_shift(2));
    	if(blob.l !== target) throw new Error("MulBlank read error");
    	var lastcol = blob.read_shift(2);
    	if(ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
    	return {r:rw, c:col, C:lastcol, ixfe:ixfes};
    }

    /* [MS-XLS] 2.5.20 2.5.249 TODO: interpret values here */
    function parse_CellStyleXF(blob, length, style, opts) {
    	var o = {};
    	var a = blob.read_shift(4), b = blob.read_shift(4);
    	var c = blob.read_shift(4), d = blob.read_shift(2);
    	o.patternType = XLSFillPattern[c >> 26];

    	if(!opts.cellStyles) return o;
    	o.alc = a & 0x07;
    	o.fWrap = (a >> 3) & 0x01;
    	o.alcV = (a >> 4) & 0x07;
    	o.fJustLast = (a >> 7) & 0x01;
    	o.trot = (a >> 8) & 0xFF;
    	o.cIndent = (a >> 16) & 0x0F;
    	o.fShrinkToFit = (a >> 20) & 0x01;
    	o.iReadOrder = (a >> 22) & 0x02;
    	o.fAtrNum = (a >> 26) & 0x01;
    	o.fAtrFnt = (a >> 27) & 0x01;
    	o.fAtrAlc = (a >> 28) & 0x01;
    	o.fAtrBdr = (a >> 29) & 0x01;
    	o.fAtrPat = (a >> 30) & 0x01;
    	o.fAtrProt = (a >> 31) & 0x01;

    	o.dgLeft = b & 0x0F;
    	o.dgRight = (b >> 4) & 0x0F;
    	o.dgTop = (b >> 8) & 0x0F;
    	o.dgBottom = (b >> 12) & 0x0F;
    	o.icvLeft = (b >> 16) & 0x7F;
    	o.icvRight = (b >> 23) & 0x7F;
    	o.grbitDiag = (b >> 30) & 0x03;

    	o.icvTop = c & 0x7F;
    	o.icvBottom = (c >> 7) & 0x7F;
    	o.icvDiag = (c >> 14) & 0x7F;
    	o.dgDiag = (c >> 21) & 0x0F;

    	o.icvFore = d & 0x7F;
    	o.icvBack = (d >> 7) & 0x7F;
    	o.fsxButton = (d >> 14) & 0x01;
    	return o;
    }
    //function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}
    //function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}

    /* [MS-XLS] 2.4.353 TODO: actually do this right */
    function parse_XF(blob, length, opts) {
    	var o = {};
    	o.ifnt = blob.read_shift(2); o.numFmtId = blob.read_shift(2); o.flags = blob.read_shift(2);
    	o.fStyle = (o.flags >> 2) & 0x01;
    	length -= 6;
    	o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
    	return o;
    }
    function write_XF(data, ixfeP, opts, o) {
    	var b5 = (opts && (opts.biff == 5));
    	if(!o) o = new_buf(b5 ? 16 : 20);
    	o.write_shift(2, 0);
    	if(data.style) {
    		o.write_shift(2, (data.numFmtId||0));
    		o.write_shift(2, 0xFFF4);
    	} else {
    		o.write_shift(2, (data.numFmtId||0));
    		o.write_shift(2, (ixfeP<<4));
    	}
    	var f = 0;
    	if(data.numFmtId > 0 && b5) f |= 0x0400;
    	o.write_shift(4, f);
    	o.write_shift(4, 0);
    	if(!b5) o.write_shift(4, 0);
    	o.write_shift(2, 0);
    	return o;
    }

    /* [MS-XLS] 2.4.134 */
    function parse_Guts(blob) {
    	blob.l += 4;
    	var out = [blob.read_shift(2), blob.read_shift(2)];
    	if(out[0] !== 0) out[0]--;
    	if(out[1] !== 0) out[1]--;
    	if(out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
    	return out;
    }
    function write_Guts(guts/*:Array<number>*/) {
    	var o = new_buf(8);
    	o.write_shift(4, 0);
    	o.write_shift(2, guts[0] ? guts[0] + 1 : 0);
    	o.write_shift(2, guts[1] ? guts[1] + 1 : 0);
    	return o;
    }

    /* [MS-XLS] 2.4.24 */
    function parse_BoolErr(blob, length, opts) {
    	var cell = parse_XLSCell(blob);
    	if(opts.biff == 2 || length == 9) ++blob.l;
    	var val = parse_Bes(blob);
    	cell.val = val;
    	cell.t = (val === true || val === false) ? 'b' : 'e';
    	return cell;
    }
    function write_BoolErr(R/*:number*/, C/*:number*/, v, os/*:number*/, opts, t/*:string*/) {
    	var o = new_buf(8);
    	write_XLSCell(R, C, os, o);
    	write_Bes(v, t, o);
    	return o;
    }

    /* [MS-XLS] 2.4.180 Number */
    function parse_Number(blob, length, opts) {
    	if(opts.biffguess && opts.biff == 2) opts.biff = 5;
    	var cell = parse_XLSCell(blob);
    	var xnum = parse_Xnum(blob);
    	cell.val = xnum;
    	return cell;
    }
    function write_Number(R/*:number*/, C/*:number*/, v, os/*:: :number, opts*/) {
    	var o = new_buf(14);
    	write_XLSCell(R, C, os, o);
    	write_Xnum(v, o);
    	return o;
    }

    var parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136

    /* [MS-XLS] 2.4.271 */
    function parse_SupBook(blob, length, opts) {
    	var end = blob.l + length;
    	var ctab = blob.read_shift(2);
    	var cch = blob.read_shift(2);
    	opts.sbcch = cch;
    	if(cch == 0x0401 || cch == 0x3A01) return [cch, ctab];
    	if(cch < 0x01 || cch >0xff) throw new Error("Unexpected SupBook type: "+cch);
    	var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
    	/* TODO: 2.5.277 Virtual Path */
    	var rgst = [];
    	while(end > blob.l) rgst.push(parse_XLUnicodeString(blob));
    	return [cch, ctab, virtPath, rgst];
    }

    /* [MS-XLS] 2.4.105 TODO */
    function parse_ExternName(blob, length, opts) {
    	var flags = blob.read_shift(2);
    	var body;
    	var o = ({
    		fBuiltIn: flags & 0x01,
    		fWantAdvise: (flags >>> 1) & 0x01,
    		fWantPict: (flags >>> 2) & 0x01,
    		fOle: (flags >>> 3) & 0x01,
    		fOleLink: (flags >>> 4) & 0x01,
    		cf: (flags >>> 5) & 0x3FF,
    		fIcon: flags >>> 15 & 0x01
    	}/*:any*/);
    	if(opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length-2, opts);
    	//else throw new Error("unsupported SupBook cch: " + opts.sbcch);
    	o.body = body || blob.read_shift(length-2);
    	if(typeof body === "string") o.Name = body;
    	return o;
    }

    /* [MS-XLS] 2.4.150 TODO */
    var XLSLblBuiltIn = [
    	"_xlnm.Consolidate_Area",
    	"_xlnm.Auto_Open",
    	"_xlnm.Auto_Close",
    	"_xlnm.Extract",
    	"_xlnm.Database",
    	"_xlnm.Criteria",
    	"_xlnm.Print_Area",
    	"_xlnm.Print_Titles",
    	"_xlnm.Recorder",
    	"_xlnm.Data_Form",
    	"_xlnm.Auto_Activate",
    	"_xlnm.Auto_Deactivate",
    	"_xlnm.Sheet_Title",
    	"_xlnm._FilterDatabase"
    ];
    function parse_Lbl(blob, length, opts) {
    	var target = blob.l + length;
    	var flags = blob.read_shift(2);
    	var chKey = blob.read_shift(1);
    	var cch = blob.read_shift(1);
    	var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	var itab = 0;
    	if(!opts || opts.biff >= 5) {
    		if(opts.biff != 5) blob.l += 2;
    		itab = blob.read_shift(2);
    		if(opts.biff == 5) blob.l += 2;
    		blob.l += 4;
    	}
    	var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
    	if(flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];
    	var npflen = target - blob.l; if(opts && opts.biff == 2) --npflen;
    	/*jshint -W018 */
    	var rgce = (target == blob.l || cce === 0 || !(npflen > 0)) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
    	/*jshint +W018 */
    	return {
    		chKey: chKey,
    		Name: name,
    		itab: itab,
    		rgce: rgce
    	};
    }

    /* [MS-XLS] 2.4.106 TODO: verify filename encoding */
    function parse_ExternSheet(blob, length, opts) {
    	if(opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
    	var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
    	while(len-- !== 0) o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
    		// [iSupBook, itabFirst, itabLast];
    	if(blob.l != target) throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
    	return o;
    }
    function parse_BIFF5ExternSheet(blob, length, opts) {
    	if(blob[blob.l + 1] == 0x03) blob[blob.l]++;
    	var o = parse_ShortXLUnicodeString(blob, length, opts);
    	return o.charCodeAt(0) == 0x03 ? o.slice(1) : o;
    }

    /* [MS-XLS] 2.4.176 TODO: check older biff */
    function parse_NameCmt(blob, length, opts) {
    	if(opts.biff < 8) { blob.l += length; return; }
    	var cchName = blob.read_shift(2);
    	var cchComment = blob.read_shift(2);
    	var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
    	var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
    	return [name, comment];
    }

    /* [MS-XLS] 2.4.260 */
    function parse_ShrFmla(blob, length, opts) {
    	var ref = parse_RefU(blob);
    	blob.l++;
    	var cUse = blob.read_shift(1);
    	length -= 8;
    	return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
    }

    /* [MS-XLS] 2.4.4 TODO */
    function parse_Array(blob, length, opts) {
    	var ref = parse_Ref(blob);
    	/* TODO: fAlwaysCalc */
    	switch(opts.biff) {
    		case 2: blob.l ++; length -= 7; break;
    		case 3: case 4: blob.l += 2; length -= 8; break;
    		default: blob.l += 6; length -= 12;
    	}
    	return [ref, parse_ArrayParsedFormula(blob, length, opts)];
    }

    /* [MS-XLS] 2.4.173 */
    function parse_MTRSettings(blob) {
    	var fMTREnabled = blob.read_shift(4) !== 0x00;
    	var fUserSetThreadCount = blob.read_shift(4) !== 0x00;
    	var cUserThreadCount = blob.read_shift(4);
    	return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
    }

    /* [MS-XLS] 2.5.186 TODO: BIFF5 */
    function parse_NoteSh(blob, length, opts) {
    	if(opts.biff < 8) return;
    	var row = blob.read_shift(2), col = blob.read_shift(2);
    	var flags = blob.read_shift(2), idObj = blob.read_shift(2);
    	var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
    	if(opts.biff < 8) blob.read_shift(1);
    	return [{r:row,c:col}, stAuthor, idObj, flags];
    }

    /* [MS-XLS] 2.4.179 */
    function parse_Note(blob, length, opts) {
    	/* TODO: Support revisions */
    	return parse_NoteSh(blob, length, opts);
    }

    /* [MS-XLS] 2.4.168 */
    function parse_MergeCells(blob, length)/*:Array<Range>*/ {
    	var merges/*:Array<Range>*/ = [];
    	var cmcs = blob.read_shift(2);
    	while (cmcs--) merges.push(parse_Ref8U(blob));
    	return merges;
    }
    function write_MergeCells(merges/*:Array<Range>*/) {
    	var o = new_buf(2 + merges.length * 8);
    	o.write_shift(2, merges.length);
    	for(var i = 0; i < merges.length; ++i) write_Ref8U(merges[i], o);
    	return o;
    }

    /* [MS-XLS] 2.4.181 TODO: parse all the things! */
    function parse_Obj(blob, length, opts) {
    	if(opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
    	var cmo = parse_FtCmo(blob); // id, ot, flags
    	var fts = parse_FtArray(blob, length-22, cmo[1]);
    	return { cmo: cmo, ft:fts };
    }
    /* from older spec */
    var parse_BIFF5OT = {
    0x08: function(blob, length) {
    	var tgt = blob.l + length;
    	blob.l += 10; // todo
    	var cf = blob.read_shift(2);
    	blob.l += 4;
    	blob.l += 2; //var cbPictFmla = blob.read_shift(2);
    	blob.l += 2;
    	blob.l += 2; //var grbit = blob.read_shift(2);
    	blob.l += 4;
    	var cchName = blob.read_shift(1);
    	blob.l += cchName; // TODO: stName
    	blob.l = tgt; // TODO: fmla
    	return { fmt:cf };
    }
    };

    function parse_BIFF5Obj(blob, length, opts) {
    	blob.l += 4; //var cnt = blob.read_shift(4);
    	var ot = blob.read_shift(2);
    	var id = blob.read_shift(2);
    	var grbit = blob.read_shift(2);
    	blob.l += 2; //var colL = blob.read_shift(2);
    	blob.l += 2; //var dxL = blob.read_shift(2);
    	blob.l += 2; //var rwT = blob.read_shift(2);
    	blob.l += 2; //var dyT = blob.read_shift(2);
    	blob.l += 2; //var colR = blob.read_shift(2);
    	blob.l += 2; //var dxR = blob.read_shift(2);
    	blob.l += 2; //var rwB = blob.read_shift(2);
    	blob.l += 2; //var dyB = blob.read_shift(2);
    	blob.l += 2; //var cbMacro = blob.read_shift(2);
    	blob.l += 6;
    	length -= 36;
    	var fts = [];
    	fts.push((parse_BIFF5OT[ot]||parsenoop)(blob, length, opts));
    	return { cmo: [id, ot, grbit], ft:fts };
    }

    /* [MS-XLS] 2.4.329 TODO: parse properly */
    function parse_TxO(blob, length, opts) {
    	var s = blob.l;
    	var texts = "";
    try {
    	blob.l += 4;
    	var ot = (opts.lastobj||{cmo:[0,0]}).cmo[1];
    	var controlInfo; // eslint-disable-line no-unused-vars
    	if([0,5,7,11,12,14].indexOf(ot) == -1) blob.l += 6;
    	else controlInfo = parse_ControlInfo(blob, 6, opts); // eslint-disable-line no-unused-vars
    	var cchText = blob.read_shift(2);
    	/*var cbRuns = */blob.read_shift(2);
    	/*var ifntEmpty = */parseuint16(blob, 2);
    	var len = blob.read_shift(2);
    	blob.l += len;
    	//var fmla = parse_ObjFmla(blob, s + length - blob.l);

    	for(var i = 1; i < blob.lens.length-1; ++i) {
    		if(blob.l-s != blob.lens[i]) throw new Error("TxO: bad continue record");
    		var hdr = blob[blob.l];
    		var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i+1]-blob.lens[i]-1);
    		texts += t;
    		if(texts.length >= (hdr ? cchText : 2*cchText)) break;
    	}
    	if(texts.length !== cchText && texts.length !== cchText*2) {
    		throw new Error("cchText: " + cchText + " != " + texts.length);
    	}

    	blob.l = s + length;
    	/* [MS-XLS] 2.5.272 TxORuns */
    //	var rgTxoRuns = [];
    //	for(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;
    //	var cchText2 = blob.read_shift(2);
    //	if(cchText2 !== cchText) throw new Error("TxOLastRun mismatch: " + cchText2 + " " + cchText);
    //	blob.l += 6;
    //	if(s + length != blob.l) throw new Error("TxO " + (s + length) + ", at " + blob.l);
    	return { t: texts };
    } catch(e) { blob.l = s + length; return { t: texts }; }
    }

    /* [MS-XLS] 2.4.140 */
    function parse_HLink(blob, length) {
    	var ref = parse_Ref8U(blob);
    	blob.l += 16; /* CLSID */
    	var hlink = parse_Hyperlink(blob, length-24);
    	return [ref, hlink];
    }
    function write_HLink(hl) {
    	var O = new_buf(24);
    	var ref = decode_cell(hl[0]);
    	O.write_shift(2, ref.r); O.write_shift(2, ref.r);
    	O.write_shift(2, ref.c); O.write_shift(2, ref.c);
    	var clsid = "d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
    	for(var i = 0; i < 16; ++i) O.write_shift(1, parseInt(clsid[i], 16));
    	return bconcat([O, write_Hyperlink(hl[1])]);
    }


    /* [MS-XLS] 2.4.141 */
    function parse_HLinkTooltip(blob, length) {
    	blob.read_shift(2);
    	var ref = parse_Ref8U(blob);
    	var wzTooltip = blob.read_shift((length-10)/2, 'dbcs-cont');
    	wzTooltip = wzTooltip.replace(chr0,"");
    	return [ref, wzTooltip];
    }
    function write_HLinkTooltip(hl) {
    	var TT = hl[1].Tooltip;
    	var O = new_buf(10 + 2 * (TT.length + 1));
    	O.write_shift(2, 0x0800);
    	var ref = decode_cell(hl[0]);
    	O.write_shift(2, ref.r); O.write_shift(2, ref.r);
    	O.write_shift(2, ref.c); O.write_shift(2, ref.c);
    	for(var i = 0; i < TT.length; ++i) O.write_shift(2, TT.charCodeAt(i));
    	O.write_shift(2, 0);
    	return O;
    }

    /* [MS-XLS] 2.4.63 */
    function parse_Country(blob)/*:[string|number, string|number]*/ {
    	var o = [0,0], d;
    	d = blob.read_shift(2); o[0] = CountryEnum[d] || d;
    	d = blob.read_shift(2); o[1] = CountryEnum[d] || d;
    	return o;
    }
    function write_Country(o) {
    	if(!o) o = new_buf(4);
    	o.write_shift(2, 0x01);
    	o.write_shift(2, 0x01);
    	return o;
    }

    /* [MS-XLS] 2.4.50 ClrtClient */
    function parse_ClrtClient(blob) {
    	var ccv = blob.read_shift(2);
    	var o = [];
    	while(ccv-->0) o.push(parse_LongRGB(blob));
    	return o;
    }

    /* [MS-XLS] 2.4.188 */
    function parse_Palette(blob) {
    	var ccv = blob.read_shift(2);
    	var o = [];
    	while(ccv-->0) o.push(parse_LongRGB(blob));
    	return o;
    }

    /* [MS-XLS] 2.4.354 */
    function parse_XFCRC(blob) {
    	blob.l += 2;
    	var o = {cxfs:0, crc:0};
    	o.cxfs = blob.read_shift(2);
    	o.crc = blob.read_shift(4);
    	return o;
    }

    /* [MS-XLS] 2.4.53 TODO: parse flags */
    /* [MS-XLSB] 2.4.323 TODO: parse flags */
    function parse_ColInfo(blob, length, opts) {
    	if(!opts.cellStyles) return parsenoop(blob, length);
    	var w = opts && opts.biff >= 12 ? 4 : 2;
    	var colFirst = blob.read_shift(w);
    	var colLast = blob.read_shift(w);
    	var coldx = blob.read_shift(w);
    	var ixfe = blob.read_shift(w);
    	var flags = blob.read_shift(2);
    	if(w == 2) blob.l += 2;
    	var o = ({s:colFirst, e:colLast, w:coldx, ixfe:ixfe, flags:flags}/*:any*/);
    	if(opts.biff >= 5 || !opts.biff) o.level = (flags >> 8) & 0x7;
    	return o;
    }
    function write_ColInfo(col, idx) {
    	var o = new_buf(12);
    	o.write_shift(2, idx);
    	o.write_shift(2, idx);
    	o.write_shift(2, col.width * 256);
    	o.write_shift(2, 0);
    	var f = 0;
    	if(col.hidden) f |= 1;
    	o.write_shift(1, f);
    	f = col.level || 0;
    	o.write_shift(1, f);
    	o.write_shift(2, 0);
    	return o;
    }

    /* [MS-XLS] 2.4.257 */
    function parse_Setup(blob, length) {
    	var o = {};
    	if(length < 32) return o;
    	blob.l += 16;
    	o.header = parse_Xnum(blob);
    	o.footer = parse_Xnum(blob);
    	blob.l += 2;
    	return o;
    }

    /* [MS-XLS] 2.4.261 */
    function parse_ShtProps(blob, length, opts) {
    	var def = {area:false};
    	if(opts.biff != 5) { blob.l += length; return def; }
    	var d = blob.read_shift(1); blob.l += 3;
    	if((d & 0x10)) def.area = true;
    	return def;
    }

    /* [MS-XLS] 2.4.241 */
    function write_RRTabId(n/*:number*/) {
    	var out = new_buf(2 * n);
    	for(var i = 0; i < n; ++i) out.write_shift(2, i+1);
    	return out;
    }

    var parse_Blank = parse_XLSCell; /* [MS-XLS] 2.4.20 Just the cell */
    var parse_Scl = parseuint16a; /* [MS-XLS] 2.4.247 num, den */
    var parse_String = parse_XLUnicodeString; /* [MS-XLS] 2.4.268 */

    /* --- Specific to versions before BIFF8 --- */
    function parse_ImData(blob) {
    	var cf = blob.read_shift(2);
    	var env = blob.read_shift(2);
    	var lcb = blob.read_shift(4);
    	var o = {fmt:cf, env:env, len:lcb, data:blob.slice(blob.l,blob.l+lcb)};
    	blob.l += lcb;
    	return o;
    }

    /* BIFF2_??? where ??? is the name from [XLS] */
    function parse_BIFF2STR(blob, length, opts) {
    	if(opts.biffguess && opts.biff == 5) opts.biff = 2;
    	var cell = parse_XLSCell(blob);
    	++blob.l;
    	var str = parse_XLUnicodeString2(blob, length-7, opts);
    	cell.t = 'str';
    	cell.val = str;
    	return cell;
    }

    function parse_BIFF2NUM(blob/*::, length*/) {
    	var cell = parse_XLSCell(blob);
    	++blob.l;
    	var num = parse_Xnum(blob);
    	cell.t = 'n';
    	cell.val = num;
    	return cell;
    }
    function write_BIFF2NUM(r/*:number*/, c/*:number*/, val/*:number*/) {
    	var out = new_buf(15);
    	write_BIFF2Cell(out, r, c);
    	out.write_shift(8, val, 'f');
    	return out;
    }

    function parse_BIFF2INT(blob) {
    	var cell = parse_XLSCell(blob);
    	++blob.l;
    	var num = blob.read_shift(2);
    	cell.t = 'n';
    	cell.val = num;
    	return cell;
    }
    function write_BIFF2INT(r/*:number*/, c/*:number*/, val/*:number*/) {
    	var out = new_buf(9);
    	write_BIFF2Cell(out, r, c);
    	out.write_shift(2, val);
    	return out;
    }

    function parse_BIFF2STRING(blob) {
    	var cch = blob.read_shift(1);
    	if(cch === 0) { blob.l++; return ""; }
    	return blob.read_shift(cch, 'sbcs-cont');
    }

    /* TODO: convert to BIFF8 font struct */
    function parse_BIFF2FONTXTRA(blob, length) {
    	blob.l += 6; // unknown
    	blob.l += 2; // font weight "bls"
    	blob.l += 1; // charset
    	blob.l += 3; // unknown
    	blob.l += 1; // font family
    	blob.l += length - 13;
    }

    /* TODO: parse rich text runs */
    function parse_RString(blob, length, opts) {
    	var end = blob.l + length;
    	var cell = parse_XLSCell(blob);
    	var cch = blob.read_shift(2);
    	var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
    	blob.l = end;
    	cell.t = 'str';
    	cell.val = str;
    	return cell;
    }
    /* from js-harb (C) 2014-present  SheetJS */
    var DBF_SUPPORTED_VERSIONS = [0x02, 0x03, 0x30, 0x31, 0x83, 0x8B, 0x8C, 0xF5];
    var DBF = /*#__PURE__*/(function() {
    var dbf_codepage_map = {
    	/* Code Pages Supported by Visual FoxPro */
    	/*::[*/0x01/*::]*/:   437,           /*::[*/0x02/*::]*/:   850,
    	/*::[*/0x03/*::]*/:  1252,           /*::[*/0x04/*::]*/: 10000,
    	/*::[*/0x64/*::]*/:   852,           /*::[*/0x65/*::]*/:   866,
    	/*::[*/0x66/*::]*/:   865,           /*::[*/0x67/*::]*/:   861,
    	/*::[*/0x68/*::]*/:   895,           /*::[*/0x69/*::]*/:   620,
    	/*::[*/0x6A/*::]*/:   737,           /*::[*/0x6B/*::]*/:   857,
    	/*::[*/0x78/*::]*/:   950,           /*::[*/0x79/*::]*/:   949,
    	/*::[*/0x7A/*::]*/:   936,           /*::[*/0x7B/*::]*/:   932,
    	/*::[*/0x7C/*::]*/:   874,           /*::[*/0x7D/*::]*/:  1255,
    	/*::[*/0x7E/*::]*/:  1256,           /*::[*/0x96/*::]*/: 10007,
    	/*::[*/0x97/*::]*/: 10029,           /*::[*/0x98/*::]*/: 10006,
    	/*::[*/0xC8/*::]*/:  1250,           /*::[*/0xC9/*::]*/:  1251,
    	/*::[*/0xCA/*::]*/:  1254,           /*::[*/0xCB/*::]*/:  1253,

    	/* shapefile DBF extension */
    	/*::[*/0x00/*::]*/: 20127,           /*::[*/0x08/*::]*/:   865,
    	/*::[*/0x09/*::]*/:   437,           /*::[*/0x0A/*::]*/:   850,
    	/*::[*/0x0B/*::]*/:   437,           /*::[*/0x0D/*::]*/:   437,
    	/*::[*/0x0E/*::]*/:   850,           /*::[*/0x0F/*::]*/:   437,
    	/*::[*/0x10/*::]*/:   850,           /*::[*/0x11/*::]*/:   437,
    	/*::[*/0x12/*::]*/:   850,           /*::[*/0x13/*::]*/:   932,
    	/*::[*/0x14/*::]*/:   850,           /*::[*/0x15/*::]*/:   437,
    	/*::[*/0x16/*::]*/:   850,           /*::[*/0x17/*::]*/:   865,
    	/*::[*/0x18/*::]*/:   437,           /*::[*/0x19/*::]*/:   437,
    	/*::[*/0x1A/*::]*/:   850,           /*::[*/0x1B/*::]*/:   437,
    	/*::[*/0x1C/*::]*/:   863,           /*::[*/0x1D/*::]*/:   850,
    	/*::[*/0x1F/*::]*/:   852,           /*::[*/0x22/*::]*/:   852,
    	/*::[*/0x23/*::]*/:   852,           /*::[*/0x24/*::]*/:   860,
    	/*::[*/0x25/*::]*/:   850,           /*::[*/0x26/*::]*/:   866,
    	/*::[*/0x37/*::]*/:   850,           /*::[*/0x40/*::]*/:   852,
    	/*::[*/0x4D/*::]*/:   936,           /*::[*/0x4E/*::]*/:   949,
    	/*::[*/0x4F/*::]*/:   950,           /*::[*/0x50/*::]*/:   874,
    	/*::[*/0x57/*::]*/:  1252,           /*::[*/0x58/*::]*/:  1252,
    	/*::[*/0x59/*::]*/:  1252,           /*::[*/0x6C/*::]*/:   863,
    	/*::[*/0x86/*::]*/:   737,           /*::[*/0x87/*::]*/:   852,
    	/*::[*/0x88/*::]*/:   857,           /*::[*/0xCC/*::]*/:  1257,

    	/*::[*/0xFF/*::]*/: 16969
    };
    var dbf_reverse_map = evert({
    	/*::[*/0x01/*::]*/:   437,           /*::[*/0x02/*::]*/:   850,
    	/*::[*/0x03/*::]*/:  1252,           /*::[*/0x04/*::]*/: 10000,
    	/*::[*/0x64/*::]*/:   852,           /*::[*/0x65/*::]*/:   866,
    	/*::[*/0x66/*::]*/:   865,           /*::[*/0x67/*::]*/:   861,
    	/*::[*/0x68/*::]*/:   895,           /*::[*/0x69/*::]*/:   620,
    	/*::[*/0x6A/*::]*/:   737,           /*::[*/0x6B/*::]*/:   857,
    	/*::[*/0x78/*::]*/:   950,           /*::[*/0x79/*::]*/:   949,
    	/*::[*/0x7A/*::]*/:   936,           /*::[*/0x7B/*::]*/:   932,
    	/*::[*/0x7C/*::]*/:   874,           /*::[*/0x7D/*::]*/:  1255,
    	/*::[*/0x7E/*::]*/:  1256,           /*::[*/0x96/*::]*/: 10007,
    	/*::[*/0x97/*::]*/: 10029,           /*::[*/0x98/*::]*/: 10006,
    	/*::[*/0xC8/*::]*/:  1250,           /*::[*/0xC9/*::]*/:  1251,
    	/*::[*/0xCA/*::]*/:  1254,           /*::[*/0xCB/*::]*/:  1253,
    	/*::[*/0x00/*::]*/: 20127
    });
    /* TODO: find an actual specification */
    function dbf_to_aoa(buf, opts)/*:AOA*/ {
    	var out/*:AOA*/ = [];
    	var d/*:Block*/ = (new_raw_buf(1)/*:any*/);
    	switch(opts.type) {
    		case 'base64': d = s2a(Base64_decode(buf)); break;
    		case 'binary': d = s2a(buf); break;
    		case 'buffer':
    		case 'array': d = buf; break;
    	}
    	prep_blob(d, 0);

    	/* header */
    	var ft = d.read_shift(1);
    	var memo = !!(ft & 0x88);
    	var vfp = false, l7 = false;
    	switch(ft) {
    		case 0x02: break; // dBASE II
    		case 0x03: break; // dBASE III
    		case 0x30: vfp = true; memo = true; break; // VFP
    		case 0x31: vfp = true; memo = true; break; // VFP with autoincrement
    		// 0x43 dBASE IV SQL table files
    		// 0x63 dBASE IV SQL system files
    		case 0x83: break; // dBASE III with memo
    		case 0x8B: break; // dBASE IV with memo
    		case 0x8C: l7 = true; break; // dBASE Level 7 with memo
    		// case 0xCB dBASE IV SQL table files with memo
    		case 0xF5: break; // FoxPro 2.x with memo
    		// case 0xFB FoxBASE
    		default: throw new Error("DBF Unsupported Version: " + ft.toString(16));
    	}

    	var nrow = 0, fpos = 0x0209;
    	if(ft == 0x02) nrow = d.read_shift(2);
    	d.l += 3; // dBASE II stores DDMMYY date, others use YYMMDD
    	if(ft != 0x02) nrow = d.read_shift(4);
    	if(nrow > 1048576) nrow = 1e6;

    	if(ft != 0x02) fpos = d.read_shift(2); // header length
    	var rlen = d.read_shift(2); // record length

    	var /*flags = 0,*/ current_cp = opts.codepage || 1252;
    	if(ft != 0x02) { // 20 reserved bytes
    		d.l+=16;
    		/*flags = */d.read_shift(1);
    		//if(memo && ((flags & 0x02) === 0)) throw new Error("DBF Flags " + flags.toString(16) + " ft " + ft.toString(16));

    		/* codepage present in FoxPro and dBASE Level 7 */
    		if(d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
    		d.l+=1;

    		d.l+=2;
    	}
    	if(l7) d.l += 36; // Level 7: 32 byte "Language driver name", 4 byte reserved

    /*:: type DBFField = { name:string; len:number; type:string; } */
    	var fields/*:Array<DBFField>*/ = [], field/*:DBFField*/ = ({}/*:any*/);
    	var hend = Math.min(d.length, (ft == 0x02 ? 0x209 : (fpos - 10 - (vfp ? 264 : 0))));
    	var ww = l7 ? 32 : 11;
    	while(d.l < hend && d[d.l] != 0x0d) {
    		field = ({}/*:any*/);
    		field.name = $cptable.utils.decode(current_cp, d.slice(d.l, d.l+ww)).replace(/[\u0000\r\n].*$/g,"");
    		d.l += ww;
    		field.type = String.fromCharCode(d.read_shift(1));
    		if(ft != 0x02 && !l7) field.offset = d.read_shift(4);
    		field.len = d.read_shift(1);
    		if(ft == 0x02) field.offset = d.read_shift(2);
    		field.dec = d.read_shift(1);
    		if(field.name.length) fields.push(field);
    		if(ft != 0x02) d.l += l7 ? 13 : 14;
    		switch(field.type) {
    			case 'B': // Double (VFP) / Binary (dBASE L7)
    				if((!vfp || field.len != 8) && opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
    				break;
    			case 'G': // General (FoxPro and dBASE L7)
    			case 'P': // Picture (FoxPro and dBASE L7)
    				if(opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
    				break;
    			case '+': // Autoincrement (dBASE L7 only)
    			case '0': // _NullFlags (VFP only)
    			case '@': // Timestamp (dBASE L7 only)
    			case 'C': // Character (dBASE II)
    			case 'D': // Date (dBASE III)
    			case 'F': // Float (dBASE IV)
    			case 'I': // Long (VFP and dBASE L7)
    			case 'L': // Logical (dBASE II)
    			case 'M': // Memo (dBASE III)
    			case 'N': // Number (dBASE II)
    			case 'O': // Double (dBASE L7 only)
    			case 'T': // Datetime (VFP only)
    			case 'Y': // Currency (VFP only)
    				break;
    			default: throw new Error('Unknown Field Type: ' + field.type);
    		}
    	}

    	if(d[d.l] !== 0x0D) d.l = fpos-1;
    	if(d.read_shift(1) !== 0x0D) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
    	d.l = fpos;

    	/* data */
    	var R = 0, C = 0;
    	out[0] = [];
    	for(C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;
    	while(nrow-- > 0) {
    		if(d[d.l] === 0x2A) {
    			// TODO: record marked as deleted -- create a hidden row?
    			d.l+=rlen;
    			continue;
    		}
    		++d.l;
    		out[++R] = []; C = 0;
    		for(C = 0; C != fields.length; ++C) {
    			var dd = d.slice(d.l, d.l+fields[C].len); d.l+=fields[C].len;
    			prep_blob(dd, 0);
    			var s = $cptable.utils.decode(current_cp, dd);
    			switch(fields[C].type) {
    				case 'C':
    					// NOTE: it is conventional to write '  /  /  ' for empty dates
    					if(s.trim().length) out[R][C] = s.replace(/\s+$/,"");
    					break;
    				case 'D':
    					if(s.length === 8) out[R][C] = new Date(+s.slice(0,4), +s.slice(4,6)-1, +s.slice(6,8));
    					else out[R][C] = s;
    					break;
    				case 'F': out[R][C] = parseFloat(s.trim()); break;
    				case '+': case 'I': out[R][C] = l7 ? dd.read_shift(-4, 'i') ^ 0x80000000 : dd.read_shift(4, 'i'); break;
    				case 'L': switch(s.trim().toUpperCase()) {
    					case 'Y': case 'T': out[R][C] = true; break;
    					case 'N': case 'F': out[R][C] = false; break;
    					case '': case '?': break;
    					default: throw new Error("DBF Unrecognized L:|" + s + "|");
    					} break;
    				case 'M': /* TODO: handle memo files */
    					if(!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
    					out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10): dd.read_shift(4));
    					break;
    				case 'N':
    					s = s.replace(/\u0000/g,"").trim();
    					// NOTE: dBASE II interprets "  .  " as 0
    					if(s && s != ".") out[R][C] = +s || 0; break;
    				case '@':
    					// NOTE: dBASE specs appear to be incorrect
    					out[R][C] = new Date(dd.read_shift(-8, 'f') - 0x388317533400);
    					break;
    				case 'T': out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4)); break;
    				case 'Y': out[R][C] = dd.read_shift(4,'i')/1e4 + (dd.read_shift(4, 'i')/1e4)*Math.pow(2,32); break;
    				case 'O': out[R][C] = -dd.read_shift(-8, 'f'); break;
    				case 'B': if(vfp && fields[C].len == 8) { out[R][C] = dd.read_shift(8,'f'); break; }
    					/* falls through */
    				case 'G': case 'P': dd.l += fields[C].len; break;
    				case '0':
    					if(fields[C].name === '_NullFlags') break;
    					/* falls through */
    				default: throw new Error("DBF Unsupported data type " + fields[C].type);
    			}
    		}
    	}
    	if(ft != 0x02) if(d.l < d.length && d[d.l++] != 0x1A) throw new Error("DBF EOF Marker missing " + (d.l-1) + " of " + d.length + " " + d[d.l-1].toString(16));
    	if(opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
    	opts.DBF = fields;
    	return out;
    }

    function dbf_to_sheet(buf, opts)/*:Worksheet*/ {
    	var o = opts || {};
    	if(!o.dateNF) o.dateNF = "yyyymmdd";
    	var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);
    	ws["!cols"] = o.DBF.map(function(field) { return {
    		wch: field.len,
    		DBF: field
    	};});
    	delete o.DBF;
    	return ws;
    }

    function dbf_to_workbook(buf, opts)/*:Workbook*/ {
    	try { return sheet_to_workbook(dbf_to_sheet(buf, opts), opts); }
    	catch(e) { if(opts && opts.WTF) throw e; }
    	return ({SheetNames:[],Sheets:{}});
    }

    var _RLEN = { 'B': 8, 'C': 250, 'L': 1, 'D': 8, '?': 0, '': 0 };
    function sheet_to_dbf(ws/*:Worksheet*/, opts/*:WriteOpts*/) {
    	var o = opts || {};
    	if(+o.codepage >= 0) set_cp(+o.codepage);
    	if(o.type == "string") throw new Error("Cannot write DBF to JS string");
    	var ba = buf_array();
    	var aoa/*:AOA*/ = sheet_to_json(ws, {header:1, raw:true, cellDates:true});
    	var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
    	var i = 0, j = 0, hcnt = 0, rlen = 1;
    	for(i = 0; i < headers.length; ++i) {
    		if(((cols[i]||{}).DBF||{}).name) { headers[i] = cols[i].DBF.name; ++hcnt; continue; }
    		if(headers[i] == null) continue;
    		++hcnt;
    		if(typeof headers[i] === 'number') headers[i] = headers[i].toString(10);
    		if(typeof headers[i] !== 'string') throw new Error("DBF Invalid column name " + headers[i] + " |" + (typeof headers[i]) + "|");
    		if(headers.indexOf(headers[i]) !== i) for(j=0; j<1024;++j)
    			if(headers.indexOf(headers[i] + "_" + j) == -1) { headers[i] += "_" + j; break; }
    	}
    	var range = safe_decode_range(ws['!ref']);
    	var coltypes/*:Array<string>*/ = [];
    	var colwidths/*:Array<number>*/ = [];
    	var coldecimals/*:Array<number>*/ = [];
    	for(i = 0; i <= range.e.c - range.s.c; ++i) {
    		var guess = '', _guess = '', maxlen = 0;
    		var col/*:Array<any>*/ = [];
    		for(j=0; j < data.length; ++j) {
    			if(data[j][i] != null) col.push(data[j][i]);
    		}
    		if(col.length == 0 || headers[i] == null) { coltypes[i] = '?'; continue; }
    		for(j = 0; j < col.length; ++j) {
    			switch(typeof col[j]) {
    				/* TODO: check if L2 compat is desired */
    				case 'number': _guess = 'B'; break;
    				case 'string': _guess = 'C'; break;
    				case 'boolean': _guess = 'L'; break;
    				case 'object': _guess = col[j] instanceof Date ? 'D' : 'C'; break;
    				default: _guess = 'C';
    			}
    			maxlen = Math.max(maxlen, String(col[j]).length);
    			guess = guess && guess != _guess ? 'C' : _guess;
    			//if(guess == 'C') break;
    		}
    		if(maxlen > 250) maxlen = 250;
    		_guess = ((cols[i]||{}).DBF||{}).type;
    		/* TODO: more fine grained control over DBF type resolution */
    		if(_guess == 'C') {
    			if(cols[i].DBF.len > maxlen) maxlen = cols[i].DBF.len;
    		}
    		if(guess == 'B' && _guess == 'N') {
    			guess = 'N';
    			coldecimals[i] = cols[i].DBF.dec;
    			maxlen = cols[i].DBF.len;
    		}
    		colwidths[i] = guess == 'C' || _guess == 'N' ? maxlen : (_RLEN[guess] || 0);
    		rlen += colwidths[i];
    		coltypes[i] = guess;
    	}

    	var h = ba.next(32);
    	h.write_shift(4, 0x13021130);
    	h.write_shift(4, data.length);
    	h.write_shift(2, 296 + 32 * hcnt);
    	h.write_shift(2, rlen);
    	for(i=0; i < 4; ++i) h.write_shift(4, 0);
    	h.write_shift(4, 0x00000000 | ((+dbf_reverse_map[/*::String(*/current_ansi/*::)*/] || 0x03)<<8));

    	for(i = 0, j = 0; i < headers.length; ++i) {
    		if(headers[i] == null) continue;
    		var hf = ba.next(32);
    		var _f = (headers[i].slice(-10) + "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00").slice(0, 11);
    		hf.write_shift(1, _f, "sbcs");
    		hf.write_shift(1, coltypes[i] == '?' ? 'C' : coltypes[i], "sbcs");
    		hf.write_shift(4, j);
    		hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);
    		hf.write_shift(1, coldecimals[i] || 0);
    		hf.write_shift(1, 0x02);
    		hf.write_shift(4, 0);
    		hf.write_shift(1, 0);
    		hf.write_shift(4, 0);
    		hf.write_shift(4, 0);
    		j += (colwidths[i] || _RLEN[coltypes[i]] || 0);
    	}

    	var hb = ba.next(264);
    	hb.write_shift(4, 0x0000000D);
    	for(i=0; i < 65;++i) hb.write_shift(4, 0x00000000);
    	for(i=0; i < data.length; ++i) {
    		var rout = ba.next(rlen);
    		rout.write_shift(1, 0);
    		for(j=0; j<headers.length; ++j) {
    			if(headers[j] == null) continue;
    			switch(coltypes[j]) {
    				case 'L': rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46); break;
    				case 'B': rout.write_shift(8, data[i][j]||0, 'f'); break;
    				case 'N':
    					var _n = "0";
    					if(typeof data[i][j] == "number") _n = data[i][j].toFixed(coldecimals[j]||0);
    					for(hcnt=0; hcnt < colwidths[j]-_n.length; ++hcnt) rout.write_shift(1, 0x20);
    					rout.write_shift(1, _n, "sbcs");
    					break;
    				case 'D':
    					if(!data[i][j]) rout.write_shift(8, "00000000", "sbcs");
    					else {
    						rout.write_shift(4, ("0000"+data[i][j].getFullYear()).slice(-4), "sbcs");
    						rout.write_shift(2, ("00"+(data[i][j].getMonth()+1)).slice(-2), "sbcs");
    						rout.write_shift(2, ("00"+data[i][j].getDate()).slice(-2), "sbcs");
    					} break;
    				case 'C':
    					var _s = String(data[i][j] != null ? data[i][j] : "").slice(0, colwidths[j]);
    					rout.write_shift(1, _s, "sbcs");
    					for(hcnt=0; hcnt < colwidths[j]-_s.length; ++hcnt) rout.write_shift(1, 0x20); break;
    			}
    		}
    		// data
    	}
    	ba.next(1).write_shift(1, 0x1A);
    	return ba.end();
    }
    	return {
    		to_workbook: dbf_to_workbook,
    		to_sheet: dbf_to_sheet,
    		from_sheet: sheet_to_dbf
    	};
    })();

    var SYLK = /*#__PURE__*/(function() {
    	/* TODO: stress test sequences */
    	var sylk_escapes = ({
    		AA:'À', BA:'Á', CA:'Â', DA:195, HA:'Ä', JA:197,
    		AE:'È', BE:'É', CE:'Ê',         HE:'Ë',
    		AI:'Ì', BI:'Í', CI:'Î',         HI:'Ï',
    		AO:'Ò', BO:'Ó', CO:'Ô', DO:213, HO:'Ö',
    		AU:'Ù', BU:'Ú', CU:'Û',         HU:'Ü',
    		Aa:'à', Ba:'á', Ca:'â', Da:227, Ha:'ä', Ja:229,
    		Ae:'è', Be:'é', Ce:'ê',         He:'ë',
    		Ai:'ì', Bi:'í', Ci:'î',         Hi:'ï',
    		Ao:'ò', Bo:'ó', Co:'ô', Do:245, Ho:'ö',
    		Au:'ù', Bu:'ú', Cu:'û',         Hu:'ü',
    		KC:'Ç', Kc:'ç', q:'æ',  z:'œ',  a:'Æ',  j:'Œ',
    		DN:209, Dn:241, Hy:255,
    		S:169,  c:170,  R:174,  "B ":180,
    		/*::[*/0/*::]*/:176,    /*::[*/1/*::]*/:177,  /*::[*/2/*::]*/:178,
    		/*::[*/3/*::]*/:179,    /*::[*/5/*::]*/:181,  /*::[*/6/*::]*/:182,
    		/*::[*/7/*::]*/:183,    Q:185,  k:186,  b:208,  i:216,  l:222,  s:240,  y:248,
    		"!":161, '"':162, "#":163, "(":164, "%":165, "'":167, "H ":168,
    		"+":171, ";":187, "<":188, "=":189, ">":190, "?":191, "{":223
    	}/*:any*/);
    	var sylk_char_regex = new RegExp("\u001BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g,"\\$1") + "|\\|)", "gm");
    	var sylk_char_fn = function(_, $1){ var o = sylk_escapes[$1]; return typeof o == "number" ? _getansi(o) : o; };
    	var decode_sylk_char = function($$, $1, $2) { var newcc = (($1.charCodeAt(0) - 0x20)<<4) | ($2.charCodeAt(0) - 0x30); return newcc == 59 ? $$ : _getansi(newcc); };
    	sylk_escapes["|"] = 254;
    	/* TODO: find an actual specification */
    	function sylk_to_aoa(d/*:RawData*/, opts)/*:[AOA, Worksheet]*/ {
    		switch(opts.type) {
    			case 'base64': return sylk_to_aoa_str(Base64_decode(d), opts);
    			case 'binary': return sylk_to_aoa_str(d, opts);
    			case 'buffer': return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);
    			case 'array': return sylk_to_aoa_str(cc2str(d), opts);
    		}
    		throw new Error("Unrecognized type " + opts.type);
    	}
    	function sylk_to_aoa_str(str/*:string*/, opts)/*:[AOA, Worksheet]*/ {
    		var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr/*:AOA*/ = [];
    		var formats/*:Array<string>*/ = [];
    		var next_cell_format/*:string|null*/ = null;
    		var sht = {}, rowinfo/*:Array<RowInfo>*/ = [], colinfo/*:Array<ColInfo>*/ = [], cw/*:Array<string>*/ = [];
    		var Mval = 0, j;
    		if(+opts.codepage >= 0) set_cp(+opts.codepage);
    		for (; ri !== records.length; ++ri) {
    			Mval = 0;
    			var rstr=records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
    			var record=rstr.replace(/;;/g, "\u0000").split(";").map(function(x) { return x.replace(/\u0000/g, ";"); });
    			var RT=record[0], val;
    			if(rstr.length > 0) switch(RT) {
    			case 'ID': break; /* header */
    			case 'E': break; /* EOF */
    			case 'B': break; /* dimensions */
    			case 'O': break; /* options? */
    			case 'W': break; /* window? */
    			case 'P':
    				if(record[1].charAt(0) == 'P')
    					formats.push(rstr.slice(3).replace(/;;/g, ";"));
    				break;
    			case 'C':
    			var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;
    			for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
    				case 'A': break; // TODO: comment
    				case 'X': C = parseInt(record[rj].slice(1))-1; C_seen_X = true; break;
    				case 'Y':
    					R = parseInt(record[rj].slice(1))-1; if(!C_seen_X) C = 0;
    					for(j = arr.length; j <= R; ++j) arr[j] = [];
    					break;
    				case 'K':
    					val = record[rj].slice(1);
    					if(val.charAt(0) === '"') val = val.slice(1,val.length - 1);
    					else if(val === 'TRUE') val = true;
    					else if(val === 'FALSE') val = false;
    					else if(!isNaN(fuzzynum(val))) {
    						val = fuzzynum(val);
    						if(next_cell_format !== null && fmt_is_date(next_cell_format)) val = numdate(val);
    					} else if(!isNaN(fuzzydate(val).getDate())) {
    						val = parseDate(val);
    					}
    					if(typeof $cptable !== 'undefined' && typeof val == "string" && ((opts||{}).type != "string") && (opts||{}).codepage) val = $cptable.utils.decode(opts.codepage, val);
    					C_seen_K = true;
    					break;
    				case 'E':
    					C_seen_E = true;
    					var formula = rc_to_a1(record[rj].slice(1), {r:R,c:C});
    					arr[R][C] = [arr[R][C], formula];
    					break;
    				case 'S':
    					C_seen_S = true;
    					arr[R][C] = [arr[R][C], "S5S"];
    					break;
    				case 'G': break; // unknown
    				case 'R': _R = parseInt(record[rj].slice(1))-1; break;
    				case 'C': _C = parseInt(record[rj].slice(1))-1; break;
    				default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
    			}
    			if(C_seen_K) {
    				if(arr[R][C] && arr[R][C].length == 2) arr[R][C][0] = val;
    				else arr[R][C] = val;
    				next_cell_format = null;
    			}
    			if(C_seen_S) {
    				if(C_seen_E) throw new Error("SYLK shared formula cannot have own formula");
    				var shrbase = _R > -1 && arr[_R][_C];
    				if(!shrbase || !shrbase[1]) throw new Error("SYLK shared formula cannot find base");
    				arr[R][C][1] = shift_formula_str(shrbase[1], {r: R - _R, c: C - _C});
    			}
    			break;
    			case 'F':
    			var F_seen = 0;
    			for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
    				case 'X': C = parseInt(record[rj].slice(1))-1; ++F_seen; break;
    				case 'Y':
    					R = parseInt(record[rj].slice(1))-1; /*C = 0;*/
    					for(j = arr.length; j <= R; ++j) arr[j] = [];
    					break;
    				case 'M': Mval = parseInt(record[rj].slice(1)) / 20; break;
    				case 'F': break; /* ??? */
    				case 'G': break; /* hide grid */
    				case 'P':
    					next_cell_format = formats[parseInt(record[rj].slice(1))];
    					break;
    				case 'S': break; /* cell style */
    				case 'D': break; /* column */
    				case 'N': break; /* font */
    				case 'W':
    					cw = record[rj].slice(1).split(" ");
    					for(j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
    						Mval = parseInt(cw[2], 10);
    						colinfo[j-1] = Mval === 0 ? {hidden:true}: {wch:Mval}; process_col(colinfo[j-1]);
    					} break;
    				case 'C': /* default column format */
    					C = parseInt(record[rj].slice(1))-1;
    					if(!colinfo[C]) colinfo[C] = {};
    					break;
    				case 'R': /* row properties */
    					R = parseInt(record[rj].slice(1))-1;
    					if(!rowinfo[R]) rowinfo[R] = {};
    					if(Mval > 0) { rowinfo[R].hpt = Mval; rowinfo[R].hpx = pt2px(Mval); }
    					else if(Mval === 0) rowinfo[R].hidden = true;
    					break;
    				default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
    			}
    			if(F_seen < 1) next_cell_format = null; break;
    			default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
    			}
    		}
    		if(rowinfo.length > 0) sht['!rows'] = rowinfo;
    		if(colinfo.length > 0) sht['!cols'] = colinfo;
    		if(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
    		return [arr, sht];
    	}

    	function sylk_to_sheet(d/*:RawData*/, opts)/*:Worksheet*/ {
    		var aoasht = sylk_to_aoa(d, opts);
    		var aoa = aoasht[0], ws = aoasht[1];
    		var o = aoa_to_sheet(aoa, opts);
    		keys(ws).forEach(function(k) { o[k] = ws[k]; });
    		return o;
    	}

    	function sylk_to_workbook(d/*:RawData*/, opts)/*:Workbook*/ { return sheet_to_workbook(sylk_to_sheet(d, opts), opts); }

    	function write_ws_cell_sylk(cell/*:Cell*/, ws/*:Worksheet*/, R/*:number*/, C/*:number*//*::, opts*/)/*:string*/ {
    		var o = "C;Y" + (R+1) + ";X" + (C+1) + ";K";
    		switch(cell.t) {
    			case 'n':
    				o += (cell.v||0);
    				if(cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, {r:R, c:C}); break;
    			case 'b': o += cell.v ? "TRUE" : "FALSE"; break;
    			case 'e': o += cell.w || cell.v; break;
    			case 'd': o += '"' + (cell.w || cell.v) + '"'; break;
    			case 's': o += '"' + cell.v.replace(/"/g,"").replace(/;/g, ";;") + '"'; break;
    		}
    		return o;
    	}

    	function write_ws_cols_sylk(out, cols) {
    		cols.forEach(function(col, i) {
    			var rec = "F;W" + (i+1) + " " + (i+1) + " ";
    			if(col.hidden) rec += "0";
    			else {
    				if(typeof col.width == 'number' && !col.wpx) col.wpx = width2px(col.width);
    				if(typeof col.wpx == 'number' && !col.wch) col.wch = px2char(col.wpx);
    				if(typeof col.wch == 'number') rec += Math.round(col.wch);
    			}
    			if(rec.charAt(rec.length - 1) != " ") out.push(rec);
    		});
    	}

    	function write_ws_rows_sylk(out/*:Array<string>*/, rows/*:Array<RowInfo>*/) {
    		rows.forEach(function(row, i) {
    			var rec = "F;";
    			if(row.hidden) rec += "M0;";
    			else if(row.hpt) rec += "M" + 20 * row.hpt + ";";
    			else if(row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
    			if(rec.length > 2) out.push(rec + "R" + (i+1));
    		});
    	}

    	function sheet_to_sylk(ws/*:Worksheet*/, opts/*:?any*/)/*:string*/ {
    		var preamble/*:Array<string>*/ = ["ID;PWXL;N;E"], o/*:Array<string>*/ = [];
    		var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
    		var dense = Array.isArray(ws);
    		var RS = "\r\n";

    		preamble.push("P;PGeneral");
    		preamble.push("F;P0;DG0G8;M255");
    		if(ws['!cols']) write_ws_cols_sylk(preamble, ws['!cols']);
    		if(ws['!rows']) write_ws_rows_sylk(preamble, ws['!rows']);

    		preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c,r.s.r,r.e.c,r.e.r].join(" "));
    		for(var R = r.s.r; R <= r.e.r; ++R) {
    			for(var C = r.s.c; C <= r.e.c; ++C) {
    				var coord = encode_cell({r:R,c:C});
    				cell = dense ? (ws[R]||[])[C]: ws[coord];
    				if(!cell || (cell.v == null && (!cell.f || cell.F))) continue;
    				o.push(write_ws_cell_sylk(cell, ws, R, C));
    			}
    		}
    		return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
    	}

    	return {
    		to_workbook: sylk_to_workbook,
    		to_sheet: sylk_to_sheet,
    		from_sheet: sheet_to_sylk
    	};
    })();

    var DIF = /*#__PURE__*/(function() {
    	function dif_to_aoa(d/*:RawData*/, opts)/*:AOA*/ {
    		switch(opts.type) {
    			case 'base64': return dif_to_aoa_str(Base64_decode(d), opts);
    			case 'binary': return dif_to_aoa_str(d, opts);
    			case 'buffer': return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);
    			case 'array': return dif_to_aoa_str(cc2str(d), opts);
    		}
    		throw new Error("Unrecognized type " + opts.type);
    	}
    	function dif_to_aoa_str(str/*:string*/, opts)/*:AOA*/ {
    		var records = str.split('\n'), R = -1, C = -1, ri = 0, arr/*:AOA*/ = [];
    		for (; ri !== records.length; ++ri) {
    			if (records[ri].trim() === 'BOT') { arr[++R] = []; C = 0; continue; }
    			if (R < 0) continue;
    			var metadata = records[ri].trim().split(",");
    			var type = metadata[0], value = metadata[1];
    			++ri;
    			var data = records[ri] || "";
    			while(((data.match(/["]/g)||[]).length & 1) && ri < records.length - 1) data += "\n" + records[++ri];
    			data = data.trim();
    			switch (+type) {
    				case -1:
    					if (data === 'BOT') { arr[++R] = []; C = 0; continue; }
    					else if (data !== 'EOD') throw new Error("Unrecognized DIF special command " + data);
    					break;
    				case 0:
    					if(data === 'TRUE') arr[R][C] = true;
    					else if(data === 'FALSE') arr[R][C] = false;
    					else if(!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);
    					else if(!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);
    					else arr[R][C] = value;
    					++C; break;
    				case 1:
    					data = data.slice(1,data.length-1);
    					data = data.replace(/""/g, '"');
    					if(data && data.match(/^=".*"$/)) data = data.slice(2, -1);
    					arr[R][C++] = data !== '' ? data : null;
    					break;
    			}
    			if (data === 'EOD') break;
    		}
    		if(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
    		return arr;
    	}

    	function dif_to_sheet(str/*:string*/, opts)/*:Worksheet*/ { return aoa_to_sheet(dif_to_aoa(str, opts), opts); }
    	function dif_to_workbook(str/*:string*/, opts)/*:Workbook*/ { return sheet_to_workbook(dif_to_sheet(str, opts), opts); }

    	var sheet_to_dif = /*#__PURE__*/(function() {
    		var push_field = function pf(o/*:Array<string>*/, topic/*:string*/, v/*:number*/, n/*:number*/, s/*:string*/) {
    			o.push(topic);
    			o.push(v + "," + n);
    			o.push('"' + s.replace(/"/g,'""') + '"');
    		};
    		var push_value = function po(o/*:Array<string>*/, type/*:number*/, v/*:any*/, s/*:string*/) {
    			o.push(type + "," + v);
    			o.push(type == 1 ? '"' + s.replace(/"/g,'""') + '"' : s);
    		};
    		return function sheet_to_dif(ws/*:Worksheet*//*::, opts:?any*/)/*:string*/ {
    			var o/*:Array<string>*/ = [];
    			var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
    			var dense = Array.isArray(ws);
    			push_field(o, "TABLE", 0, 1, "sheetjs");
    			push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1,"");
    			push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1,"");
    			push_field(o, "DATA", 0, 0,"");
    			for(var R = r.s.r; R <= r.e.r; ++R) {
    				push_value(o, -1, 0, "BOT");
    				for(var C = r.s.c; C <= r.e.c; ++C) {
    					var coord = encode_cell({r:R,c:C});
    					cell = dense ? (ws[R]||[])[C] : ws[coord];
    					if(!cell) { push_value(o, 1, 0, ""); continue;}
    					switch(cell.t) {
    						case 'n':
    							var val = cell.w ;
    							if(!val && cell.v != null) val = cell.v;
    							if(val == null) {
    								if(cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f);
    								else push_value(o, 1, 0, "");
    							}
    							else push_value(o, 0, val, "V");
    							break;
    						case 'b':
    							push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
    							break;
    						case 's':
    							push_value(o, 1, 0, (isNaN(cell.v)) ? cell.v : '="' + cell.v + '"');
    							break;
    						case 'd':
    							if(!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
    							push_value(o, 0, cell.w, "V");
    							break;
    						default: push_value(o, 1, 0, "");
    					}
    				}
    			}
    			push_value(o, -1, 0, "EOD");
    			var RS = "\r\n";
    			var oo = o.join(RS);
    			//while((oo.length & 0x7F) != 0) oo += "\0";
    			return oo;
    		};
    	})();
    	return {
    		to_workbook: dif_to_workbook,
    		to_sheet: dif_to_sheet,
    		from_sheet: sheet_to_dif
    	};
    })();

    var ETH = /*#__PURE__*/(function() {
    	function decode(s/*:string*/)/*:string*/ { return s.replace(/\\b/g,"\\").replace(/\\c/g,":").replace(/\\n/g,"\n"); }
    	function encode(s/*:string*/)/*:string*/ { return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g,"\\n"); }

    	function eth_to_aoa(str/*:string*/, opts)/*:AOA*/ {
    		var records = str.split('\n'), R = -1, C = -1, ri = 0, arr/*:AOA*/ = [];
    		for (; ri !== records.length; ++ri) {
    			var record = records[ri].trim().split(":");
    			if(record[0] !== 'cell') continue;
    			var addr = decode_cell(record[1]);
    			if(arr.length <= addr.r) for(R = arr.length; R <= addr.r; ++R) if(!arr[R]) arr[R] = [];
    			R = addr.r; C = addr.c;
    			switch(record[2]) {
    				case 't': arr[R][C] = decode(record[3]); break;
    				case 'v': arr[R][C] = +record[3]; break;
    				case 'vtf': var _f = record[record.length - 1];
    					/* falls through */
    				case 'vtc':
    					switch(record[3]) {
    						case 'nl': arr[R][C] = +record[4] ? true : false; break;
    						default: arr[R][C] = +record[4]; break;
    					}
    					if(record[2] == 'vtf') arr[R][C] = [arr[R][C], _f];
    			}
    		}
    		if(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
    		return arr;
    	}

    	function eth_to_sheet(d/*:string*/, opts)/*:Worksheet*/ { return aoa_to_sheet(eth_to_aoa(d, opts), opts); }
    	function eth_to_workbook(d/*:string*/, opts)/*:Workbook*/ { return sheet_to_workbook(eth_to_sheet(d, opts), opts); }

    	var header = [
    		"socialcalc:version:1.5",
    		"MIME-Version: 1.0",
    		"Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
    	].join("\n");

    	var sep = [
    		"--SocialCalcSpreadsheetControlSave",
    		"Content-type: text/plain; charset=UTF-8"
    	].join("\n") + "\n";

    	/* TODO: the other parts */
    	var meta = [
    		"# SocialCalc Spreadsheet Control Save",
    		"part:sheet"
    	].join("\n");

    	var end = "--SocialCalcSpreadsheetControlSave--";

    	function sheet_to_eth_data(ws/*:Worksheet*/)/*:string*/ {
    		if(!ws || !ws['!ref']) return "";
    		var o/*:Array<string>*/ = [], oo/*:Array<string>*/ = [], cell, coord = "";
    		var r = decode_range(ws['!ref']);
    		var dense = Array.isArray(ws);
    		for(var R = r.s.r; R <= r.e.r; ++R) {
    			for(var C = r.s.c; C <= r.e.c; ++C) {
    				coord = encode_cell({r:R,c:C});
    				cell = dense ? (ws[R]||[])[C] : ws[coord];
    				if(!cell || cell.v == null || cell.t === 'z') continue;
    				oo = ["cell", coord, 't'];
    				switch(cell.t) {
    					case 's': case 'str': oo.push(encode(cell.v)); break;
    					case 'n':
    						if(!cell.f) { oo[2]='v'; oo[3]=cell.v; }
    						else { oo[2]='vtf'; oo[3]='n'; oo[4]=cell.v; oo[5]=encode(cell.f); }
    						break;
    					case 'b':
    						oo[2] = 'vt'+(cell.f?'f':'c'); oo[3]='nl'; oo[4]=cell.v?"1":"0";
    						oo[5] = encode(cell.f||(cell.v?'TRUE':'FALSE'));
    						break;
    					case 'd':
    						var t = datenum(parseDate(cell.v));
    						oo[2] = 'vtc'; oo[3] = 'nd'; oo[4] = ""+t;
    						oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);
    						break;
    					case 'e': continue;
    				}
    				o.push(oo.join(":"));
    			}
    		}
    		o.push("sheet:c:" + (r.e.c-r.s.c+1) + ":r:" + (r.e.r-r.s.r+1) + ":tvf:1");
    		o.push("valueformat:1:text-wiki");
    		//o.push("copiedfrom:" + ws['!ref']); // clipboard only
    		return o.join("\n");
    	}

    	function sheet_to_eth(ws/*:Worksheet*//*::, opts:?any*/)/*:string*/ {
    		return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
    		// return ["version:1.5", sheet_to_eth_data(ws)].join("\n"); // clipboard form
    	}

    	return {
    		to_workbook: eth_to_workbook,
    		to_sheet: eth_to_sheet,
    		from_sheet: sheet_to_eth
    	};
    })();

    var PRN = /*#__PURE__*/(function() {
    	function set_text_arr(data/*:string*/, arr/*:AOA*/, R/*:number*/, C/*:number*/, o/*:any*/) {
    		if(o.raw) arr[R][C] = data;
    		else if(data === "");
    		else if(data === 'TRUE') arr[R][C] = true;
    		else if(data === 'FALSE') arr[R][C] = false;
    		else if(!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);
    		else if(!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);
    		else arr[R][C] = data;
    	}

    	function prn_to_aoa_str(f/*:string*/, opts)/*:AOA*/ {
    		var o = opts || {};
    		var arr/*:AOA*/ = ([]/*:any*/);
    		if(!f || f.length === 0) return arr;
    		var lines = f.split(/[\r\n]/);
    		var L = lines.length - 1;
    		while(L >= 0 && lines[L].length === 0) --L;
    		var start = 10, idx = 0;
    		var R = 0;
    		for(; R <= L; ++R) {
    			idx = lines[R].indexOf(" ");
    			if(idx == -1) idx = lines[R].length; else idx++;
    			start = Math.max(start, idx);
    		}
    		for(R = 0; R <= L; ++R) {
    			arr[R] = [];
    			/* TODO: confirm that widths are always 10 */
    			var C = 0;
    			set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
    			for(C = 1; C <= (lines[R].length - start)/10 + 1; ++C)
    				set_text_arr(lines[R].slice(start+(C-1)*10,start+C*10).trim(),arr,R,C,o);
    		}
    		if(o.sheetRows) arr = arr.slice(0, o.sheetRows);
    		return arr;
    	}

    	// List of accepted CSV separators
    	var guess_seps = {
    		/*::[*/0x2C/*::]*/: ',',
    		/*::[*/0x09/*::]*/: "\t",
    		/*::[*/0x3B/*::]*/: ';',
    		/*::[*/0x7C/*::]*/: '|'
    	};

    	// CSV separator weights to be used in case of equal numbers
    	var guess_sep_weights = {
    		/*::[*/0x2C/*::]*/: 3,
    		/*::[*/0x09/*::]*/: 2,
    		/*::[*/0x3B/*::]*/: 1,
    		/*::[*/0x7C/*::]*/: 0
    	};

    	function guess_sep(str) {
    		var cnt = {}, instr = false, end = 0, cc = 0;
    		for(;end < str.length;++end) {
    			if((cc=str.charCodeAt(end)) == 0x22) instr = !instr;
    			else if(!instr && cc in guess_seps) cnt[cc] = (cnt[cc]||0)+1;
    		}

    		cc = [];
    		for(end in cnt) if ( Object.prototype.hasOwnProperty.call(cnt, end) ) {
    			cc.push([ cnt[end], end ]);
    		}

    		if ( !cc.length ) {
    			cnt = guess_sep_weights;
    			for(end in cnt) if ( Object.prototype.hasOwnProperty.call(cnt, end) ) {
    				cc.push([ cnt[end], end ]);
    			}
    		}

    		cc.sort(function(a, b) { return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]]; });

    		return guess_seps[cc.pop()[1]] || 0x2C;
    	}

    	function dsv_to_sheet_str(str/*:string*/, opts)/*:Worksheet*/ {
    		var o = opts || {};
    		var sep = "";
    		var ws/*:Worksheet*/ = o.dense ? ([]/*:any*/) : ({}/*:any*/);
    		var range/*:Range*/ = ({s: {c:0, r:0}, e: {c:0, r:0}}/*:any*/);

    		if(str.slice(0,4) == "sep=") {
    			// If the line ends in \r\n
    			if(str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10 ) {
    				sep = str.charAt(4); str = str.slice(7);
    			}
    			// If line ends in \r OR \n
    			else if(str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10 ) {
    				sep = str.charAt(4); str = str.slice(6);
    			}
    			else sep = guess_sep(str.slice(0,1024));
    		}
    		else if(o && o.FS) sep = o.FS;
    		else sep = guess_sep(str.slice(0,1024));
    		var R = 0, C = 0, v = 0;
    		var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc=0, startcc=str.charCodeAt(0);
    		str = str.replace(/\r\n/mg, "\n");
    		var _re/*:?RegExp*/ = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
    		function finish_cell() {
    			var s = str.slice(start, end);
    			var cell = ({}/*:any*/);
    			if(s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1,-1).replace(/""/g,'"');
    			if(s.length === 0) cell.t = 'z';
    			else if(o.raw) { cell.t = 's'; cell.v = s; }
    			else if(s.trim().length === 0) { cell.t = 's'; cell.v = s; }
    			else if(s.charCodeAt(0) == 0x3D) {
    				if(s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) { cell.t = 's'; cell.v = s.slice(2,-1).replace(/""/g,'"'); }
    				else if(fuzzyfmla(s)) { cell.t = 'n'; cell.f = s.slice(1); }
    				else { cell.t = 's'; cell.v = s; } }
    			else if(s == "TRUE") { cell.t = 'b'; cell.v = true; }
    			else if(s == "FALSE") { cell.t = 'b'; cell.v = false; }
    			else if(!isNaN(v = fuzzynum(s))) { cell.t = 'n'; if(o.cellText !== false) cell.w = s; cell.v = v; }
    			else if(!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
    				cell.z = o.dateNF || table_fmt[14];
    				var k = 0;
    				if(_re && s.match(_re)){ s=dateNF_fix(s, o.dateNF, (s.match(_re)||[])); k=1; }
    				if(o.cellDates) { cell.t = 'd'; cell.v = parseDate(s, k); }
    				else { cell.t = 'n'; cell.v = datenum(parseDate(s, k)); }
    				if(o.cellText !== false) cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v):cell.v);
    				if(!o.cellNF) delete cell.z;
    			} else {
    				cell.t = 's';
    				cell.v = s;
    			}
    			if(cell.t == 'z');
    			else if(o.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = cell; }
    			else ws[encode_cell({c:C,r:R})] = cell;
    			start = end+1; startcc = str.charCodeAt(start);
    			if(range.e.c < C) range.e.c = C;
    			if(range.e.r < R) range.e.r = R;
    			if(cc == sepcc) ++C; else { C = 0; ++R; if(o.sheetRows && o.sheetRows <= R) return true; }
    		}
    		outer: for(;end < str.length;++end) switch((cc=str.charCodeAt(end))) {
    			case 0x22: if(startcc === 0x22) instr = !instr; break;
    			case sepcc: case 0x0a: case 0x0d: if(!instr && finish_cell()) break outer; break;
    		}
    		if(end - start > 0) finish_cell();

    		ws['!ref'] = encode_range(range);
    		return ws;
    	}

    	function prn_to_sheet_str(str/*:string*/, opts)/*:Worksheet*/ {
    		if(!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
    		if(opts.FS) return dsv_to_sheet_str(str, opts);
    		if(str.slice(0,4) == "sep=") return dsv_to_sheet_str(str, opts);
    		if(str.indexOf("\t") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
    		return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
    	}

    	function prn_to_sheet(d/*:RawData*/, opts)/*:Worksheet*/ {
    		var str = "", bytes = opts.type == 'string' ? [0,0,0,0] : firstbyte(d, opts);
    		switch(opts.type) {
    			case 'base64': str = Base64_decode(d); break;
    			case 'binary': str = d; break;
    			case 'buffer':
    				if(opts.codepage == 65001) str = d.toString('utf8'); // TODO: test if buf
    				else if(opts.codepage && typeof $cptable !== 'undefined') str = $cptable.utils.decode(opts.codepage, d);
    				else str = has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d);
    				break;
    			case 'array': str = cc2str(d); break;
    			case 'string': str = d; break;
    			default: throw new Error("Unrecognized type " + opts.type);
    		}
    		if(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));
    		else if(opts.type != 'string' && opts.type != 'buffer' && opts.codepage == 65001) str = utf8read(str);
    		else if((opts.type == 'binary') && typeof $cptable !== 'undefined' && opts.codepage)  str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591,str));
    		if(str.slice(0,19) == "socialcalc:version:") return ETH.to_sheet(opts.type == 'string' ? str : utf8read(str), opts);
    		return prn_to_sheet_str(str, opts);
    	}

    	function prn_to_workbook(d/*:RawData*/, opts)/*:Workbook*/ { return sheet_to_workbook(prn_to_sheet(d, opts), opts); }

    	function sheet_to_prn(ws/*:Worksheet*//*::, opts:?any*/)/*:string*/ {
    		var o/*:Array<string>*/ = [];
    		var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
    		var dense = Array.isArray(ws);
    		for(var R = r.s.r; R <= r.e.r; ++R) {
    			var oo/*:Array<string>*/ = [];
    			for(var C = r.s.c; C <= r.e.c; ++C) {
    				var coord = encode_cell({r:R,c:C});
    				cell = dense ? (ws[R]||[])[C] : ws[coord];
    				if(!cell || cell.v == null) { oo.push("          "); continue; }
    				var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0,10);
    				while(w.length < 10) w += " ";
    				oo.push(w + (C === 0 ? " " : ""));
    			}
    			o.push(oo.join(""));
    		}
    		return o.join("\n");
    	}

    	return {
    		to_workbook: prn_to_workbook,
    		to_sheet: prn_to_sheet,
    		from_sheet: sheet_to_prn
    	};
    })();

    /* Excel defaults to SYLK but warns if data is not valid */
    function read_wb_ID(d, opts) {
    	var o = opts || {}, OLD_WTF = !!o.WTF; o.WTF = true;
    	try {
    		var out = SYLK.to_workbook(d, o);
    		o.WTF = OLD_WTF;
    		return out;
    	} catch(e) {
    		o.WTF = OLD_WTF;
    		if(!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
    		return PRN.to_workbook(d, opts);
    	}
    }

    var WK_ = /*#__PURE__*/(function() {
    	function lotushopper(data, cb/*:RecordHopperCB*/, opts/*:any*/) {
    		if(!data) return;
    		prep_blob(data, data.l || 0);
    		var Enum = opts.Enum || WK1Enum;
    		while(data.l < data.length) {
    			var RT = data.read_shift(2);
    			var R = Enum[RT] || Enum[0xFFFF];
    			var length = data.read_shift(2);
    			var tgt = data.l + length;
    			var d = R.f && R.f(data, length, opts);
    			data.l = tgt;
    			if(cb(d, R, RT)) return;
    		}
    	}

    	function lotus_to_workbook(d/*:RawData*/, opts) {
    		switch(opts.type) {
    			case 'base64': return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);
    			case 'binary': return lotus_to_workbook_buf(s2a(d), opts);
    			case 'buffer':
    			case 'array': return lotus_to_workbook_buf(d, opts);
    		}
    		throw "Unsupported type " + opts.type;
    	}

    	function lotus_to_workbook_buf(d, opts)/*:Workbook*/ {
    		if(!d) return d;
    		var o = opts || {};
    		var s/*:Worksheet*/ = ((o.dense ? [] : {})/*:any*/), n = "Sheet1", next_n = "", sidx = 0;
    		var sheets = {}, snames = [], realnames = [];

    		var refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
    		var sheetRows = o.sheetRows || 0;

    		if(d[2] == 0x00) {
    			if(d[3] == 0x08 || d[3] == 0x09) {
    				if(d.length >= 16 && d[14] == 0x05 && d[15] === 0x6c) throw new Error("Unsupported Works 3 for Mac file");
    			}
    		}

    		if(d[2] == 0x02) {
    			o.Enum = WK1Enum;
    			lotushopper(d, function(val, R, RT) { switch(RT) {
    				case 0x00: /* BOF */
    					o.vers = val;
    					if(val >= 0x1000) o.qpro = true;
    					break;
    				case 0x06: refguess = val; break; /* RANGE */
    				case 0xCC: if(val) next_n = val; break; /* SHEETNAMECS */
    				case 0xDE: next_n = val; break; /* SHEETNAMELP */
    				case 0x0F: /* LABEL */
    				case 0x33: /* STRING */
    					if(!o.qpro) val[1].v = val[1].v.slice(1);
    					/* falls through */
    				case 0x0D: /* INTEGER */
    				case 0x0E: /* NUMBER */
    				case 0x10: /* FORMULA */
    					/* TODO: actual translation of the format code */
    					if(RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {
    						val[1].z = o.dateNF || table_fmt[14];
    						if(o.cellDates) { val[1].t = 'd'; val[1].v = numdate(val[1].v); }
    					}

    					if(o.qpro) {
    						if(val[3] > sidx) {
    							s["!ref"] = encode_range(refguess);
    							sheets[n] = s;
    							snames.push(n);
    							s = (o.dense ? [] : {});
    							refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
    							sidx = val[3]; n = next_n || "Sheet" + (sidx + 1); next_n = "";
    						}
    					}

    					var tmpcell = o.dense ? (s[val[0].r]||[])[val[0].c] : s[encode_cell(val[0])];
    					if(tmpcell) {
    						tmpcell.t = val[1].t; tmpcell.v = val[1].v;
    						if(val[1].z != null) tmpcell.z = val[1].z;
    						if(val[1].f != null) tmpcell.f = val[1].f;
    						break;
    					}
    					if(o.dense) {
    						if(!s[val[0].r]) s[val[0].r] = [];
    						s[val[0].r][val[0].c] = val[1];
    					} else s[encode_cell(val[0])] = val[1];
    					break;
    			}}, o);
    		} else if(d[2] == 0x1A || d[2] == 0x0E) {
    			o.Enum = WK3Enum;
    			if(d[2] == 0x0E) { o.qpro = true; d.l = 0; }
    			lotushopper(d, function(val, R, RT) { switch(RT) {
    				case 0xCC: n = val; break; /* SHEETNAMECS */
    				case 0x16: /* LABEL16 */
    					val[1].v = val[1].v.slice(1);
    					/* falls through */
    				case 0x17: /* NUMBER17 */
    				case 0x18: /* NUMBER18 */
    				case 0x19: /* FORMULA19 */
    				case 0x25: /* NUMBER25 */
    				case 0x27: /* NUMBER27 */
    				case 0x28: /* FORMULA28 */
    					if(val[3] > sidx) {
    						s["!ref"] = encode_range(refguess);
    						sheets[n] = s;
    						snames.push(n);
    						s = (o.dense ? [] : {});
    						refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
    						sidx = val[3]; n = "Sheet" + (sidx + 1);
    					}
    					if(sheetRows > 0 && val[0].r >= sheetRows) break;
    					if(o.dense) {
    						if(!s[val[0].r]) s[val[0].r] = [];
    						s[val[0].r][val[0].c] = val[1];
    					} else s[encode_cell(val[0])] = val[1];
    					if(refguess.e.c < val[0].c) refguess.e.c = val[0].c;
    					if(refguess.e.r < val[0].r) refguess.e.r = val[0].r;
    					break;
    				case 0x1B: /* XFORMAT */
    					if(val[0x36b0]) realnames[val[0x36b0][0]] = val[0x36b0][1];
    					break;
    				case 0x0601: /* SHEETINFOQP */
    					realnames[val[0]] = val[1]; if(val[0] == sidx) n = val[1]; break;
    			}}, o);
    		} else throw new Error("Unrecognized LOTUS BOF " + d[2]);
    		s["!ref"] = encode_range(refguess);
    		sheets[next_n || n] = s;
    		snames.push(next_n || n);
    		if(!realnames.length) return { SheetNames: snames, Sheets: sheets };
    		var osheets = {}, rnames = [];
    		/* TODO: verify no collisions */
    		for(var i = 0; i < realnames.length; ++i) if(sheets[snames[i]]) {
    			rnames.push(realnames[i] || snames[i]);
    			osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];
    		} else {
    			rnames.push(realnames[i]);
    			osheets[realnames[i]] = ({ "!ref": "A1" });
    		}
    		return { SheetNames: rnames, Sheets: osheets };
    	}

    	function sheet_to_wk1(ws/*:Worksheet*/, opts/*:WriteOpts*/) {
    		var o = opts || {};
    		if(+o.codepage >= 0) set_cp(+o.codepage);
    		if(o.type == "string") throw new Error("Cannot write WK1 to JS string");
    		var ba = buf_array();
    		var range = safe_decode_range(ws["!ref"]);
    		var dense = Array.isArray(ws);
    		var cols = [];

    		write_biff_rec(ba, 0x00, write_BOF_WK1(0x0406));
    		write_biff_rec(ba, 0x06, write_RANGE(range));
    		var max_R = Math.min(range.e.r, 8191);
    		for(var R = range.s.r; R <= max_R; ++R) {
    			var rr = encode_row(R);
    			for(var C = range.s.c; C <= range.e.c; ++C) {
    				if(R === range.s.r) cols[C] = encode_col(C);
    				var ref = cols[C] + rr;
    				var cell = dense ? (ws[R]||[])[C] : ws[ref];
    				if(!cell || cell.t == "z") continue;
    				/* TODO: formula records */
    				if(cell.t == "n") {
    					if((cell.v|0)==cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 0x0d, write_INTEGER(R, C, cell.v));
    					else write_biff_rec(ba, 0x0e, write_NUMBER(R, C, cell.v));
    				} else {
    					var str = format_cell(cell);
    					write_biff_rec(ba, 0x0F, write_LABEL(R, C, str.slice(0, 239)));
    				}
    			}
    		}

    		write_biff_rec(ba, 0x01);
    		return ba.end();
    	}

    	function book_to_wk3(wb/*:Workbook*/, opts/*:WriteOpts*/) {
    		var o = opts || {};
    		if(+o.codepage >= 0) set_cp(+o.codepage);
    		if(o.type == "string") throw new Error("Cannot write WK3 to JS string");
    		var ba = buf_array();

    		write_biff_rec(ba, 0x00, write_BOF_WK3(wb));

    		for(var i = 0, cnt = 0; i < wb.SheetNames.length; ++i) if((wb.Sheets[wb.SheetNames[i]] || {})["!ref"]) write_biff_rec(ba, 0x1b, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));

    		var wsidx = 0;
    		for(i = 0; i < wb.SheetNames.length; ++i) {
    			var ws = wb.Sheets[wb.SheetNames[i]];
    			if(!ws || !ws["!ref"]) continue;
    			var range = safe_decode_range(ws["!ref"]);
    			var dense = Array.isArray(ws);
    			var cols = [];
    			var max_R = Math.min(range.e.r, 8191);
    			for(var R = range.s.r; R <= max_R; ++R) {
    				var rr = encode_row(R);
    				for(var C = range.s.c; C <= range.e.c; ++C) {
    					if(R === range.s.r) cols[C] = encode_col(C);
    					var ref = cols[C] + rr;
    					var cell = dense ? (ws[R]||[])[C] : ws[ref];
    					if(!cell || cell.t == "z") continue;
    					/* TODO: FORMULA19 NUMBER18 records */
    					if(cell.t == "n") {
    						write_biff_rec(ba, 0x17, write_NUMBER_17(R, C, wsidx, cell.v));
    					} else {
    						var str = format_cell(cell);
    						/* TODO: max len? */
    						write_biff_rec(ba, 0x16, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));
    					}
    				}
    			}
    			++wsidx;
    		}

    		write_biff_rec(ba, 0x01);
    		return ba.end();
    	}


    	function write_BOF_WK1(v/*:number*/) {
    		var out = new_buf(2);
    		out.write_shift(2, v);
    		return out;
    	}

    	function write_BOF_WK3(wb/*:Workbook*/) {
    		var out = new_buf(26);
    		out.write_shift(2, 0x1000);
    		out.write_shift(2, 0x0004);
    		out.write_shift(4, 0x0000);
    		var rows = 0, cols = 0, wscnt = 0;
    		for(var i = 0; i < wb.SheetNames.length; ++i) {
    			var name = wb.SheetNames[i];
    			var ws = wb.Sheets[name];
    			if(!ws || !ws["!ref"]) continue;
    			++wscnt;
    			var range = decode_range(ws["!ref"]);
    			if(rows < range.e.r) rows = range.e.r;
    			if(cols < range.e.c) cols = range.e.c;
    		}
    		if(rows > 8191) rows = 8191;
    		out.write_shift(2, rows);
    		out.write_shift(1, wscnt);
    		out.write_shift(1, cols);
    		out.write_shift(2, 0x00);
    		out.write_shift(2, 0x00);
    		out.write_shift(1, 0x01);
    		out.write_shift(1, 0x02);
    		out.write_shift(4, 0);
    		out.write_shift(4, 0);
    		return out;
    	}

    	function parse_RANGE(blob, length, opts) {
    		var o = {s:{c:0,r:0},e:{c:0,r:0}};
    		if(length == 8 && opts.qpro) {
    			o.s.c = blob.read_shift(1);
    			blob.l++;
    			o.s.r = blob.read_shift(2);
    			o.e.c = blob.read_shift(1);
    			blob.l++;
    			o.e.r = blob.read_shift(2);
    			return o;
    		}
    		o.s.c = blob.read_shift(2);
    		o.s.r = blob.read_shift(2);
    		if(length == 12 && opts.qpro) blob.l += 2;
    		o.e.c = blob.read_shift(2);
    		o.e.r = blob.read_shift(2);
    		if(length == 12 && opts.qpro) blob.l += 2;
    		if(o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;
    		return o;
    	}
    	function write_RANGE(range) {
    		var out = new_buf(8);
    		out.write_shift(2, range.s.c);
    		out.write_shift(2, range.s.r);
    		out.write_shift(2, range.e.c);
    		out.write_shift(2, range.e.r);
    		return out;
    	}

    	function parse_cell(blob, length, opts) {
    		var o = [{c:0,r:0}, {t:'n',v:0}, 0, 0];
    		if(opts.qpro && opts.vers != 0x5120) {
    			o[0].c = blob.read_shift(1);
    			o[3] = blob.read_shift(1);
    			o[0].r = blob.read_shift(2);
    			blob.l+=2;
    		} else {
    			o[2] = blob.read_shift(1);
    			o[0].c = blob.read_shift(2); o[0].r = blob.read_shift(2);
    		}
    		return o;
    	}

    	function parse_LABEL(blob, length, opts) {
    		var tgt = blob.l + length;
    		var o = parse_cell(blob, length, opts);
    		o[1].t = 's';
    		if(opts.vers == 0x5120) {
    			blob.l++;
    			var len = blob.read_shift(1);
    			o[1].v = blob.read_shift(len, 'utf8');
    			return o;
    		}
    		if(opts.qpro) blob.l++;
    		o[1].v = blob.read_shift(tgt - blob.l, 'cstr');
    		return o;
    	}
    	function write_LABEL(R, C, s) {
    		/* TODO: encoding */
    		var o = new_buf(7 + s.length);
    		o.write_shift(1, 0xFF);
    		o.write_shift(2, C);
    		o.write_shift(2, R);
    		o.write_shift(1, 0x27); // ??
    		for(var i = 0; i < o.length; ++i) {
    			var cc = s.charCodeAt(i);
    			o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
    		}
    		o.write_shift(1, 0);
    		return o;
    	}

    	function parse_INTEGER(blob, length, opts) {
    		var o = parse_cell(blob, length, opts);
    		o[1].v = blob.read_shift(2, 'i');
    		return o;
    	}
    	function write_INTEGER(R, C, v) {
    		var o = new_buf(7);
    		o.write_shift(1, 0xFF);
    		o.write_shift(2, C);
    		o.write_shift(2, R);
    		o.write_shift(2, v, 'i');
    		return o;
    	}

    	function parse_NUMBER(blob, length, opts) {
    		var o = parse_cell(blob, length, opts);
    		o[1].v = blob.read_shift(8, 'f');
    		return o;
    	}
    	function write_NUMBER(R, C, v) {
    		var o = new_buf(13);
    		o.write_shift(1, 0xFF);
    		o.write_shift(2, C);
    		o.write_shift(2, R);
    		o.write_shift(8, v, 'f');
    		return o;
    	}

    	function parse_FORMULA(blob, length, opts) {
    		var tgt = blob.l + length;
    		var o = parse_cell(blob, length, opts);
    		/* TODO: formula */
    		o[1].v = blob.read_shift(8, 'f');
    		if(opts.qpro) blob.l = tgt;
    		else {
    			var flen = blob.read_shift(2);
    			wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);
    			blob.l += flen;
    		}
    		return o;
    	}

    	function wk1_parse_rc(B, V, col) {
    		var rel = V & 0x8000;
    		V &= ~0x8000;
    		V = (rel ? B : 0) + ((V >= 0x2000) ? V - 0x4000 : V);
    		return (rel ? "" : "$") + (col ? encode_col(V) : encode_row(V));
    	}
    	/* var oprec = [
    		8, 8, 8, 8, 8, 8, 8, 8, 6, 4, 4, 5, 5, 7, 3, 3,
    		3, 3, 3, 3, 1, 1, 2, 6, 8, 8, 8, 8, 8, 8, 8, 8
    	]; */
    	/* TODO: flesh out */
    	var FuncTab = {
    		0x33: ["FALSE", 0],
    		0x34: ["TRUE", 0],
    		0x46: ["LEN", 1],
    		0x50: ["SUM", 69],
    		0x51: ["AVERAGEA", 69],
    		0x52: ["COUNTA", 69],
    		0x53: ["MINA", 69],
    		0x54: ["MAXA", 69],
    		0x6F: ["T", 1]
    	};
    	var BinOpTab = [
    		  "",   "",   "",   "",   "",   "",   "",   "", // eslint-disable-line no-mixed-spaces-and-tabs
    		  "",  "+",  "-",  "*",  "/",  "^",  "=", "<>", // eslint-disable-line no-mixed-spaces-and-tabs
    		"<=", ">=",  "<",  ">",   "",   "",   "",   "", // eslint-disable-line no-mixed-spaces-and-tabs
    		 "&",   "",   "",   "",   "",   "",   "",   ""  // eslint-disable-line no-mixed-spaces-and-tabs
    	];

    	function wk1_fmla_to_csf(blob, o) {
    		prep_blob(blob, 0);
    		var out = [], argc = 0, R = "", C = "", argL = "", argR = "";
    		while(blob.l < blob.length) {
    			var cc = blob[blob.l++];
    			switch(cc) {
    				case 0x00: out.push(blob.read_shift(8, 'f')); break;
    				case 0x01: {
    					C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
    					R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
    					out.push(C + R);
    				} break;
    				case 0x02: {
    					var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
    					var r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
    					C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
    					R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
    					out.push(c + r + ":" + C + R);
    				} break;
    				case 0x03:
    					if(blob.l < blob.length) { console.error("WK1 premature formula end"); return; }
    					break;
    				case 0x04: out.push("(" + out.pop() + ")"); break;
    				case 0x05: out.push(blob.read_shift(2)); break;
    				case 0x06: {
    					/* TODO: text encoding */
    					var Z = ""; while((cc = blob[blob.l++])) Z += String.fromCharCode(cc);
    					out.push('"' + Z.replace(/"/g, '""') + '"');
    				} break;

    				case 0x08: out.push("-" + out.pop()); break;
    				case 0x17: out.push("+" + out.pop()); break;
    				case 0x16: out.push("NOT(" + out.pop() + ")"); break;

    				case 0x14: case 0x15: {
    					argR = out.pop(); argL = out.pop();
    					out.push(["AND", "OR"][cc - 0x14] + "(" + argL + "," + argR + ")");
    				} break;

    				default:
    					if(cc < 0x20 && BinOpTab[cc]) {
    						argR = out.pop(); argL = out.pop();
    						out.push(argL + BinOpTab[cc] + argR);
    					} else if(FuncTab[cc]) {
    						argc = FuncTab[cc][1];
    						if(argc == 69) argc = blob[blob.l++];
    						if(argc > out.length) { console.error("WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|"); return; }
    						var args = out.slice(-argc);
    						out.length -= argc;
    						out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
    					}
    					else if(cc <= 0x07) return console.error("WK1 invalid opcode " + cc.toString(16));
    					else if(cc <= 0x18) return console.error("WK1 unsupported op " + cc.toString(16));
    					else if(cc <= 0x1E) return console.error("WK1 invalid opcode " + cc.toString(16));
    					else if(cc <= 0x73) return console.error("WK1 unsupported function opcode " + cc.toString(16));
    					// possible future functions ??
    					else return console.error("WK1 unrecognized opcode " + cc.toString(16));
    			}
    		}
    		if(out.length == 1) o[1].f = "" + out[0];
    		else console.error("WK1 bad formula parse |" + out.join("|") + "|");
    	}


    	function parse_cell_3(blob/*::, length*/) {
    		var o = [{c:0,r:0}, {t:'n',v:0}, 0];
    		o[0].r = blob.read_shift(2); o[3] = blob[blob.l++]; o[0].c = blob[blob.l++];
    		return o;
    	}

    	function parse_LABEL_16(blob, length) {
    		var o = parse_cell_3(blob);
    		o[1].t = 's';
    		o[1].v = blob.read_shift(length - 4, 'cstr');
    		return o;
    	}
    	function write_LABEL_16(R, C, wsidx, s) {
    		/* TODO: encoding */
    		var o = new_buf(6 + s.length);
    		o.write_shift(2, R);
    		o.write_shift(1, wsidx);
    		o.write_shift(1, C);
    		o.write_shift(1, 0x27);
    		for(var i = 0; i < s.length; ++i) {
    			var cc = s.charCodeAt(i);
    			o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
    		}
    		o.write_shift(1, 0);
    		return o;
    	}

    	function parse_NUMBER_18(blob, length) {
    		var o = parse_cell_3(blob);
    		o[1].v = blob.read_shift(2);
    		var v = o[1].v >> 1;
    		if(o[1].v & 0x1) {
    			switch(v & 0x07) {
    				case 0: v = (v >> 3) * 5000; break;
    				case 1: v = (v >> 3) * 500; break;
    				case 2: v = (v >> 3) / 20; break;
    				case 3: v = (v >> 3) / 200; break;
    				case 4: v = (v >> 3) / 2000; break;
    				case 5: v = (v >> 3) / 20000; break;
    				case 6: v = (v >> 3) / 16; break;
    				case 7: v = (v >> 3) / 64; break;
    			}
    		}
    		o[1].v = v;
    		return o;
    	}

    	function parse_NUMBER_17(blob, length) {
    		var o = parse_cell_3(blob);
    		var v1 = blob.read_shift(4);
    		var v2 = blob.read_shift(4);
    		var e = blob.read_shift(2);
    		if(e == 0xFFFF) {
    			if(v1 === 0 && v2 === 0xC0000000) { o[1].t = "e"; o[1].v = 0x0F; } // ERR -> #VALUE!
    			else if(v1 === 0 && v2 === 0xD0000000) { o[1].t = "e"; o[1].v = 0x2A; } // NA -> #N/A
    			else o[1].v = 0;
    			return o;
    		}
    		var s = e & 0x8000; e = (e&0x7FFF) - 16446;
    		o[1].v = (1 - s*2) * (v2 * Math.pow(2, e+32) + v1 * Math.pow(2, e));
    		return o;
    	}
    	function write_NUMBER_17(R, C, wsidx, v) {
    		var o = new_buf(14);
    		o.write_shift(2, R);
    		o.write_shift(1, wsidx);
    		o.write_shift(1, C);
    		if(v == 0) {
    			o.write_shift(4, 0);
    			o.write_shift(4, 0);
    			o.write_shift(2, 0xFFFF);
    			return o;
    		}
    		var s = 0, e = 0, v1 = 0, v2 = 0;
    		if(v < 0) { s = 1; v = -v; }
    		e = Math.log2(v) | 0;
    		v /= Math.pow(2, e-31);
    		v2 = (v)>>>0;
    		if((v2&0x80000000) == 0) { v/=2; ++e; v2 = v >>> 0; }
    		v -= v2;
    		v2 |= 0x80000000;
    		v2 >>>= 0;
    		v *= Math.pow(2, 32);
    		v1 = v>>>0;
    		o.write_shift(4, v1);
    		o.write_shift(4, v2);
    		e += 0x3FFF + (s ? 0x8000 : 0);
    		o.write_shift(2, e);
    		return o;
    	}

    	function parse_FORMULA_19(blob, length) {
    		var o = parse_NUMBER_17(blob);
    		blob.l += length - 14; /* TODO: WK3 formula */
    		return o;
    	}

    	function parse_NUMBER_25(blob, length) {
    		var o = parse_cell_3(blob);
    		var v1 = blob.read_shift(4);
    		o[1].v = v1 >> 6;
    		return o;
    	}

    	function parse_NUMBER_27(blob, length) {
    		var o = parse_cell_3(blob);
    		var v1 = blob.read_shift(8,'f');
    		o[1].v = v1;
    		return o;
    	}

    	function parse_FORMULA_28(blob, length) {
    		var o = parse_NUMBER_27(blob);
    		blob.l += length - 10; /* TODO: formula */
    		return o;
    	}

    	function parse_SHEETNAMECS(blob, length) {
    		return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, 'cstr') : "";
    	}

    	function parse_SHEETNAMELP(blob, length) {
    		var len = blob[blob.l++];
    		if(len > length - 1) len = length - 1;
    		var o = ""; while(o.length < len) o += String.fromCharCode(blob[blob.l++]);
    		return o;
    	}

    	function parse_SHEETINFOQP(blob, length, opts) {
    		if(!opts.qpro || length < 21) return;
    		var id = blob.read_shift(1);
    		blob.l += 17;
    		blob.l += 1; //var len = blob.read_shift(1);
    		blob.l += 2;
    		var nm = blob.read_shift(length - 21, 'cstr');
    		return [id, nm];
    	}

    	function parse_XFORMAT(blob, length) {
    		var o = {}, tgt = blob.l + length;
    		while(blob.l < tgt) {
    			var dt = blob.read_shift(2);
    			if(dt == 0x36b0) {
    				o[dt] = [0, ""];
    				o[dt][0] = blob.read_shift(2);
    				while(blob[blob.l]) { o[dt][1] += String.fromCharCode(blob[blob.l]); blob.l++; } blob.l++;
    			}
    			// TODO: 0x3a99 ??
    		}
    		return o;
    	}
    	function write_XFORMAT_SHEETNAME(name, wsidx) {
    		var out = new_buf(5 + name.length);
    		out.write_shift(2, 0x36b0);
    		out.write_shift(2, wsidx);
    		for(var i = 0; i < name.length; ++i) {
    			var cc = name.charCodeAt(i);
    			out[out.l++] = cc > 0x7F ? 0x5F : cc;
    		}
    		out[out.l++] = 0;
    		return out;
    	}

    	var WK1Enum = {
    		/*::[*/0x0000/*::]*/: { n:"BOF", f:parseuint16 },
    		/*::[*/0x0001/*::]*/: { n:"EOF" },
    		/*::[*/0x0002/*::]*/: { n:"CALCMODE" },
    		/*::[*/0x0003/*::]*/: { n:"CALCORDER" },
    		/*::[*/0x0004/*::]*/: { n:"SPLIT" },
    		/*::[*/0x0005/*::]*/: { n:"SYNC" },
    		/*::[*/0x0006/*::]*/: { n:"RANGE", f:parse_RANGE },
    		/*::[*/0x0007/*::]*/: { n:"WINDOW1" },
    		/*::[*/0x0008/*::]*/: { n:"COLW1" },
    		/*::[*/0x0009/*::]*/: { n:"WINTWO" },
    		/*::[*/0x000A/*::]*/: { n:"COLW2" },
    		/*::[*/0x000B/*::]*/: { n:"NAME" },
    		/*::[*/0x000C/*::]*/: { n:"BLANK" },
    		/*::[*/0x000D/*::]*/: { n:"INTEGER", f:parse_INTEGER },
    		/*::[*/0x000E/*::]*/: { n:"NUMBER", f:parse_NUMBER },
    		/*::[*/0x000F/*::]*/: { n:"LABEL", f:parse_LABEL },
    		/*::[*/0x0010/*::]*/: { n:"FORMULA", f:parse_FORMULA },
    		/*::[*/0x0018/*::]*/: { n:"TABLE" },
    		/*::[*/0x0019/*::]*/: { n:"ORANGE" },
    		/*::[*/0x001A/*::]*/: { n:"PRANGE" },
    		/*::[*/0x001B/*::]*/: { n:"SRANGE" },
    		/*::[*/0x001C/*::]*/: { n:"FRANGE" },
    		/*::[*/0x001D/*::]*/: { n:"KRANGE1" },
    		/*::[*/0x0020/*::]*/: { n:"HRANGE" },
    		/*::[*/0x0023/*::]*/: { n:"KRANGE2" },
    		/*::[*/0x0024/*::]*/: { n:"PROTEC" },
    		/*::[*/0x0025/*::]*/: { n:"FOOTER" },
    		/*::[*/0x0026/*::]*/: { n:"HEADER" },
    		/*::[*/0x0027/*::]*/: { n:"SETUP" },
    		/*::[*/0x0028/*::]*/: { n:"MARGINS" },
    		/*::[*/0x0029/*::]*/: { n:"LABELFMT" },
    		/*::[*/0x002A/*::]*/: { n:"TITLES" },
    		/*::[*/0x002B/*::]*/: { n:"SHEETJS" },
    		/*::[*/0x002D/*::]*/: { n:"GRAPH" },
    		/*::[*/0x002E/*::]*/: { n:"NGRAPH" },
    		/*::[*/0x002F/*::]*/: { n:"CALCCOUNT" },
    		/*::[*/0x0030/*::]*/: { n:"UNFORMATTED" },
    		/*::[*/0x0031/*::]*/: { n:"CURSORW12" },
    		/*::[*/0x0032/*::]*/: { n:"WINDOW" },
    		/*::[*/0x0033/*::]*/: { n:"STRING", f:parse_LABEL },
    		/*::[*/0x0037/*::]*/: { n:"PASSWORD" },
    		/*::[*/0x0038/*::]*/: { n:"LOCKED" },
    		/*::[*/0x003C/*::]*/: { n:"QUERY" },
    		/*::[*/0x003D/*::]*/: { n:"QUERYNAME" },
    		/*::[*/0x003E/*::]*/: { n:"PRINT" },
    		/*::[*/0x003F/*::]*/: { n:"PRINTNAME" },
    		/*::[*/0x0040/*::]*/: { n:"GRAPH2" },
    		/*::[*/0x0041/*::]*/: { n:"GRAPHNAME" },
    		/*::[*/0x0042/*::]*/: { n:"ZOOM" },
    		/*::[*/0x0043/*::]*/: { n:"SYMSPLIT" },
    		/*::[*/0x0044/*::]*/: { n:"NSROWS" },
    		/*::[*/0x0045/*::]*/: { n:"NSCOLS" },
    		/*::[*/0x0046/*::]*/: { n:"RULER" },
    		/*::[*/0x0047/*::]*/: { n:"NNAME" },
    		/*::[*/0x0048/*::]*/: { n:"ACOMM" },
    		/*::[*/0x0049/*::]*/: { n:"AMACRO" },
    		/*::[*/0x004A/*::]*/: { n:"PARSE" },
    		/*::[*/0x0066/*::]*/: { n:"PRANGES??" },
    		/*::[*/0x0067/*::]*/: { n:"RRANGES??" },
    		/*::[*/0x0068/*::]*/: { n:"FNAME??" },
    		/*::[*/0x0069/*::]*/: { n:"MRANGES??" },
    		/*::[*/0x00CC/*::]*/: { n:"SHEETNAMECS", f:parse_SHEETNAMECS },
    		/*::[*/0x00DE/*::]*/: { n:"SHEETNAMELP", f:parse_SHEETNAMELP },
    		/*::[*/0xFFFF/*::]*/: { n:"" }
    	};

    	var WK3Enum = {
    		/*::[*/0x0000/*::]*/: { n:"BOF" },
    		/*::[*/0x0001/*::]*/: { n:"EOF" },
    		/*::[*/0x0002/*::]*/: { n:"PASSWORD" },
    		/*::[*/0x0003/*::]*/: { n:"CALCSET" },
    		/*::[*/0x0004/*::]*/: { n:"WINDOWSET" },
    		/*::[*/0x0005/*::]*/: { n:"SHEETCELLPTR" },
    		/*::[*/0x0006/*::]*/: { n:"SHEETLAYOUT" },
    		/*::[*/0x0007/*::]*/: { n:"COLUMNWIDTH" },
    		/*::[*/0x0008/*::]*/: { n:"HIDDENCOLUMN" },
    		/*::[*/0x0009/*::]*/: { n:"USERRANGE" },
    		/*::[*/0x000A/*::]*/: { n:"SYSTEMRANGE" },
    		/*::[*/0x000B/*::]*/: { n:"ZEROFORCE" },
    		/*::[*/0x000C/*::]*/: { n:"SORTKEYDIR" },
    		/*::[*/0x000D/*::]*/: { n:"FILESEAL" },
    		/*::[*/0x000E/*::]*/: { n:"DATAFILLNUMS" },
    		/*::[*/0x000F/*::]*/: { n:"PRINTMAIN" },
    		/*::[*/0x0010/*::]*/: { n:"PRINTSTRING" },
    		/*::[*/0x0011/*::]*/: { n:"GRAPHMAIN" },
    		/*::[*/0x0012/*::]*/: { n:"GRAPHSTRING" },
    		/*::[*/0x0013/*::]*/: { n:"??" },
    		/*::[*/0x0014/*::]*/: { n:"ERRCELL" },
    		/*::[*/0x0015/*::]*/: { n:"NACELL" },
    		/*::[*/0x0016/*::]*/: { n:"LABEL16", f:parse_LABEL_16},
    		/*::[*/0x0017/*::]*/: { n:"NUMBER17", f:parse_NUMBER_17 },
    		/*::[*/0x0018/*::]*/: { n:"NUMBER18", f:parse_NUMBER_18 },
    		/*::[*/0x0019/*::]*/: { n:"FORMULA19", f:parse_FORMULA_19},
    		/*::[*/0x001A/*::]*/: { n:"FORMULA1A" },
    		/*::[*/0x001B/*::]*/: { n:"XFORMAT", f:parse_XFORMAT },
    		/*::[*/0x001C/*::]*/: { n:"DTLABELMISC" },
    		/*::[*/0x001D/*::]*/: { n:"DTLABELCELL" },
    		/*::[*/0x001E/*::]*/: { n:"GRAPHWINDOW" },
    		/*::[*/0x001F/*::]*/: { n:"CPA" },
    		/*::[*/0x0020/*::]*/: { n:"LPLAUTO" },
    		/*::[*/0x0021/*::]*/: { n:"QUERY" },
    		/*::[*/0x0022/*::]*/: { n:"HIDDENSHEET" },
    		/*::[*/0x0023/*::]*/: { n:"??" },
    		/*::[*/0x0025/*::]*/: { n:"NUMBER25", f:parse_NUMBER_25 },
    		/*::[*/0x0026/*::]*/: { n:"??" },
    		/*::[*/0x0027/*::]*/: { n:"NUMBER27", f:parse_NUMBER_27 },
    		/*::[*/0x0028/*::]*/: { n:"FORMULA28", f:parse_FORMULA_28 },
    		/*::[*/0x008E/*::]*/: { n:"??" },
    		/*::[*/0x0093/*::]*/: { n:"??" },
    		/*::[*/0x0096/*::]*/: { n:"??" },
    		/*::[*/0x0097/*::]*/: { n:"??" },
    		/*::[*/0x0098/*::]*/: { n:"??" },
    		/*::[*/0x0099/*::]*/: { n:"??" },
    		/*::[*/0x009A/*::]*/: { n:"??" },
    		/*::[*/0x009B/*::]*/: { n:"??" },
    		/*::[*/0x009C/*::]*/: { n:"??" },
    		/*::[*/0x00A3/*::]*/: { n:"??" },
    		/*::[*/0x00AE/*::]*/: { n:"??" },
    		/*::[*/0x00AF/*::]*/: { n:"??" },
    		/*::[*/0x00B0/*::]*/: { n:"??" },
    		/*::[*/0x00B1/*::]*/: { n:"??" },
    		/*::[*/0x00B8/*::]*/: { n:"??" },
    		/*::[*/0x00B9/*::]*/: { n:"??" },
    		/*::[*/0x00BA/*::]*/: { n:"??" },
    		/*::[*/0x00BB/*::]*/: { n:"??" },
    		/*::[*/0x00BC/*::]*/: { n:"??" },
    		/*::[*/0x00C3/*::]*/: { n:"??" },
    		/*::[*/0x00C9/*::]*/: { n:"??" },
    		/*::[*/0x00CC/*::]*/: { n:"SHEETNAMECS", f:parse_SHEETNAMECS },
    		/*::[*/0x00CD/*::]*/: { n:"??" },
    		/*::[*/0x00CE/*::]*/: { n:"??" },
    		/*::[*/0x00CF/*::]*/: { n:"??" },
    		/*::[*/0x00D0/*::]*/: { n:"??" },
    		/*::[*/0x0100/*::]*/: { n:"??" },
    		/*::[*/0x0103/*::]*/: { n:"??" },
    		/*::[*/0x0104/*::]*/: { n:"??" },
    		/*::[*/0x0105/*::]*/: { n:"??" },
    		/*::[*/0x0106/*::]*/: { n:"??" },
    		/*::[*/0x0107/*::]*/: { n:"??" },
    		/*::[*/0x0109/*::]*/: { n:"??" },
    		/*::[*/0x010A/*::]*/: { n:"??" },
    		/*::[*/0x010B/*::]*/: { n:"??" },
    		/*::[*/0x010C/*::]*/: { n:"??" },
    		/*::[*/0x010E/*::]*/: { n:"??" },
    		/*::[*/0x010F/*::]*/: { n:"??" },
    		/*::[*/0x0180/*::]*/: { n:"??" },
    		/*::[*/0x0185/*::]*/: { n:"??" },
    		/*::[*/0x0186/*::]*/: { n:"??" },
    		/*::[*/0x0189/*::]*/: { n:"??" },
    		/*::[*/0x018C/*::]*/: { n:"??" },
    		/*::[*/0x0200/*::]*/: { n:"??" },
    		/*::[*/0x0202/*::]*/: { n:"??" },
    		/*::[*/0x0201/*::]*/: { n:"??" },
    		/*::[*/0x0204/*::]*/: { n:"??" },
    		/*::[*/0x0205/*::]*/: { n:"??" },
    		/*::[*/0x0280/*::]*/: { n:"??" },
    		/*::[*/0x0281/*::]*/: { n:"??" },
    		/*::[*/0x0282/*::]*/: { n:"??" },
    		/*::[*/0x0283/*::]*/: { n:"??" },
    		/*::[*/0x0284/*::]*/: { n:"??" },
    		/*::[*/0x0285/*::]*/: { n:"??" },
    		/*::[*/0x0286/*::]*/: { n:"??" },
    		/*::[*/0x0287/*::]*/: { n:"??" },
    		/*::[*/0x0288/*::]*/: { n:"??" },
    		/*::[*/0x0292/*::]*/: { n:"??" },
    		/*::[*/0x0293/*::]*/: { n:"??" },
    		/*::[*/0x0294/*::]*/: { n:"??" },
    		/*::[*/0x0295/*::]*/: { n:"??" },
    		/*::[*/0x0296/*::]*/: { n:"??" },
    		/*::[*/0x0299/*::]*/: { n:"??" },
    		/*::[*/0x029A/*::]*/: { n:"??" },
    		/*::[*/0x0300/*::]*/: { n:"??" },
    		/*::[*/0x0304/*::]*/: { n:"??" },
    		/*::[*/0x0601/*::]*/: { n:"SHEETINFOQP", f:parse_SHEETINFOQP },
    		/*::[*/0x0640/*::]*/: { n:"??" },
    		/*::[*/0x0642/*::]*/: { n:"??" },
    		/*::[*/0x0701/*::]*/: { n:"??" },
    		/*::[*/0x0702/*::]*/: { n:"??" },
    		/*::[*/0x0703/*::]*/: { n:"??" },
    		/*::[*/0x0704/*::]*/: { n:"??" },
    		/*::[*/0x0780/*::]*/: { n:"??" },
    		/*::[*/0x0800/*::]*/: { n:"??" },
    		/*::[*/0x0801/*::]*/: { n:"??" },
    		/*::[*/0x0804/*::]*/: { n:"??" },
    		/*::[*/0x0A80/*::]*/: { n:"??" },
    		/*::[*/0x2AF6/*::]*/: { n:"??" },
    		/*::[*/0x3231/*::]*/: { n:"??" },
    		/*::[*/0x6E49/*::]*/: { n:"??" },
    		/*::[*/0x6F44/*::]*/: { n:"??" },
    		/*::[*/0xFFFF/*::]*/: { n:"" }
    	};
    	return {
    		sheet_to_wk1: sheet_to_wk1,
    		book_to_wk3: book_to_wk3,
    		to_workbook: lotus_to_workbook
    	};
    })();
    /* 18.4.7 rPr CT_RPrElt */
    function parse_rpr(rpr) {
    	var font = {}, m = rpr.match(tagregex), i = 0;
    	var pass = false;
    	if(m) for(;i!=m.length; ++i) {
    		var y = parsexmltag(m[i]);
    		switch(y[0].replace(/\w*:/g,"")) {
    			/* 18.8.12 condense CT_BooleanProperty */
    			/* ** not required . */
    			case '<condense': break;
    			/* 18.8.17 extend CT_BooleanProperty */
    			/* ** not required . */
    			case '<extend': break;
    			/* 18.8.36 shadow CT_BooleanProperty */
    			/* ** not required . */
    			case '<shadow':
    				if(!y.val) break;
    				/* falls through */
    			case '<shadow>':
    			case '<shadow/>': font.shadow = 1; break;
    			case '</shadow>': break;

    			/* 18.4.1 charset CT_IntProperty TODO */
    			case '<charset':
    				if(y.val == '1') break;
    				font.cp = CS2CP[parseInt(y.val, 10)];
    				break;

    			/* 18.4.2 outline CT_BooleanProperty TODO */
    			case '<outline':
    				if(!y.val) break;
    				/* falls through */
    			case '<outline>':
    			case '<outline/>': font.outline = 1; break;
    			case '</outline>': break;

    			/* 18.4.5 rFont CT_FontName */
    			case '<rFont': font.name = y.val; break;

    			/* 18.4.11 sz CT_FontSize */
    			case '<sz': font.sz = y.val; break;

    			/* 18.4.10 strike CT_BooleanProperty */
    			case '<strike':
    				if(!y.val) break;
    				/* falls through */
    			case '<strike>':
    			case '<strike/>': font.strike = 1; break;
    			case '</strike>': break;

    			/* 18.4.13 u CT_UnderlineProperty */
    			case '<u':
    				if(!y.val) break;
    				switch(y.val) {
    					case 'double': font.uval = "double"; break;
    					case 'singleAccounting': font.uval = "single-accounting"; break;
    					case 'doubleAccounting': font.uval = "double-accounting"; break;
    				}
    				/* falls through */
    			case '<u>':
    			case '<u/>': font.u = 1; break;
    			case '</u>': break;

    			/* 18.8.2 b */
    			case '<b':
    				if(y.val == '0') break;
    				/* falls through */
    			case '<b>':
    			case '<b/>': font.b = 1; break;
    			case '</b>': break;

    			/* 18.8.26 i */
    			case '<i':
    				if(y.val == '0') break;
    				/* falls through */
    			case '<i>':
    			case '<i/>': font.i = 1; break;
    			case '</i>': break;

    			/* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */
    			case '<color':
    				if(y.rgb) font.color = y.rgb.slice(2,8);
    				break;
    			case '<color>': case '<color/>': case '</color>': break;

    			/* 18.8.18 family ST_FontFamily */
    			case '<family': font.family = y.val; break;
    			case '<family>': case '<family/>': case '</family>': break;

    			/* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */
    			case '<vertAlign': font.valign = y.val; break;
    			case '<vertAlign>': case '<vertAlign/>': case '</vertAlign>': break;

    			/* 18.8.35 scheme CT_FontScheme TODO */
    			case '<scheme': break;
    			case '<scheme>': case '<scheme/>': case '</scheme>': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default:
    				if(y[0].charCodeAt(1) !== 47 && !pass) throw new Error('Unrecognized rich format ' + y[0]);
    		}
    	}
    	return font;
    }

    var parse_rs = /*#__PURE__*/(function() {
    	var tregex = matchtag("t"), rpregex = matchtag("rPr");
    	/* 18.4.4 r CT_RElt */
    	function parse_r(r) {
    		/* 18.4.12 t ST_Xstring */
    		var t = r.match(tregex)/*, cp = 65001*/;
    		if(!t) return {t:"s", v:""};

    		var o/*:Cell*/ = ({t:'s', v:unescapexml(t[1])}/*:any*/);
    		var rpr = r.match(rpregex);
    		if(rpr) o.s = parse_rpr(rpr[1]);
    		return o;
    	}
    	var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
    	return function parse_rs(rs) {
    		return rs.replace(rregex,"").split(rend).map(parse_r).filter(function(r) { return r.v; });
    	};
    })();


    /* Parse a list of <r> tags */
    var rs_to_html = /*#__PURE__*/(function parse_rs_factory() {
    	var nlregex = /(\r\n|\n)/g;
    	function parse_rpr2(font, intro, outro) {
    		var style/*:Array<string>*/ = [];

    		if(font.u) style.push("text-decoration: underline;");
    		if(font.uval) style.push("text-underline-style:" + font.uval + ";");
    		if(font.sz) style.push("font-size:" + font.sz + "pt;");
    		if(font.outline) style.push("text-effect: outline;");
    		if(font.shadow) style.push("text-shadow: auto;");
    		intro.push('<span style="' + style.join("") + '">');

    		if(font.b) { intro.push("<b>"); outro.push("</b>"); }
    		if(font.i) { intro.push("<i>"); outro.push("</i>"); }
    		if(font.strike) { intro.push("<s>"); outro.push("</s>"); }

    		var align = font.valign || "";
    		if(align == "superscript" || align == "super") align = "sup";
    		else if(align == "subscript") align = "sub";
    		if(align != "") { intro.push("<" + align + ">"); outro.push("</" + align + ">"); }

    		outro.push("</span>");
    		return font;
    	}

    	/* 18.4.4 r CT_RElt */
    	function r_to_html(r) {
    		var terms/*:[Array<string>, string, Array<string>]*/ = [[],r.v,[]];
    		if(!r.v) return "";

    		if(r.s) parse_rpr2(r.s, terms[0], terms[2]);

    		return terms[0].join("") + terms[1].replace(nlregex,'<br/>') + terms[2].join("");
    	}

    	return function parse_rs(rs) {
    		return rs.map(r_to_html).join("");
    	};
    })();

    /* 18.4.8 si CT_Rst */
    var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
    var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
    function parse_si(x, opts) {
    	var html = opts ? opts.cellHTML : true;
    	var z = {};
    	if(!x) return { t: "" };
    	//var y;
    	/* 18.4.12 t ST_Xstring (Plaintext String) */
    	// TODO: is whitespace actually valid here?
    	if(x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
    		z.t = unescapexml(utf8read(x.slice(x.indexOf(">")+1).split(/<\/(?:\w+:)?t>/)[0]||""));
    		z.r = utf8read(x);
    		if(html) z.h = escapehtml(z.t);
    	}
    	/* 18.4.4 r CT_RElt (Rich Text Run) */
    	else if((/*y = */x.match(sirregex))) {
    		z.r = utf8read(x);
    		z.t = unescapexml(utf8read((x.replace(sirphregex, '').match(sitregex)||[]).join("").replace(tagregex,"")));
    		if(html) z.h = rs_to_html(parse_rs(z.r));
    	}
    	/* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */
    	/* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */
    	return z;
    }

    /* 18.4 Shared String Table */
    var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
    var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
    var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
    function parse_sst_xml(data/*:string*/, opts)/*:SST*/ {
    	var s/*:SST*/ = ([]/*:any*/), ss = "";
    	if(!data) return s;
    	/* 18.4.9 sst CT_Sst */
    	var sst = data.match(sstr0);
    	if(sst) {
    		ss = sst[2].replace(sstr1,"").split(sstr2);
    		for(var i = 0; i != ss.length; ++i) {
    			var o = parse_si(ss[i].trim(), opts);
    			if(o != null) s[s.length] = o;
    		}
    		sst = parsexmltag(sst[1]); s.Count = sst.count; s.Unique = sst.uniqueCount;
    	}
    	return s;
    }

    var straywsregex = /^\s|\s$|[\t\n\r]/;
    function write_sst_xml(sst/*:SST*/, opts)/*:string*/ {
    	if(!opts.bookSST) return "";
    	var o = [XML_HEADER];
    	o[o.length] = (writextag('sst', null, {
    		xmlns: XMLNS_main[0],
    		count: sst.Count,
    		uniqueCount: sst.Unique
    	}));
    	for(var i = 0; i != sst.length; ++i) { if(sst[i] == null) continue;
    		var s/*:XLString*/ = sst[i];
    		var sitag = "<si>";
    		if(s.r) sitag += s.r;
    		else {
    			sitag += "<t";
    			if(!s.t) s.t = "";
    			if(s.t.match(straywsregex)) sitag += ' xml:space="preserve"';
    			sitag += ">" + escapexml(s.t) + "</t>";
    		}
    		sitag += "</si>";
    		o[o.length] = (sitag);
    	}
    	if(o.length>2){ o[o.length] = ('</sst>'); o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }
    /* [MS-XLSB] 2.4.221 BrtBeginSst */
    function parse_BrtBeginSst(data) {
    	return [data.read_shift(4), data.read_shift(4)];
    }

    /* [MS-XLSB] 2.1.7.45 Shared Strings */
    function parse_sst_bin(data, opts)/*:SST*/ {
    	var s/*:SST*/ = ([]/*:any*/);
    	var pass = false;
    	recordhopper(data, function hopper_sst(val, R, RT) {
    		switch(RT) {
    			case 0x009F: /* BrtBeginSst */
    				s.Count = val[0]; s.Unique = val[1]; break;
    			case 0x0013: /* BrtSSTItem */
    				s.push(val); break;
    			case 0x00A0: /* BrtEndSst */
    				return true;

    			case 0x0023: /* BrtFRTBegin */
    				pass = true; break;
    			case 0x0024: /* BrtFRTEnd */
    				pass = false; break;

    			default:
    				if(R.T);
    				if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	});
    	return s;
    }

    function write_BrtBeginSst(sst, o) {
    	if(!o) o = new_buf(8);
    	o.write_shift(4, sst.Count);
    	o.write_shift(4, sst.Unique);
    	return o;
    }

    var write_BrtSSTItem = write_RichStr;

    function write_sst_bin(sst/*::, opts*/) {
    	var ba = buf_array();
    	write_record(ba, 0x009F /* BrtBeginSst */, write_BrtBeginSst(sst));
    	for(var i = 0; i < sst.length; ++i) write_record(ba, 0x0013 /* BrtSSTItem */, write_BrtSSTItem(sst[i]));
    	/* FRTSST */
    	write_record(ba, 0x00A0 /* BrtEndSst */);
    	return ba.end();
    }
    function _JS2ANSI(str/*:string*/)/*:Array<number>*/ {
    	if(typeof $cptable !== 'undefined') return $cptable.utils.encode(current_ansi, str);
    	var o/*:Array<number>*/ = [], oo = str.split("");
    	for(var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0);
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.4 Version */
    function parse_CRYPTOVersion(blob, length/*:?number*/) {
    	var o/*:any*/ = {};
    	o.Major = blob.read_shift(2);
    	o.Minor = blob.read_shift(2);
    	/*:: if(length == null) return o; */
    	if(length >= 4) blob.l += length - 4;
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */
    function parse_DataSpaceVersionInfo(blob) {
    	var o = {};
    	o.id = blob.read_shift(0, 'lpp4');
    	o.R = parse_CRYPTOVersion(blob, 4);
    	o.U = parse_CRYPTOVersion(blob, 4);
    	o.W = parse_CRYPTOVersion(blob, 4);
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */
    function parse_DataSpaceMapEntry(blob) {
    	var len = blob.read_shift(4);
    	var end = blob.l + len - 4;
    	var o = {};
    	var cnt = blob.read_shift(4);
    	var comps/*:Array<{t:number, v:string}>*/ = [];
    	/* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */
    	while(cnt-- > 0) comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, 'lpp4') });
    	o.name = blob.read_shift(0, 'lpp4');
    	o.comps = comps;
    	if(blob.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */
    function parse_DataSpaceMap(blob) {
    	var o = [];
    	blob.l += 4; // must be 0x8
    	var cnt = blob.read_shift(4);
    	while(cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */
    function parse_DataSpaceDefinition(blob)/*:Array<string>*/ {
    	var o/*:Array<string>*/ = [];
    	blob.l += 4; // must be 0x8
    	var cnt = blob.read_shift(4);
    	while(cnt-- > 0) o.push(blob.read_shift(0, 'lpp4'));
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */
    function parse_TransformInfoHeader(blob) {
    	var o = {};
    	/*var len = */blob.read_shift(4);
    	blob.l += 4; // must be 0x1
    	o.id = blob.read_shift(0, 'lpp4');
    	o.name = blob.read_shift(0, 'lpp4');
    	o.R = parse_CRYPTOVersion(blob, 4);
    	o.U = parse_CRYPTOVersion(blob, 4);
    	o.W = parse_CRYPTOVersion(blob, 4);
    	return o;
    }

    function parse_Primary(blob) {
    	/* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */
    	var hdr = parse_TransformInfoHeader(blob);
    	/* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */
    	hdr.ename = blob.read_shift(0, '8lpp4');
    	hdr.blksz = blob.read_shift(4);
    	hdr.cmode = blob.read_shift(4);
    	if(blob.read_shift(4) != 0x04) throw new Error("Bad !Primary record");
    	return hdr;
    }

    /* [MS-OFFCRYPTO] 2.3.2 Encryption Header */
    function parse_EncryptionHeader(blob, length/*:number*/) {
    	var tgt = blob.l + length;
    	var o = {};
    	o.Flags = (blob.read_shift(4) & 0x3F);
    	blob.l += 4;
    	o.AlgID = blob.read_shift(4);
    	var valid = false;
    	switch(o.AlgID) {
    		case 0x660E: case 0x660F: case 0x6610: valid = (o.Flags == 0x24); break;
    		case 0x6801: valid = (o.Flags == 0x04); break;
    		case 0: valid = (o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24); break;
    		default: throw 'Unrecognized encryption algorithm: ' + o.AlgID;
    	}
    	if(!valid) throw new Error("Encryption Flags/AlgID mismatch");
    	o.AlgIDHash = blob.read_shift(4);
    	o.KeySize = blob.read_shift(4);
    	o.ProviderType = blob.read_shift(4);
    	blob.l += 8;
    	o.CSPName = blob.read_shift((tgt-blob.l)>>1, 'utf16le');
    	blob.l = tgt;
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */
    function parse_EncryptionVerifier(blob, length/*:number*/) {
    	var o = {}, tgt = blob.l + length;
    	blob.l += 4; // SaltSize must be 0x10
    	o.Salt = blob.slice(blob.l, blob.l+16); blob.l += 16;
    	o.Verifier = blob.slice(blob.l, blob.l+16); blob.l += 16;
    	/*var sz = */blob.read_shift(4);
    	o.VerifierHash = blob.slice(blob.l, tgt); blob.l = tgt;
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */
    function parse_EncryptionInfo(blob) {
    	var vers = parse_CRYPTOVersion(blob);
    	switch(vers.Minor) {
    		case 0x02: return [vers.Minor, parse_EncInfoStd(blob)];
    		case 0x03: return [vers.Minor, parse_EncInfoExt()];
    		case 0x04: return [vers.Minor, parse_EncInfoAgl(blob)];
    	}
    	throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
    }

    /* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */
    function parse_EncInfoStd(blob/*::, vers*/) {
    	var flags = blob.read_shift(4);
    	if((flags & 0x3F) != 0x24) throw new Error("EncryptionInfo mismatch");
    	var sz = blob.read_shift(4);
    	//var tgt = blob.l + sz;
    	var hdr = parse_EncryptionHeader(blob, sz);
    	var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
    	return { t:"Std", h:hdr, v:verifier };
    }
    /* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */
    function parse_EncInfoExt(/*::blob, vers*/) { throw new Error("File is password-protected: ECMA-376 Extensible"); }
    /* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */
    function parse_EncInfoAgl(blob/*::, vers*/) {
    	var KeyData = ["saltSize","blockSize","keyBits","hashSize","cipherAlgorithm","cipherChaining","hashAlgorithm","saltValue"];
    	blob.l+=4;
    	var xml = blob.read_shift(blob.length - blob.l, 'utf8');
    	var o = {};
    	xml.replace(tagregex, function xml_agile(x) {
    		var y/*:any*/ = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<?xml': break;
    			case '<encryption': case '</encryption>': break;
    			case '<keyData': KeyData.forEach(function(k) { o[k] = y[k]; }); break;
    			case '<dataIntegrity': o.encryptedHmacKey = y.encryptedHmacKey; o.encryptedHmacValue = y.encryptedHmacValue; break;
    			case '<keyEncryptors>': case '<keyEncryptors': o.encs = []; break;
    			case '</keyEncryptors>': break;

    			case '<keyEncryptor': o.uri = y.uri; break;
    			case '</keyEncryptor>': break;
    			case '<encryptedKey': o.encs.push(y); break;
    			default: throw y[0];
    		}
    	});
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */
    function parse_RC4CryptoHeader(blob, length/*:number*/) {
    	var o = {};
    	var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4;
    	if(vers.Minor != 2) throw new Error('unrecognized minor version code: ' + vers.Minor);
    	if(vers.Major > 4 || vers.Major < 2) throw new Error('unrecognized major version code: ' + vers.Major);
    	o.Flags = blob.read_shift(4); length -= 4;
    	var sz = blob.read_shift(4); length -= 4;
    	o.EncryptionHeader = parse_EncryptionHeader(blob, sz); length -= sz;
    	o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
    	return o;
    }
    /* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */
    function parse_RC4Header(blob/*::, length*/) {
    	var o = {};
    	var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    	if(vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;
    	o.Salt = blob.read_shift(16);
    	o.EncryptedVerifier = blob.read_shift(16);
    	o.EncryptedVerifierHash = blob.read_shift(16);
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */
    function crypto_CreatePasswordVerifier_Method1(Password/*:string*/) {
    	var Verifier = 0x0000, PasswordArray;
    	var PasswordDecoded = _JS2ANSI(Password);
    	var len = PasswordDecoded.length + 1, i, PasswordByte;
    	var Intermediate1, Intermediate2, Intermediate3;
    	PasswordArray = new_raw_buf(len);
    	PasswordArray[0] = PasswordDecoded.length;
    	for(i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i-1];
    	for(i = len-1; i >= 0; --i) {
    		PasswordByte = PasswordArray[i];
    		Intermediate1 = ((Verifier & 0x4000) === 0x0000) ? 0 : 1;
    		Intermediate2 = (Verifier << 1) & 0x7FFF;
    		Intermediate3 = Intermediate1 | Intermediate2;
    		Verifier = Intermediate3 ^ PasswordByte;
    	}
    	return Verifier ^ 0xCE4B;
    }

    /* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */
    var crypto_CreateXorArray_Method1 = /*#__PURE__*/(function() {
    	var PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];
    	var InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];
    	var XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];
    	var Ror = function(Byte) { return ((Byte/2) | (Byte*128)) & 0xFF; };
    	var XorRor = function(byte1, byte2) { return Ror(byte1 ^ byte2); };
    	var CreateXorKey_Method1 = function(Password) {
    		var XorKey = InitialCode[Password.length - 1];
    		var CurrentElement = 0x68;
    		for(var i = Password.length-1; i >= 0; --i) {
    			var Char = Password[i];
    			for(var j = 0; j != 7; ++j) {
    				if(Char & 0x40) XorKey ^= XorMatrix[CurrentElement];
    				Char *= 2; --CurrentElement;
    			}
    		}
    		return XorKey;
    	};
    	return function(password/*:string*/) {
    		var Password = _JS2ANSI(password);
    		var XorKey = CreateXorKey_Method1(Password);
    		var Index = Password.length;
    		var ObfuscationArray = new_raw_buf(16);
    		for(var i = 0; i != 16; ++i) ObfuscationArray[i] = 0x00;
    		var Temp, PasswordLastChar, PadIndex;
    		if((Index & 1) === 1) {
    			Temp = XorKey >> 8;
    			ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
    			--Index;
    			Temp = XorKey & 0xFF;
    			PasswordLastChar = Password[Password.length - 1];
    			ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
    		}
    		while(Index > 0) {
    			--Index;
    			Temp = XorKey >> 8;
    			ObfuscationArray[Index] = XorRor(Password[Index], Temp);
    			--Index;
    			Temp = XorKey & 0xFF;
    			ObfuscationArray[Index] = XorRor(Password[Index], Temp);
    		}
    		Index = 15;
    		PadIndex = 15 - Password.length;
    		while(PadIndex > 0) {
    			Temp = XorKey >> 8;
    			ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
    			--Index;
    			--PadIndex;
    			Temp = XorKey & 0xFF;
    			ObfuscationArray[Index] = XorRor(Password[Index], Temp);
    			--Index;
    			--PadIndex;
    		}
    		return ObfuscationArray;
    	};
    })();

    /* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */
    var crypto_DecryptData_Method1 = function(password/*:string*/, Data, XorArrayIndex, XorArray, O) {
    	/* If XorArray is set, use it; if O is not set, make changes in-place */
    	if(!O) O = Data;
    	if(!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
    	var Index, Value;
    	for(Index = 0; Index != Data.length; ++Index) {
    		Value = Data[Index];
    		Value ^= XorArray[XorArrayIndex];
    		Value = ((Value>>5) | (Value<<3)) & 0xFF;
    		O[Index] = Value;
    		++XorArrayIndex;
    	}
    	return [O, XorArrayIndex, XorArray];
    };

    var crypto_MakeXorDecryptor = function(password/*:string*/) {
    	var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
    	return function(Data) {
    		var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
    		XorArrayIndex = O[1];
    		return O[0];
    	};
    };

    /* 2.5.343 */
    function parse_XORObfuscation(blob, length, opts, out) {
    	var o = ({ key: parseuint16(blob), verificationBytes: parseuint16(blob) }/*:any*/);
    	if(opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
    	out.valid = o.verificationBytes === o.verifier;
    	if(out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
    	return o;
    }

    /* 2.4.117 */
    function parse_FilePassHeader(blob, length/*:number*/, oo) {
    	var o = oo || {}; o.Info = blob.read_shift(2); blob.l -= 2;
    	if(o.Info === 1) o.Data = parse_RC4Header(blob);
    	else o.Data = parse_RC4CryptoHeader(blob, length);
    	return o;
    }
    function parse_FilePass(blob, length/*:number*/, opts) {
    	var o = ({ Type: opts.biff >= 8 ? blob.read_shift(2) : 0 }/*:any*/); /* wEncryptionType */
    	if(o.Type) parse_FilePassHeader(blob, length-2, o);
    	else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
    	return o;
    }


    var RTF = /*#__PURE__*/(function() {
    	function rtf_to_sheet(d/*:RawData*/, opts)/*:Worksheet*/ {
    		switch(opts.type) {
    			case 'base64': return rtf_to_sheet_str(Base64_decode(d), opts);
    			case 'binary': return rtf_to_sheet_str(d, opts);
    			case 'buffer': return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);
    			case 'array':  return rtf_to_sheet_str(cc2str(d), opts);
    		}
    		throw new Error("Unrecognized type " + opts.type);
    	}

    	/* TODO: this is a stub */
    	function rtf_to_sheet_str(str/*:string*/, opts)/*:Worksheet*/ {
    		var o = opts || {};
    		var ws/*:Worksheet*/ = o.dense ? ([]/*:any*/) : ({}/*:any*/);

    		var rows = str.match(/\\trowd.*?\\row\b/g);
    		if(!rows.length) throw new Error("RTF missing table");
    		var range/*:Range*/ = ({s: {c:0, r:0}, e: {c:0, r:rows.length - 1}}/*:any*/);
    		rows.forEach(function(rowtf, R) {
    			if(Array.isArray(ws)) ws[R] = [];
    			var rtfre = /\\\w+\b/g;
    			var last_index = 0;
    			var res;
    			var C = -1;
    			while((res = rtfre.exec(rowtf))) {
    				switch(res[0]) {
    					case "\\cell":
    						var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
    						if(data[0] == " ") data = data.slice(1);
    						++C;
    						if(data.length) {
    							// TODO: value parsing, including codepage adjustments
    							var cell = {v: data, t:"s"};
    							if(Array.isArray(ws)) ws[R][C] = cell;
    							else ws[encode_cell({r:R, c:C})] = cell;
    						}
    						break;
    				}
    				last_index = rtfre.lastIndex;
    			}
    			if(C > range.e.c) range.e.c = C;
    		});
    		ws['!ref'] = encode_range(range);
    		return ws;
    	}

    	function rtf_to_workbook(d/*:RawData*/, opts)/*:Workbook*/ { return sheet_to_workbook(rtf_to_sheet(d, opts), opts); }

    	/* TODO: this is a stub */
    	function sheet_to_rtf(ws/*:Worksheet*//*::, opts*/)/*:string*/ {
    		var o = ["{\\rtf1\\ansi"];
    		var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
    		var dense = Array.isArray(ws);
    		for(var R = r.s.r; R <= r.e.r; ++R) {
    			o.push("\\trowd\\trautofit1");
    			for(var C = r.s.c; C <= r.e.c; ++C) o.push("\\cellx" + (C+1));
    			o.push("\\pard\\intbl");
    			for(C = r.s.c; C <= r.e.c; ++C) {
    				var coord = encode_cell({r:R,c:C});
    				cell = dense ? (ws[R]||[])[C]: ws[coord];
    				if(!cell || cell.v == null && (!cell.f || cell.F)) continue;
    				o.push(" " + (cell.w || (format_cell(cell), cell.w)));
    				o.push("\\cell");
    			}
    			o.push("\\pard\\intbl\\row");
    		}
    		return o.join("") + "}";
    	}

    	return {
    		to_workbook: rtf_to_workbook,
    		to_sheet: rtf_to_sheet,
    		from_sheet: sheet_to_rtf
    	};
    })();
    function hex2RGB(h) {
    	var o = h.slice(h[0]==="#"?1:0).slice(0,6);
    	return [parseInt(o.slice(0,2),16),parseInt(o.slice(2,4),16),parseInt(o.slice(4,6),16)];
    }
    function rgb2Hex(rgb) {
    	for(var i=0,o=1; i!=3; ++i) o = o*256 + (rgb[i]>255?255:rgb[i]<0?0:rgb[i]);
    	return o.toString(16).toUpperCase().slice(1);
    }

    function rgb2HSL(rgb) {
    	var R = rgb[0]/255, G = rgb[1]/255, B=rgb[2]/255;
    	var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
    	if(C === 0) return [0, 0, R];

    	var H6 = 0, S = 0, L2 = (M + m);
    	S = C / (L2 > 1 ? 2 - L2 : L2);
    	switch(M){
    		case R: H6 = ((G - B) / C + 6)%6; break;
    		case G: H6 = ((B - R) / C + 2); break;
    		case B: H6 = ((R - G) / C + 4); break;
    	}
    	return [H6 / 6, S, L2 / 2];
    }

    function hsl2RGB(hsl){
    	var H = hsl[0], S = hsl[1], L = hsl[2];
    	var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C/2;
    	var rgb = [m,m,m], h6 = 6*H;

    	var X;
    	if(S !== 0) switch(h6|0) {
    		case 0: case 6: X = C * h6; rgb[0] += C; rgb[1] += X; break;
    		case 1: X = C * (2 - h6);   rgb[0] += X; rgb[1] += C; break;
    		case 2: X = C * (h6 - 2);   rgb[1] += C; rgb[2] += X; break;
    		case 3: X = C * (4 - h6);   rgb[1] += X; rgb[2] += C; break;
    		case 4: X = C * (h6 - 4);   rgb[2] += C; rgb[0] += X; break;
    		case 5: X = C * (6 - h6);   rgb[2] += X; rgb[0] += C; break;
    	}
    	for(var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i]*255);
    	return rgb;
    }

    /* 18.8.3 bgColor tint algorithm */
    function rgb_tint(hex, tint) {
    	if(tint === 0) return hex;
    	var hsl = rgb2HSL(hex2RGB(hex));
    	if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
    	else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
    	return rgb2Hex(hsl2RGB(hsl));
    }

    /* 18.3.1.13 width calculations */
    /* [MS-OI29500] 2.1.595 Column Width & Formatting */
    var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
    function width2px(width) { return Math.floor(( width + (Math.round(128/MDW))/256 )* MDW ); }
    function px2char(px) { return (Math.floor((px - 5)/MDW * 100 + 0.5))/100; }
    function char2width(chr) { return (Math.round((chr * MDW + 5)/MDW*256))/256; }
    //function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }
    //function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }
    function cycle_width(collw) { return char2width(px2char(width2px(collw))); }
    /* XLSX/XLSB/XLS specify width in units of MDW */
    function find_mdw_colw(collw) {
    	var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
    	if(delta > 0.005) for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) if(Math.abs(collw - cycle_width(collw)) <= delta) { delta = Math.abs(collw - cycle_width(collw)); _MDW = MDW; }
    	MDW = _MDW;
    }
    /* XLML specifies width in terms of pixels */
    /*function find_mdw_wpx(wpx) {
    	var delta = Infinity, guess = 0, _MDW = MIN_MDW;
    	for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {
    		guess = char2width_(px2char_(wpx))*256;
    		guess = (guess) % 1;
    		if(guess > 0.5) guess--;
    		if(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }
    	}
    	MDW = _MDW;
    }*/

    function process_col(coll/*:ColInfo*/) {
    	if(coll.width) {
    		coll.wpx = width2px(coll.width);
    		coll.wch = px2char(coll.wpx);
    		coll.MDW = MDW;
    	} else if(coll.wpx) {
    		coll.wch = px2char(coll.wpx);
    		coll.width = char2width(coll.wch);
    		coll.MDW = MDW;
    	} else if(typeof coll.wch == 'number') {
    		coll.width = char2width(coll.wch);
    		coll.wpx = width2px(coll.width);
    		coll.MDW = MDW;
    	}
    	if(coll.customWidth) delete coll.customWidth;
    }

    var DEF_PPI = 96, PPI = DEF_PPI;
    function px2pt(px) { return px * 96 / PPI; }
    function pt2px(pt) { return pt * PPI / 96; }

    /* [MS-EXSPXML3] 2.4.54 ST_enmPattern */
    var XLMLPatternTypeMap = {
    	"None": "none",
    	"Solid": "solid",
    	"Gray50": "mediumGray",
    	"Gray75": "darkGray",
    	"Gray25": "lightGray",
    	"HorzStripe": "darkHorizontal",
    	"VertStripe": "darkVertical",
    	"ReverseDiagStripe": "darkDown",
    	"DiagStripe": "darkUp",
    	"DiagCross": "darkGrid",
    	"ThickDiagCross": "darkTrellis",
    	"ThinHorzStripe": "lightHorizontal",
    	"ThinVertStripe": "lightVertical",
    	"ThinReverseDiagStripe": "lightDown",
    	"ThinHorzCross": "lightGrid"
    };

    /* 18.8.5 borders CT_Borders */
    function parse_borders(t, styles, themes, opts) {
    	styles.Borders = [];
    	var border = {};
    	var pass = false;
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<borders': case '<borders>': case '</borders>': break;

    			/* 18.8.4 border CT_Border */
    			case '<border': case '<border>': case '<border/>':
    				border = /*::(*/{}/*:: :any)*/;
    				if(y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);
    				if(y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);
    				styles.Borders.push(border);
    				break;
    			case '</border>': break;

    			/* note: not in spec, appears to be CT_BorderPr */
    			case '<left/>': break;
    			case '<left': case '<left>': break;
    			case '</left>': break;

    			/* note: not in spec, appears to be CT_BorderPr */
    			case '<right/>': break;
    			case '<right': case '<right>': break;
    			case '</right>': break;

    			/* 18.8.43 top CT_BorderPr */
    			case '<top/>': break;
    			case '<top': case '<top>': break;
    			case '</top>': break;

    			/* 18.8.6 bottom CT_BorderPr */
    			case '<bottom/>': break;
    			case '<bottom': case '<bottom>': break;
    			case '</bottom>': break;

    			/* 18.8.13 diagonal CT_BorderPr */
    			case '<diagonal': case '<diagonal>': case '<diagonal/>': break;
    			case '</diagonal>': break;

    			/* 18.8.25 horizontal CT_BorderPr */
    			case '<horizontal': case '<horizontal>': case '<horizontal/>': break;
    			case '</horizontal>': break;

    			/* 18.8.44 vertical CT_BorderPr */
    			case '<vertical': case '<vertical>': case '<vertical/>': break;
    			case '</vertical>': break;

    			/* 18.8.37 start CT_BorderPr */
    			case '<start': case '<start>': case '<start/>': break;
    			case '</start>': break;

    			/* 18.8.16 end CT_BorderPr */
    			case '<end': case '<end>': case '<end/>': break;
    			case '</end>': break;

    			/* 18.8.? color CT_Color */
    			case '<color': case '<color>':
    				break;
    			case '<color/>': case '</color>': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default: if(opts && opts.WTF) {
    				if(!pass) throw new Error('unrecognized ' + y[0] + ' in borders');
    			}
    		}
    	});
    }

    /* 18.8.21 fills CT_Fills */
    function parse_fills(t, styles, themes, opts) {
    	styles.Fills = [];
    	var fill = {};
    	var pass = false;
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<fills': case '<fills>': case '</fills>': break;

    			/* 18.8.20 fill CT_Fill */
    			case '<fill>': case '<fill': case '<fill/>':
    				fill = {}; styles.Fills.push(fill); break;
    			case '</fill>': break;

    			/* 18.8.24 gradientFill CT_GradientFill */
    			case '<gradientFill>': break;
    			case '<gradientFill':
    			case '</gradientFill>': styles.Fills.push(fill); fill = {}; break;

    			/* 18.8.32 patternFill CT_PatternFill */
    			case '<patternFill': case '<patternFill>':
    				if(y.patternType) fill.patternType = y.patternType;
    				break;
    			case '<patternFill/>': case '</patternFill>': break;

    			/* 18.8.3 bgColor CT_Color */
    			case '<bgColor':
    				if(!fill.bgColor) fill.bgColor = {};
    				if(y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);
    				if(y.theme) fill.bgColor.theme = parseInt(y.theme, 10);
    				if(y.tint) fill.bgColor.tint = parseFloat(y.tint);
    				/* Excel uses ARGB strings */
    				if(y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);
    				break;
    			case '<bgColor/>': case '</bgColor>': break;

    			/* 18.8.19 fgColor CT_Color */
    			case '<fgColor':
    				if(!fill.fgColor) fill.fgColor = {};
    				if(y.theme) fill.fgColor.theme = parseInt(y.theme, 10);
    				if(y.tint) fill.fgColor.tint = parseFloat(y.tint);
    				/* Excel uses ARGB strings */
    				if(y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);
    				break;
    			case '<fgColor/>': case '</fgColor>': break;

    			/* 18.8.38 stop CT_GradientStop */
    			case '<stop': case '<stop/>': break;
    			case '</stop>': break;

    			/* 18.8.? color CT_Color */
    			case '<color': case '<color/>': break;
    			case '</color>': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default: if(opts && opts.WTF) {
    				if(!pass) throw new Error('unrecognized ' + y[0] + ' in fills');
    			}
    		}
    	});
    }

    /* 18.8.23 fonts CT_Fonts */
    function parse_fonts(t, styles, themes, opts) {
    	styles.Fonts = [];
    	var font = {};
    	var pass = false;
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<fonts': case '<fonts>': case '</fonts>': break;

    			/* 18.8.22 font CT_Font */
    			case '<font': case '<font>': break;
    			case '</font>': case '<font/>':
    				styles.Fonts.push(font);
    				font = {};
    				break;

    			/* 18.8.29 name CT_FontName */
    			case '<name': if(y.val) font.name = utf8read(y.val); break;
    			case '<name/>': case '</name>': break;

    			/* 18.8.2  b CT_BooleanProperty */
    			case '<b': font.bold = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<b/>': font.bold = 1; break;

    			/* 18.8.26 i CT_BooleanProperty */
    			case '<i': font.italic = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<i/>': font.italic = 1; break;

    			/* 18.4.13 u CT_UnderlineProperty */
    			case '<u':
    				switch(y.val) {
    					case "none": font.underline = 0x00; break;
    					case "single": font.underline = 0x01; break;
    					case "double": font.underline = 0x02; break;
    					case "singleAccounting": font.underline = 0x21; break;
    					case "doubleAccounting": font.underline = 0x22; break;
    				} break;
    			case '<u/>': font.underline = 1; break;

    			/* 18.4.10 strike CT_BooleanProperty */
    			case '<strike': font.strike = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<strike/>': font.strike = 1; break;

    			/* 18.4.2  outline CT_BooleanProperty */
    			case '<outline': font.outline = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<outline/>': font.outline = 1; break;

    			/* 18.8.36 shadow CT_BooleanProperty */
    			case '<shadow': font.shadow = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<shadow/>': font.shadow = 1; break;

    			/* 18.8.12 condense CT_BooleanProperty */
    			case '<condense': font.condense = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<condense/>': font.condense = 1; break;

    			/* 18.8.17 extend CT_BooleanProperty */
    			case '<extend': font.extend = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<extend/>': font.extend = 1; break;

    			/* 18.4.11 sz CT_FontSize */
    			case '<sz': if(y.val) font.sz = +y.val; break;
    			case '<sz/>': case '</sz>': break;

    			/* 18.4.14 vertAlign CT_VerticalAlignFontProperty */
    			case '<vertAlign': if(y.val) font.vertAlign = y.val; break;
    			case '<vertAlign/>': case '</vertAlign>': break;

    			/* 18.8.18 family CT_FontFamily */
    			case '<family': if(y.val) font.family = parseInt(y.val,10); break;
    			case '<family/>': case '</family>': break;

    			/* 18.8.35 scheme CT_FontScheme */
    			case '<scheme': if(y.val) font.scheme = y.val; break;
    			case '<scheme/>': case '</scheme>': break;

    			/* 18.4.1 charset CT_IntProperty */
    			case '<charset':
    				if(y.val == '1') break;
    				y.codepage = CS2CP[parseInt(y.val, 10)];
    				break;

    			/* 18.?.? color CT_Color */
    			case '<color':
    				if(!font.color) font.color = {};
    				if(y.auto) font.color.auto = parsexmlbool(y.auto);

    				if(y.rgb) font.color.rgb = y.rgb.slice(-6);
    				else if(y.indexed) {
    					font.color.index = parseInt(y.indexed, 10);
    					var icv = XLSIcv[font.color.index];
    					if(font.color.index == 81) icv = XLSIcv[1];
    					if(!icv) icv = XLSIcv[1]; //throw new Error(x); // note: 206 is valid
    					font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
    				} else if(y.theme) {
    					font.color.theme = parseInt(y.theme, 10);
    					if(y.tint) font.color.tint = parseFloat(y.tint);
    					if(y.theme && themes.themeElements && themes.themeElements.clrScheme) {
    						font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
    					}
    				}

    				break;
    			case '<color/>': case '</color>': break;

    			/* note: sometimes mc:AlternateContent appears bare */
    			case '<AlternateContent': pass = true; break;
    			case '</AlternateContent>': pass = false; break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default: if(opts && opts.WTF) {
    				if(!pass) throw new Error('unrecognized ' + y[0] + ' in fonts');
    			}
    		}
    	});
    }

    /* 18.8.31 numFmts CT_NumFmts */
    function parse_numFmts(t, styles, opts) {
    	styles.NumberFmt = [];
    	var k/*Array<number>*/ = (keys(table_fmt)/*:any*/);
    	for(var i=0; i < k.length; ++i) styles.NumberFmt[k[i]] = table_fmt[k[i]];
    	var m = t[0].match(tagregex);
    	if(!m) return;
    	for(i=0; i < m.length; ++i) {
    		var y = parsexmltag(m[i]);
    		switch(strip_ns(y[0])) {
    			case '<numFmts': case '</numFmts>': case '<numFmts/>': case '<numFmts>': break;
    			case '<numFmt': {
    				var f=unescapexml(utf8read(y.formatCode)), j=parseInt(y.numFmtId,10);
    				styles.NumberFmt[j] = f;
    				if(j>0) {
    					if(j > 0x188) {
    						for(j = 0x188; j > 0x3c; --j) if(styles.NumberFmt[j] == null) break;
    						styles.NumberFmt[j] = f;
    					}
    					SSF_load(f,j);
    				}
    			} break;
    			case '</numFmt>': break;
    			default: if(opts.WTF) throw new Error('unrecognized ' + y[0] + ' in numFmts');
    		}
    	}
    }

    function write_numFmts(NF/*:{[n:number|string]:string}*//*::, opts*/) {
    	var o = ["<numFmts>"];
    	[[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {
    		for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) o[o.length] = (writextag('numFmt',null,{numFmtId:i,formatCode:escapexml(NF[i])}));
    	});
    	if(o.length === 1) return "";
    	o[o.length] = ("</numFmts>");
    	o[0] = writextag('numFmts', null, { count:o.length-2 }).replace("/>", ">");
    	return o.join("");
    }

    /* 18.8.10 cellXfs CT_CellXfs */
    var cellXF_uint = [ "numFmtId", "fillId", "fontId", "borderId", "xfId" ];
    var cellXF_bool = [ "applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix" ];
    function parse_cellXfs(t, styles, opts) {
    	styles.CellXf = [];
    	var xf;
    	var pass = false;
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x), i = 0;
    		switch(strip_ns(y[0])) {
    			case '<cellXfs': case '<cellXfs>': case '<cellXfs/>': case '</cellXfs>': break;

    			/* 18.8.45 xf CT_Xf */
    			case '<xf': case '<xf/>':
    				xf = y;
    				delete xf[0];
    				for(i = 0; i < cellXF_uint.length; ++i) if(xf[cellXF_uint[i]])
    					xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);
    				for(i = 0; i < cellXF_bool.length; ++i) if(xf[cellXF_bool[i]])
    					xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);
    				if(styles.NumberFmt && xf.numFmtId > 0x188) {
    					for(i = 0x188; i > 0x3c; --i) if(styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) { xf.numFmtId = i; break; }
    				}
    				styles.CellXf.push(xf); break;
    			case '</xf>': break;

    			/* 18.8.1 alignment CT_CellAlignment */
    			case '<alignment': case '<alignment/>':
    				var alignment = {};
    				if(y.vertical) alignment.vertical = y.vertical;
    				if(y.horizontal) alignment.horizontal = y.horizontal;
    				if(y.textRotation != null) alignment.textRotation = y.textRotation;
    				if(y.indent) alignment.indent = y.indent;
    				if(y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);
    				xf.alignment = alignment;
    				break;
    			case '</alignment>': break;

    			/* 18.8.33 protection CT_CellProtection */
    			case '<protection':
    				break;
    			case '</protection>': case '<protection/>': break;

    			/* note: sometimes mc:AlternateContent appears bare */
    			case '<AlternateContent': pass = true; break;
    			case '</AlternateContent>': pass = false; break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default: if(opts && opts.WTF) {
    				if(!pass) throw new Error('unrecognized ' + y[0] + ' in cellXfs');
    			}
    		}
    	});
    }

    function write_cellXfs(cellXfs)/*:string*/ {
    	var o/*:Array<string>*/ = [];
    	o[o.length] = (writextag('cellXfs',null));
    	cellXfs.forEach(function(c) {
    		o[o.length] = (writextag('xf', null, c));
    	});
    	o[o.length] = ("</cellXfs>");
    	if(o.length === 2) return "";
    	o[0] = writextag('cellXfs',null, {count:o.length-2}).replace("/>",">");
    	return o.join("");
    }

    /* 18.8 Styles CT_Stylesheet*/
    var parse_sty_xml= /*#__PURE__*/(function make_pstyx() {
    var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
    var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
    var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
    var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
    var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;

    return function parse_sty_xml(data, themes, opts) {
    	var styles = {};
    	if(!data) return styles;
    	data = data.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");
    	/* 18.8.39 styleSheet CT_Stylesheet */
    	var t;

    	/* 18.8.31 numFmts CT_NumFmts ? */
    	if((t=data.match(numFmtRegex))) parse_numFmts(t, styles, opts);

    	/* 18.8.23 fonts CT_Fonts ? */
    	if((t=data.match(fontsRegex))) parse_fonts(t, styles, themes, opts);

    	/* 18.8.21 fills CT_Fills ? */
    	if((t=data.match(fillsRegex))) parse_fills(t, styles, themes, opts);

    	/* 18.8.5  borders CT_Borders ? */
    	if((t=data.match(bordersRegex))) parse_borders(t, styles, themes, opts);

    	/* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */
    	/* 18.8.8  cellStyles CT_CellStyles ? */

    	/* 18.8.10 cellXfs CT_CellXfs ? */
    	if((t=data.match(cellXfRegex))) parse_cellXfs(t, styles, opts);

    	/* 18.8.15 dxfs CT_Dxfs ? */
    	/* 18.8.42 tableStyles CT_TableStyles ? */
    	/* 18.8.11 colors CT_Colors ? */
    	/* 18.2.10 extLst CT_ExtensionList ? */

    	return styles;
    };
    })();

    function write_sty_xml(wb/*:Workbook*/, opts)/*:string*/ {
    	var o = [XML_HEADER, writextag('styleSheet', null, {
    		'xmlns': XMLNS_main[0],
    		'xmlns:vt': XMLNS.vt
    	})], w;
    	if(wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;
    	o[o.length] = ('<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>');
    	o[o.length] = ('<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>');
    	o[o.length] = ('<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>');
    	o[o.length] = ('<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>');
    	if((w = write_cellXfs(opts.cellXfs))) o[o.length] = (w);
    	o[o.length] = ('<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>');
    	o[o.length] = ('<dxfs count="0"/>');
    	o[o.length] = ('<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>');

    	if(o.length>2){ o[o.length] = ('</styleSheet>'); o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }
    /* [MS-XLSB] 2.4.657 BrtFmt */
    function parse_BrtFmt(data, length/*:number*/) {
    	var numFmtId = data.read_shift(2);
    	var stFmtCode = parse_XLWideString(data);
    	return [numFmtId, stFmtCode];
    }
    function write_BrtFmt(i/*:number*/, f/*:string*/, o) {
    	if(!o) o = new_buf(6 + 4 * f.length);
    	o.write_shift(2, i);
    	write_XLWideString(f, o);
    	var out = (o.length > o.l) ? o.slice(0, o.l) : o;
    	if(o.l == null) o.l = o.length;
    	return out;
    }

    /* [MS-XLSB] 2.4.659 BrtFont TODO */
    function parse_BrtFont(data, length/*:number*/, opts) {
    	var out = ({}/*:any*/);

    	out.sz = data.read_shift(2) / 20;

    	var grbit = parse_FontFlags(data);
    	if(grbit.fItalic) out.italic = 1;
    	if(grbit.fCondense) out.condense = 1;
    	if(grbit.fExtend) out.extend = 1;
    	if(grbit.fShadow) out.shadow = 1;
    	if(grbit.fOutline) out.outline = 1;
    	if(grbit.fStrikeout) out.strike = 1;

    	var bls = data.read_shift(2);
    	if(bls === 0x02BC) out.bold = 1;

    	switch(data.read_shift(2)) {
    		/* case 0: out.vertAlign = "baseline"; break; */
    		case 1: out.vertAlign = "superscript"; break;
    		case 2: out.vertAlign = "subscript"; break;
    	}

    	var underline = data.read_shift(1);
    	if(underline != 0) out.underline = underline;

    	var family = data.read_shift(1);
    	if(family > 0) out.family = family;

    	var bCharSet = data.read_shift(1);
    	if(bCharSet > 0) out.charset = bCharSet;

    	data.l++;
    	out.color = parse_BrtColor(data);

    	switch(data.read_shift(1)) {
    		/* case 0: out.scheme = "none": break; */
    		case 1: out.scheme = "major"; break;
    		case 2: out.scheme = "minor"; break;
    	}

    	out.name = parse_XLWideString(data);

    	return out;
    }
    function write_BrtFont(font/*:any*/, o) {
    	if(!o) o = new_buf(25+4*32);
    	o.write_shift(2, font.sz * 20);
    	write_FontFlags(font, o);
    	o.write_shift(2, font.bold ? 0x02BC : 0x0190);
    	var sss = 0;
    	if(font.vertAlign == "superscript") sss = 1;
    	else if(font.vertAlign == "subscript") sss = 2;
    	o.write_shift(2, sss);
    	o.write_shift(1, font.underline || 0);
    	o.write_shift(1, font.family || 0);
    	o.write_shift(1, font.charset || 0);
    	o.write_shift(1, 0);
    	write_BrtColor(font.color, o);
    	var scheme = 0;
    	if(font.scheme == "major") scheme = 1;
    	if(font.scheme == "minor") scheme = 2;
    	o.write_shift(1, scheme);
    	write_XLWideString(font.name, o);
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.4.650 BrtFill */
    var XLSBFillPTNames = [
    	"none",
    	"solid",
    	"mediumGray",
    	"darkGray",
    	"lightGray",
    	"darkHorizontal",
    	"darkVertical",
    	"darkDown",
    	"darkUp",
    	"darkGrid",
    	"darkTrellis",
    	"lightHorizontal",
    	"lightVertical",
    	"lightDown",
    	"lightUp",
    	"lightGrid",
    	"lightTrellis",
    	"gray125",
    	"gray0625"
    ];
    var rev_XLSBFillPTNames/*:EvertNumType*/;
    /* TODO: gradient fill representation */
    var parse_BrtFill = parsenoop;
    function write_BrtFill(fill, o) {
    	if(!o) o = new_buf(4*3 + 8*7 + 16*1);
    	if(!rev_XLSBFillPTNames) rev_XLSBFillPTNames = (evert(XLSBFillPTNames)/*:any*/);
    	var fls/*:number*/ = rev_XLSBFillPTNames[fill.patternType];
    	if(fls == null) fls = 0x28;
    	o.write_shift(4, fls);
    	var j = 0;
    	if(fls != 0x28) {
    		/* TODO: custom FG Color */
    		write_BrtColor({auto:1}, o);
    		/* TODO: custom BG Color */
    		write_BrtColor({auto:1}, o);

    		for(; j < 12; ++j) o.write_shift(4, 0);
    	} else {
    		for(; j < 4; ++j) o.write_shift(4, 0);

    		for(; j < 12; ++j) o.write_shift(4, 0); /* TODO */
    		/* iGradientType */
    		/* xnumDegree */
    		/* xnumFillToLeft */
    		/* xnumFillToRight */
    		/* xnumFillToTop */
    		/* xnumFillToBottom */
    		/* cNumStop */
    		/* xfillGradientStop */
    	}
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.4.824 BrtXF */
    function parse_BrtXF(data, length/*:number*/) {
    	var tgt = data.l + length;
    	var ixfeParent = data.read_shift(2);
    	var ifmt = data.read_shift(2);
    	data.l = tgt;
    	return {ixfe:ixfeParent, numFmtId:ifmt };
    }
    function write_BrtXF(data, ixfeP, o) {
    	if(!o) o = new_buf(16);
    	o.write_shift(2, ixfeP||0);
    	o.write_shift(2, data.numFmtId||0);
    	o.write_shift(2, 0); /* iFont */
    	o.write_shift(2, 0); /* iFill */
    	o.write_shift(2, 0); /* ixBorder */
    	o.write_shift(1, 0); /* trot */
    	o.write_shift(1, 0); /* indent */
    	var flow = 0;
    	o.write_shift(1, flow); /* flags */
    	o.write_shift(1, 0); /* flags */
    	o.write_shift(1, 0); /* xfGrbitAtr */
    	o.write_shift(1, 0);
    	return o;
    }

    /* [MS-XLSB] 2.5.4 Blxf TODO */
    function write_Blxf(data, o) {
    	if(!o) o = new_buf(10);
    	o.write_shift(1, 0); /* dg */
    	o.write_shift(1, 0);
    	o.write_shift(4, 0); /* color */
    	o.write_shift(4, 0); /* color */
    	return o;
    }
    /* [MS-XLSB] 2.4.302 BrtBorder TODO */
    var parse_BrtBorder = parsenoop;
    function write_BrtBorder(border, o) {
    	if(!o) o = new_buf(51);
    	o.write_shift(1, 0); /* diagonal */
    	write_Blxf(null, o); /* top */
    	write_Blxf(null, o); /* bottom */
    	write_Blxf(null, o); /* left */
    	write_Blxf(null, o); /* right */
    	write_Blxf(null, o); /* diag */
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.4.763 BrtStyle TODO */
    function write_BrtStyle(style, o) {
    	if(!o) o = new_buf(12+4*10);
    	o.write_shift(4, style.xfId);
    	o.write_shift(2, 1);
    	o.write_shift(1, +style.builtinId);
    	o.write_shift(1, 0); /* iLevel */
    	write_XLNullableWideString(style.name || "", o);
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.4.272 BrtBeginTableStyles */
    function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
    	var o = new_buf(4+256*2*4);
    	o.write_shift(4, cnt);
    	write_XLNullableWideString(defTableStyle, o);
    	write_XLNullableWideString(defPivotStyle, o);
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.1.7.50 Styles */
    function parse_sty_bin(data, themes, opts) {
    	var styles = {};
    	styles.NumberFmt = ([]/*:any*/);
    	for(var y in table_fmt) styles.NumberFmt[y] = table_fmt[y];

    	styles.CellXf = [];
    	styles.Fonts = [];
    	var state/*:Array<string>*/ = [];
    	var pass = false;
    	recordhopper(data, function hopper_sty(val, R, RT) {
    		switch(RT) {
    			case 0x002C: /* BrtFmt */
    				styles.NumberFmt[val[0]] = val[1]; SSF_load(val[1], val[0]);
    				break;
    			case 0x002B: /* BrtFont */
    				styles.Fonts.push(val);
    				if(val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
    					val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
    				}
    				break;
    			case 0x0401: /* BrtKnownFonts */ break;
    			case 0x002D: /* BrtFill */
    				break;
    			case 0x002E: /* BrtBorder */
    				break;
    			case 0x002F: /* BrtXF */
    				if(state[state.length - 1] == 0x0269 /* BrtBeginCellXFs */) {
    					styles.CellXf.push(val);
    				}
    				break;
    			case 0x0030: /* BrtStyle */
    			case 0x01FB: /* BrtDXF */
    			case 0x023C: /* BrtMRUColor */
    			case 0x01DB: /* BrtIndexedColor */
    				break;

    			case 0x0493: /* BrtDXF14 */
    			case 0x0836: /* BrtDXF15 */
    			case 0x046A: /* BrtSlicerStyleElement */
    			case 0x0200: /* BrtTableStyleElement */
    			case 0x082F: /* BrtTimelineStyleElement */
    			case 0x0C00: /* BrtUid */
    				break;

    			case 0x0023: /* BrtFRTBegin */
    				pass = true; break;
    			case 0x0024: /* BrtFRTEnd */
    				pass = false; break;
    			case 0x0025: /* BrtACBegin */
    				state.push(RT); pass = true; break;
    			case 0x0026: /* BrtACEnd */
    				state.pop(); pass = false; break;

    			default:
    				if(R.T > 0) state.push(RT);
    				else if(R.T < 0) state.pop();
    				else if(!pass || (opts.WTF && state[state.length-1] != 0x0025 /* BrtACBegin */)) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	});
    	return styles;
    }

    function write_FMTS_bin(ba, NF/*:?SSFTable*/) {
    	if(!NF) return;
    	var cnt = 0;
    	[[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {
    		/*:: if(!NF) return; */
    		for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) ++cnt;
    	});

    	if(cnt == 0) return;
    	write_record(ba, 0x0267 /* BrtBeginFmts */, write_UInt32LE(cnt));
    	[[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {
    		/*:: if(!NF) return; */
    		for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) write_record(ba, 0x002C /* BrtFmt */, write_BrtFmt(i, NF[i]));
    	});
    	write_record(ba, 0x0268 /* BrtEndFmts */);
    }

    function write_FONTS_bin(ba/*::, data*/) {
    	var cnt = 1;
    	write_record(ba, 0x0263 /* BrtBeginFonts */, write_UInt32LE(cnt));
    	write_record(ba, 0x002B /* BrtFont */, write_BrtFont({
    		sz:12,
    		color: {theme:1},
    		name: "Calibri",
    		family: 2,
    		scheme: "minor"
    	}));
    	/* 1*65491BrtFont [ACFONTS] */
    	write_record(ba, 0x0264 /* BrtEndFonts */);
    }

    function write_FILLS_bin(ba/*::, data*/) {
    	var cnt = 2;
    	write_record(ba, 0x025B /* BrtBeginFills */, write_UInt32LE(cnt));
    	write_record(ba, 0x002D /* BrtFill */, write_BrtFill({patternType:"none"}));
    	write_record(ba, 0x002D /* BrtFill */, write_BrtFill({patternType:"gray125"}));
    	/* 1*65431BrtFill */
    	write_record(ba, 0x025C /* BrtEndFills */);
    }

    function write_BORDERS_bin(ba/*::, data*/) {
    	var cnt = 1;
    	write_record(ba, 0x0265 /* BrtBeginBorders */, write_UInt32LE(cnt));
    	write_record(ba, 0x002E /* BrtBorder */, write_BrtBorder());
    	/* 1*65430BrtBorder */
    	write_record(ba, 0x0266 /* BrtEndBorders */);
    }

    function write_CELLSTYLEXFS_bin(ba/*::, data*/) {
    	var cnt = 1;
    	write_record(ba, 0x0272 /* BrtBeginCellStyleXFs */, write_UInt32LE(cnt));
    	write_record(ba, 0x002F /* BrtXF */, write_BrtXF({
    		numFmtId: 0,
    		fontId:   0,
    		fillId:   0,
    		borderId: 0
    	}, 0xFFFF));
    	/* 1*65430(BrtXF *FRT) */
    	write_record(ba, 0x0273 /* BrtEndCellStyleXFs */);
    }

    function write_CELLXFS_bin(ba, data) {
    	write_record(ba, 0x0269 /* BrtBeginCellXFs */, write_UInt32LE(data.length));
    	data.forEach(function(c) { write_record(ba, 0x002F /* BrtXF */, write_BrtXF(c,0)); });
    	/* 1*65430(BrtXF *FRT) */
    	write_record(ba, 0x026A /* BrtEndCellXFs */);
    }

    function write_STYLES_bin(ba/*::, data*/) {
    	var cnt = 1;

    	write_record(ba, 0x026B /* BrtBeginStyles */, write_UInt32LE(cnt));
    	write_record(ba, 0x0030 /* BrtStyle */, write_BrtStyle({
    		xfId:0,
    		builtinId:0,
    		name:"Normal"
    	}));
    	/* 1*65430(BrtStyle *FRT) */
    	write_record(ba, 0x026C /* BrtEndStyles */);
    }

    function write_DXFS_bin(ba/*::, data*/) {
    	var cnt = 0;

    	write_record(ba, 0x01F9 /* BrtBeginDXFs */, write_UInt32LE(cnt));
    	/* *2147483647(BrtDXF *FRT) */
    	write_record(ba, 0x01FA /* BrtEndDXFs */);
    }

    function write_TABLESTYLES_bin(ba/*::, data*/) {
    	var cnt = 0;

    	write_record(ba, 0x01FC /* BrtBeginTableStyles */, write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
    	/* *TABLESTYLE */
    	write_record(ba, 0x01FD /* BrtEndTableStyles */);
    }

    /* [MS-XLSB] 2.1.7.50 Styles */
    function write_sty_bin(wb, opts) {
    	var ba = buf_array();
    	write_record(ba, 0x0116 /* BrtBeginStyleSheet */);
    	write_FMTS_bin(ba, wb.SSF);
    	write_FONTS_bin(ba);
    	write_FILLS_bin(ba);
    	write_BORDERS_bin(ba);
    	write_CELLSTYLEXFS_bin(ba);
    	write_CELLXFS_bin(ba, opts.cellXfs);
    	write_STYLES_bin(ba);
    	write_DXFS_bin(ba);
    	write_TABLESTYLES_bin(ba);
    	/* FRTSTYLESHEET*/
    	write_record(ba, 0x0117 /* BrtEndStyleSheet */);
    	return ba.end();
    }
    /* Even though theme layout is dk1 lt1 dk2 lt2, true order is lt1 dk1 lt2 dk2 */
    var XLSXThemeClrScheme = [
    	'</a:lt1>', '</a:dk1>', '</a:lt2>', '</a:dk2>',
    	'</a:accent1>', '</a:accent2>', '</a:accent3>',
    	'</a:accent4>', '</a:accent5>', '</a:accent6>',
    	'</a:hlink>', '</a:folHlink>'
    ];
    /* 20.1.6.2 clrScheme CT_ColorScheme */
    function parse_clrScheme(t, themes, opts) {
    	themes.themeElements.clrScheme = [];
    	var color = {};
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(y[0]) {
    			/* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */
    			case '<a:clrScheme': case '</a:clrScheme>': break;

    			/* 20.1.2.3.32 srgbClr CT_SRgbColor */
    			case '<a:srgbClr':
    				color.rgb = y.val; break;

    			/* 20.1.2.3.33 sysClr CT_SystemColor */
    			case '<a:sysClr':
    				color.rgb = y.lastClr; break;

    			/* 20.1.4.1.1 accent1 (Accent 1) */
    			/* 20.1.4.1.2 accent2 (Accent 2) */
    			/* 20.1.4.1.3 accent3 (Accent 3) */
    			/* 20.1.4.1.4 accent4 (Accent 4) */
    			/* 20.1.4.1.5 accent5 (Accent 5) */
    			/* 20.1.4.1.6 accent6 (Accent 6) */
    			/* 20.1.4.1.9 dk1 (Dark 1) */
    			/* 20.1.4.1.10 dk2 (Dark 2) */
    			/* 20.1.4.1.15 folHlink (Followed Hyperlink) */
    			/* 20.1.4.1.19 hlink (Hyperlink) */
    			/* 20.1.4.1.22 lt1 (Light 1) */
    			/* 20.1.4.1.23 lt2 (Light 2) */
    			case '<a:dk1>': case '</a:dk1>':
    			case '<a:lt1>': case '</a:lt1>':
    			case '<a:dk2>': case '</a:dk2>':
    			case '<a:lt2>': case '</a:lt2>':
    			case '<a:accent1>': case '</a:accent1>':
    			case '<a:accent2>': case '</a:accent2>':
    			case '<a:accent3>': case '</a:accent3>':
    			case '<a:accent4>': case '</a:accent4>':
    			case '<a:accent5>': case '</a:accent5>':
    			case '<a:accent6>': case '</a:accent6>':
    			case '<a:hlink>': case '</a:hlink>':
    			case '<a:folHlink>': case '</a:folHlink>':
    				if (y[0].charAt(1) === '/') {
    					themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
    					color = {};
    				} else {
    					color.name = y[0].slice(3, y[0].length - 1);
    				}
    				break;

    			default: if(opts && opts.WTF) throw new Error('Unrecognized ' + y[0] + ' in clrScheme');
    		}
    	});
    }

    /* 20.1.4.1.18 fontScheme CT_FontScheme */
    function parse_fontScheme(/*::t, themes, opts*/) { }

    /* 20.1.4.1.15 fmtScheme CT_StyleMatrix */
    function parse_fmtScheme(/*::t, themes, opts*/) { }

    var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
    var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
    var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;

    /* 20.1.6.10 themeElements CT_BaseStyles */
    function parse_themeElements(data, themes, opts) {
    	themes.themeElements = {};

    	var t;

    	[
    		/* clrScheme CT_ColorScheme */
    		['clrScheme', clrsregex, parse_clrScheme],
    		/* fontScheme CT_FontScheme */
    		['fontScheme', fntsregex, parse_fontScheme],
    		/* fmtScheme CT_StyleMatrix */
    		['fmtScheme', fmtsregex, parse_fmtScheme]
    	].forEach(function(m) {
    		if(!(t=data.match(m[1]))) throw new Error(m[0] + ' not found in themeElements');
    		m[2](t, themes, opts);
    	});
    }

    var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;

    /* 14.2.7 Theme Part */
    function parse_theme_xml(data/*:string*/, opts) {
    	/* 20.1.6.9 theme CT_OfficeStyleSheet */
    	if(!data || data.length === 0) data = write_theme();

    	var t;
    	var themes = {};

    	/* themeElements CT_BaseStyles */
    	if(!(t=data.match(themeltregex))) throw new Error('themeElements not found in theme');
    	parse_themeElements(t[0], themes, opts);
    	themes.raw = data;
    	return themes;
    }

    function write_theme(Themes, opts)/*:string*/ {
    	if(opts && opts.themeXLSX) return opts.themeXLSX;
    	if(Themes && typeof Themes.raw == "string") return Themes.raw;
    	var o = [XML_HEADER];
    	o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
    	o[o.length] =  '<a:themeElements>';

    	o[o.length] =   '<a:clrScheme name="Office">';
    	o[o.length] =    '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
    	o[o.length] =    '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
    	o[o.length] =    '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
    	o[o.length] =    '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
    	o[o.length] =    '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
    	o[o.length] =    '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
    	o[o.length] =    '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
    	o[o.length] =    '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
    	o[o.length] =    '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
    	o[o.length] =    '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
    	o[o.length] =    '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
    	o[o.length] =    '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
    	o[o.length] =   '</a:clrScheme>';

    	o[o.length] =   '<a:fontScheme name="Office">';
    	o[o.length] =    '<a:majorFont>';
    	o[o.length] =     '<a:latin typeface="Cambria"/>';
    	o[o.length] =     '<a:ea typeface=""/>';
    	o[o.length] =     '<a:cs typeface=""/>';
    	o[o.length] =     '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    	o[o.length] =     '<a:font script="Hang" typeface="맑은 고딕"/>';
    	o[o.length] =     '<a:font script="Hans" typeface="宋体"/>';
    	o[o.length] =     '<a:font script="Hant" typeface="新細明體"/>';
    	o[o.length] =     '<a:font script="Arab" typeface="Times New Roman"/>';
    	o[o.length] =     '<a:font script="Hebr" typeface="Times New Roman"/>';
    	o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
    	o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
    	o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
    	o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
    	o[o.length] =     '<a:font script="Khmr" typeface="MoolBoran"/>';
    	o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
    	o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
    	o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
    	o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    	o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    	o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    	o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
    	o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
    	o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
    	o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
    	o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    	o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
    	o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
    	o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
    	o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    	o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    	o[o.length] =     '<a:font script="Viet" typeface="Times New Roman"/>';
    	o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    	o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
    	o[o.length] =    '</a:majorFont>';
    	o[o.length] =    '<a:minorFont>';
    	o[o.length] =     '<a:latin typeface="Calibri"/>';
    	o[o.length] =     '<a:ea typeface=""/>';
    	o[o.length] =     '<a:cs typeface=""/>';
    	o[o.length] =     '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    	o[o.length] =     '<a:font script="Hang" typeface="맑은 고딕"/>';
    	o[o.length] =     '<a:font script="Hans" typeface="宋体"/>';
    	o[o.length] =     '<a:font script="Hant" typeface="新細明體"/>';
    	o[o.length] =     '<a:font script="Arab" typeface="Arial"/>';
    	o[o.length] =     '<a:font script="Hebr" typeface="Arial"/>';
    	o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
    	o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
    	o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
    	o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
    	o[o.length] =     '<a:font script="Khmr" typeface="DaunPenh"/>';
    	o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
    	o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
    	o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
    	o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    	o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    	o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    	o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
    	o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
    	o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
    	o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
    	o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    	o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
    	o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
    	o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
    	o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    	o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    	o[o.length] =     '<a:font script="Viet" typeface="Arial"/>';
    	o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    	o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
    	o[o.length] =    '</a:minorFont>';
    	o[o.length] =   '</a:fontScheme>';

    	o[o.length] =   '<a:fmtScheme name="Office">';
    	o[o.length] =    '<a:fillStyleLst>';
    	o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    	o[o.length] =     '<a:gradFill rotWithShape="1">';
    	o[o.length] =      '<a:gsLst>';
    	o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    	o[o.length] =      '</a:gsLst>';
    	o[o.length] =      '<a:lin ang="16200000" scaled="1"/>';
    	o[o.length] =     '</a:gradFill>';
    	o[o.length] =     '<a:gradFill rotWithShape="1">';
    	o[o.length] =      '<a:gsLst>';
    	o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    	o[o.length] =      '</a:gsLst>';
    	o[o.length] =      '<a:lin ang="16200000" scaled="0"/>';
    	o[o.length] =     '</a:gradFill>';
    	o[o.length] =    '</a:fillStyleLst>';
    	o[o.length] =    '<a:lnStyleLst>';
    	o[o.length] =     '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
    	o[o.length] =     '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    	o[o.length] =     '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    	o[o.length] =    '</a:lnStyleLst>';
    	o[o.length] =    '<a:effectStyleLst>';
    	o[o.length] =     '<a:effectStyle>';
    	o[o.length] =      '<a:effectLst>';
    	o[o.length] =       '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
    	o[o.length] =      '</a:effectLst>';
    	o[o.length] =     '</a:effectStyle>';
    	o[o.length] =     '<a:effectStyle>';
    	o[o.length] =      '<a:effectLst>';
    	o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    	o[o.length] =      '</a:effectLst>';
    	o[o.length] =     '</a:effectStyle>';
    	o[o.length] =     '<a:effectStyle>';
    	o[o.length] =      '<a:effectLst>';
    	o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    	o[o.length] =      '</a:effectLst>';
    	o[o.length] =      '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
    	o[o.length] =      '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
    	o[o.length] =     '</a:effectStyle>';
    	o[o.length] =    '</a:effectStyleLst>';
    	o[o.length] =    '<a:bgFillStyleLst>';
    	o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    	o[o.length] =     '<a:gradFill rotWithShape="1">';
    	o[o.length] =      '<a:gsLst>';
    	o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
    	o[o.length] =      '</a:gsLst>';
    	o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
    	o[o.length] =     '</a:gradFill>';
    	o[o.length] =     '<a:gradFill rotWithShape="1">';
    	o[o.length] =      '<a:gsLst>';
    	o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
    	o[o.length] =      '</a:gsLst>';
    	o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
    	o[o.length] =     '</a:gradFill>';
    	o[o.length] =    '</a:bgFillStyleLst>';
    	o[o.length] =   '</a:fmtScheme>';
    	o[o.length] =  '</a:themeElements>';

    	o[o.length] =  '<a:objectDefaults>';
    	o[o.length] =   '<a:spDef>';
    	o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
    	o[o.length] =   '</a:spDef>';
    	o[o.length] =   '<a:lnDef>';
    	o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
    	o[o.length] =   '</a:lnDef>';
    	o[o.length] =  '</a:objectDefaults>';
    	o[o.length] =  '<a:extraClrSchemeLst/>';
    	o[o.length] = '</a:theme>';
    	return o.join("");
    }
    /* [MS-XLS] 2.4.326 TODO: payload is a zip file */
    function parse_Theme(blob, length, opts) {
    	var end = blob.l + length;
    	var dwThemeVersion = blob.read_shift(4);
    	if(dwThemeVersion === 124226) return;
    	if(!opts.cellStyles) { blob.l = end; return; }
    	var data = blob.slice(blob.l);
    	blob.l = end;
    	var zip; try { zip = zip_read(data, {type: "array"}); } catch(e) { return; }
    	var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
    	if(!themeXML) return;
    	return parse_theme_xml(themeXML, opts);
    }

    /* 2.5.49 */
    function parse_ColorTheme(blob/*::, length*/) { return blob.read_shift(4); }

    /* 2.5.155 */
    function parse_FullColorExt(blob/*::, length*/) {
    	var o = {};
    	o.xclrType = blob.read_shift(2);
    	o.nTintShade = blob.read_shift(2);
    	switch(o.xclrType) {
    		case 0: blob.l += 4; break;
    		case 1: o.xclrValue = parse_IcvXF(blob, 4); break;
    		case 2: o.xclrValue = parse_LongRGBA(blob); break;
    		case 3: o.xclrValue = parse_ColorTheme(blob); break;
    		case 4: blob.l += 4; break;
    	}
    	blob.l += 8;
    	return o;
    }

    /* 2.5.164 TODO: read 7 bits*/
    function parse_IcvXF(blob, length) {
    	return parsenoop(blob, length);
    }

    /* 2.5.280 */
    function parse_XFExtGradient(blob, length) {
    	return parsenoop(blob, length);
    }

    /* [MS-XLS] 2.5.108 */
    function parse_ExtProp(blob/*::, length*/)/*:Array<any>*/ {
    	var extType = blob.read_shift(2);
    	var cb = blob.read_shift(2) - 4;
    	var o = [extType];
    	switch(extType) {
    		case 0x04: case 0x05: case 0x07: case 0x08:
    		case 0x09: case 0x0A: case 0x0B: case 0x0D:
    			o[1] = parse_FullColorExt(blob); break;
    		case 0x06: o[1] = parse_XFExtGradient(blob, cb); break;
    		case 0x0E: case 0x0F: o[1] = blob.read_shift(cb === 1 ? 1 : 2); break;
    		default: throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
    	}
    	return o;
    }

    /* 2.4.355 */
    function parse_XFExt(blob, length) {
    	var end = blob.l + length;
    	blob.l += 2;
    	var ixfe = blob.read_shift(2);
    	blob.l += 2;
    	var cexts = blob.read_shift(2);
    	var ext/*:AOA*/ = [];
    	while(cexts-- > 0) ext.push(parse_ExtProp(blob, end-blob.l));
    	return {ixfe:ixfe, ext:ext};
    }

    /* xf is an XF, see parse_XFExt for xfext */
    function update_xfext(xf, xfext) {
    	xfext.forEach(function(xfe) {
    		switch(xfe[0]) { /* 2.5.108 extPropData */
    					}
    	});
    }

    function parse_BrtMdtinfo(data, length) {
      return {
        flags: data.read_shift(4),
        version: data.read_shift(4),
        name: parse_XLWideString(data)
      };
    }
    function write_BrtMdtinfo(data) {
      var o = new_buf(12 + 2 * data.name.length);
      o.write_shift(4, data.flags);
      o.write_shift(4, data.version);
      write_XLWideString(data.name, o);
      return o.slice(0, o.l);
    }
    function parse_BrtMdb(data) {
      var out = [];
      var cnt = data.read_shift(4);
      while (cnt-- > 0)
        out.push([data.read_shift(4), data.read_shift(4)]);
      return out;
    }
    function write_BrtMdb(mdb) {
      var o = new_buf(4 + 8 * mdb.length);
      o.write_shift(4, mdb.length);
      for (var i = 0; i < mdb.length; ++i) {
        o.write_shift(4, mdb[i][0]);
        o.write_shift(4, mdb[i][1]);
      }
      return o;
    }
    function write_BrtBeginEsfmd(cnt, name) {
      var o = new_buf(8 + 2 * name.length);
      o.write_shift(4, cnt);
      write_XLWideString(name, o);
      return o.slice(0, o.l);
    }
    function parse_BrtBeginEsmdb(data) {
      data.l += 4;
      return data.read_shift(4) != 0;
    }
    function write_BrtBeginEsmdb(cnt, cm) {
      var o = new_buf(8);
      o.write_shift(4, cnt);
      o.write_shift(4, cm ? 1 : 0);
      return o;
    }
    function parse_xlmeta_bin(data, name, _opts) {
      var out = { Types: [], Cell: [], Value: [] };
      var opts = _opts || {};
      var state = [];
      var pass = false;
      var metatype = 2;
      recordhopper(data, function(val, R, RT) {
        switch (RT) {
          case 335:
            out.Types.push({ name: val.name });
            break;
          case 51:
            val.forEach(function(r) {
              if (metatype == 1)
                out.Cell.push({ type: out.Types[r[0] - 1].name, index: r[1] });
              else if (metatype == 0)
                out.Value.push({ type: out.Types[r[0] - 1].name, index: r[1] });
            });
            break;
          case 337:
            metatype = val ? 1 : 0;
            break;
          case 338:
            metatype = 2;
            break;
          case 35:
            state.push(RT);
            pass = true;
            break;
          case 36:
            state.pop();
            pass = false;
            break;
          default:
            if (R.T) ; else if (!pass || opts.WTF && state[state.length - 1] != 35)
              throw new Error("Unexpected record 0x" + RT.toString(16));
        }
      });
      return out;
    }
    function write_xlmeta_bin() {
      var ba = buf_array();
      write_record(ba, 332);
      write_record(ba, 334, write_UInt32LE(1));
      write_record(ba, 335, write_BrtMdtinfo({
        name: "XLDAPR",
        version: 12e4,
        flags: 3496657072
      }));
      write_record(ba, 336);
      write_record(ba, 339, write_BrtBeginEsfmd(1, "XLDAPR"));
      write_record(ba, 52);
      write_record(ba, 35, write_UInt32LE(514));
      write_record(ba, 4096, write_UInt32LE(0));
      write_record(ba, 4097, writeuint16(1));
      write_record(ba, 36);
      write_record(ba, 53);
      write_record(ba, 340);
      write_record(ba, 337, write_BrtBeginEsmdb(1, true));
      write_record(ba, 51, write_BrtMdb([[1, 0]]));
      write_record(ba, 338);
      write_record(ba, 333);
      return ba.end();
    }
    function parse_xlmeta_xml(data, name, opts) {
      var out = { Types: [], Cell: [], Value: [] };
      if (!data)
        return out;
      var pass = false;
      var metatype = 2;
      var lastmeta;
      data.replace(tagregex, function(x) {
        var y = parsexmltag(x);
        switch (strip_ns(y[0])) {
          case "<?xml":
            break;
          case "<metadata":
          case "</metadata>":
            break;
          case "<metadataTypes":
          case "</metadataTypes>":
            break;
          case "<metadataType":
            out.Types.push({ name: y.name });
            break;
          case "</metadataType>":
            break;
          case "<futureMetadata":
            for (var j = 0; j < out.Types.length; ++j)
              if (out.Types[j].name == y.name)
                lastmeta = out.Types[j];
            break;
          case "</futureMetadata>":
            break;
          case "<bk>":
            break;
          case "</bk>":
            break;
          case "<rc":
            if (metatype == 1)
              out.Cell.push({ type: out.Types[y.t - 1].name, index: +y.v });
            else if (metatype == 0)
              out.Value.push({ type: out.Types[y.t - 1].name, index: +y.v });
            break;
          case "</rc>":
            break;
          case "<cellMetadata":
            metatype = 1;
            break;
          case "</cellMetadata>":
            metatype = 2;
            break;
          case "<valueMetadata":
            metatype = 0;
            break;
          case "</valueMetadata>":
            metatype = 2;
            break;
          case "<extLst":
          case "<extLst>":
          case "</extLst>":
          case "<extLst/>":
            break;
          case "<ext":
            pass = true;
            break;
          case "</ext>":
            pass = false;
            break;
          case "<rvb":
            if (!lastmeta)
              break;
            if (!lastmeta.offsets)
              lastmeta.offsets = [];
            lastmeta.offsets.push(+y.i);
            break;
          default:
            if (!pass && opts.WTF)
              throw new Error("unrecognized " + y[0] + " in metadata");
        }
        return x;
      });
      return out;
    }
    function write_xlmeta_xml() {
      var o = [XML_HEADER];
      o.push('<metadata xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:xlrd="http://schemas.microsoft.com/office/spreadsheetml/2017/richdata" xmlns:xda="http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray">\n  <metadataTypes count="1">\n    <metadataType name="XLDAPR" minSupportedVersion="120000" copy="1" pasteAll="1" pasteValues="1" merge="1" splitFirst="1" rowColShift="1" clearFormats="1" clearComments="1" assign="1" coerce="1" cellMeta="1"/>\n  </metadataTypes>\n  <futureMetadata name="XLDAPR" count="1">\n    <bk>\n      <extLst>\n        <ext uri="{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}">\n          <xda:dynamicArrayProperties fDynamic="1" fCollapsed="0"/>\n        </ext>\n      </extLst>\n    </bk>\n  </futureMetadata>\n  <cellMetadata count="1">\n    <bk>\n      <rc t="1" v="0"/>\n    </bk>\n  </cellMetadata>\n</metadata>');
      return o.join("");
    }
    /* 18.6 Calculation Chain */
    function parse_cc_xml(data/*::, name, opts*/)/*:Array<any>*/ {
    	var d = [];
    	if(!data) return d;
    	var i = 1;
    	(data.match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(y[0]) {
    			case '<?xml': break;
    			/* 18.6.2  calcChain CT_CalcChain 1 */
    			case '<calcChain': case '<calcChain>': case '</calcChain>': break;
    			/* 18.6.1  c CT_CalcCell 1 */
    			case '<c': delete y[0]; if(y.i) i = y.i; else y.i = i; d.push(y); break;
    		}
    	});
    	return d;
    }

    //function write_cc_xml(data, opts) { }

    /* [MS-XLSB] 2.6.4.1 */
    function parse_BrtCalcChainItem$(data) {
    	var out = {};
    	out.i = data.read_shift(4);
    	var cell = {};
    	cell.r = data.read_shift(4);
    	cell.c = data.read_shift(4);
    	out.r = encode_cell(cell);
    	var flags = data.read_shift(1);
    	if(flags & 0x2) out.l = '1';
    	if(flags & 0x8) out.a = '1';
    	return out;
    }

    /* 18.6 Calculation Chain */
    function parse_cc_bin(data, name, opts) {
    	var out = [];
    	recordhopper(data, function hopper_cc(val, R, RT) {
    		switch(RT) {
    			case 0x003F: /* 'BrtCalcChainItem$' */
    				out.push(val); break;

    			default:
    				if(R.T);
    				else throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	});
    	return out;
    }

    //function write_cc_bin(data, opts) { }
    /* 18.14 Supplementary Workbook Data */
    function parse_xlink_xml(/*::data, rel, name:string, _opts*/) {
    	//var opts = _opts || {};
    	//if(opts.WTF) throw "XLSX External Link";
    }

    /* [MS-XLSB] 2.1.7.25 External Link */
    function parse_xlink_bin(data, rel, name/*:string*/, _opts) {
    	if(!data) return data;
    	var opts = _opts || {};

    	var pass = false;

    	recordhopper(data, function xlink_parse(val, R, RT) {
    		switch(RT) {
    			case 0x0167: /* 'BrtSupTabs' */
    			case 0x016B: /* 'BrtExternTableStart' */
    			case 0x016C: /* 'BrtExternTableEnd' */
    			case 0x016E: /* 'BrtExternRowHdr' */
    			case 0x016F: /* 'BrtExternCellBlank' */
    			case 0x0170: /* 'BrtExternCellReal' */
    			case 0x0171: /* 'BrtExternCellBool' */
    			case 0x0172: /* 'BrtExternCellError' */
    			case 0x0173: /* 'BrtExternCellString' */
    			case 0x01D8: /* 'BrtExternValueMeta' */
    			case 0x0241: /* 'BrtSupNameStart' */
    			case 0x0242: /* 'BrtSupNameValueStart' */
    			case 0x0243: /* 'BrtSupNameValueEnd' */
    			case 0x0244: /* 'BrtSupNameNum' */
    			case 0x0245: /* 'BrtSupNameErr' */
    			case 0x0246: /* 'BrtSupNameSt' */
    			case 0x0247: /* 'BrtSupNameNil' */
    			case 0x0248: /* 'BrtSupNameBool' */
    			case 0x0249: /* 'BrtSupNameFmla' */
    			case 0x024A: /* 'BrtSupNameBits' */
    			case 0x024B: /* 'BrtSupNameEnd' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				pass = false; break;

    			default:
    				if(R.T);
    				else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	}, opts);
    }
    /* 20.5 DrawingML - SpreadsheetML Drawing */
    /* 20.5.2.35 wsDr CT_Drawing */
    function parse_drawing(data, rels/*:any*/) {
    	if(!data) return "??";
    	/*
    	  Chartsheet Drawing:
    	   - 20.5.2.35 wsDr CT_Drawing
    	    - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor
    	     - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame
    	      - 20.1.2.2.16 graphic CT_GraphicalObject
    	       - 20.1.2.2.17 graphicData CT_GraphicalObjectData
              - chart reference
    	   the actual type is based on the URI of the graphicData
    		TODO: handle embedded charts and other types of graphics
    	*/
    	var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/)||["",""])[1];

    	return rels['!id'][id].Target;
    }

    /* L.5.5.2 SpreadsheetML Comments + VML Schema */
    var _shapeid = 1024;
    function write_comments_vml(rId/*:number*/, comments) {
    	var csize = [21600, 21600];
    	/* L.5.2.1.2 Path Attribute */
    	var bbox = ["m0,0l0",csize[1],csize[0],csize[1],csize[0],"0xe"].join(",");
    	var o = [
    		writextag("xml", null, { 'xmlns:v': XLMLNS.v, 'xmlns:o': XLMLNS.o, 'xmlns:x': XLMLNS.x, 'xmlns:mv': XLMLNS.mv }).replace(/\/>/,">"),
    		writextag("o:shapelayout", writextag("o:idmap", null, {'v:ext':"edit", 'data':rId}), {'v:ext':"edit"}),
    		writextag("v:shapetype", [
    			writextag("v:stroke", null, {joinstyle:"miter"}),
    			writextag("v:path", null, {gradientshapeok:"t", 'o:connecttype':"rect"})
    		].join(""), {id:"_x0000_t202", 'o:spt':202, coordsize:csize.join(","),path:bbox})
    	];
    	while(_shapeid < rId * 1000) _shapeid += 1000;

    	comments.forEach(function(x) {
    	var c = decode_cell(x[0]);
    	var fillopts = /*::(*/{'color2':"#BEFF82", 'type':"gradient"}/*:: :any)*/;
    	if(fillopts.type == "gradient") fillopts.angle = "-180";
    	var fillparm = fillopts.type == "gradient" ? writextag("o:fill", null, {type:"gradientUnscaled", 'v:ext':"view"}) : null;
    	var fillxml = writextag('v:fill', fillparm, fillopts);

    	var shadata = ({on:"t", 'obscured':"t"}/*:any*/);
    	++_shapeid;

    	o = o.concat([
    	'<v:shape' + wxt_helper({
    		id:'_x0000_s' + _shapeid,
    		type:"#_x0000_t202",
    		style:"position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10" + (x[1].hidden ? ";visibility:hidden" : "") ,
    		fillcolor:"#ECFAD4",
    		strokecolor:"#edeaa1"
    	}) + '>',
    		fillxml,
    		writextag("v:shadow", null, shadata),
    		writextag("v:path", null, {'o:connecttype':"none"}),
    		'<v:textbox><div style="text-align:left"></div></v:textbox>',
    		'<x:ClientData ObjectType="Note">',
    			'<x:MoveWithCells/>',
    			'<x:SizeWithCells/>',
    			/* Part 4 19.4.2.3 Anchor (Anchor) */
    			writetag('x:Anchor', [c.c+1, 0, c.r+1, 0, c.c+3, 20, c.r+5, 20].join(",")),
    			writetag('x:AutoFill', "False"),
    			writetag('x:Row', String(c.r)),
    			writetag('x:Column', String(c.c)),
    			x[1].hidden ? '' : '<x:Visible/>',
    		'</x:ClientData>',
    	'</v:shape>'
    	]); });
    	o.push('</xml>');
    	return o.join("");
    }
    function sheet_insert_comments(sheet, comments/*:Array<RawComment>*/, threaded/*:boolean*/, people/*:?Array<any>*/) {
    	var dense = Array.isArray(sheet);
    	var cell/*:Cell*/;
    	comments.forEach(function(comment) {
    		var r = decode_cell(comment.ref);
    		if(dense) {
    			if(!sheet[r.r]) sheet[r.r] = [];
    			cell = sheet[r.r][r.c];
    		} else cell = sheet[comment.ref];
    		if (!cell) {
    			cell = ({t:"z"}/*:any*/);
    			if(dense) sheet[r.r][r.c] = cell;
    			else sheet[comment.ref] = cell;
    			var range = safe_decode_range(sheet["!ref"]||"BDWGO1000001:A1");
    			if(range.s.r > r.r) range.s.r = r.r;
    			if(range.e.r < r.r) range.e.r = r.r;
    			if(range.s.c > r.c) range.s.c = r.c;
    			if(range.e.c < r.c) range.e.c = r.c;
    			var encoded = encode_range(range);
    			if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
    		}

    		if (!cell.c) cell.c = [];
    		var o/*:Comment*/ = ({a: comment.author, t: comment.t, r: comment.r, T: threaded});
    		if(comment.h) o.h = comment.h;

    		/* threaded comments always override */
    		for(var i = cell.c.length - 1; i >= 0; --i) {
    			if(!threaded && cell.c[i].T) return;
    			if(threaded && !cell.c[i].T) cell.c.splice(i, 1);
    		}
    		if(threaded && people) for(i = 0; i < people.length; ++i) {
    			if(o.a == people[i].id) { o.a = people[i].name || o.a; break; }
    		}
    		cell.c.push(o);
    	});
    }

    /* 18.7 Comments */
    function parse_comments_xml(data/*:string*/, opts)/*:Array<RawComment>*/ {
    	/* 18.7.6 CT_Comments */
    	if(data.match(/<(?:\w+:)?comments *\/>/)) return [];
    	var authors/*:Array<string>*/ = [];
    	var commentList/*:Array<RawComment>*/ = [];
    	var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
    	if(authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
    		if(x === "" || x.trim() === "") return;
    		var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
    		if(a) authors.push(a[1]);
    	});
    	var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
    	if(cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x) {
    		if(x === "" || x.trim() === "") return;
    		var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
    		if(!cm) return;
    		var y = parsexmltag(cm[0]);
    		var comment/*:RawComment*/ = ({ author: y.authorId && authors[y.authorId] || "sheetjsghost", ref: y.ref, guid: y.guid }/*:any*/);
    		var cell = decode_cell(y.ref);
    		if(opts.sheetRows && opts.sheetRows <= cell.r) return;
    		var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
    		var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {r:"",t:"",h:""};
    		comment.r = rt.r;
    		if(rt.r == "<t></t>") rt.t = rt.h = "";
    		comment.t = (rt.t||"").replace(/\r\n/g,"\n").replace(/\r/g,"\n");
    		if(opts.cellHTML) comment.h = rt.h;
    		commentList.push(comment);
    	});
    	return commentList;
    }

    function write_comments_xml(data/*::, opts*/) {
    	var o = [XML_HEADER, writextag('comments', null, { 'xmlns': XMLNS_main[0] })];

    	var iauthor/*:Array<string>*/ = [];
    	o.push("<authors>");
    	data.forEach(function(x) { x[1].forEach(function(w) { var a = escapexml(w.a);
    		if(iauthor.indexOf(a) == -1) {
    			iauthor.push(a);
    			o.push("<author>" + a + "</author>");
    		}
    		if(w.T && w.ID && iauthor.indexOf("tc=" + w.ID) == -1) {
    			iauthor.push("tc=" + w.ID);
    			o.push("<author>" + "tc=" + w.ID + "</author>");
    		}
    	}); });
    	if(iauthor.length == 0) { iauthor.push("SheetJ5"); o.push("<author>SheetJ5</author>"); }
    	o.push("</authors>");
    	o.push("<commentList>");
    	data.forEach(function(d) {
    		/* 18.7.3 CT_Comment */
    		var lastauthor = 0, ts = [];
    		if(d[1][0] && d[1][0].T && d[1][0].ID) lastauthor = iauthor.indexOf("tc=" + d[1][0].ID);
    		else d[1].forEach(function(c) {
    			if(c.a) lastauthor = iauthor.indexOf(escapexml(c.a));
    			ts.push(c.t||"");
    		});
    		o.push('<comment ref="' + d[0] + '" authorId="' + lastauthor + '"><text>');
    		if(ts.length <= 1) o.push(writetag("t", escapexml(ts[0]||"")));
    		else {
    			/* based on Threaded Comments -> Comments projection */
    			var t = "Comment:\n    " + (ts[0]) + "\n";
    			for(var i = 1; i < ts.length; ++i) t += "Reply:\n    " + ts[i] + "\n";
    			o.push(writetag("t", escapexml(t)));
    		}
    		o.push('</text></comment>');
    	});
    	o.push("</commentList>");
    	if(o.length>2) { o[o.length] = ('</comments>'); o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }

    /* [MS-XLSX] 2.1.17 */
    function parse_tcmnt_xml(data/*:string*/, opts)/*:Array<RawComment>*/ {
    	var out = [];
    	var pass = false, comment = {}, tidx = 0;
    	data.replace(tagregex, function xml_tcmnt(x, idx) {
    		var y/*:any*/ = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<?xml': break;

    			/* 2.6.207 ThreadedComments CT_ThreadedComments */
    			case '<ThreadedComments': break;
    			case '</ThreadedComments>': break;

    			/* 2.6.205 threadedComment CT_ThreadedComment */
    			case '<threadedComment': comment = {author: y.personId, guid: y.id, ref: y.ref, T: 1}; break;
    			case '</threadedComment>': if(comment.t != null) out.push(comment); break;

    			case '<text>': case '<text': tidx = idx + x.length; break;
    			case '</text>': comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n"); break;

    			/* 2.6.206 mentions CT_ThreadedCommentMentions TODO */
    			case '<mentions': case '<mentions>': pass = true; break;
    			case '</mentions>': pass = false; break;

    			/* 2.6.202 mention CT_Mention TODO */

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
    			/* 18.2.7  ext CT_Extension + */
    			case '<ext': pass=true; break;
    			case '</ext>': pass=false; break;

    			default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in threaded comments');
    		}
    		return x;
    	});
    	return out;
    }

    function write_tcmnt_xml(comments, people, opts) {
    	var o = [XML_HEADER, writextag('ThreadedComments', null, { 'xmlns': XMLNS.TCMNT }).replace(/[\/]>/, ">")];
    	comments.forEach(function(carr) {
    		var rootid = "";
    		(carr[1] || []).forEach(function(c, idx) {
    			if(!c.T) { delete c.ID; return; }
    			if(c.a && people.indexOf(c.a) == -1) people.push(c.a);
    			var tcopts = {
    				ref: carr[0],
    				id: "{54EE7951-7262-4200-6969-" + ("000000000000" + opts.tcid++).slice(-12) + "}"
    			};
    			if(idx == 0) rootid = tcopts.id;
    			else tcopts.parentId = rootid;
    			c.ID = tcopts.id;
    			if(c.a) tcopts.personId = "{54EE7950-7262-4200-6969-" + ("000000000000" + people.indexOf(c.a)).slice(-12) + "}";
    			o.push(writextag('threadedComment', writetag('text', c.t||""), tcopts));
    		});
    	});
    	o.push('</ThreadedComments>');
    	return o.join("");
    }

    /* [MS-XLSX] 2.1.18 */
    function parse_people_xml(data/*:string*/, opts) {
    	var out = [];
    	var pass = false;
    	data.replace(tagregex, function xml_tcmnt(x) {
    		var y/*:any*/ = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<?xml': break;

    			/* 2.4.85 personList CT_PersonList */
    			case '<personList': break;
    			case '</personList>': break;

    			/* 2.6.203 person CT_Person TODO: providers */
    			case '<person': out.push({name: y.displayname, id: y.id }); break;
    			case '</person>': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
    			/* 18.2.7  ext CT_Extension + */
    			case '<ext': pass=true; break;
    			case '</ext>': pass=false; break;

    			default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in threaded comments');
    		}
    		return x;
    	});
    	return out;
    }
    function write_people_xml(people/*, opts*/) {
    	var o = [XML_HEADER, writextag('personList', null, {
    		'xmlns': XMLNS.TCMNT,
    		'xmlns:x': XMLNS_main[0]
    	}).replace(/[\/]>/, ">")];
    	people.forEach(function(person, idx) {
    		o.push(writextag('person', null, {
    			displayName: person,
    			id: "{54EE7950-7262-4200-6969-" + ("000000000000" + idx).slice(-12) + "}",
    			userId: person,
    			providerId: "None"
    		}));
    	});
    	o.push("</personList>");
    	return o.join("");
    }
    /* [MS-XLSB] 2.4.28 BrtBeginComment */
    function parse_BrtBeginComment(data) {
    	var out = {};
    	out.iauthor = data.read_shift(4);
    	var rfx = parse_UncheckedRfX(data);
    	out.rfx = rfx.s;
    	out.ref = encode_cell(rfx.s);
    	data.l += 16; /*var guid = parse_GUID(data); */
    	return out;
    }
    function write_BrtBeginComment(data, o) {
    	if(o == null) o = new_buf(36);
    	o.write_shift(4, data[1].iauthor);
    	write_UncheckedRfX((data[0]/*:any*/), o);
    	o.write_shift(4, 0);
    	o.write_shift(4, 0);
    	o.write_shift(4, 0);
    	o.write_shift(4, 0);
    	return o;
    }

    /* [MS-XLSB] 2.4.327 BrtCommentAuthor */
    var parse_BrtCommentAuthor = parse_XLWideString;
    function write_BrtCommentAuthor(data) { return write_XLWideString(data.slice(0, 54)); }

    /* [MS-XLSB] 2.1.7.8 Comments */
    function parse_comments_bin(data, opts)/*:Array<RawComment>*/ {
    	var out/*:Array<RawComment>*/ = [];
    	var authors/*:Array<string>*/ = [];
    	var c = {};
    	var pass = false;
    	recordhopper(data, function hopper_cmnt(val, R, RT) {
    		switch(RT) {
    			case 0x0278: /* 'BrtCommentAuthor' */
    				authors.push(val); break;
    			case 0x027B: /* 'BrtBeginComment' */
    				c = val; break;
    			case 0x027D: /* 'BrtCommentText' */
    				c.t = val.t; c.h = val.h; c.r = val.r; break;
    			case 0x027C: /* 'BrtEndComment' */
    				c.author = authors[c.iauthor];
    				delete (c/*:any*/).iauthor;
    				if(opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;
    				if(!c.t) c.t = "";
    				delete c.rfx; out.push(c); break;

    			case 0x0C00: /* 'BrtUid' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				pass = false; break;
    			case 0x0025: /* 'BrtACBegin' */ break;
    			case 0x0026: /* 'BrtACEnd' */ break;


    			default:
    				if(R.T);
    				else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	});
    	return out;
    }

    function write_comments_bin(data/*::, opts*/) {
    	var ba = buf_array();
    	var iauthor/*:Array<string>*/ = [];
    	write_record(ba, 0x0274 /* BrtBeginComments */);

    	write_record(ba, 0x0276 /* BrtBeginCommentAuthors */);
    	data.forEach(function(comment) {
    		comment[1].forEach(function(c) {
    			if(iauthor.indexOf(c.a) > -1) return;
    			iauthor.push(c.a.slice(0,54));
    			write_record(ba, 0x0278 /* BrtCommentAuthor */, write_BrtCommentAuthor(c.a));
    		});
    	});
    	write_record(ba, 0x0277 /* BrtEndCommentAuthors */);

    	write_record(ba, 0x0279 /* BrtBeginCommentList */);
    	data.forEach(function(comment) {
    		comment[1].forEach(function(c) {
    			c.iauthor = iauthor.indexOf(c.a);
    			var range = {s:decode_cell(comment[0]),e:decode_cell(comment[0])};
    			write_record(ba, 0x027B /* BrtBeginComment */, write_BrtBeginComment([range, c]));
    			if(c.t && c.t.length > 0) write_record(ba, 0x027D /* BrtCommentText */, write_BrtCommentText(c));
    			write_record(ba, 0x027C /* BrtEndComment */);
    			delete c.iauthor;
    		});
    	});
    	write_record(ba, 0x027A /* BrtEndCommentList */);

    	write_record(ba, 0x0275 /* BrtEndComments */);
    	return ba.end();
    }
    var CT_VBA = "application/vnd.ms-office.vbaProject";
    function make_vba_xls(cfb) {
      var newcfb = CFB.utils.cfb_new({ root: "R" });
      cfb.FullPaths.forEach(function(p, i) {
        if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/))
          return;
        var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
        CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
      });
      return CFB.write(newcfb);
    }
    function fill_vba_xls(cfb, vba) {
      vba.FullPaths.forEach(function(p, i) {
        if (i == 0)
          return;
        var newpath = p.replace(/[^\/]*[\/]/, "/_VBA_PROJECT_CUR/");
        if (newpath.slice(-1) !== "/")
          CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);
      });
    }
    var VBAFMTS = ["xlsb", "xlsm", "xlam", "biff8", "xla"];
    /* macro and dialog sheet stubs */
    function parse_ds_bin(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'dialog'}; }
    function parse_ds_xml(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'dialog'}; }
    function parse_ms_bin(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'macro'}; }
    function parse_ms_xml(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'macro'}; }
    /* TODO: it will be useful to parse the function str */
    var rc_to_a1 = /*#__PURE__*/(function(){
    	var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
    	var rcbase/*:Cell*/ = ({r:0,c:0}/*:any*/);
    	function rcfunc($$,$1,$2,$3) {
    		var cRel = false, rRel = false;

    		if($2.length == 0) rRel = true;
    		else if($2.charAt(0) == "[") { rRel = true; $2 = $2.slice(1, -1); }

    		if($3.length == 0) cRel = true;
    		else if($3.charAt(0) == "[") { cRel = true; $3 = $3.slice(1, -1); }

    		var R = $2.length>0?parseInt($2,10)|0:0, C = $3.length>0?parseInt($3,10)|0:0;

    		if(cRel) C += rcbase.c; else --C;
    		if(rRel) R += rcbase.r; else --R;
    		return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
    	}
    	return function rc_to_a1(fstr/*:string*/, base/*:Cell*/)/*:string*/ {
    		rcbase = base;
    		return fstr.replace(rcregex, rcfunc);
    	};
    })();

    var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
    var a1_to_rc = /*#__PURE__*/(function(){
    	return function a1_to_rc(fstr/*:string*/, base/*:CellAddress*/) {
    		return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
    			var c = decode_col($3) - ($2 ? 0 : base.c);
    			var r = decode_row($5) - ($4 ? 0 : base.r);
    			var R = (r == 0 ? "" : !$4 ? "[" + r + "]" : (r+1));
    			var C = (c == 0 ? "" : !$2 ? "[" + c + "]" : (c+1));
    			return $1 + "R" + R + "C" + C;
    		});
    	};
    })();

    /* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */
    function shift_formula_str(f/*:string*/, delta/*:Cell*/)/*:string*/ {
    	return f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
    		return $1+($2=="$" ? $2+$3 : encode_col(decode_col($3)+delta.c))+($4=="$" ? $4+$5 : encode_row(decode_row($5) + delta.r));
    	});
    }

    function shift_formula_xlsx(f/*:string*/, range/*:string*/, cell/*:string*/)/*:string*/ {
    	var r = decode_range(range), s = r.s, c = decode_cell(cell);
    	var delta = {r:c.r - s.r, c:c.c - s.c};
    	return shift_formula_str(f, delta);
    }

    /* TODO: parse formula */
    function fuzzyfmla(f/*:string*/)/*:boolean*/ {
    	if(f.length == 1) return false;
    	return true;
    }

    function _xlfn(f/*:string*/)/*:string*/ {
    	return f.replace(/_xlfn\./g,"");
    }
    function parseread1(blob) { blob.l+=1; return; }

    /* [MS-XLS] 2.5.51 */
    function parse_ColRelU(blob, length) {
    	var c = blob.read_shift(length == 1 ? 1 : 2);
    	return [c & 0x3FFF, (c >> 14) & 1, (c >> 15) & 1];
    }

    /* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.89 */
    function parse_RgceArea(blob, length, opts) {
    	var w = 2;
    	if(opts) {
    		if(opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob);
    		else if(opts.biff == 12) w = 4;
    	}
    	var r=blob.read_shift(w), R=blob.read_shift(w);
    	var c=parse_ColRelU(blob, 2);
    	var C=parse_ColRelU(blob, 2);
    	return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
    }
    /* BIFF 2-5 encodes flags in the row field */
    function parse_RgceArea_BIFF2(blob/*::, length, opts*/) {
    	var r=parse_ColRelU(blob, 2), R=parse_ColRelU(blob, 2);
    	var c=blob.read_shift(1);
    	var C=blob.read_shift(1);
    	return { s:{r:r[0], c:c, cRel:r[1], rRel:r[2]}, e:{r:R[0], c:C, cRel:R[1], rRel:R[2]} };
    }

    /* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.90 */
    function parse_RgceAreaRel(blob, length, opts) {
    	if(opts.biff < 8) return parse_RgceArea_BIFF2(blob);
    	var r=blob.read_shift(opts.biff == 12 ? 4 : 2), R=blob.read_shift(opts.biff == 12 ? 4 : 2);
    	var c=parse_ColRelU(blob, 2);
    	var C=parse_ColRelU(blob, 2);
    	return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
    }

    /* [MS-XLS] 2.5.198.109 ; [MS-XLSB] 2.5.97.91 */
    function parse_RgceLoc(blob, length, opts) {
    	if(opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob);
    	var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
    	var c = parse_ColRelU(blob, 2);
    	return {r:r, c:c[0], cRel:c[1], rRel:c[2]};
    }
    function parse_RgceLoc_BIFF2(blob/*::, length, opts*/) {
    	var r = parse_ColRelU(blob, 2);
    	var c = blob.read_shift(1);
    	return {r:r[0], c:c, cRel:r[1], rRel:r[2]};
    }

    /* [MS-XLS] 2.5.198.107, 2.5.47 */
    function parse_RgceElfLoc(blob/*::, length, opts*/) {
    	var r = blob.read_shift(2);
    	var c = blob.read_shift(2);
    	return {r:r, c:c & 0xFF, fQuoted:!!(c & 0x4000), cRel:c>>15, rRel:c>>15 };
    }

    /* [MS-XLS] 2.5.198.111 ; [MS-XLSB] 2.5.97.92 TODO */
    function parse_RgceLocRel(blob, length, opts) {
    	var biff = opts && opts.biff ? opts.biff : 8;
    	if(biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob);
    	var r = blob.read_shift(biff >= 12 ? 4 : 2);
    	var cl = blob.read_shift(2);
    	var cRel = (cl & 0x4000) >> 14, rRel = (cl & 0x8000) >> 15;
    	cl &= 0x3FFF;
    	if(rRel == 1) while(r > 0x7FFFF) r -= 0x100000;
    	if(cRel == 1) while(cl > 0x1FFF) cl = cl - 0x4000;
    	return {r:r,c:cl,cRel:cRel,rRel:rRel};
    }
    function parse_RgceLocRel_BIFF2(blob/*::, length:number, opts*/) {
    	var rl = blob.read_shift(2);
    	var c = blob.read_shift(1);
    	var rRel = (rl & 0x8000) >> 15, cRel = (rl & 0x4000) >> 14;
    	rl &= 0x3FFF;
    	if(rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;
    	if(cRel == 1 && c >= 0x80) c = c - 0x100;
    	return {r:rl,c:c,cRel:cRel,rRel:rRel};
    }

    /* [MS-XLS] 2.5.198.27 ; [MS-XLSB] 2.5.97.18 */
    function parse_PtgArea(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
    	return [type, area];
    }

    /* [MS-XLS] 2.5.198.28 ; [MS-XLSB] 2.5.97.19 */
    function parse_PtgArea3d(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var ixti = blob.read_shift(2, 'i');
    	var w = 8;
    	if(opts) switch(opts.biff) {
    		case 5: blob.l += 12; w = 6; break;
    		case 12: w = 12; break;
    	}
    	var area = parse_RgceArea(blob, w, opts);
    	return [type, ixti, area];
    }

    /* [MS-XLS] 2.5.198.29 ; [MS-XLSB] 2.5.97.20 */
    function parse_PtgAreaErr(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	blob.l += opts && (opts.biff > 8) ? 12 : (opts.biff < 8 ? 6 : 8);
    	return [type];
    }
    /* [MS-XLS] 2.5.198.30 ; [MS-XLSB] 2.5.97.21 */
    function parse_PtgAreaErr3d(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var ixti = blob.read_shift(2);
    	var w = 8;
    	if(opts) switch(opts.biff) {
    		case 5: blob.l += 12; w = 6; break;
    		case 12: w = 12; break;
    	}
    	blob.l += w;
    	return [type, ixti];
    }

    /* [MS-XLS] 2.5.198.31 ; [MS-XLSB] 2.5.97.22 */
    function parse_PtgAreaN(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var area = parse_RgceAreaRel(blob, length - 1, opts);
    	return [type, area];
    }

    /* [MS-XLS] 2.5.198.32 ; [MS-XLSB] 2.5.97.23 */
    function parse_PtgArray(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
    	return [type];
    }

    /* [MS-XLS] 2.5.198.33 ; [MS-XLSB] 2.5.97.24 */
    function parse_PtgAttrBaxcel(blob) {
    	var bitSemi = blob[blob.l+1] & 0x01; /* 1 = volatile */
    	var bitBaxcel = 1;
    	blob.l += 4;
    	return [bitSemi, bitBaxcel];
    }

    /* [MS-XLS] 2.5.198.34 ; [MS-XLSB] 2.5.97.25 */
    function parse_PtgAttrChoose(blob, length, opts)/*:Array<number>*/ {
    	blob.l +=2;
    	var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	var o/*:Array<number>*/ = [];
    	/* offset is 1 less than the number of elements */
    	for(var i = 0; i <= offset; ++i) o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
    	return o;
    }

    /* [MS-XLS] 2.5.198.35 ; [MS-XLSB] 2.5.97.26 */
    function parse_PtgAttrGoto(blob, length, opts) {
    	var bitGoto = (blob[blob.l+1] & 0xFF) ? 1 : 0;
    	blob.l += 2;
    	return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
    }

    /* [MS-XLS] 2.5.198.36 ; [MS-XLSB] 2.5.97.27 */
    function parse_PtgAttrIf(blob, length, opts) {
    	var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
    	blob.l += 2;
    	return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
    }

    /* [MS-XLSB] 2.5.97.28 */
    function parse_PtgAttrIfError(blob) {
    	var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
    	blob.l += 2;
    	return [bitIf, blob.read_shift(2)];
    }

    /* [MS-XLS] 2.5.198.37 ; [MS-XLSB] 2.5.97.29 */
    function parse_PtgAttrSemi(blob, length, opts) {
    	var bitSemi = (blob[blob.l+1] & 0xFF) ? 1 : 0;
    	blob.l += opts && opts.biff == 2 ? 3 : 4;
    	return [bitSemi];
    }

    /* [MS-XLS] 2.5.198.40 ; [MS-XLSB] 2.5.97.32 */
    function parse_PtgAttrSpaceType(blob/*::, length*/) {
    	var type = blob.read_shift(1), cch = blob.read_shift(1);
    	return [type, cch];
    }

    /* [MS-XLS] 2.5.198.38 ; [MS-XLSB] 2.5.97.30 */
    function parse_PtgAttrSpace(blob) {
    	blob.read_shift(2);
    	return parse_PtgAttrSpaceType(blob);
    }

    /* [MS-XLS] 2.5.198.39 ; [MS-XLSB] 2.5.97.31 */
    function parse_PtgAttrSpaceSemi(blob) {
    	blob.read_shift(2);
    	return parse_PtgAttrSpaceType(blob);
    }

    /* [MS-XLS] 2.5.198.84 ; [MS-XLSB] 2.5.97.68 TODO */
    function parse_PtgRef(blob, length, opts) {
    	//var ptg = blob[blob.l] & 0x1F;
    	var type = (blob[blob.l] & 0x60)>>5;
    	blob.l += 1;
    	var loc = parse_RgceLoc(blob, 0, opts);
    	return [type, loc];
    }

    /* [MS-XLS] 2.5.198.88 ; [MS-XLSB] 2.5.97.72 TODO */
    function parse_PtgRefN(blob, length, opts) {
    	var type = (blob[blob.l] & 0x60)>>5;
    	blob.l += 1;
    	var loc = parse_RgceLocRel(blob, 0, opts);
    	return [type, loc];
    }

    /* [MS-XLS] 2.5.198.85 ; [MS-XLSB] 2.5.97.69 TODO */
    function parse_PtgRef3d(blob, length, opts) {
    	var type = (blob[blob.l] & 0x60)>>5;
    	blob.l += 1;
    	var ixti = blob.read_shift(2); // XtiIndex
    	if(opts && opts.biff == 5) blob.l += 12;
    	var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel
    	return [type, ixti, loc];
    }


    /* [MS-XLS] 2.5.198.62 ; [MS-XLSB] 2.5.97.45 TODO */
    function parse_PtgFunc(blob, length, opts) {
    	//var ptg = blob[blob.l] & 0x1F;
    	var type = (blob[blob.l] & 0x60)>>5;
    	blob.l += 1;
    	var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
    	return [FtabArgc[iftab], Ftab[iftab], type];
    }
    /* [MS-XLS] 2.5.198.63 ; [MS-XLSB] 2.5.97.46 TODO */
    function parse_PtgFuncVar(blob, length, opts) {
    	var type = blob[blob.l++];
    	var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [(type == 0x58 ? -1 : 0), blob.read_shift(1)]: parsetab(blob);
    	return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
    }

    function parsetab(blob) {
    	return [blob[blob.l+1]>>7, blob.read_shift(2) & 0x7FFF];
    }

    /* [MS-XLS] 2.5.198.41 ; [MS-XLSB] 2.5.97.33 */
    function parse_PtgAttrSum(blob, length, opts) {
    	blob.l += opts && opts.biff == 2 ? 3 : 4; return;
    }

    /* [MS-XLS] 2.5.198.58 ; [MS-XLSB] 2.5.97.40 */
    function parse_PtgExp(blob, length, opts) {
    	blob.l++;
    	if(opts && opts.biff == 12) return [blob.read_shift(4, 'i'), 0];
    	var row = blob.read_shift(2);
    	var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	return [row, col];
    }

    /* [MS-XLS] 2.5.198.57 ; [MS-XLSB] 2.5.97.39 */
    function parse_PtgErr(blob) { blob.l++; return BErr[blob.read_shift(1)]; }

    /* [MS-XLS] 2.5.198.66 ; [MS-XLSB] 2.5.97.49 */
    function parse_PtgInt(blob) { blob.l++; return blob.read_shift(2); }

    /* [MS-XLS] 2.5.198.42 ; [MS-XLSB] 2.5.97.34 */
    function parse_PtgBool(blob) { blob.l++; return blob.read_shift(1)!==0;}

    /* [MS-XLS] 2.5.198.79 ; [MS-XLSB] 2.5.97.63 */
    function parse_PtgNum(blob) { blob.l++; return parse_Xnum(blob); }

    /* [MS-XLS] 2.5.198.89 ; [MS-XLSB] 2.5.97.74 */
    function parse_PtgStr(blob, length, opts) { blob.l++; return parse_ShortXLUnicodeString(blob, length-1, opts); }

    /* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */
    /* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */
    function parse_SerAr(blob, biff/*:number*/) {
    	var val = [blob.read_shift(1)];
    	if(biff == 12) switch(val[0]) {
    		case 0x02: val[0] = 0x04; break; /* SerBool */
    		case 0x04: val[0] = 0x10; break; /* SerErr */
    		case 0x00: val[0] = 0x01; break; /* SerNum */
    		case 0x01: val[0] = 0x02; break; /* SerStr */
    	}
    	switch(val[0]) {
    		case 0x04: /* SerBool -- boolean */
    			val[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';
    			if(biff != 12) blob.l += 7; break;
    		case 0x25: /* appears to be an alias */
    		case 0x10: /* SerErr -- error */
    			val[1] = BErr[blob[blob.l]];
    			blob.l += ((biff == 12) ? 4 : 8); break;
    		case 0x00: /* SerNil -- honestly, I'm not sure how to reproduce this */
    			blob.l += 8; break;
    		case 0x01: /* SerNum -- Xnum */
    			val[1] = parse_Xnum(blob); break;
    		case 0x02: /* SerStr -- XLUnicodeString (<256 chars) */
    			val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8 ? 2 : biff}); break;
    		default: throw new Error("Bad SerAr: " + val[0]); /* Unreachable */
    	}
    	return val;
    }

    /* [MS-XLS] 2.5.198.61 ; [MS-XLSB] 2.5.97.44 */
    function parse_PtgExtraMem(blob, cce, opts) {
    	var count = blob.read_shift((opts.biff == 12) ? 4 : 2);
    	var out/*:Array<Range>*/ = [];
    	for(var i = 0; i != count; ++i) out.push(((opts.biff == 12) ? parse_UncheckedRfX : parse_Ref8U)(blob));
    	return out;
    }

    /* [MS-XLS] 2.5.198.59 ; [MS-XLSB] 2.5.97.41 */
    function parse_PtgExtraArray(blob, length, opts) {
    	var rows = 0, cols = 0;
    	if(opts.biff == 12) {
    		rows = blob.read_shift(4); // DRw
    		cols = blob.read_shift(4); // DCol
    	} else {
    		cols = 1 + blob.read_shift(1); //DColByteU
    		rows = 1 + blob.read_shift(2); //DRw
    	}
    	if(opts.biff >= 2 && opts.biff < 8) { --rows; if(--cols == 0) cols = 0x100; }
    	// $FlowIgnore
    	for(var i = 0, o/*:Array<Array<any>>*/ = []; i != rows && (o[i] = []); ++i)
    		for(var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob, opts.biff);
    	return o;
    }

    /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 */
    function parse_PtgName(blob, length, opts) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var w = (!opts || (opts.biff >= 8)) ? 4 : 2;
    	var nameindex = blob.read_shift(w);
    	switch(opts.biff) {
    		case 2: blob.l += 5; break;
    		case 3: case 4: blob.l += 8; break;
    		case 5: blob.l += 12; break;
    	}
    	return [type, 0, nameindex];
    }

    /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 */
    function parse_PtgNameX(blob, length, opts) {
    	if(opts.biff == 5) return parse_PtgNameX_BIFF5(blob);
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var ixti = blob.read_shift(2); // XtiIndex
    	var nameindex = blob.read_shift(4);
    	return [type, ixti, nameindex];
    }
    function parse_PtgNameX_BIFF5(blob/*::, length, opts*/) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var ixti = blob.read_shift(2, 'i'); // XtiIndex
    	blob.l += 8;
    	var nameindex = blob.read_shift(2);
    	blob.l += 12;
    	return [type, ixti, nameindex];
    }

    /* [MS-XLS] 2.5.198.70 ; [MS-XLSB] 2.5.97.54 */
    function parse_PtgMemArea(blob, length, opts) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	blob.l += (opts && opts.biff == 2 ? 3 : 4);
    	var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	return [type, cce];
    }

    /* [MS-XLS] 2.5.198.72 ; [MS-XLSB] 2.5.97.56 */
    function parse_PtgMemFunc(blob, length, opts) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	return [type, cce];
    }


    /* [MS-XLS] 2.5.198.86 ; [MS-XLSB] 2.5.97.69 */
    function parse_PtgRefErr(blob, length, opts) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	blob.l += 4;
    	if(opts.biff < 8) blob.l--;
    	if(opts.biff == 12) blob.l += 2;
    	return [type];
    }

    /* [MS-XLS] 2.5.198.87 ; [MS-XLSB] 2.5.97.71 */
    function parse_PtgRefErr3d(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var ixti = blob.read_shift(2);
    	var w = 4;
    	if(opts) switch(opts.biff) {
    		case 5: w = 15; break;
    		case 12: w = 6; break;
    	}
    	blob.l += w;
    	return [type, ixti];
    }

    /* [MS-XLS] 2.5.198.71 ; [MS-XLSB] 2.5.97.55 */
    var parse_PtgMemErr = parsenoop;
    /* [MS-XLS] 2.5.198.73  ; [MS-XLSB] 2.5.97.57 */
    var parse_PtgMemNoMem = parsenoop;
    /* [MS-XLS] 2.5.198.92 */
    var parse_PtgTbl = parsenoop;

    function parse_PtgElfLoc(blob, length, opts) {
    	blob.l += 2;
    	return [parse_RgceElfLoc(blob)];
    }
    function parse_PtgElfNoop(blob/*::, length, opts*/) {
    	blob.l += 6;
    	return [];
    }
    /* [MS-XLS] 2.5.198.46 */
    var parse_PtgElfCol = parse_PtgElfLoc;
    /* [MS-XLS] 2.5.198.47 */
    var parse_PtgElfColS = parse_PtgElfNoop;
    /* [MS-XLS] 2.5.198.48 */
    var parse_PtgElfColSV = parse_PtgElfNoop;
    /* [MS-XLS] 2.5.198.49 */
    var parse_PtgElfColV = parse_PtgElfLoc;
    /* [MS-XLS] 2.5.198.50 */
    function parse_PtgElfLel(blob/*::, length, opts*/) {
    	blob.l += 2;
    	return [parseuint16(blob), blob.read_shift(2) & 0x01];
    }
    /* [MS-XLS] 2.5.198.51 */
    var parse_PtgElfRadical = parse_PtgElfLoc;
    /* [MS-XLS] 2.5.198.52 */
    var parse_PtgElfRadicalLel = parse_PtgElfLel;
    /* [MS-XLS] 2.5.198.53 */
    var parse_PtgElfRadicalS = parse_PtgElfNoop;
    /* [MS-XLS] 2.5.198.54 */
    var parse_PtgElfRw = parse_PtgElfLoc;
    /* [MS-XLS] 2.5.198.55 */
    var parse_PtgElfRwV = parse_PtgElfLoc;

    /* [MS-XLSB] 2.5.97.52 TODO */
    var PtgListRT = [
    	"Data",
    	"All",
    	"Headers",
    	"??",
    	"?Data2",
    	"??",
    	"?DataHeaders",
    	"??",
    	"Totals",
    	"??",
    	"??",
    	"??",
    	"?DataTotals",
    	"??",
    	"??",
    	"??",
    	"?Current"
    ];
    function parse_PtgList(blob/*::, length, opts*/) {
    	blob.l += 2;
    	var ixti = blob.read_shift(2);
    	var flags = blob.read_shift(2);
    	var idx = blob.read_shift(4);
    	var c = blob.read_shift(2);
    	var C = blob.read_shift(2);
    	var rt = PtgListRT[(flags >> 2) & 0x1F];
    	return {ixti: ixti, coltype:(flags&0x3), rt:rt, idx:idx, c:c, C:C};
    }
    /* [MS-XLS] 2.5.198.91 ; [MS-XLSB] 2.5.97.76 */
    function parse_PtgSxName(blob/*::, length, opts*/) {
    	blob.l += 2;
    	return [blob.read_shift(4)];
    }

    /* [XLS] old spec */
    function parse_PtgSheet(blob, length, opts) {
    	blob.l += 5;
    	blob.l += 2;
    	blob.l += (opts.biff == 2 ? 1 : 4);
    	return ["PTGSHEET"];
    }
    function parse_PtgEndSheet(blob, length, opts) {
    	blob.l += (opts.biff == 2 ? 4 : 5);
    	return ["PTGENDSHEET"];
    }
    function parse_PtgMemAreaN(blob/*::, length, opts*/) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var cce = blob.read_shift(2);
    	return [type, cce];
    }
    function parse_PtgMemNoMemN(blob/*::, length, opts*/) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var cce = blob.read_shift(2);
    	return [type, cce];
    }
    function parse_PtgAttrNoop(blob/*::, length, opts*/) {
    	blob.l += 4;
    	return [0, 0];
    }

    /* [MS-XLS] 2.5.198.25 ; [MS-XLSB] 2.5.97.16 */
    var PtgTypes = {
    	/*::[*/0x01/*::]*/: { n:'PtgExp', f:parse_PtgExp },
    	/*::[*/0x02/*::]*/: { n:'PtgTbl', f:parse_PtgTbl },
    	/*::[*/0x03/*::]*/: { n:'PtgAdd', f:parseread1 },
    	/*::[*/0x04/*::]*/: { n:'PtgSub', f:parseread1 },
    	/*::[*/0x05/*::]*/: { n:'PtgMul', f:parseread1 },
    	/*::[*/0x06/*::]*/: { n:'PtgDiv', f:parseread1 },
    	/*::[*/0x07/*::]*/: { n:'PtgPower', f:parseread1 },
    	/*::[*/0x08/*::]*/: { n:'PtgConcat', f:parseread1 },
    	/*::[*/0x09/*::]*/: { n:'PtgLt', f:parseread1 },
    	/*::[*/0x0A/*::]*/: { n:'PtgLe', f:parseread1 },
    	/*::[*/0x0B/*::]*/: { n:'PtgEq', f:parseread1 },
    	/*::[*/0x0C/*::]*/: { n:'PtgGe', f:parseread1 },
    	/*::[*/0x0D/*::]*/: { n:'PtgGt', f:parseread1 },
    	/*::[*/0x0E/*::]*/: { n:'PtgNe', f:parseread1 },
    	/*::[*/0x0F/*::]*/: { n:'PtgIsect', f:parseread1 },
    	/*::[*/0x10/*::]*/: { n:'PtgUnion', f:parseread1 },
    	/*::[*/0x11/*::]*/: { n:'PtgRange', f:parseread1 },
    	/*::[*/0x12/*::]*/: { n:'PtgUplus', f:parseread1 },
    	/*::[*/0x13/*::]*/: { n:'PtgUminus', f:parseread1 },
    	/*::[*/0x14/*::]*/: { n:'PtgPercent', f:parseread1 },
    	/*::[*/0x15/*::]*/: { n:'PtgParen', f:parseread1 },
    	/*::[*/0x16/*::]*/: { n:'PtgMissArg', f:parseread1 },
    	/*::[*/0x17/*::]*/: { n:'PtgStr', f:parse_PtgStr },
    	/*::[*/0x1A/*::]*/: { n:'PtgSheet', f:parse_PtgSheet },
    	/*::[*/0x1B/*::]*/: { n:'PtgEndSheet', f:parse_PtgEndSheet },
    	/*::[*/0x1C/*::]*/: { n:'PtgErr', f:parse_PtgErr },
    	/*::[*/0x1D/*::]*/: { n:'PtgBool', f:parse_PtgBool },
    	/*::[*/0x1E/*::]*/: { n:'PtgInt', f:parse_PtgInt },
    	/*::[*/0x1F/*::]*/: { n:'PtgNum', f:parse_PtgNum },
    	/*::[*/0x20/*::]*/: { n:'PtgArray', f:parse_PtgArray },
    	/*::[*/0x21/*::]*/: { n:'PtgFunc', f:parse_PtgFunc },
    	/*::[*/0x22/*::]*/: { n:'PtgFuncVar', f:parse_PtgFuncVar },
    	/*::[*/0x23/*::]*/: { n:'PtgName', f:parse_PtgName },
    	/*::[*/0x24/*::]*/: { n:'PtgRef', f:parse_PtgRef },
    	/*::[*/0x25/*::]*/: { n:'PtgArea', f:parse_PtgArea },
    	/*::[*/0x26/*::]*/: { n:'PtgMemArea', f:parse_PtgMemArea },
    	/*::[*/0x27/*::]*/: { n:'PtgMemErr', f:parse_PtgMemErr },
    	/*::[*/0x28/*::]*/: { n:'PtgMemNoMem', f:parse_PtgMemNoMem },
    	/*::[*/0x29/*::]*/: { n:'PtgMemFunc', f:parse_PtgMemFunc },
    	/*::[*/0x2A/*::]*/: { n:'PtgRefErr', f:parse_PtgRefErr },
    	/*::[*/0x2B/*::]*/: { n:'PtgAreaErr', f:parse_PtgAreaErr },
    	/*::[*/0x2C/*::]*/: { n:'PtgRefN', f:parse_PtgRefN },
    	/*::[*/0x2D/*::]*/: { n:'PtgAreaN', f:parse_PtgAreaN },
    	/*::[*/0x2E/*::]*/: { n:'PtgMemAreaN', f:parse_PtgMemAreaN },
    	/*::[*/0x2F/*::]*/: { n:'PtgMemNoMemN', f:parse_PtgMemNoMemN },
    	/*::[*/0x39/*::]*/: { n:'PtgNameX', f:parse_PtgNameX },
    	/*::[*/0x3A/*::]*/: { n:'PtgRef3d', f:parse_PtgRef3d },
    	/*::[*/0x3B/*::]*/: { n:'PtgArea3d', f:parse_PtgArea3d },
    	/*::[*/0x3C/*::]*/: { n:'PtgRefErr3d', f:parse_PtgRefErr3d },
    	/*::[*/0x3D/*::]*/: { n:'PtgAreaErr3d', f:parse_PtgAreaErr3d },
    	/*::[*/0xFF/*::]*/: {}
    };
    /* These are duplicated in the PtgTypes table */
    var PtgDupes = {
    	/*::[*/0x40/*::]*/: 0x20, /*::[*/0x60/*::]*/: 0x20,
    	/*::[*/0x41/*::]*/: 0x21, /*::[*/0x61/*::]*/: 0x21,
    	/*::[*/0x42/*::]*/: 0x22, /*::[*/0x62/*::]*/: 0x22,
    	/*::[*/0x43/*::]*/: 0x23, /*::[*/0x63/*::]*/: 0x23,
    	/*::[*/0x44/*::]*/: 0x24, /*::[*/0x64/*::]*/: 0x24,
    	/*::[*/0x45/*::]*/: 0x25, /*::[*/0x65/*::]*/: 0x25,
    	/*::[*/0x46/*::]*/: 0x26, /*::[*/0x66/*::]*/: 0x26,
    	/*::[*/0x47/*::]*/: 0x27, /*::[*/0x67/*::]*/: 0x27,
    	/*::[*/0x48/*::]*/: 0x28, /*::[*/0x68/*::]*/: 0x28,
    	/*::[*/0x49/*::]*/: 0x29, /*::[*/0x69/*::]*/: 0x29,
    	/*::[*/0x4A/*::]*/: 0x2A, /*::[*/0x6A/*::]*/: 0x2A,
    	/*::[*/0x4B/*::]*/: 0x2B, /*::[*/0x6B/*::]*/: 0x2B,
    	/*::[*/0x4C/*::]*/: 0x2C, /*::[*/0x6C/*::]*/: 0x2C,
    	/*::[*/0x4D/*::]*/: 0x2D, /*::[*/0x6D/*::]*/: 0x2D,
    	/*::[*/0x4E/*::]*/: 0x2E, /*::[*/0x6E/*::]*/: 0x2E,
    	/*::[*/0x4F/*::]*/: 0x2F, /*::[*/0x6F/*::]*/: 0x2F,
    	/*::[*/0x58/*::]*/: 0x22, /*::[*/0x78/*::]*/: 0x22,
    	/*::[*/0x59/*::]*/: 0x39, /*::[*/0x79/*::]*/: 0x39,
    	/*::[*/0x5A/*::]*/: 0x3A, /*::[*/0x7A/*::]*/: 0x3A,
    	/*::[*/0x5B/*::]*/: 0x3B, /*::[*/0x7B/*::]*/: 0x3B,
    	/*::[*/0x5C/*::]*/: 0x3C, /*::[*/0x7C/*::]*/: 0x3C,
    	/*::[*/0x5D/*::]*/: 0x3D, /*::[*/0x7D/*::]*/: 0x3D
    };

    var Ptg18 = {
    	/*::[*/0x01/*::]*/: { n:'PtgElfLel', f:parse_PtgElfLel },
    	/*::[*/0x02/*::]*/: { n:'PtgElfRw', f:parse_PtgElfRw },
    	/*::[*/0x03/*::]*/: { n:'PtgElfCol', f:parse_PtgElfCol },
    	/*::[*/0x06/*::]*/: { n:'PtgElfRwV', f:parse_PtgElfRwV },
    	/*::[*/0x07/*::]*/: { n:'PtgElfColV', f:parse_PtgElfColV },
    	/*::[*/0x0A/*::]*/: { n:'PtgElfRadical', f:parse_PtgElfRadical },
    	/*::[*/0x0B/*::]*/: { n:'PtgElfRadicalS', f:parse_PtgElfRadicalS },
    	/*::[*/0x0D/*::]*/: { n:'PtgElfColS', f:parse_PtgElfColS },
    	/*::[*/0x0F/*::]*/: { n:'PtgElfColSV', f:parse_PtgElfColSV },
    	/*::[*/0x10/*::]*/: { n:'PtgElfRadicalLel', f:parse_PtgElfRadicalLel },
    	/*::[*/0x19/*::]*/: { n:'PtgList', f:parse_PtgList },
    	/*::[*/0x1D/*::]*/: { n:'PtgSxName', f:parse_PtgSxName },
    	/*::[*/0xFF/*::]*/: {}
    };
    var Ptg19 = {
    	/*::[*/0x00/*::]*/: { n:'PtgAttrNoop', f:parse_PtgAttrNoop },
    	/*::[*/0x01/*::]*/: { n:'PtgAttrSemi', f:parse_PtgAttrSemi },
    	/*::[*/0x02/*::]*/: { n:'PtgAttrIf', f:parse_PtgAttrIf },
    	/*::[*/0x04/*::]*/: { n:'PtgAttrChoose', f:parse_PtgAttrChoose },
    	/*::[*/0x08/*::]*/: { n:'PtgAttrGoto', f:parse_PtgAttrGoto },
    	/*::[*/0x10/*::]*/: { n:'PtgAttrSum', f:parse_PtgAttrSum },
    	/*::[*/0x20/*::]*/: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },
    	/*::[*/0x21/*::]*/: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },
    	/*::[*/0x40/*::]*/: { n:'PtgAttrSpace', f:parse_PtgAttrSpace },
    	/*::[*/0x41/*::]*/: { n:'PtgAttrSpaceSemi', f:parse_PtgAttrSpaceSemi },
    	/*::[*/0x80/*::]*/: { n:'PtgAttrIfError', f:parse_PtgAttrIfError },
    	/*::[*/0xFF/*::]*/: {}
    };

    /* [MS-XLS] 2.5.198.103 ; [MS-XLSB] 2.5.97.87 */
    function parse_RgbExtra(blob, length, rgce, opts) {
    	if(opts.biff < 8) return parsenoop(blob, length);
    	var target = blob.l + length;
    	var o = [];
    	for(var i = 0; i !== rgce.length; ++i) {
    		switch(rgce[i][0]) {
    			case 'PtgArray': /* PtgArray -> PtgExtraArray */
    				rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
    				o.push(rgce[i][1]);
    				break;
    			case 'PtgMemArea': /* PtgMemArea -> PtgExtraMem */
    				rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);
    				o.push(rgce[i][2]);
    				break;
    			case 'PtgExp': /* PtgExp -> PtgExtraCol */
    				if(opts && opts.biff == 12) {
    					rgce[i][1][1] = blob.read_shift(4);
    					o.push(rgce[i][1]);
    				} break;
    			case 'PtgList': /* TODO: PtgList -> PtgExtraList */
    			case 'PtgElfRadicalS': /* TODO: PtgElfRadicalS -> PtgExtraElf */
    			case 'PtgElfColS': /* TODO: PtgElfColS -> PtgExtraElf */
    			case 'PtgElfColSV': /* TODO: PtgElfColSV -> PtgExtraElf */
    				throw "Unsupported " + rgce[i][0];
    		}
    	}
    	length = target - blob.l;
    	/* note: this is technically an error but Excel disregards */
    	//if(target !== blob.l && blob.l !== target - length) throw new Error(target + " != " + blob.l);
    	if(length !== 0) o.push(parsenoop(blob, length));
    	return o;
    }

    /* [MS-XLS] 2.5.198.104 ; [MS-XLSB] 2.5.97.88 */
    function parse_Rgce(blob, length, opts) {
    	var target = blob.l + length;
    	var R, id, ptgs = [];
    	while(target != blob.l) {
    		length = target - blob.l;
    		id = blob[blob.l];
    		R = PtgTypes[id] || PtgTypes[PtgDupes[id]];
    		if(id === 0x18 || id === 0x19) R = (id === 0x18 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
    		if(!R || !R.f) { /*ptgs.push*/(parsenoop(blob, length)); }
    		else { ptgs.push([R.n, R.f(blob, length, opts)]); }
    	}
    	return ptgs;
    }

    function stringify_array(f/*:Array<Array<string>>*/)/*:string*/ {
    	var o/*:Array<string>*/ = [];
    	for(var i = 0; i < f.length; ++i) {
    		var x = f[i], r/*:Array<string>*/ = [];
    		for(var j = 0; j < x.length; ++j) {
    			var y = x[j];
    			if(y) switch(y[0]) {
    				// TODO: handle embedded quotes
    				case 0x02:
    					/*:: if(typeof y[1] != 'string') throw "unreachable"; */
    					r.push('"' + y[1].replace(/"/g,'""') + '"'); break;
    				default: r.push(y[1]);
    			} else r.push("");
    		}
    		o.push(r.join(","));
    	}
    	return o.join(";");
    }

    /* [MS-XLS] 2.2.2 ; [MS-XLSB] 2.2.2 TODO */
    var PtgBinOp = {
    	PtgAdd: "+",
    	PtgConcat: "&",
    	PtgDiv: "/",
    	PtgEq: "=",
    	PtgGe: ">=",
    	PtgGt: ">",
    	PtgLe: "<=",
    	PtgLt: "<",
    	PtgMul: "*",
    	PtgNe: "<>",
    	PtgPower: "^",
    	PtgSub: "-"
    };

    // List of invalid characters needs to be tested further
    function formula_quote_sheet_name(sname/*:string*/, opts)/*:string*/ {
    	if(!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error("empty sheet name");
    	if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname)) return "'" + sname + "'";
    	return sname;
    }
    function get_ixti_raw(supbooks, ixti/*:number*/, opts)/*:string*/ {
    	if(!supbooks) return "SH33TJSERR0";
    	if(opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];
    	if(!supbooks.XTI) return "SH33TJSERR6";
    	var XTI = supbooks.XTI[ixti];
    	if(opts.biff < 8) {
    		if(ixti > 10000) ixti-= 65536;
    		if(ixti < 0) ixti = -ixti;
    		return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
    	}
    	if(!XTI) return "SH33TJSERR1";
    	var o = "";
    	if(opts.biff > 8) switch(supbooks[XTI[0]][0]) {
    		case 0x0165: /* 'BrtSupSelf' */
    			o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
    			return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
    		case 0x0166: /* 'BrtSupSame' */
    			if(opts.SID != null) return supbooks.SheetNames[opts.SID];
    			return "SH33TJSSAME" + supbooks[XTI[0]][0];
    		case 0x0163: /* 'BrtSupBookSrc' */
    			/* falls through */
    		default: return "SH33TJSSRC" + supbooks[XTI[0]][0];
    	}
    	switch(supbooks[XTI[0]][0][0]) {
    		case 0x0401:
    			o = XTI[1] == -1 ? "#REF" : (supbooks.SheetNames[XTI[1]] || "SH33TJSERR3");
    			return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
    		case 0x3A01: return supbooks[XTI[0]].slice(1).map(function(name) { return name.Name; }).join(";;"); //return "SH33TJSERR8";
    		default:
    			if(!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
    			o = XTI[1] == -1 ? "#REF" : (supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4");
    			return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
    	}
    }
    function get_ixti(supbooks, ixti/*:number*/, opts)/*:string*/ {
    	var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
    	return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
    }
    function stringify_formula(formula/*Array<any>*/, range, cell/*:any*/, supbooks, opts)/*:string*/ {
    	var biff = (opts && opts.biff) || 8;
    	var _range = /*range != null ? range :*/ {s:{c:0, r:0},e:{c:0, r:0}};
    	var stack/*:Array<string>*/ = [], e1, e2, /*::type,*/ c/*:CellAddress*/, ixti=0, nameidx=0, r, sname="";
    	if(!formula[0] || !formula[0][0]) return "";
    	var last_sp = -1, sp = "";
    	for(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
    		var f = formula[0][ff];
    		switch(f[0]) {
    			case 'PtgUminus': /* [MS-XLS] 2.5.198.93 */
    				stack.push("-" + stack.pop()); break;
    			case 'PtgUplus': /* [MS-XLS] 2.5.198.95 */
    				stack.push("+" + stack.pop()); break;
    			case 'PtgPercent': /* [MS-XLS] 2.5.198.81 */
    				stack.push(stack.pop() + "%"); break;

    			case 'PtgAdd':    /* [MS-XLS] 2.5.198.26 */
    			case 'PtgConcat': /* [MS-XLS] 2.5.198.43 */
    			case 'PtgDiv':    /* [MS-XLS] 2.5.198.45 */
    			case 'PtgEq':     /* [MS-XLS] 2.5.198.56 */
    			case 'PtgGe':     /* [MS-XLS] 2.5.198.64 */
    			case 'PtgGt':     /* [MS-XLS] 2.5.198.65 */
    			case 'PtgLe':     /* [MS-XLS] 2.5.198.68 */
    			case 'PtgLt':     /* [MS-XLS] 2.5.198.69 */
    			case 'PtgMul':    /* [MS-XLS] 2.5.198.75 */
    			case 'PtgNe':     /* [MS-XLS] 2.5.198.78 */
    			case 'PtgPower':  /* [MS-XLS] 2.5.198.82 */
    			case 'PtgSub':    /* [MS-XLS] 2.5.198.90 */
    				e1 = stack.pop(); e2 = stack.pop();
    				if(last_sp >= 0) {
    					switch(formula[0][last_sp][1][0]) {
    						case 0:
    							// $FlowIgnore
    							sp = fill(" ", formula[0][last_sp][1][1]); break;
    						case 1:
    							// $FlowIgnore
    							sp = fill("\r", formula[0][last_sp][1][1]); break;
    						default:
    							sp = "";
    							// $FlowIgnore
    							if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
    					}
    					e2 = e2 + sp;
    					last_sp = -1;
    				}
    				stack.push(e2+PtgBinOp[f[0]]+e1);
    				break;

    			case 'PtgIsect': /* [MS-XLS] 2.5.198.67 */
    				e1 = stack.pop(); e2 = stack.pop();
    				stack.push(e2+" "+e1);
    				break;
    			case 'PtgUnion': /* [MS-XLS] 2.5.198.94 */
    				e1 = stack.pop(); e2 = stack.pop();
    				stack.push(e2+","+e1);
    				break;
    			case 'PtgRange': /* [MS-XLS] 2.5.198.83 */
    				e1 = stack.pop(); e2 = stack.pop();
    				stack.push(e2+":"+e1);
    				break;

    			case 'PtgAttrChoose': /* [MS-XLS] 2.5.198.34 */
    				break;
    			case 'PtgAttrGoto': /* [MS-XLS] 2.5.198.35 */
    				break;
    			case 'PtgAttrIf': /* [MS-XLS] 2.5.198.36 */
    				break;
    			case 'PtgAttrIfError': /* [MS-XLSB] 2.5.97.28 */
    				break;


    			case 'PtgRef': /* [MS-XLS] 2.5.198.84 */
    				/*::type = f[1][0]; */c = shift_cell_xls((f[1][1]/*:any*/), _range, opts);
    				stack.push(encode_cell_xls(c, biff));
    				break;
    			case 'PtgRefN': /* [MS-XLS] 2.5.198.88 */
    				/*::type = f[1][0]; */c = cell ? shift_cell_xls((f[1][1]/*:any*/), cell, opts) : (f[1][1]/*:any*/);
    				stack.push(encode_cell_xls(c, biff));
    				break;
    			case 'PtgRef3d': /* [MS-XLS] 2.5.198.85 */
    				/*::type = f[1][0]; */ixti = /*::Number(*/f[1][1]/*::)*/; c = shift_cell_xls((f[1][2]/*:any*/), _range, opts);
    				sname = get_ixti(supbooks, ixti, opts);
    				stack.push(sname + "!" + encode_cell_xls(c, biff));
    				break;

    			case 'PtgFunc': /* [MS-XLS] 2.5.198.62 */
    			case 'PtgFuncVar': /* [MS-XLS] 2.5.198.63 */
    				/* f[1] = [argc, func, type] */
    				var argc/*:number*/ = (f[1][0]/*:any*/), func/*:string*/ = (f[1][1]/*:any*/);
    				if(!argc) argc = 0;
    				argc &= 0x7F;
    				var args = argc == 0 ? [] : stack.slice(-argc);
    				stack.length -= argc;
    				if(func === 'User') func = args.shift();
    				stack.push(func + "(" + args.join(",") + ")");
    				break;

    			case 'PtgBool': /* [MS-XLS] 2.5.198.42 */
    				stack.push(f[1] ? "TRUE" : "FALSE"); break;
    			case 'PtgInt': /* [MS-XLS] 2.5.198.66 */
    				stack.push(/*::String(*/f[1]/*::)*/); break;
    			case 'PtgNum': /* [MS-XLS] 2.5.198.79 TODO: precision? */
    				stack.push(String(f[1])); break;
    			case 'PtgStr': /* [MS-XLS] 2.5.198.89 */
    				// $FlowIgnore
    				stack.push('"' + f[1].replace(/"/g, '""') + '"'); break;
    			case 'PtgErr': /* [MS-XLS] 2.5.198.57 */
    				stack.push(/*::String(*/f[1]/*::)*/); break;
    			case 'PtgAreaN': /* [MS-XLS] 2.5.198.31 TODO */
    				/*::type = f[1][0]; */r = shift_range_xls(f[1][1], cell ? {s:cell} : _range, opts);
    				stack.push(encode_range_xls((r/*:any*/), opts));
    				break;
    			case 'PtgArea': /* [MS-XLS] 2.5.198.27 TODO: fixed points */
    				/*::type = f[1][0]; */r = shift_range_xls(f[1][1], _range, opts);
    				stack.push(encode_range_xls((r/*:any*/), opts));
    				break;
    			case 'PtgArea3d': /* [MS-XLS] 2.5.198.28 TODO */
    				/*::type = f[1][0]; */ixti = /*::Number(*/f[1][1]/*::)*/; r = f[1][2];
    				sname = get_ixti(supbooks, ixti, opts);
    				stack.push(sname + "!" + encode_range_xls((r/*:any*/), opts));
    				break;
    			case 'PtgAttrSum': /* [MS-XLS] 2.5.198.41 */
    				stack.push("SUM(" + stack.pop() + ")");
    				break;

    			case 'PtgAttrBaxcel': /* [MS-XLS] 2.5.198.33 */
    			case 'PtgAttrSemi': /* [MS-XLS] 2.5.198.37 */
    				break;

    			case 'PtgName': /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 TODO: revisions */
    				/* f[1] = type, 0, nameindex */
    				nameidx = (f[1][2]/*:any*/);
    				var lbl = (supbooks.names||[])[nameidx-1] || (supbooks[0]||[])[nameidx];
    				var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
    				/* [MS-XLSB] 2.5.97.10 Ftab -- last verified 20220204 */
    				if(name && name.slice(0,6) == "_xlfn." && !opts.xlfn) name = name.slice(6);
    				stack.push(name);
    				break;

    			case 'PtgNameX': /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 TODO: revisions */
    				/* f[1] = type, ixti, nameindex */
    				var bookidx/*:number*/ = (f[1][1]/*:any*/); nameidx = (f[1][2]/*:any*/); var externbook;
    				/* TODO: Properly handle missing values -- this should be using get_ixti_raw primarily */
    				if(opts.biff <= 5) {
    					if(bookidx < 0) bookidx = -bookidx;
    					if(supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
    				} else {
    					var o = "";
    					if(((supbooks[bookidx]||[])[0]||[])[0] == 0x3A01);
    					else if(((supbooks[bookidx]||[])[0]||[])[0] == 0x0401){
    						if(supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
    							o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab-1] + "!";
    						}
    					}
    					else o = supbooks.SheetNames[nameidx-1]+ "!";
    					if(supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;
    					else if(supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;
    					else {
    						var ixtidata = (get_ixti_raw(supbooks, bookidx, opts)||"").split(";;");
    						if(ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; // TODO: confirm this is correct
    						else o += "SH33TJSERRX";
    					}
    					stack.push(o);
    					break;
    				}
    				if(!externbook) externbook = {Name: "SH33TJSERRY"};
    				stack.push(externbook.Name);
    				break;

    			case 'PtgParen': /* [MS-XLS] 2.5.198.80 */
    				var lp = '(', rp = ')';
    				if(last_sp >= 0) {
    					sp = "";
    					switch(formula[0][last_sp][1][0]) {
    						// $FlowIgnore
    						case 2: lp = fill(" ", formula[0][last_sp][1][1]) + lp; break;
    						// $FlowIgnore
    						case 3: lp = fill("\r", formula[0][last_sp][1][1]) + lp; break;
    						// $FlowIgnore
    						case 4: rp = fill(" ", formula[0][last_sp][1][1]) + rp; break;
    						// $FlowIgnore
    						case 5: rp = fill("\r", formula[0][last_sp][1][1]) + rp; break;
    						default:
    							// $FlowIgnore
    							if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
    					}
    					last_sp = -1;
    				}
    				stack.push(lp + stack.pop() + rp); break;

    			case 'PtgRefErr': /* [MS-XLS] 2.5.198.86 */
    				stack.push('#REF!'); break;

    			case 'PtgRefErr3d': /* [MS-XLS] 2.5.198.87 */
    				stack.push('#REF!'); break;

    			case 'PtgExp': /* [MS-XLS] 2.5.198.58 TODO */
    				c = {c:(f[1][1]/*:any*/),r:(f[1][0]/*:any*/)};
    				var q = ({c: cell.c, r:cell.r}/*:any*/);
    				if(supbooks.sharedf[encode_cell(c)]) {
    					var parsedf = (supbooks.sharedf[encode_cell(c)]);
    					stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
    				} else {
    					var fnd = false;
    					for(e1=0;e1!=supbooks.arrayf.length; ++e1) {
    						/* TODO: should be something like range_has */
    						e2 = supbooks.arrayf[e1];
    						if(c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
    						if(c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
    						stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
    						fnd = true;
    						break;
    					}
    					if(!fnd) stack.push(/*::String(*/f[1]/*::)*/);
    				}
    				break;

    			case 'PtgArray': /* [MS-XLS] 2.5.198.32 TODO */
    				stack.push("{" + stringify_array(/*::(*/f[1]/*:: :any)*/) + "}");
    				break;

    			case 'PtgMemArea': /* [MS-XLS] 2.5.198.70 TODO: confirm this is a non-display */
    				//stack.push("(" + f[2].map(encode_range).join(",") + ")");
    				break;

    			case 'PtgAttrSpace': /* [MS-XLS] 2.5.198.38 */
    			case 'PtgAttrSpaceSemi': /* [MS-XLS] 2.5.198.39 */
    				last_sp = ff;
    				break;

    			case 'PtgTbl': /* [MS-XLS] 2.5.198.92 TODO */
    				break;

    			case 'PtgMemErr': /* [MS-XLS] 2.5.198.71 */
    				break;

    			case 'PtgMissArg': /* [MS-XLS] 2.5.198.74 */
    				stack.push("");
    				break;

    			case 'PtgAreaErr': /* [MS-XLS] 2.5.198.29 */
    				stack.push("#REF!"); break;

    			case 'PtgAreaErr3d': /* [MS-XLS] 2.5.198.30 */
    				stack.push("#REF!"); break;

    			case 'PtgList': /* [MS-XLSB] 2.5.97.52 */
    				// $FlowIgnore
    				stack.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
    				break;

    			case 'PtgMemAreaN':
    			case 'PtgMemNoMemN':
    			case 'PtgAttrNoop':
    			case 'PtgSheet':
    			case 'PtgEndSheet':
    				break;

    			case 'PtgMemFunc': /* [MS-XLS] 2.5.198.72 TODO */
    				break;
    			case 'PtgMemNoMem': /* [MS-XLS] 2.5.198.73 TODO */
    				break;

    			case 'PtgElfCol': /* [MS-XLS] 2.5.198.46 */
    			case 'PtgElfColS': /* [MS-XLS] 2.5.198.47 */
    			case 'PtgElfColSV': /* [MS-XLS] 2.5.198.48 */
    			case 'PtgElfColV': /* [MS-XLS] 2.5.198.49 */
    			case 'PtgElfLel': /* [MS-XLS] 2.5.198.50 */
    			case 'PtgElfRadical': /* [MS-XLS] 2.5.198.51 */
    			case 'PtgElfRadicalLel': /* [MS-XLS] 2.5.198.52 */
    			case 'PtgElfRadicalS': /* [MS-XLS] 2.5.198.53 */
    			case 'PtgElfRw': /* [MS-XLS] 2.5.198.54 */
    			case 'PtgElfRwV': /* [MS-XLS] 2.5.198.55 */
    				throw new Error("Unsupported ELFs");

    			case 'PtgSxName': /* [MS-XLS] 2.5.198.91 TODO -- find a test case */
    				throw new Error('Unrecognized Formula Token: ' + String(f));
    			default: throw new Error('Unrecognized Formula Token: ' + String(f));
    		}
    		var PtgNonDisp = ['PtgAttrSpace', 'PtgAttrSpaceSemi', 'PtgAttrGoto'];
    		if(opts.biff != 3) if(last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
    			f = formula[0][last_sp];
    			var _left = true;
    			switch(f[1][0]) {
    				/* note: some bad XLSB files omit the PtgParen */
    				case 4: _left = false;
    				/* falls through */
    				case 0:
    					// $FlowIgnore
    					sp = fill(" ", f[1][1]); break;
    				case 5: _left = false;
    				/* falls through */
    				case 1:
    					// $FlowIgnore
    					sp = fill("\r", f[1][1]); break;
    				default:
    					sp = "";
    					// $FlowIgnore
    					if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
    			}
    			stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
    			last_sp = -1;
    		}
    	}
    	if(stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
    	return stack[0];
    }

    /* [MS-XLS] 2.5.198.1 TODO */
    function parse_ArrayParsedFormula(blob, length, opts/*::, ref*/) {
    	var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    	var rgcb, cce = blob.read_shift(len); // length of rgce
    	if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
    	var rgce = parse_Rgce(blob, cce, opts);
    	if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    	blob.l = target;
    	return [rgce, rgcb];
    }

    /* [MS-XLS] 2.5.198.3 TODO */
    function parse_XLSCellParsedFormula(blob, length, opts) {
    	var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    	var rgcb, cce = blob.read_shift(len); // length of rgce
    	if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
    	var rgce = parse_Rgce(blob, cce, opts);
    	if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    	blob.l = target;
    	return [rgce, rgcb];
    }

    /* [MS-XLS] 2.5.198.21 */
    function parse_NameParsedFormula(blob, length, opts, cce) {
    	var target = blob.l + length;
    	var rgce = parse_Rgce(blob, cce, opts);
    	var rgcb;
    	if(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
    	return [rgce, rgcb];
    }

    /* [MS-XLS] 2.5.198.118 TODO */
    function parse_SharedParsedFormula(blob, length, opts) {
    	var target = blob.l + length;
    	var rgcb, cce = blob.read_shift(2); // length of rgce
    	var rgce = parse_Rgce(blob, cce, opts);
    	if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
    	if(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
    	return [rgce, rgcb];
    }

    /* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */
    function parse_FormulaValue(blob/*::, length*/) {
    	var b;
    	if(__readUInt16LE(blob,blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob),'n'];
    	switch(blob[blob.l]) {
    		case 0x00: blob.l += 8; return ["String", 's'];
    		case 0x01: b = blob[blob.l+2] === 0x1; blob.l += 8; return [b,'b'];
    		case 0x02: b = blob[blob.l+2]; blob.l += 8; return [b,'e'];
    		case 0x03: blob.l += 8; return ["",'s'];
    	}
    	return [];
    }
    function write_FormulaValue(value) {
    	if(value == null) {
    		// Blank String Value
    		var o = new_buf(8);
    		o.write_shift(1, 0x03);
    		o.write_shift(1, 0);
    		o.write_shift(2, 0);
    		o.write_shift(2, 0);
    		o.write_shift(2, 0xFFFF);
    		return o;
    	} else if(typeof value == "number") return write_Xnum(value);
    	return write_Xnum(0);
    }

    /* [MS-XLS] 2.4.127 TODO */
    function parse_Formula(blob, length, opts) {
    	var end = blob.l + length;
    	var cell = parse_XLSCell(blob);
    	if(opts.biff == 2) ++blob.l;
    	var val = parse_FormulaValue(blob);
    	var flags = blob.read_shift(1);
    	if(opts.biff != 2) {
    		blob.read_shift(1);
    		if(opts.biff >= 5) {
    			/*var chn = */blob.read_shift(4);
    		}
    	}
    	var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
    	return {cell:cell, val:val[0], formula:cbf, shared: (flags >> 3) & 1, tt:val[1]};
    }
    function write_Formula(cell/*:Cell*/, R/*:number*/, C/*:number*/, opts, os/*:number*/) {
    	// Cell
    	var o1 = write_XLSCell(R, C, os);

    	// FormulaValue
    	var o2 = write_FormulaValue(cell.v);

    	// flags + cache
    	var o3 = new_buf(6);
    	var flags = 0x01 | 0x20;
    	o3.write_shift(2, flags);
    	o3.write_shift(4, 0);

    	// CellParsedFormula
    	var bf = new_buf(cell.bf.length);
    	for(var i = 0; i < cell.bf.length; ++i) bf[i] = cell.bf[i];

    	var out = bconcat([o1, o2, o3, bf]);
    	return out;
    }


    /* XLSB Parsed Formula records have the same shape */
    function parse_XLSBParsedFormula(data, length, opts) {
    	var cce = data.read_shift(4);
    	var rgce = parse_Rgce(data, cce, opts);
    	var cb = data.read_shift(4);
    	var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
    	return [rgce, rgcb];
    }

    /* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */
    var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.4 CellParsedFormula */
    var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.8 DVParsedFormula */
    //var parse_XLSBDVParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.9 FRTParsedFormula */
    //var parse_XLSBFRTParsedFormula = parse_XLSBParsedFormula2;
    /* [MS-XLSB] 2.5.97.12 NameParsedFormula */
    var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.98 SharedParsedFormula */
    var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
    var Cetab = {
      0: "BEEP",
      1: "OPEN",
      2: "OPEN.LINKS",
      3: "CLOSE.ALL",
      4: "SAVE",
      5: "SAVE.AS",
      6: "FILE.DELETE",
      7: "PAGE.SETUP",
      8: "PRINT",
      9: "PRINTER.SETUP",
      10: "QUIT",
      11: "NEW.WINDOW",
      12: "ARRANGE.ALL",
      13: "WINDOW.SIZE",
      14: "WINDOW.MOVE",
      15: "FULL",
      16: "CLOSE",
      17: "RUN",
      22: "SET.PRINT.AREA",
      23: "SET.PRINT.TITLES",
      24: "SET.PAGE.BREAK",
      25: "REMOVE.PAGE.BREAK",
      26: "FONT",
      27: "DISPLAY",
      28: "PROTECT.DOCUMENT",
      29: "PRECISION",
      30: "A1.R1C1",
      31: "CALCULATE.NOW",
      32: "CALCULATION",
      34: "DATA.FIND",
      35: "EXTRACT",
      36: "DATA.DELETE",
      37: "SET.DATABASE",
      38: "SET.CRITERIA",
      39: "SORT",
      40: "DATA.SERIES",
      41: "TABLE",
      42: "FORMAT.NUMBER",
      43: "ALIGNMENT",
      44: "STYLE",
      45: "BORDER",
      46: "CELL.PROTECTION",
      47: "COLUMN.WIDTH",
      48: "UNDO",
      49: "CUT",
      50: "COPY",
      51: "PASTE",
      52: "CLEAR",
      53: "PASTE.SPECIAL",
      54: "EDIT.DELETE",
      55: "INSERT",
      56: "FILL.RIGHT",
      57: "FILL.DOWN",
      61: "DEFINE.NAME",
      62: "CREATE.NAMES",
      63: "FORMULA.GOTO",
      64: "FORMULA.FIND",
      65: "SELECT.LAST.CELL",
      66: "SHOW.ACTIVE.CELL",
      67: "GALLERY.AREA",
      68: "GALLERY.BAR",
      69: "GALLERY.COLUMN",
      70: "GALLERY.LINE",
      71: "GALLERY.PIE",
      72: "GALLERY.SCATTER",
      73: "COMBINATION",
      74: "PREFERRED",
      75: "ADD.OVERLAY",
      76: "GRIDLINES",
      77: "SET.PREFERRED",
      78: "AXES",
      79: "LEGEND",
      80: "ATTACH.TEXT",
      81: "ADD.ARROW",
      82: "SELECT.CHART",
      83: "SELECT.PLOT.AREA",
      84: "PATTERNS",
      85: "MAIN.CHART",
      86: "OVERLAY",
      87: "SCALE",
      88: "FORMAT.LEGEND",
      89: "FORMAT.TEXT",
      90: "EDIT.REPEAT",
      91: "PARSE",
      92: "JUSTIFY",
      93: "HIDE",
      94: "UNHIDE",
      95: "WORKSPACE",
      96: "FORMULA",
      97: "FORMULA.FILL",
      98: "FORMULA.ARRAY",
      99: "DATA.FIND.NEXT",
      100: "DATA.FIND.PREV",
      101: "FORMULA.FIND.NEXT",
      102: "FORMULA.FIND.PREV",
      103: "ACTIVATE",
      104: "ACTIVATE.NEXT",
      105: "ACTIVATE.PREV",
      106: "UNLOCKED.NEXT",
      107: "UNLOCKED.PREV",
      108: "COPY.PICTURE",
      109: "SELECT",
      110: "DELETE.NAME",
      111: "DELETE.FORMAT",
      112: "VLINE",
      113: "HLINE",
      114: "VPAGE",
      115: "HPAGE",
      116: "VSCROLL",
      117: "HSCROLL",
      118: "ALERT",
      119: "NEW",
      120: "CANCEL.COPY",
      121: "SHOW.CLIPBOARD",
      122: "MESSAGE",
      124: "PASTE.LINK",
      125: "APP.ACTIVATE",
      126: "DELETE.ARROW",
      127: "ROW.HEIGHT",
      128: "FORMAT.MOVE",
      129: "FORMAT.SIZE",
      130: "FORMULA.REPLACE",
      131: "SEND.KEYS",
      132: "SELECT.SPECIAL",
      133: "APPLY.NAMES",
      134: "REPLACE.FONT",
      135: "FREEZE.PANES",
      136: "SHOW.INFO",
      137: "SPLIT",
      138: "ON.WINDOW",
      139: "ON.DATA",
      140: "DISABLE.INPUT",
      142: "OUTLINE",
      143: "LIST.NAMES",
      144: "FILE.CLOSE",
      145: "SAVE.WORKBOOK",
      146: "DATA.FORM",
      147: "COPY.CHART",
      148: "ON.TIME",
      149: "WAIT",
      150: "FORMAT.FONT",
      151: "FILL.UP",
      152: "FILL.LEFT",
      153: "DELETE.OVERLAY",
      155: "SHORT.MENUS",
      159: "SET.UPDATE.STATUS",
      161: "COLOR.PALETTE",
      162: "DELETE.STYLE",
      163: "WINDOW.RESTORE",
      164: "WINDOW.MAXIMIZE",
      166: "CHANGE.LINK",
      167: "CALCULATE.DOCUMENT",
      168: "ON.KEY",
      169: "APP.RESTORE",
      170: "APP.MOVE",
      171: "APP.SIZE",
      172: "APP.MINIMIZE",
      173: "APP.MAXIMIZE",
      174: "BRING.TO.FRONT",
      175: "SEND.TO.BACK",
      185: "MAIN.CHART.TYPE",
      186: "OVERLAY.CHART.TYPE",
      187: "SELECT.END",
      188: "OPEN.MAIL",
      189: "SEND.MAIL",
      190: "STANDARD.FONT",
      191: "CONSOLIDATE",
      192: "SORT.SPECIAL",
      193: "GALLERY.3D.AREA",
      194: "GALLERY.3D.COLUMN",
      195: "GALLERY.3D.LINE",
      196: "GALLERY.3D.PIE",
      197: "VIEW.3D",
      198: "GOAL.SEEK",
      199: "WORKGROUP",
      200: "FILL.GROUP",
      201: "UPDATE.LINK",
      202: "PROMOTE",
      203: "DEMOTE",
      204: "SHOW.DETAIL",
      206: "UNGROUP",
      207: "OBJECT.PROPERTIES",
      208: "SAVE.NEW.OBJECT",
      209: "SHARE",
      210: "SHARE.NAME",
      211: "DUPLICATE",
      212: "APPLY.STYLE",
      213: "ASSIGN.TO.OBJECT",
      214: "OBJECT.PROTECTION",
      215: "HIDE.OBJECT",
      216: "SET.EXTRACT",
      217: "CREATE.PUBLISHER",
      218: "SUBSCRIBE.TO",
      219: "ATTRIBUTES",
      220: "SHOW.TOOLBAR",
      222: "PRINT.PREVIEW",
      223: "EDIT.COLOR",
      224: "SHOW.LEVELS",
      225: "FORMAT.MAIN",
      226: "FORMAT.OVERLAY",
      227: "ON.RECALC",
      228: "EDIT.SERIES",
      229: "DEFINE.STYLE",
      240: "LINE.PRINT",
      243: "ENTER.DATA",
      249: "GALLERY.RADAR",
      250: "MERGE.STYLES",
      251: "EDITION.OPTIONS",
      252: "PASTE.PICTURE",
      253: "PASTE.PICTURE.LINK",
      254: "SPELLING",
      256: "ZOOM",
      259: "INSERT.OBJECT",
      260: "WINDOW.MINIMIZE",
      265: "SOUND.NOTE",
      266: "SOUND.PLAY",
      267: "FORMAT.SHAPE",
      268: "EXTEND.POLYGON",
      269: "FORMAT.AUTO",
      272: "GALLERY.3D.BAR",
      273: "GALLERY.3D.SURFACE",
      274: "FILL.AUTO",
      276: "CUSTOMIZE.TOOLBAR",
      277: "ADD.TOOL",
      278: "EDIT.OBJECT",
      279: "ON.DOUBLECLICK",
      280: "ON.ENTRY",
      281: "WORKBOOK.ADD",
      282: "WORKBOOK.MOVE",
      283: "WORKBOOK.COPY",
      284: "WORKBOOK.OPTIONS",
      285: "SAVE.WORKSPACE",
      288: "CHART.WIZARD",
      289: "DELETE.TOOL",
      290: "MOVE.TOOL",
      291: "WORKBOOK.SELECT",
      292: "WORKBOOK.ACTIVATE",
      293: "ASSIGN.TO.TOOL",
      295: "COPY.TOOL",
      296: "RESET.TOOL",
      297: "CONSTRAIN.NUMERIC",
      298: "PASTE.TOOL",
      302: "WORKBOOK.NEW",
      305: "SCENARIO.CELLS",
      306: "SCENARIO.DELETE",
      307: "SCENARIO.ADD",
      308: "SCENARIO.EDIT",
      309: "SCENARIO.SHOW",
      310: "SCENARIO.SHOW.NEXT",
      311: "SCENARIO.SUMMARY",
      312: "PIVOT.TABLE.WIZARD",
      313: "PIVOT.FIELD.PROPERTIES",
      314: "PIVOT.FIELD",
      315: "PIVOT.ITEM",
      316: "PIVOT.ADD.FIELDS",
      318: "OPTIONS.CALCULATION",
      319: "OPTIONS.EDIT",
      320: "OPTIONS.VIEW",
      321: "ADDIN.MANAGER",
      322: "MENU.EDITOR",
      323: "ATTACH.TOOLBARS",
      324: "VBAActivate",
      325: "OPTIONS.CHART",
      328: "VBA.INSERT.FILE",
      330: "VBA.PROCEDURE.DEFINITION",
      336: "ROUTING.SLIP",
      338: "ROUTE.DOCUMENT",
      339: "MAIL.LOGON",
      342: "INSERT.PICTURE",
      343: "EDIT.TOOL",
      344: "GALLERY.DOUGHNUT",
      350: "CHART.TREND",
      352: "PIVOT.ITEM.PROPERTIES",
      354: "WORKBOOK.INSERT",
      355: "OPTIONS.TRANSITION",
      356: "OPTIONS.GENERAL",
      370: "FILTER.ADVANCED",
      373: "MAIL.ADD.MAILER",
      374: "MAIL.DELETE.MAILER",
      375: "MAIL.REPLY",
      376: "MAIL.REPLY.ALL",
      377: "MAIL.FORWARD",
      378: "MAIL.NEXT.LETTER",
      379: "DATA.LABEL",
      380: "INSERT.TITLE",
      381: "FONT.PROPERTIES",
      382: "MACRO.OPTIONS",
      383: "WORKBOOK.HIDE",
      384: "WORKBOOK.UNHIDE",
      385: "WORKBOOK.DELETE",
      386: "WORKBOOK.NAME",
      388: "GALLERY.CUSTOM",
      390: "ADD.CHART.AUTOFORMAT",
      391: "DELETE.CHART.AUTOFORMAT",
      392: "CHART.ADD.DATA",
      393: "AUTO.OUTLINE",
      394: "TAB.ORDER",
      395: "SHOW.DIALOG",
      396: "SELECT.ALL",
      397: "UNGROUP.SHEETS",
      398: "SUBTOTAL.CREATE",
      399: "SUBTOTAL.REMOVE",
      400: "RENAME.OBJECT",
      412: "WORKBOOK.SCROLL",
      413: "WORKBOOK.NEXT",
      414: "WORKBOOK.PREV",
      415: "WORKBOOK.TAB.SPLIT",
      416: "FULL.SCREEN",
      417: "WORKBOOK.PROTECT",
      420: "SCROLLBAR.PROPERTIES",
      421: "PIVOT.SHOW.PAGES",
      422: "TEXT.TO.COLUMNS",
      423: "FORMAT.CHARTTYPE",
      424: "LINK.FORMAT",
      425: "TRACER.DISPLAY",
      430: "TRACER.NAVIGATE",
      431: "TRACER.CLEAR",
      432: "TRACER.ERROR",
      433: "PIVOT.FIELD.GROUP",
      434: "PIVOT.FIELD.UNGROUP",
      435: "CHECKBOX.PROPERTIES",
      436: "LABEL.PROPERTIES",
      437: "LISTBOX.PROPERTIES",
      438: "EDITBOX.PROPERTIES",
      439: "PIVOT.REFRESH",
      440: "LINK.COMBO",
      441: "OPEN.TEXT",
      442: "HIDE.DIALOG",
      443: "SET.DIALOG.FOCUS",
      444: "ENABLE.OBJECT",
      445: "PUSHBUTTON.PROPERTIES",
      446: "SET.DIALOG.DEFAULT",
      447: "FILTER",
      448: "FILTER.SHOW.ALL",
      449: "CLEAR.OUTLINE",
      450: "FUNCTION.WIZARD",
      451: "ADD.LIST.ITEM",
      452: "SET.LIST.ITEM",
      453: "REMOVE.LIST.ITEM",
      454: "SELECT.LIST.ITEM",
      455: "SET.CONTROL.VALUE",
      456: "SAVE.COPY.AS",
      458: "OPTIONS.LISTS.ADD",
      459: "OPTIONS.LISTS.DELETE",
      460: "SERIES.AXES",
      461: "SERIES.X",
      462: "SERIES.Y",
      463: "ERRORBAR.X",
      464: "ERRORBAR.Y",
      465: "FORMAT.CHART",
      466: "SERIES.ORDER",
      467: "MAIL.LOGOFF",
      468: "CLEAR.ROUTING.SLIP",
      469: "APP.ACTIVATE.MICROSOFT",
      470: "MAIL.EDIT.MAILER",
      471: "ON.SHEET",
      472: "STANDARD.WIDTH",
      473: "SCENARIO.MERGE",
      474: "SUMMARY.INFO",
      475: "FIND.FILE",
      476: "ACTIVE.CELL.FONT",
      477: "ENABLE.TIPWIZARD",
      478: "VBA.MAKE.ADDIN",
      480: "INSERTDATATABLE",
      481: "WORKGROUP.OPTIONS",
      482: "MAIL.SEND.MAILER",
      485: "AUTOCORRECT",
      489: "POST.DOCUMENT",
      491: "PICKLIST",
      493: "VIEW.SHOW",
      494: "VIEW.DEFINE",
      495: "VIEW.DELETE",
      509: "SHEET.BACKGROUND",
      510: "INSERT.MAP.OBJECT",
      511: "OPTIONS.MENONO",
      517: "MSOCHECKS",
      518: "NORMAL",
      519: "LAYOUT",
      520: "RM.PRINT.AREA",
      521: "CLEAR.PRINT.AREA",
      522: "ADD.PRINT.AREA",
      523: "MOVE.BRK",
      545: "HIDECURR.NOTE",
      546: "HIDEALL.NOTES",
      547: "DELETE.NOTE",
      548: "TRAVERSE.NOTES",
      549: "ACTIVATE.NOTES",
      620: "PROTECT.REVISIONS",
      621: "UNPROTECT.REVISIONS",
      647: "OPTIONS.ME",
      653: "WEB.PUBLISH",
      667: "NEWWEBQUERY",
      673: "PIVOT.TABLE.CHART",
      753: "OPTIONS.SAVE",
      755: "OPTIONS.SPELL",
      808: "HIDEALL.INKANNOTS"
    };
    var Ftab = {
      0: "COUNT",
      1: "IF",
      2: "ISNA",
      3: "ISERROR",
      4: "SUM",
      5: "AVERAGE",
      6: "MIN",
      7: "MAX",
      8: "ROW",
      9: "COLUMN",
      10: "NA",
      11: "NPV",
      12: "STDEV",
      13: "DOLLAR",
      14: "FIXED",
      15: "SIN",
      16: "COS",
      17: "TAN",
      18: "ATAN",
      19: "PI",
      20: "SQRT",
      21: "EXP",
      22: "LN",
      23: "LOG10",
      24: "ABS",
      25: "INT",
      26: "SIGN",
      27: "ROUND",
      28: "LOOKUP",
      29: "INDEX",
      30: "REPT",
      31: "MID",
      32: "LEN",
      33: "VALUE",
      34: "TRUE",
      35: "FALSE",
      36: "AND",
      37: "OR",
      38: "NOT",
      39: "MOD",
      40: "DCOUNT",
      41: "DSUM",
      42: "DAVERAGE",
      43: "DMIN",
      44: "DMAX",
      45: "DSTDEV",
      46: "VAR",
      47: "DVAR",
      48: "TEXT",
      49: "LINEST",
      50: "TREND",
      51: "LOGEST",
      52: "GROWTH",
      53: "GOTO",
      54: "HALT",
      55: "RETURN",
      56: "PV",
      57: "FV",
      58: "NPER",
      59: "PMT",
      60: "RATE",
      61: "MIRR",
      62: "IRR",
      63: "RAND",
      64: "MATCH",
      65: "DATE",
      66: "TIME",
      67: "DAY",
      68: "MONTH",
      69: "YEAR",
      70: "WEEKDAY",
      71: "HOUR",
      72: "MINUTE",
      73: "SECOND",
      74: "NOW",
      75: "AREAS",
      76: "ROWS",
      77: "COLUMNS",
      78: "OFFSET",
      79: "ABSREF",
      80: "RELREF",
      81: "ARGUMENT",
      82: "SEARCH",
      83: "TRANSPOSE",
      84: "ERROR",
      85: "STEP",
      86: "TYPE",
      87: "ECHO",
      88: "SET.NAME",
      89: "CALLER",
      90: "DEREF",
      91: "WINDOWS",
      92: "SERIES",
      93: "DOCUMENTS",
      94: "ACTIVE.CELL",
      95: "SELECTION",
      96: "RESULT",
      97: "ATAN2",
      98: "ASIN",
      99: "ACOS",
      100: "CHOOSE",
      101: "HLOOKUP",
      102: "VLOOKUP",
      103: "LINKS",
      104: "INPUT",
      105: "ISREF",
      106: "GET.FORMULA",
      107: "GET.NAME",
      108: "SET.VALUE",
      109: "LOG",
      110: "EXEC",
      111: "CHAR",
      112: "LOWER",
      113: "UPPER",
      114: "PROPER",
      115: "LEFT",
      116: "RIGHT",
      117: "EXACT",
      118: "TRIM",
      119: "REPLACE",
      120: "SUBSTITUTE",
      121: "CODE",
      122: "NAMES",
      123: "DIRECTORY",
      124: "FIND",
      125: "CELL",
      126: "ISERR",
      127: "ISTEXT",
      128: "ISNUMBER",
      129: "ISBLANK",
      130: "T",
      131: "N",
      132: "FOPEN",
      133: "FCLOSE",
      134: "FSIZE",
      135: "FREADLN",
      136: "FREAD",
      137: "FWRITELN",
      138: "FWRITE",
      139: "FPOS",
      140: "DATEVALUE",
      141: "TIMEVALUE",
      142: "SLN",
      143: "SYD",
      144: "DDB",
      145: "GET.DEF",
      146: "REFTEXT",
      147: "TEXTREF",
      148: "INDIRECT",
      149: "REGISTER",
      150: "CALL",
      151: "ADD.BAR",
      152: "ADD.MENU",
      153: "ADD.COMMAND",
      154: "ENABLE.COMMAND",
      155: "CHECK.COMMAND",
      156: "RENAME.COMMAND",
      157: "SHOW.BAR",
      158: "DELETE.MENU",
      159: "DELETE.COMMAND",
      160: "GET.CHART.ITEM",
      161: "DIALOG.BOX",
      162: "CLEAN",
      163: "MDETERM",
      164: "MINVERSE",
      165: "MMULT",
      166: "FILES",
      167: "IPMT",
      168: "PPMT",
      169: "COUNTA",
      170: "CANCEL.KEY",
      171: "FOR",
      172: "WHILE",
      173: "BREAK",
      174: "NEXT",
      175: "INITIATE",
      176: "REQUEST",
      177: "POKE",
      178: "EXECUTE",
      179: "TERMINATE",
      180: "RESTART",
      181: "HELP",
      182: "GET.BAR",
      183: "PRODUCT",
      184: "FACT",
      185: "GET.CELL",
      186: "GET.WORKSPACE",
      187: "GET.WINDOW",
      188: "GET.DOCUMENT",
      189: "DPRODUCT",
      190: "ISNONTEXT",
      191: "GET.NOTE",
      192: "NOTE",
      193: "STDEVP",
      194: "VARP",
      195: "DSTDEVP",
      196: "DVARP",
      197: "TRUNC",
      198: "ISLOGICAL",
      199: "DCOUNTA",
      200: "DELETE.BAR",
      201: "UNREGISTER",
      204: "USDOLLAR",
      205: "FINDB",
      206: "SEARCHB",
      207: "REPLACEB",
      208: "LEFTB",
      209: "RIGHTB",
      210: "MIDB",
      211: "LENB",
      212: "ROUNDUP",
      213: "ROUNDDOWN",
      214: "ASC",
      215: "DBCS",
      216: "RANK",
      219: "ADDRESS",
      220: "DAYS360",
      221: "TODAY",
      222: "VDB",
      223: "ELSE",
      224: "ELSE.IF",
      225: "END.IF",
      226: "FOR.CELL",
      227: "MEDIAN",
      228: "SUMPRODUCT",
      229: "SINH",
      230: "COSH",
      231: "TANH",
      232: "ASINH",
      233: "ACOSH",
      234: "ATANH",
      235: "DGET",
      236: "CREATE.OBJECT",
      237: "VOLATILE",
      238: "LAST.ERROR",
      239: "CUSTOM.UNDO",
      240: "CUSTOM.REPEAT",
      241: "FORMULA.CONVERT",
      242: "GET.LINK.INFO",
      243: "TEXT.BOX",
      244: "INFO",
      245: "GROUP",
      246: "GET.OBJECT",
      247: "DB",
      248: "PAUSE",
      251: "RESUME",
      252: "FREQUENCY",
      253: "ADD.TOOLBAR",
      254: "DELETE.TOOLBAR",
      255: "User",
      256: "RESET.TOOLBAR",
      257: "EVALUATE",
      258: "GET.TOOLBAR",
      259: "GET.TOOL",
      260: "SPELLING.CHECK",
      261: "ERROR.TYPE",
      262: "APP.TITLE",
      263: "WINDOW.TITLE",
      264: "SAVE.TOOLBAR",
      265: "ENABLE.TOOL",
      266: "PRESS.TOOL",
      267: "REGISTER.ID",
      268: "GET.WORKBOOK",
      269: "AVEDEV",
      270: "BETADIST",
      271: "GAMMALN",
      272: "BETAINV",
      273: "BINOMDIST",
      274: "CHIDIST",
      275: "CHIINV",
      276: "COMBIN",
      277: "CONFIDENCE",
      278: "CRITBINOM",
      279: "EVEN",
      280: "EXPONDIST",
      281: "FDIST",
      282: "FINV",
      283: "FISHER",
      284: "FISHERINV",
      285: "FLOOR",
      286: "GAMMADIST",
      287: "GAMMAINV",
      288: "CEILING",
      289: "HYPGEOMDIST",
      290: "LOGNORMDIST",
      291: "LOGINV",
      292: "NEGBINOMDIST",
      293: "NORMDIST",
      294: "NORMSDIST",
      295: "NORMINV",
      296: "NORMSINV",
      297: "STANDARDIZE",
      298: "ODD",
      299: "PERMUT",
      300: "POISSON",
      301: "TDIST",
      302: "WEIBULL",
      303: "SUMXMY2",
      304: "SUMX2MY2",
      305: "SUMX2PY2",
      306: "CHITEST",
      307: "CORREL",
      308: "COVAR",
      309: "FORECAST",
      310: "FTEST",
      311: "INTERCEPT",
      312: "PEARSON",
      313: "RSQ",
      314: "STEYX",
      315: "SLOPE",
      316: "TTEST",
      317: "PROB",
      318: "DEVSQ",
      319: "GEOMEAN",
      320: "HARMEAN",
      321: "SUMSQ",
      322: "KURT",
      323: "SKEW",
      324: "ZTEST",
      325: "LARGE",
      326: "SMALL",
      327: "QUARTILE",
      328: "PERCENTILE",
      329: "PERCENTRANK",
      330: "MODE",
      331: "TRIMMEAN",
      332: "TINV",
      334: "MOVIE.COMMAND",
      335: "GET.MOVIE",
      336: "CONCATENATE",
      337: "POWER",
      338: "PIVOT.ADD.DATA",
      339: "GET.PIVOT.TABLE",
      340: "GET.PIVOT.FIELD",
      341: "GET.PIVOT.ITEM",
      342: "RADIANS",
      343: "DEGREES",
      344: "SUBTOTAL",
      345: "SUMIF",
      346: "COUNTIF",
      347: "COUNTBLANK",
      348: "SCENARIO.GET",
      349: "OPTIONS.LISTS.GET",
      350: "ISPMT",
      351: "DATEDIF",
      352: "DATESTRING",
      353: "NUMBERSTRING",
      354: "ROMAN",
      355: "OPEN.DIALOG",
      356: "SAVE.DIALOG",
      357: "VIEW.GET",
      358: "GETPIVOTDATA",
      359: "HYPERLINK",
      360: "PHONETIC",
      361: "AVERAGEA",
      362: "MAXA",
      363: "MINA",
      364: "STDEVPA",
      365: "VARPA",
      366: "STDEVA",
      367: "VARA",
      368: "BAHTTEXT",
      369: "THAIDAYOFWEEK",
      370: "THAIDIGIT",
      371: "THAIMONTHOFYEAR",
      372: "THAINUMSOUND",
      373: "THAINUMSTRING",
      374: "THAISTRINGLENGTH",
      375: "ISTHAIDIGIT",
      376: "ROUNDBAHTDOWN",
      377: "ROUNDBAHTUP",
      378: "THAIYEAR",
      379: "RTD",
      380: "CUBEVALUE",
      381: "CUBEMEMBER",
      382: "CUBEMEMBERPROPERTY",
      383: "CUBERANKEDMEMBER",
      384: "HEX2BIN",
      385: "HEX2DEC",
      386: "HEX2OCT",
      387: "DEC2BIN",
      388: "DEC2HEX",
      389: "DEC2OCT",
      390: "OCT2BIN",
      391: "OCT2HEX",
      392: "OCT2DEC",
      393: "BIN2DEC",
      394: "BIN2OCT",
      395: "BIN2HEX",
      396: "IMSUB",
      397: "IMDIV",
      398: "IMPOWER",
      399: "IMABS",
      400: "IMSQRT",
      401: "IMLN",
      402: "IMLOG2",
      403: "IMLOG10",
      404: "IMSIN",
      405: "IMCOS",
      406: "IMEXP",
      407: "IMARGUMENT",
      408: "IMCONJUGATE",
      409: "IMAGINARY",
      410: "IMREAL",
      411: "COMPLEX",
      412: "IMSUM",
      413: "IMPRODUCT",
      414: "SERIESSUM",
      415: "FACTDOUBLE",
      416: "SQRTPI",
      417: "QUOTIENT",
      418: "DELTA",
      419: "GESTEP",
      420: "ISEVEN",
      421: "ISODD",
      422: "MROUND",
      423: "ERF",
      424: "ERFC",
      425: "BESSELJ",
      426: "BESSELK",
      427: "BESSELY",
      428: "BESSELI",
      429: "XIRR",
      430: "XNPV",
      431: "PRICEMAT",
      432: "YIELDMAT",
      433: "INTRATE",
      434: "RECEIVED",
      435: "DISC",
      436: "PRICEDISC",
      437: "YIELDDISC",
      438: "TBILLEQ",
      439: "TBILLPRICE",
      440: "TBILLYIELD",
      441: "PRICE",
      442: "YIELD",
      443: "DOLLARDE",
      444: "DOLLARFR",
      445: "NOMINAL",
      446: "EFFECT",
      447: "CUMPRINC",
      448: "CUMIPMT",
      449: "EDATE",
      450: "EOMONTH",
      451: "YEARFRAC",
      452: "COUPDAYBS",
      453: "COUPDAYS",
      454: "COUPDAYSNC",
      455: "COUPNCD",
      456: "COUPNUM",
      457: "COUPPCD",
      458: "DURATION",
      459: "MDURATION",
      460: "ODDLPRICE",
      461: "ODDLYIELD",
      462: "ODDFPRICE",
      463: "ODDFYIELD",
      464: "RANDBETWEEN",
      465: "WEEKNUM",
      466: "AMORDEGRC",
      467: "AMORLINC",
      468: "CONVERT",
      724: "SHEETJS",
      469: "ACCRINT",
      470: "ACCRINTM",
      471: "WORKDAY",
      472: "NETWORKDAYS",
      473: "GCD",
      474: "MULTINOMIAL",
      475: "LCM",
      476: "FVSCHEDULE",
      477: "CUBEKPIMEMBER",
      478: "CUBESET",
      479: "CUBESETCOUNT",
      480: "IFERROR",
      481: "COUNTIFS",
      482: "SUMIFS",
      483: "AVERAGEIF",
      484: "AVERAGEIFS"
    };
    var FtabArgc = {
      2: 1,
      3: 1,
      10: 0,
      15: 1,
      16: 1,
      17: 1,
      18: 1,
      19: 0,
      20: 1,
      21: 1,
      22: 1,
      23: 1,
      24: 1,
      25: 1,
      26: 1,
      27: 2,
      30: 2,
      31: 3,
      32: 1,
      33: 1,
      34: 0,
      35: 0,
      38: 1,
      39: 2,
      40: 3,
      41: 3,
      42: 3,
      43: 3,
      44: 3,
      45: 3,
      47: 3,
      48: 2,
      53: 1,
      61: 3,
      63: 0,
      65: 3,
      66: 3,
      67: 1,
      68: 1,
      69: 1,
      70: 1,
      71: 1,
      72: 1,
      73: 1,
      74: 0,
      75: 1,
      76: 1,
      77: 1,
      79: 2,
      80: 2,
      83: 1,
      85: 0,
      86: 1,
      89: 0,
      90: 1,
      94: 0,
      95: 0,
      97: 2,
      98: 1,
      99: 1,
      101: 3,
      102: 3,
      105: 1,
      106: 1,
      108: 2,
      111: 1,
      112: 1,
      113: 1,
      114: 1,
      117: 2,
      118: 1,
      119: 4,
      121: 1,
      126: 1,
      127: 1,
      128: 1,
      129: 1,
      130: 1,
      131: 1,
      133: 1,
      134: 1,
      135: 1,
      136: 2,
      137: 2,
      138: 2,
      140: 1,
      141: 1,
      142: 3,
      143: 4,
      144: 4,
      161: 1,
      162: 1,
      163: 1,
      164: 1,
      165: 2,
      172: 1,
      175: 2,
      176: 2,
      177: 3,
      178: 2,
      179: 1,
      184: 1,
      186: 1,
      189: 3,
      190: 1,
      195: 3,
      196: 3,
      197: 1,
      198: 1,
      199: 3,
      201: 1,
      207: 4,
      210: 3,
      211: 1,
      212: 2,
      213: 2,
      214: 1,
      215: 1,
      225: 0,
      229: 1,
      230: 1,
      231: 1,
      232: 1,
      233: 1,
      234: 1,
      235: 3,
      244: 1,
      247: 4,
      252: 2,
      257: 1,
      261: 1,
      271: 1,
      273: 4,
      274: 2,
      275: 2,
      276: 2,
      277: 3,
      278: 3,
      279: 1,
      280: 3,
      281: 3,
      282: 3,
      283: 1,
      284: 1,
      285: 2,
      286: 4,
      287: 3,
      288: 2,
      289: 4,
      290: 3,
      291: 3,
      292: 3,
      293: 4,
      294: 1,
      295: 3,
      296: 1,
      297: 3,
      298: 1,
      299: 2,
      300: 3,
      301: 3,
      302: 4,
      303: 2,
      304: 2,
      305: 2,
      306: 2,
      307: 2,
      308: 2,
      309: 3,
      310: 2,
      311: 2,
      312: 2,
      313: 2,
      314: 2,
      315: 2,
      316: 4,
      325: 2,
      326: 2,
      327: 2,
      328: 2,
      331: 2,
      332: 2,
      337: 2,
      342: 1,
      343: 1,
      346: 2,
      347: 1,
      350: 4,
      351: 3,
      352: 1,
      353: 2,
      360: 1,
      368: 1,
      369: 1,
      370: 1,
      371: 1,
      372: 1,
      373: 1,
      374: 1,
      375: 1,
      376: 1,
      377: 1,
      378: 1,
      382: 3,
      385: 1,
      392: 1,
      393: 1,
      396: 2,
      397: 2,
      398: 2,
      399: 1,
      400: 1,
      401: 1,
      402: 1,
      403: 1,
      404: 1,
      405: 1,
      406: 1,
      407: 1,
      408: 1,
      409: 1,
      410: 1,
      414: 4,
      415: 1,
      416: 1,
      417: 2,
      420: 1,
      421: 1,
      422: 2,
      424: 1,
      425: 2,
      426: 2,
      427: 2,
      428: 2,
      430: 3,
      438: 3,
      439: 3,
      440: 3,
      443: 2,
      444: 2,
      445: 2,
      446: 2,
      447: 6,
      448: 6,
      449: 2,
      450: 2,
      464: 2,
      468: 3,
      476: 2,
      479: 1,
      480: 2,
      65535: 0
    };
    /* Part 3 TODO: actually parse formulae */
    function ods_to_csf_formula(f/*:string*/)/*:string*/ {
    	if(f.slice(0,3) == "of:") f = f.slice(3);
    	/* 5.2 Basic Expressions */
    	if(f.charCodeAt(0) == 61) {
    		f = f.slice(1);
    		if(f.charCodeAt(0) == 61) f = f.slice(1);
    	}
    	f = f.replace(/COM\.MICROSOFT\./g, "");
    	/* Part 3 Section 5.8 References */
    	f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) { return $1.replace(/\./g,""); });
    	/* TODO: something other than this */
    	f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
    	return f.replace(/[;~]/g,",").replace(/\|/g,";");
    }

    function csf_to_ods_formula(f/*:string*/)/*:string*/ {
    	var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g,":");
    	/* TODO: something other than this */
    	return o.replace(/;/g, "|").replace(/,/g,";");
    }

    function ods_to_csf_3D(r/*:string*/)/*:[string, string]*/ {
    	var a = r.split(":");
    	var s = a[0].split(".")[0];
    	return [s, a[0].split(".")[1] + (a.length > 1 ? (":" + (a[1].split(".")[1] || a[1].split(".")[0])) : "")];
    }

    function csf_to_ods_3D(r/*:string*/)/*:string*/ {
    	return r.replace(/\./,"!");
    }

    var strs = {}; // shared strings
    var _ssfopts = {}; // spreadsheet formatting options


    /*global Map */
    var browser_has_Map = typeof Map !== 'undefined';

    function get_sst_id(sst/*:SST*/, str/*:string*/, rev)/*:number*/ {
    	var i = 0, len = sst.length;
    	if(rev) {
    		if(browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {
    			var revarr = browser_has_Map ? rev.get(str) : rev[str];
    			for(; i < revarr.length; ++i) {
    				if(sst[revarr[i]].t === str) { sst.Count ++; return revarr[i]; }
    			}
    		}
    	} else for(; i < len; ++i) {
    		if(sst[i].t === str) { sst.Count ++; return i; }
    	}
    	sst[len] = ({t:str}/*:any*/); sst.Count ++; sst.Unique ++;
    	if(rev) {
    		if(browser_has_Map) {
    			if(!rev.has(str)) rev.set(str, []);
    			rev.get(str).push(len);
    		} else {
    			if(!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];
    			rev[str].push(len);
    		}
    	}
    	return len;
    }

    function col_obj_w(C/*:number*/, col) {
    	var p = ({min:C+1,max:C+1}/*:any*/);
    	/* wch (chars), wpx (pixels) */
    	var wch = -1;
    	if(col.MDW) MDW = col.MDW;
    	if(col.width != null) p.customWidth = 1;
    	else if(col.wpx != null) wch = px2char(col.wpx);
    	else if(col.wch != null) wch = col.wch;
    	if(wch > -1) { p.width = char2width(wch); p.customWidth = 1; }
    	else if(col.width != null) p.width = col.width;
    	if(col.hidden) p.hidden = true;
    	if(col.level != null) { p.outlineLevel = p.level = col.level; }
    	return p;
    }

    function default_margins(margins/*:Margins*/, mode/*:?string*/) {
    	if(!margins) return;
    	var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
    	if(mode == 'xlml') defs = [1, 1, 1, 1, 0.5, 0.5];
    	if(margins.left   == null) margins.left   = defs[0];
    	if(margins.right  == null) margins.right  = defs[1];
    	if(margins.top    == null) margins.top    = defs[2];
    	if(margins.bottom == null) margins.bottom = defs[3];
    	if(margins.header == null) margins.header = defs[4];
    	if(margins.footer == null) margins.footer = defs[5];
    }

    function get_cell_style(styles/*:Array<any>*/, cell/*:Cell*/, opts) {
    	var z = opts.revssf[cell.z != null ? cell.z : "General"];
    	var i = 0x3c, len = styles.length;
    	if(z == null && opts.ssf) {
    		for(; i < 0x188; ++i) if(opts.ssf[i] == null) {
    			SSF_load(cell.z, i);
    			// $FlowIgnore
    			opts.ssf[i] = cell.z;
    			opts.revssf[cell.z] = z = i;
    			break;
    		}
    	}
    	for(i = 0; i != len; ++i) if(styles[i].numFmtId === z) return i;
    	styles[len] = {
    		numFmtId:z,
    		fontId:0,
    		fillId:0,
    		borderId:0,
    		xfId:0,
    		applyNumberFormat:1
    	};
    	return len;
    }

    function safe_format(p/*:Cell*/, fmtid/*:number*/, fillid/*:?number*/, opts, themes, styles) {
    	try {
    		if(opts.cellNF) p.z = table_fmt[fmtid];
    	} catch(e) { if(opts.WTF) throw e; }
    	if(p.t === 'z' && !opts.cellStyles) return;
    	if(p.t === 'd' && typeof p.v === 'string') p.v = parseDate(p.v);
    	if((!opts || opts.cellText !== false) && p.t !== 'z') try {
    		if(table_fmt[fmtid] == null) SSF_load(SSFImplicit[fmtid] || "General", fmtid);
    		if(p.t === 'e') p.w = p.w || BErr[p.v];
    		else if(fmtid === 0) {
    			if(p.t === 'n') {
    				if((p.v|0) === p.v) p.w = p.v.toString(10);
    				else p.w = SSF_general_num(p.v);
    			}
    			else if(p.t === 'd') {
    				var dd = datenum(p.v);
    				if((dd|0) === dd) p.w = dd.toString(10);
    				else p.w = SSF_general_num(dd);
    			}
    			else if(p.v === undefined) return "";
    			else p.w = SSF_general(p.v,_ssfopts);
    		}
    		else if(p.t === 'd') p.w = SSF_format(fmtid,datenum(p.v),_ssfopts);
    		else p.w = SSF_format(fmtid,p.v,_ssfopts);
    	} catch(e) { if(opts.WTF) throw e; }
    	if(!opts.cellStyles) return;
    	if(fillid != null) try {
    		p.s = styles.Fills[fillid];
    		if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
    			p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
    			if(opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
    		}
    		if (p.s.bgColor && p.s.bgColor.theme) {
    			p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
    			if(opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
    		}
    	} catch(e) { if(opts.WTF && styles.Fills) throw e; }
    }

    function check_ws(ws/*:Worksheet*/, sname/*:string*/, i/*:number*/) {
    	if(ws && ws['!ref']) {
    		var range = safe_decode_range(ws['!ref']);
    		if(range.e.c < range.s.c || range.e.r < range.s.r) throw new Error("Bad range (" + i + "): " + ws['!ref']);
    	}
    }
    function parse_ws_xml_dim(ws/*:Worksheet*/, s/*:string*/) {
    	var d = safe_decode_range(s);
    	if(d.s.r<=d.e.r && d.s.c<=d.e.c && d.s.r>=0 && d.s.c>=0) ws["!ref"] = encode_range(d);
    }
    var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
    var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
    var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
    var dimregex = /"(\w*:\w*)"/;
    var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
    var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
    var marginregex= /<(?:\w:)?pageMargins[^>]*\/>/g;
    var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
    var sheetprregex2= /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
    var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;

    /* 18.3 Worksheets */
    function parse_ws_xml(data/*:?string*/, opts, idx/*:number*/, rels, wb/*:WBWBProps*/, themes, styles)/*:Worksheet*/ {
    	if(!data) return data;
    	if(!rels) rels = {'!id':{}};

    	/* 18.3.1.99 worksheet CT_Worksheet */
    	var s = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
    	var refguess/*:Range*/ = ({s: {r:2000000, c:2000000}, e: {r:0, c:0} }/*:any*/);

    	var data1 = "", data2 = "";
    	var mtch/*:?any*/ = data.match(sheetdataregex);
    	if(mtch) {
    		data1 = data.slice(0, mtch.index);
    		data2 = data.slice(mtch.index + mtch[0].length);
    	} else data1 = data2 = data;

    	/* 18.3.1.82 sheetPr CT_SheetPr */
    	var sheetPr = data1.match(sheetprregex);
    	if(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    	else if((sheetPr = data1.match(sheetprregex2))) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1]||"", s, wb, idx);

    	/* 18.3.1.35 dimension CT_SheetDimension */
    	var ridx = (data1.match(/<(?:\w*:)?dimension/)||{index:-1}).index;
    	if(ridx > 0) {
    		var ref = data1.slice(ridx,ridx+50).match(dimregex);
    		if(ref) parse_ws_xml_dim(s, ref[1]);
    	}

    	/* 18.3.1.88 sheetViews CT_SheetViews */
    	var svs = data1.match(svsregex);
    	if(svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);

    	/* 18.3.1.17 cols CT_Cols */
    	var columns/*:Array<ColInfo>*/ = [];
    	if(opts.cellStyles) {
    		/* 18.3.1.13 col CT_Col */
    		var cols = data1.match(colregex);
    		if(cols) parse_ws_xml_cols(columns, cols);
    	}

    	/* 18.3.1.80 sheetData CT_SheetData ? */
    	if(mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);

    	/* 18.3.1.2  autoFilter CT_AutoFilter */
    	var afilter = data2.match(afregex);
    	if(afilter) s['!autofilter'] = parse_ws_xml_autofilter(afilter[0]);

    	/* 18.3.1.55 mergeCells CT_MergeCells */
    	var merges/*:Array<Range>*/ = [];
    	var _merge = data2.match(mergecregex);
    	if(_merge) for(ridx = 0; ridx != _merge.length; ++ridx)
    		merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf("\"")+1));

    	/* 18.3.1.48 hyperlinks CT_Hyperlinks */
    	var hlink = data2.match(hlinkregex);
    	if(hlink) parse_ws_xml_hlinks(s, hlink, rels);

    	/* 18.3.1.62 pageMargins CT_PageMargins */
    	var margins = data2.match(marginregex);
    	if(margins) s['!margins'] = parse_ws_xml_margins(parsexmltag(margins[0]));

    	if(!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);
    	if(opts.sheetRows > 0 && s["!ref"]) {
    		var tmpref = safe_decode_range(s["!ref"]);
    		if(opts.sheetRows <= +tmpref.e.r) {
    			tmpref.e.r = opts.sheetRows - 1;
    			if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
    			if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
    			if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
    			if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
    			s["!fullref"] = s["!ref"];
    			s["!ref"] = encode_range(tmpref);
    		}
    	}
    	if(columns.length > 0) s["!cols"] = columns;
    	if(merges.length > 0) s["!merges"] = merges;
    	return s;
    }

    function write_ws_xml_merges(merges/*:Array<Range>*/)/*:string*/ {
    	if(merges.length === 0) return "";
    	var o = '<mergeCells count="' + merges.length + '">';
    	for(var i = 0; i != merges.length; ++i) o += '<mergeCell ref="' + encode_range(merges[i]) + '"/>';
    	return o + '</mergeCells>';
    }

    /* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */
    function parse_ws_xml_sheetpr(sheetPr/*:string*/, s, wb/*:WBWBProps*/, idx/*:number*/) {
    	var data = parsexmltag(sheetPr);
    	if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
    	if(data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
    }
    function parse_ws_xml_sheetpr2(sheetPr/*:string*/, body/*:string*/, s, wb/*:WBWBProps*/, idx/*:number*/) {
    	parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s, wb, idx);
    }
    function write_ws_xml_sheetpr(ws, wb, idx, opts, o) {
    	var needed = false;
    	var props = {}, payload = null;
    	if(opts.bookType !== 'xlsx' && wb.vbaraw) {
    		var cname = wb.SheetNames[idx];
    		try { if(wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname; } catch(e) {}
    		needed = true;
    		props.codeName = utf8write(escapexml(cname));
    	}

    	if(ws && ws["!outline"]) {
    		var outlineprops = {summaryBelow:1, summaryRight:1};
    		if(ws["!outline"].above) outlineprops.summaryBelow = 0;
    		if(ws["!outline"].left) outlineprops.summaryRight = 0;
    		payload = (payload||"") + writextag('outlinePr', null, outlineprops);
    	}

    	if(!needed && !payload) return;
    	o[o.length] = (writextag('sheetPr', payload, props));
    }

    /* 18.3.1.85 sheetProtection CT_SheetProtection */
    var sheetprot_deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"];
    var sheetprot_deftrue = [
    	"formatColumns", "formatRows", "formatCells",
    	"insertColumns", "insertRows", "insertHyperlinks",
    	"deleteColumns", "deleteRows",
    	"sort", "autoFilter", "pivotTables"
    ];
    function write_ws_xml_protection(sp)/*:string*/ {
    	// algorithmName, hashValue, saltValue, spinCount
    	var o = ({sheet:1}/*:any*/);
    	sheetprot_deffalse.forEach(function(n) { if(sp[n] != null && sp[n]) o[n] = "1"; });
    	sheetprot_deftrue.forEach(function(n) { if(sp[n] != null && !sp[n]) o[n] = "0"; });
    	/* TODO: algorithm */
    	if(sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
    	return writextag('sheetProtection', null, o);
    }

    function parse_ws_xml_hlinks(s, data/*:Array<string>*/, rels) {
    	var dense = Array.isArray(s);
    	for(var i = 0; i != data.length; ++i) {
    		var val = parsexmltag(utf8read(data[i]), true);
    		if(!val.ref) return;
    		var rel = ((rels || {})['!id']||[])[val.id];
    		if(rel) {
    			val.Target = rel.Target;
    			if(val.location) val.Target += "#"+unescapexml(val.location);
    		} else {
    			val.Target = "#" + unescapexml(val.location);
    			rel = {Target: val.Target, TargetMode: 'Internal'};
    		}
    		val.Rel = rel;
    		if(val.tooltip) { val.Tooltip = val.tooltip; delete val.tooltip; }
    		var rng = safe_decode_range(val.ref);
    		for(var R=rng.s.r;R<=rng.e.r;++R) for(var C=rng.s.c;C<=rng.e.c;++C) {
    			var addr = encode_cell({c:C,r:R});
    			if(dense) {
    				if(!s[R]) s[R] = [];
    				if(!s[R][C]) s[R][C] = {t:"z",v:undefined};
    				s[R][C].l = val;
    			} else {
    				if(!s[addr]) s[addr] = {t:"z",v:undefined};
    				s[addr].l = val;
    			}
    		}
    	}
    }

    function parse_ws_xml_margins(margin) {
    	var o = {};
    	["left", "right", "top", "bottom", "header", "footer"].forEach(function(k) {
    		if(margin[k]) o[k] = parseFloat(margin[k]);
    	});
    	return o;
    }
    function write_ws_xml_margins(margin)/*:string*/ {
    	default_margins(margin);
    	return writextag('pageMargins', null, margin);
    }

    function parse_ws_xml_cols(columns, cols) {
    	var seencol = false;
    	for(var coli = 0; coli != cols.length; ++coli) {
    		var coll = parsexmltag(cols[coli], true);
    		if(coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
    		var colm=parseInt(coll.min, 10)-1, colM=parseInt(coll.max,10)-1;
    		if(coll.outlineLevel) coll.level = (+coll.outlineLevel || 0);
    		delete coll.min; delete coll.max; coll.width = +coll.width;
    		if(!seencol && coll.width) { seencol = true; find_mdw_colw(coll.width); }
    		process_col(coll);
    		while(colm <= colM) columns[colm++] = dup(coll);
    	}
    }
    function write_ws_xml_cols(ws, cols)/*:string*/ {
    	var o = ["<cols>"], col;
    	for(var i = 0; i != cols.length; ++i) {
    		if(!(col = cols[i])) continue;
    		o[o.length] = (writextag('col', null, col_obj_w(i, col)));
    	}
    	o[o.length] = "</cols>";
    	return o.join("");
    }

    function parse_ws_xml_autofilter(data/*:string*/) {
    	var o = { ref: (data.match(/ref="([^"]*)"/)||[])[1]};
    	return o;
    }
    function write_ws_xml_autofilter(data, ws, wb, idx)/*:string*/ {
    	var ref = typeof data.ref == "string" ? data.ref : encode_range(data.ref);
    	if(!wb.Workbook) wb.Workbook = ({Sheets:[]}/*:any*/);
    	if(!wb.Workbook.Names) wb.Workbook.Names = [];
    	var names/*: Array<any> */ = wb.Workbook.Names;
    	var range = decode_range(ref);
    	if(range.s.r == range.e.r) { range.e.r = decode_range(ws["!ref"]).e.r; ref = encode_range(range); }
    	for(var i = 0; i < names.length; ++i) {
    		var name = names[i];
    		if(name.Name != '_xlnm._FilterDatabase') continue;
    		if(name.Sheet != idx) continue;
    		name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref; break;
    	}
    	if(i == names.length) names.push({ Name: '_xlnm._FilterDatabase', Sheet: idx, Ref: "'" + wb.SheetNames[idx] + "'!" + ref  });
    	return writextag("autoFilter", null, {ref:ref});
    }

    /* 18.3.1.88 sheetViews CT_SheetViews */
    /* 18.3.1.87 sheetView CT_SheetView */
    var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
    function parse_ws_xml_sheetviews(data, wb/*:WBWBProps*/) {
    	if(!wb.Views) wb.Views = [{}];
    	(data.match(sviewregex)||[]).forEach(function(r/*:string*/, i/*:number*/) {
    		var tag = parsexmltag(r);
    		// $FlowIgnore
    		if(!wb.Views[i]) wb.Views[i] = {};
    		// $FlowIgnore
    		if(+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale;
    		// $FlowIgnore
    		if(parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;
    	});
    }
    function write_ws_xml_sheetviews(ws, opts, idx, wb)/*:string*/ {
    	var sview = ({workbookViewId:"0"}/*:any*/);
    	// $FlowIgnore
    	if((((wb||{}).Workbook||{}).Views||[])[0]) sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
    	return writextag("sheetViews", writextag("sheetView", null, sview), {});
    }

    function write_ws_xml_cell(cell/*:Cell*/, ref, ws, opts/*::, idx, wb*/)/*:string*/ {
    	if(cell.c) ws['!comments'].push([ref, cell.c]);
    	if(cell.v === undefined && typeof cell.f !== "string" || cell.t === 'z' && !cell.f) return "";
    	var vv = "";
    	var oldt = cell.t, oldv = cell.v;
    	if(cell.t !== "z") switch(cell.t) {
    		case 'b': vv = cell.v ? "1" : "0"; break;
    		case 'n': vv = ''+cell.v; break;
    		case 'e': vv = BErr[cell.v]; break;
    		case 'd':
    			if(opts && opts.cellDates) vv = parseDate(cell.v, -1).toISOString();
    			else {
    				cell = dup(cell);
    				cell.t = 'n';
    				vv = ''+(cell.v = datenum(parseDate(cell.v)));
    			}
    			if(typeof cell.z === 'undefined') cell.z = table_fmt[14];
    			break;
    		default: vv = cell.v; break;
    	}
    	var v = writetag('v', escapexml(vv)), o = ({r:ref}/*:any*/);
    	/* TODO: cell style */
    	var os = get_cell_style(opts.cellXfs, cell, opts);
    	if(os !== 0) o.s = os;
    	switch(cell.t) {
    		case 'n': break;
    		case 'd': o.t = "d"; break;
    		case 'b': o.t = "b"; break;
    		case 'e': o.t = "e"; break;
    		case 'z': break;
    		default: if(cell.v == null) { delete cell.t; break; }
    			if(cell.v.length > 32767) throw new Error("Text length must not exceed 32767 characters");
    			if(opts && opts.bookSST) {
    				v = writetag('v', ''+get_sst_id(opts.Strings, cell.v, opts.revStrings));
    				o.t = "s"; break;
    			}
    			o.t = "str"; break;
    	}
    	if(cell.t != oldt) { cell.t = oldt; cell.v = oldv; }
    	if(typeof cell.f == "string" && cell.f) {
    		var ff = cell.F && cell.F.slice(0, ref.length) == ref ? {t:"array", ref:cell.F} : null;
    		v = writextag('f', escapexml(cell.f), ff) + (cell.v != null ? v : "");
    	}
    	if(cell.l) ws['!links'].push([ref, cell.l]);
    	if(cell.D) o.cm = 1;
    	return writextag('c', v, o);
    }

    var parse_ws_xml_data = /*#__PURE__*/(function() {
    	var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
    	var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
    	var refregex = /ref=["']([^"']*)["']/;
    	var match_v = matchtag("v"), match_f = matchtag("f");

    return function parse_ws_xml_data(sdata/*:string*/, s, opts, guess/*:Range*/, themes, styles) {
    	var ri = 0, x = "", cells/*:Array<string>*/ = [], cref/*:?Array<string>*/ = [], idx=0, i=0, cc=0, d="", p/*:any*/;
    	var tag, tagr = 0, tagc = 0;
    	var sstr, ftag;
    	var fmtid = 0, fillid = 0;
    	var do_format = Array.isArray(styles.CellXf), cf;
    	var arrayf/*:Array<[Range, string]>*/ = [];
    	var sharedf = [];
    	var dense = Array.isArray(s);
    	var rows/*:Array<RowInfo>*/ = [], rowobj = {}, rowrite = false;
    	var sheetStubs = !!opts.sheetStubs;
    	for(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
    		x = marr[mt].trim();
    		var xlen = x.length;
    		if(xlen === 0) continue;

    		/* 18.3.1.73 row CT_Row */
    		var rstarti = 0;
    		outa: for(ri = 0; ri < xlen; ++ri) switch(/*x.charCodeAt(ri)*/x[ri]) {
    			case ">" /*62*/:
    				if(/*x.charCodeAt(ri-1) != 47*/x[ri-1] != "/") { ++ri; break outa; }
    				if(opts && opts.cellStyles) {
    					// TODO: avoid duplication
    					tag = parsexmltag(x.slice(rstarti,ri), true);
    					tagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;
    					if(opts.sheetRows && opts.sheetRows < tagr) continue;
    					rowobj = {}; rowrite = false;
    					if(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }
    					if(tag.hidden == "1") { rowrite = true; rowobj.hidden = true; }
    					if(tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel; }
    					if(rowrite) rows[tagr-1] = rowobj;
    				}
    				break;
    			case "<" /*60*/: rstarti = ri; break;
    		}
    		if(rstarti >= ri) break;
    		tag = parsexmltag(x.slice(rstarti,ri), true);
    		tagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;
    		if(opts.sheetRows && opts.sheetRows < tagr) continue;
    		if(guess.s.r > tagr - 1) guess.s.r = tagr - 1;
    		if(guess.e.r < tagr - 1) guess.e.r = tagr - 1;

    		if(opts && opts.cellStyles) {
    			rowobj = {}; rowrite = false;
    			if(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }
    			if(tag.hidden == "1") { rowrite = true; rowobj.hidden = true; }
    			if(tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel; }
    			if(rowrite) rows[tagr-1] = rowobj;
    		}

    		/* 18.3.1.4 c CT_Cell */
    		cells = x.slice(ri).split(cellregex);
    		for(var rslice = 0; rslice != cells.length; ++rslice) if(cells[rslice].trim().charAt(0) != "<") break;
    		cells = cells.slice(rslice);
    		for(ri = 0; ri != cells.length; ++ri) {
    			x = cells[ri].trim();
    			if(x.length === 0) continue;
    			cref = x.match(rregex); idx = ri; i=0; cc=0;
    			x = "<c " + (x.slice(0,1)=="<"?">":"") + x;
    			if(cref != null && cref.length === 2) {
    				idx = 0; d=cref[1];
    				for(i=0; i != d.length; ++i) {
    					if((cc=d.charCodeAt(i)-64) < 1 || cc > 26) break;
    					idx = 26*idx + cc;
    				}
    				--idx;
    				tagc = idx;
    			} else ++tagc;
    			for(i = 0; i != x.length; ++i) if(x.charCodeAt(i) === 62) break; ++i;
    			tag = parsexmltag(x.slice(0,i), true);
    			if(!tag.r) tag.r = encode_cell({r:tagr-1, c:tagc});
    			d = x.slice(i);
    			p = ({t:""}/*:any*/);

    			if((cref=d.match(match_v))!= null && /*::cref != null && */cref[1] !== '') p.v=unescapexml(cref[1]);
    			if(opts.cellFormula) {
    				if((cref=d.match(match_f))!= null && /*::cref != null && */cref[1] !== '') {
    					/* TODO: match against XLSXFutureFunctions */
    					p.f=unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
    					if(!opts.xlfn) p.f = _xlfn(p.f);
    					if(/*::cref != null && cref[0] != null && */cref[0].indexOf('t="array"') > -1) {
    						p.F = (d.match(refregex)||[])[1];
    						if(p.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p.F), p.F]);
    					} else if(/*::cref != null && cref[0] != null && */cref[0].indexOf('t="shared"') > -1) {
    						// TODO: parse formula
    						ftag = parsexmltag(cref[0]);
    						var ___f = unescapexml(utf8read(cref[1]));
    						if(!opts.xlfn) ___f = _xlfn(___f);
    						sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
    					}
    				} else if((cref=d.match(/<f[^>]*\/>/))) {
    					ftag = parsexmltag(cref[0]);
    					if(sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2]/*[0].ref*/, tag.r);
    				}
    				/* TODO: factor out contains logic */
    				var _tag = decode_cell(tag.r);
    				for(i = 0; i < arrayf.length; ++i)
    					if(_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r)
    						if(_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c)
    							p.F = arrayf[i][1];
    			}

    			if(tag.t == null && p.v === undefined) {
    				if(p.f || p.F) {
    					p.v = 0; p.t = "n";
    				} else if(!sheetStubs) continue;
    				else p.t = "z";
    			}
    			else p.t = tag.t || "n";
    			if(guess.s.c > tagc) guess.s.c = tagc;
    			if(guess.e.c < tagc) guess.e.c = tagc;
    			/* 18.18.11 t ST_CellType */
    			switch(p.t) {
    				case 'n':
    					if(p.v == "" || p.v == null) {
    						if(!sheetStubs) continue;
    						p.t = 'z';
    					} else p.v = parseFloat(p.v);
    					break;
    				case 's':
    					if(typeof p.v == 'undefined') {
    						if(!sheetStubs) continue;
    						p.t = 'z';
    					} else {
    						sstr = strs[parseInt(p.v, 10)];
    						p.v = sstr.t;
    						p.r = sstr.r;
    						if(opts.cellHTML) p.h = sstr.h;
    					}
    					break;
    				case 'str':
    					p.t = "s";
    					p.v = (p.v!=null) ? utf8read(p.v) : '';
    					if(opts.cellHTML) p.h = escapehtml(p.v);
    					break;
    				case 'inlineStr':
    					cref = d.match(isregex);
    					p.t = 's';
    					if(cref != null && (sstr = parse_si(cref[1]))) {
    						p.v = sstr.t;
    						if(opts.cellHTML) p.h = sstr.h;
    					} else p.v = "";
    					break;
    				case 'b': p.v = parsexmlbool(p.v); break;
    				case 'd':
    					if(opts.cellDates) p.v = parseDate(p.v, 1);
    					else { p.v = datenum(parseDate(p.v, 1)); p.t = 'n'; }
    					break;
    				/* error string in .w, number in .v */
    				case 'e':
    					if(!opts || opts.cellText !== false) p.w = p.v;
    					p.v = RBErr[p.v]; break;
    			}
    			/* formatting */
    			fmtid = fillid = 0;
    			cf = null;
    			if(do_format && tag.s !== undefined) {
    				cf = styles.CellXf[tag.s];
    				if(cf != null) {
    					if(cf.numFmtId != null) fmtid = cf.numFmtId;
    					if(opts.cellStyles) {
    						if(cf.fillId != null) fillid = cf.fillId;
    					}
    				}
    			}
    			safe_format(p, fmtid, fillid, opts, themes, styles);
    			if(opts.cellDates && do_format && p.t == 'n' && fmt_is_date(table_fmt[fmtid])) { p.t = 'd'; p.v = numdate(p.v); }
    			if(tag.cm && opts.xlmeta) {
    				var cm = (opts.xlmeta.Cell||[])[+tag.cm-1];
    				if(cm && cm.type == 'XLDAPR') p.D = true;
    			}
    			if(dense) {
    				var _r = decode_cell(tag.r);
    				if(!s[_r.r]) s[_r.r] = [];
    				s[_r.r][_r.c] = p;
    			} else s[tag.r] = p;
    		}
    	}
    	if(rows.length > 0) s['!rows'] = rows;
    }; })();

    function write_ws_xml_data(ws/*:Worksheet*/, opts, idx/*:number*/, wb/*:Workbook*//*::, rels*/)/*:string*/ {
    	var o/*:Array<string>*/ = [], r/*:Array<string>*/ = [], range = safe_decode_range(ws['!ref']), cell="", ref, rr = "", cols/*:Array<string>*/ = [], R=0, C=0, rows = ws['!rows'];
    	var dense = Array.isArray(ws);
    	var params = ({r:rr}/*:any*/), row/*:RowInfo*/, height = -1;
    	for(C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);
    	for(R = range.s.r; R <= range.e.r; ++R) {
    		r = [];
    		rr = encode_row(R);
    		for(C = range.s.c; C <= range.e.c; ++C) {
    			ref = cols[C] + rr;
    			var _cell = dense ? (ws[R]||[])[C]: ws[ref];
    			if(_cell === undefined) continue;
    			if((cell = write_ws_xml_cell(_cell, ref, ws, opts)) != null) r.push(cell);
    		}
    		if(r.length > 0 || (rows && rows[R])) {
    			params = ({r:rr}/*:any*/);
    			if(rows && rows[R]) {
    				row = rows[R];
    				if(row.hidden) params.hidden = 1;
    				height = -1;
    				if(row.hpx) height = px2pt(row.hpx);
    				else if(row.hpt) height = row.hpt;
    				if(height > -1) { params.ht = height; params.customHeight = 1; }
    				if(row.level) { params.outlineLevel = row.level; }
    			}
    			o[o.length] = (writextag('row', r.join(""), params));
    		}
    	}
    	if(rows) for(; R < rows.length; ++R) {
    		if(rows && rows[R]) {
    			params = ({r:R+1}/*:any*/);
    			row = rows[R];
    			if(row.hidden) params.hidden = 1;
    			height = -1;
    			if (row.hpx) height = px2pt(row.hpx);
    			else if (row.hpt) height = row.hpt;
    			if (height > -1) { params.ht = height; params.customHeight = 1; }
    			if (row.level) { params.outlineLevel = row.level; }
    			o[o.length] = (writextag('row', "", params));
    		}
    	}
    	return o.join("");
    }

    function write_ws_xml(idx/*:number*/, opts, wb/*:Workbook*/, rels)/*:string*/ {
    	var o = [XML_HEADER, writextag('worksheet', null, {
    		'xmlns': XMLNS_main[0],
    		'xmlns:r': XMLNS.r
    	})];
    	var s = wb.SheetNames[idx], sidx = 0, rdata = "";
    	var ws = wb.Sheets[s];
    	if(ws == null) ws = {};
    	var ref = ws['!ref'] || 'A1';
    	var range = safe_decode_range(ref);
    	if(range.e.c > 0x3FFF || range.e.r > 0xFFFFF) {
    		if(opts.WTF) throw new Error("Range " + ref + " exceeds format limit A1:XFD1048576");
    		range.e.c = Math.min(range.e.c, 0x3FFF);
    		range.e.r = Math.min(range.e.c, 0xFFFFF);
    		ref = encode_range(range);
    	}
    	if(!rels) rels = {};
    	ws['!comments'] = [];
    	var _drawing = [];

    	write_ws_xml_sheetpr(ws, wb, idx, opts, o);

    	o[o.length] = (writextag('dimension', null, {'ref': ref}));

    	o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);

    	/* TODO: store in WB, process styles */
    	if(opts.sheetFormat) o[o.length] = (writextag('sheetFormatPr', null, {
    		defaultRowHeight:opts.sheetFormat.defaultRowHeight||'16',
    		baseColWidth:opts.sheetFormat.baseColWidth||'10',
    		outlineLevelRow:opts.sheetFormat.outlineLevelRow||'7'
    	}));

    	if(ws['!cols'] != null && ws['!cols'].length > 0) o[o.length] = (write_ws_xml_cols(ws, ws['!cols']));

    	o[sidx = o.length] = '<sheetData/>';
    	ws['!links'] = [];
    	if(ws['!ref'] != null) {
    		rdata = write_ws_xml_data(ws, opts);
    		if(rdata.length > 0) o[o.length] = (rdata);
    	}
    	if(o.length>sidx+1) { o[o.length] = ('</sheetData>'); o[sidx]=o[sidx].replace("/>",">"); }

    	/* sheetCalcPr */

    	if(ws['!protect']) o[o.length] = write_ws_xml_protection(ws['!protect']);

    	/* protectedRanges */
    	/* scenarios */

    	if(ws['!autofilter'] != null) o[o.length] = write_ws_xml_autofilter(ws['!autofilter'], ws, wb, idx);

    	/* sortState */
    	/* dataConsolidate */
    	/* customSheetViews */

    	if(ws['!merges'] != null && ws['!merges'].length > 0) o[o.length] = (write_ws_xml_merges(ws['!merges']));

    	/* phoneticPr */
    	/* conditionalFormatting */
    	/* dataValidations */

    	var relc = -1, rel, rId = -1;
    	if(/*::(*/ws['!links']/*::||[])*/.length > 0) {
    		o[o.length] = "<hyperlinks>";
    		/*::(*/ws['!links']/*::||[])*/.forEach(function(l) {
    			if(!l[1].Target) return;
    			rel = ({"ref":l[0]}/*:any*/);
    			if(l[1].Target.charAt(0) != "#") {
    				rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK);
    				rel["r:id"] = "rId"+rId;
    			}
    			if((relc = l[1].Target.indexOf("#")) > -1) rel.location = escapexml(l[1].Target.slice(relc+1));
    			if(l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);
    			o[o.length] = writextag("hyperlink",null,rel);
    		});
    		o[o.length] = "</hyperlinks>";
    	}
    	delete ws['!links'];

    	/* printOptions */

    	if(ws['!margins'] != null) o[o.length] =  write_ws_xml_margins(ws['!margins']);

    	/* pageSetup */
    	/* headerFooter */
    	/* rowBreaks */
    	/* colBreaks */
    	/* customProperties */
    	/* cellWatches */

    	if(!opts || opts.ignoreEC || (opts.ignoreEC == (void 0))) o[o.length] = writetag("ignoredErrors", writextag("ignoredError", null, {numberStoredAsText:1, sqref:ref}));

    	/* smartTags */

    	if(_drawing.length > 0) {
    		rId = add_rels(rels, -1, "../drawings/drawing" + (idx+1) + ".xml", RELS.DRAW);
    		o[o.length] = writextag("drawing", null, {"r:id":"rId" + rId});
    		ws['!drawing'] = _drawing;
    	}

    	if(ws['!comments'].length > 0) {
    		rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx+1) + ".vml", RELS.VML);
    		o[o.length] = writextag("legacyDrawing", null, {"r:id":"rId" + rId});
    		ws['!legacy'] = rId;
    	}

    	/* legacyDrawingHF */
    	/* picture */
    	/* oleObjects */
    	/* controls */
    	/* webPublishItems */
    	/* tableParts */
    	/* extLst */

    	if(o.length>1) { o[o.length] = ('</worksheet>'); o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }

    /* [MS-XLSB] 2.4.726 BrtRowHdr */
    function parse_BrtRowHdr(data, length) {
    	var z = ({}/*:any*/);
    	var tgt = data.l + length;
    	z.r = data.read_shift(4);
    	data.l += 4; // TODO: ixfe
    	var miyRw = data.read_shift(2);
    	data.l += 1; // TODO: top/bot padding
    	var flags = data.read_shift(1);
    	data.l = tgt;
    	if(flags & 0x07) z.level = flags & 0x07;
    	if(flags & 0x10) z.hidden = true;
    	if(flags & 0x20) z.hpt = miyRw / 20;
    	return z;
    }
    function write_BrtRowHdr(R/*:number*/, range, ws) {
    	var o = new_buf(17+8*16);
    	var row = (ws['!rows']||[])[R]||{};
    	o.write_shift(4, R);

    	o.write_shift(4, 0); /* TODO: ixfe */

    	var miyRw = 0x0140;
    	if(row.hpx) miyRw = px2pt(row.hpx) * 20;
    	else if(row.hpt) miyRw = row.hpt * 20;
    	o.write_shift(2, miyRw);

    	o.write_shift(1, 0); /* top/bot padding */

    	var flags = 0x0;
    	if(row.level) flags |= row.level;
    	if(row.hidden) flags |= 0x10;
    	if(row.hpx || row.hpt) flags |= 0x20;
    	o.write_shift(1, flags);

    	o.write_shift(1, 0); /* phonetic guide */

    	/* [MS-XLSB] 2.5.8 BrtColSpan explains the mechanism */
    	var ncolspan = 0, lcs = o.l;
    	o.l += 4;

    	var caddr = {r:R, c:0};
    	for(var i = 0; i < 16; ++i) {
    		if((range.s.c > ((i+1) << 10)) || (range.e.c < (i << 10))) continue;
    		var first = -1, last = -1;
    		for(var j = (i<<10); j < ((i+1)<<10); ++j) {
    			caddr.c = j;
    			var cell = Array.isArray(ws) ? (ws[caddr.r]||[])[caddr.c] : ws[encode_cell(caddr)];
    			if(cell) { if(first < 0) first = j; last = j; }
    		}
    		if(first < 0) continue;
    		++ncolspan;
    		o.write_shift(4, first);
    		o.write_shift(4, last);
    	}

    	var l = o.l;
    	o.l = lcs;
    	o.write_shift(4, ncolspan);
    	o.l = l;

    	return o.length > o.l ? o.slice(0, o.l) : o;
    }
    function write_row_header(ba, ws, range, R) {
    	var o = write_BrtRowHdr(R, range, ws);
    	if((o.length > 17) || (ws['!rows']||[])[R]) write_record(ba, 0x0000 /* BrtRowHdr */, o);
    }

    /* [MS-XLSB] 2.4.820 BrtWsDim */
    var parse_BrtWsDim = parse_UncheckedRfX;
    var write_BrtWsDim = write_UncheckedRfX;

    /* [MS-XLSB] 2.4.821 BrtWsFmtInfo */
    function parse_BrtWsFmtInfo(/*::data, length*/) {
    }
    //function write_BrtWsFmtInfo(ws, o) { }

    /* [MS-XLSB] 2.4.823 BrtWsProp */
    function parse_BrtWsProp(data, length) {
    	var z = {};
    	var f = data[data.l]; ++data.l;
    	z.above = !(f & 0x40);
    	z.left  = !(f & 0x80);
    	/* TODO: pull flags */
    	data.l += 18;
    	z.name = parse_XLSBCodeName(data);
    	return z;
    }
    function write_BrtWsProp(str, outl, o) {
    	if(o == null) o = new_buf(84+4*str.length);
    	var f = 0xC0;
    	if(outl) {
    		if(outl.above) f &= ~0x40;
    		if(outl.left)  f &= ~0x80;
    	}
    	o.write_shift(1, f);
    	for(var i = 1; i < 3; ++i) o.write_shift(1,0);
    	write_BrtColor({auto:1}, o);
    	o.write_shift(-4,-1);
    	o.write_shift(-4,-1);
    	write_XLSBCodeName(str, o);
    	return o.slice(0, o.l);
    }

    /* [MS-XLSB] 2.4.306 BrtCellBlank */
    function parse_BrtCellBlank(data) {
    	var cell = parse_XLSBCell(data);
    	return [cell];
    }
    function write_BrtCellBlank(cell, ncell, o) {
    	if(o == null) o = new_buf(8);
    	return write_XLSBCell(ncell, o);
    }
    function parse_BrtShortBlank(data) {
    	var cell = parse_XLSBShortCell(data);
    	return [cell];
    }
    function write_BrtShortBlank(cell, ncell, o) {
    	if(o == null) o = new_buf(4);
    	return write_XLSBShortCell(ncell, o);
    }

    /* [MS-XLSB] 2.4.307 BrtCellBool */
    function parse_BrtCellBool(data) {
    	var cell = parse_XLSBCell(data);
    	var fBool = data.read_shift(1);
    	return [cell, fBool, 'b'];
    }
    function write_BrtCellBool(cell, ncell, o) {
    	if(o == null) o = new_buf(9);
    	write_XLSBCell(ncell, o);
    	o.write_shift(1, cell.v ? 1 : 0);
    	return o;
    }
    function parse_BrtShortBool(data) {
    	var cell = parse_XLSBShortCell(data);
    	var fBool = data.read_shift(1);
    	return [cell, fBool, 'b'];
    }
    function write_BrtShortBool(cell, ncell, o) {
    	if(o == null) o = new_buf(5);
    	write_XLSBShortCell(ncell, o);
    	o.write_shift(1, cell.v ? 1 : 0);
    	return o;
    }

    /* [MS-XLSB] 2.4.308 BrtCellError */
    function parse_BrtCellError(data) {
    	var cell = parse_XLSBCell(data);
    	var bError = data.read_shift(1);
    	return [cell, bError, 'e'];
    }
    function write_BrtCellError(cell, ncell, o) {
    	if(o == null) o = new_buf(9);
    	write_XLSBCell(ncell, o);
    	o.write_shift(1, cell.v);
    	return o;
    }
    function parse_BrtShortError(data) {
    	var cell = parse_XLSBShortCell(data);
    	var bError = data.read_shift(1);
    	return [cell, bError, 'e'];
    }
    function write_BrtShortError(cell, ncell, o) {
    	if(o == null) o = new_buf(8);
    	write_XLSBShortCell(ncell, o);
    	o.write_shift(1, cell.v);
    	o.write_shift(2, 0);
    	o.write_shift(1, 0);
    	return o;
    }


    /* [MS-XLSB] 2.4.311 BrtCellIsst */
    function parse_BrtCellIsst(data) {
    	var cell = parse_XLSBCell(data);
    	var isst = data.read_shift(4);
    	return [cell, isst, 's'];
    }
    function write_BrtCellIsst(cell, ncell, o) {
    	if(o == null) o = new_buf(12);
    	write_XLSBCell(ncell, o);
    	o.write_shift(4, ncell.v);
    	return o;
    }
    function parse_BrtShortIsst(data) {
    	var cell = parse_XLSBShortCell(data);
    	var isst = data.read_shift(4);
    	return [cell, isst, 's'];
    }
    function write_BrtShortIsst(cell, ncell, o) {
    	if(o == null) o = new_buf(8);
    	write_XLSBShortCell(ncell, o);
    	o.write_shift(4, ncell.v);
    	return o;
    }

    /* [MS-XLSB] 2.4.313 BrtCellReal */
    function parse_BrtCellReal(data) {
    	var cell = parse_XLSBCell(data);
    	var value = parse_Xnum(data);
    	return [cell, value, 'n'];
    }
    function write_BrtCellReal(cell, ncell, o) {
    	if(o == null) o = new_buf(16);
    	write_XLSBCell(ncell, o);
    	write_Xnum(cell.v, o);
    	return o;
    }
    function parse_BrtShortReal(data) {
    	var cell = parse_XLSBShortCell(data);
    	var value = parse_Xnum(data);
    	return [cell, value, 'n'];
    }
    function write_BrtShortReal(cell, ncell, o) {
    	if(o == null) o = new_buf(12);
    	write_XLSBShortCell(ncell, o);
    	write_Xnum(cell.v, o);
    	return o;
    }

    /* [MS-XLSB] 2.4.314 BrtCellRk */
    function parse_BrtCellRk(data) {
    	var cell = parse_XLSBCell(data);
    	var value = parse_RkNumber(data);
    	return [cell, value, 'n'];
    }
    function write_BrtCellRk(cell, ncell, o) {
    	if(o == null) o = new_buf(12);
    	write_XLSBCell(ncell, o);
    	write_RkNumber(cell.v, o);
    	return o;
    }
    function parse_BrtShortRk(data) {
    	var cell = parse_XLSBShortCell(data);
    	var value = parse_RkNumber(data);
    	return [cell, value, 'n'];
    }
    function write_BrtShortRk(cell, ncell, o) {
    	if(o == null) o = new_buf(8);
    	write_XLSBShortCell(ncell, o);
    	write_RkNumber(cell.v, o);
    	return o;
    }

    /* [MS-XLSB] 2.4.323 BrtCellRString */
    function parse_BrtCellRString(data) {
    	var cell = parse_XLSBCell(data);
    	var value = parse_RichStr(data);
    	return [cell, value, 'is'];
    }

    /* [MS-XLSB] 2.4.317 BrtCellSt */
    function parse_BrtCellSt(data) {
    	var cell = parse_XLSBCell(data);
    	var value = parse_XLWideString(data);
    	return [cell, value, 'str'];
    }
    function write_BrtCellSt(cell, ncell, o) {
    	if(o == null) o = new_buf(12 + 4 * cell.v.length);
    	write_XLSBCell(ncell, o);
    	write_XLWideString(cell.v, o);
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }
    function parse_BrtShortSt(data) {
    	var cell = parse_XLSBShortCell(data);
    	var value = parse_XLWideString(data);
    	return [cell, value, 'str'];
    }
    function write_BrtShortSt(cell, ncell, o) {
    	if(o == null) o = new_buf(8 + 4 * cell.v.length);
    	write_XLSBShortCell(ncell, o);
    	write_XLWideString(cell.v, o);
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.4.653 BrtFmlaBool */
    function parse_BrtFmlaBool(data, length, opts) {
    	var end = data.l + length;
    	var cell = parse_XLSBCell(data);
    	cell.r = opts['!row'];
    	var value = data.read_shift(1);
    	var o = [cell, value, 'b'];
    	if(opts.cellFormula) {
    		data.l += 2;
    		var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    		o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
    	}
    	else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.654 BrtFmlaError */
    function parse_BrtFmlaError(data, length, opts) {
    	var end = data.l + length;
    	var cell = parse_XLSBCell(data);
    	cell.r = opts['!row'];
    	var value = data.read_shift(1);
    	var o = [cell, value, 'e'];
    	if(opts.cellFormula) {
    		data.l += 2;
    		var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    		o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
    	}
    	else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.655 BrtFmlaNum */
    function parse_BrtFmlaNum(data, length, opts) {
    	var end = data.l + length;
    	var cell = parse_XLSBCell(data);
    	cell.r = opts['!row'];
    	var value = parse_Xnum(data);
    	var o = [cell, value, 'n'];
    	if(opts.cellFormula) {
    		data.l += 2;
    		var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    		o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
    	}
    	else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.656 BrtFmlaString */
    function parse_BrtFmlaString(data, length, opts) {
    	var end = data.l + length;
    	var cell = parse_XLSBCell(data);
    	cell.r = opts['!row'];
    	var value = parse_XLWideString(data);
    	var o = [cell, value, 'str'];
    	if(opts.cellFormula) {
    		data.l += 2;
    		var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    		o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
    	}
    	else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.682 BrtMergeCell */
    var parse_BrtMergeCell = parse_UncheckedRfX;
    var write_BrtMergeCell = write_UncheckedRfX;
    /* [MS-XLSB] 2.4.107 BrtBeginMergeCells */
    function write_BrtBeginMergeCells(cnt, o) {
    	if(o == null) o = new_buf(4);
    	o.write_shift(4, cnt);
    	return o;
    }

    /* [MS-XLSB] 2.4.662 BrtHLink */
    function parse_BrtHLink(data, length/*::, opts*/) {
    	var end = data.l + length;
    	var rfx = parse_UncheckedRfX(data);
    	var relId = parse_XLNullableWideString(data);
    	var loc = parse_XLWideString(data);
    	var tooltip = parse_XLWideString(data);
    	var display = parse_XLWideString(data);
    	data.l = end;
    	var o = ({rfx:rfx, relId:relId, loc:loc, display:display}/*:any*/);
    	if(tooltip) o.Tooltip = tooltip;
    	return o;
    }
    function write_BrtHLink(l, rId) {
    	var o = new_buf(50+4*(l[1].Target.length + (l[1].Tooltip || "").length));
    	write_UncheckedRfX({s:decode_cell(l[0]), e:decode_cell(l[0])}, o);
    	write_RelID("rId" + rId, o);
    	var locidx = l[1].Target.indexOf("#");
    	var loc = locidx == -1 ? "" : l[1].Target.slice(locidx+1);
    	write_XLWideString(loc || "", o);
    	write_XLWideString(l[1].Tooltip || "", o);
    	write_XLWideString("", o);
    	return o.slice(0, o.l);
    }

    /* [MS-XLSB] 2.4.692 BrtPane */
    function parse_BrtPane(/*data, length, opts*/) {
    }

    /* [MS-XLSB] 2.4.6 BrtArrFmla */
    function parse_BrtArrFmla(data, length, opts) {
    	var end = data.l + length;
    	var rfx = parse_RfX(data);
    	var fAlwaysCalc = data.read_shift(1);
    	var o = [rfx]; o[2] = fAlwaysCalc;
    	if(opts.cellFormula) {
    		var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
    		o[1] = formula;
    	} else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.750 BrtShrFmla */
    function parse_BrtShrFmla(data, length, opts) {
    	var end = data.l + length;
    	var rfx = parse_UncheckedRfX(data);
    	var o = [rfx];
    	if(opts.cellFormula) {
    		var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
    		o[1] = formula;
    		data.l = end;
    	} else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.323 BrtColInfo */
    /* TODO: once XLS ColInfo is set, combine the functions */
    function write_BrtColInfo(C/*:number*/, col, o) {
    	if(o == null) o = new_buf(18);
    	var p = col_obj_w(C, col);
    	o.write_shift(-4, C);
    	o.write_shift(-4, C);
    	o.write_shift(4, (p.width || 10) * 256);
    	o.write_shift(4, 0/*ixfe*/); // style
    	var flags = 0;
    	if(col.hidden) flags |= 0x01;
    	if(typeof p.width == 'number') flags |= 0x02;
    	if(col.level) flags |= (col.level << 8);
    	o.write_shift(2, flags); // bit flag
    	return o;
    }

    /* [MS-XLSB] 2.4.678 BrtMargins */
    var BrtMarginKeys = ["left","right","top","bottom","header","footer"];
    function parse_BrtMargins(data/*::, length, opts*/)/*:Margins*/ {
    	var margins = ({}/*:any*/);
    	BrtMarginKeys.forEach(function(k) { margins[k] = parse_Xnum(data); });
    	return margins;
    }
    function write_BrtMargins(margins/*:Margins*/, o) {
    	if(o == null) o = new_buf(6*8);
    	default_margins(margins);
    	BrtMarginKeys.forEach(function(k) { write_Xnum((margins/*:any*/)[k], o); });
    	return o;
    }

    /* [MS-XLSB] 2.4.299 BrtBeginWsView */
    function parse_BrtBeginWsView(data/*::, length, opts*/) {
    	var f = data.read_shift(2);
    	data.l += 28;
    	return { RTL: f & 0x20 };
    }
    function write_BrtBeginWsView(ws, Workbook, o) {
    	if(o == null) o = new_buf(30);
    	var f = 0x39c;
    	if((((Workbook||{}).Views||[])[0]||{}).RTL) f |= 0x20;
    	o.write_shift(2, f); // bit flag
    	o.write_shift(4, 0);
    	o.write_shift(4, 0); // view first row
    	o.write_shift(4, 0); // view first col
    	o.write_shift(1, 0); // gridline color ICV
    	o.write_shift(1, 0);
    	o.write_shift(2, 0);
    	o.write_shift(2, 100); // zoom scale
    	o.write_shift(2, 0);
    	o.write_shift(2, 0);
    	o.write_shift(2, 0);
    	o.write_shift(4, 0); // workbook view id
    	return o;
    }

    /* [MS-XLSB] 2.4.309 BrtCellIgnoreEC */
    function write_BrtCellIgnoreEC(ref) {
    	var o = new_buf(24);
    	o.write_shift(4, 4);
    	o.write_shift(4, 1);
    	write_UncheckedRfX(ref, o);
    	return o;
    }

    /* [MS-XLSB] 2.4.748 BrtSheetProtection */
    function write_BrtSheetProtection(sp, o) {
    	if(o == null) o = new_buf(16*4+2);
    	o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
    	o.write_shift(4, 1); // this record should not be written if no protection
    	[
    		["objects",             false], // fObjects
    		["scenarios",           false], // fScenarios
    		["formatCells",          true], // fFormatCells
    		["formatColumns",        true], // fFormatColumns
    		["formatRows",           true], // fFormatRows
    		["insertColumns",        true], // fInsertColumns
    		["insertRows",           true], // fInsertRows
    		["insertHyperlinks",     true], // fInsertHyperlinks
    		["deleteColumns",        true], // fDeleteColumns
    		["deleteRows",           true], // fDeleteRows
    		["selectLockedCells",   false], // fSelLockedCells
    		["sort",                 true], // fSort
    		["autoFilter",           true], // fAutoFilter
    		["pivotTables",          true], // fPivotTables
    		["selectUnlockedCells", false]  // fSelUnlockedCells
    	].forEach(function(n) {
    		/*:: if(o == null) throw "unreachable"; */
    		if(n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);
    		else      o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
    	});
    	return o;
    }

    function parse_BrtDVal(/*data, length, opts*/) {
    }
    function parse_BrtDVal14(/*data, length, opts*/) {
    }
    /* [MS-XLSB] 2.1.7.61 Worksheet */
    function parse_ws_bin(data, _opts, idx, rels, wb/*:WBWBProps*/, themes, styles)/*:Worksheet*/ {
    	if(!data) return data;
    	var opts = _opts || {};
    	if(!rels) rels = {'!id':{}};
    	var s/*:Worksheet*/ = (opts.dense ? [] : {});

    	var ref;
    	var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
    	var pass = false, end = false;
    	var row, p, cf, R, C, addr, sstr, rr, cell/*:Cell*/;
    	var merges/*:Array<Range>*/ = [];
    	opts.biff = 12;
    	opts['!row'] = 0;

    	var ai = 0, af = false;

    	var arrayf/*:Array<[Range, string]>*/ = [];
    	var sharedf = {};
    	var supbooks = opts.supbooks || /*::(*/wb/*:: :any)*/.supbooks || ([[]]/*:any*/);
    	supbooks.sharedf = sharedf;
    	supbooks.arrayf = arrayf;
    	supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) { return x.name; });
    	if(!opts.supbooks) {
    		opts.supbooks = supbooks;
    		if(wb.Names) for(var i = 0; i < wb.Names.length; ++i) supbooks[0][i+1] = wb.Names[i];
    	}

    	var colinfo/*:Array<ColInfo>*/ = [], rowinfo/*:Array<RowInfo>*/ = [];
    	var seencol = false;

    	XLSBRecordEnum[0x0010] = { n:"BrtShortReal", f:parse_BrtShortReal };

    	var cm;

    	recordhopper(data, function ws_parse(val, RR, RT) {
    		if(end) return;
    		switch(RT) {
    			case 0x0094: /* 'BrtWsDim' */
    				ref = val; break;
    			case 0x0000: /* 'BrtRowHdr' */
    				row = val;
    				if(opts.sheetRows && opts.sheetRows <= row.r) end=true;
    				rr = encode_row(R = row.r);
    				opts['!row'] = row.r;
    				if(val.hidden || val.hpt || val.level != null) {
    					if(val.hpt) val.hpx = pt2px(val.hpt);
    					rowinfo[val.r] = val;
    				}
    				break;

    			case 0x0002: /* 'BrtCellRk' */
    			case 0x0003: /* 'BrtCellError' */
    			case 0x0004: /* 'BrtCellBool' */
    			case 0x0005: /* 'BrtCellReal' */
    			case 0x0006: /* 'BrtCellSt' */
    			case 0x0007: /* 'BrtCellIsst' */
    			case 0x0008: /* 'BrtFmlaString' */
    			case 0x0009: /* 'BrtFmlaNum' */
    			case 0x000A: /* 'BrtFmlaBool' */
    			case 0x000B: /* 'BrtFmlaError' */
    			case 0x000D: /* 'BrtShortRk' */
    			case 0x000E: /* 'BrtShortError' */
    			case 0x000F: /* 'BrtShortBool' */
    			case 0x0010: /* 'BrtShortReal' */
    			case 0x0011: /* 'BrtShortSt' */
    			case 0x0012: /* 'BrtShortIsst' */
    			case 0x003E: /* 'BrtCellRString' */
    				p = ({t:val[2]}/*:any*/);
    				switch(val[2]) {
    					case 'n': p.v = val[1]; break;
    					case 's': sstr = strs[val[1]]; p.v = sstr.t; p.r = sstr.r; break;
    					case 'b': p.v = val[1] ? true : false; break;
    					case 'e': p.v = val[1]; if(opts.cellText !== false) p.w = BErr[p.v]; break;
    					case 'str': p.t = 's'; p.v = val[1]; break;
    					case 'is': p.t = 's'; p.v = val[1].t; break;
    				}
    				if((cf = styles.CellXf[val[0].iStyleRef])) safe_format(p,cf.numFmtId,null,opts, themes, styles);
    				C = val[0].c == -1 ? C + 1 : val[0].c;
    				if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
    				else s[encode_col(C) + rr] = p;
    				if(opts.cellFormula) {
    					af = false;
    					for(ai = 0; ai < arrayf.length; ++ai) {
    						var aii = arrayf[ai];
    						if(row.r >= aii[0].s.r && row.r <= aii[0].e.r)
    							if(C >= aii[0].s.c && C <= aii[0].e.c) {
    								p.F = encode_range(aii[0]); af = true;
    							}
    					}
    					if(!af && val.length > 3) p.f = val[3];
    				}

    				if(refguess.s.r > row.r) refguess.s.r = row.r;
    				if(refguess.s.c > C) refguess.s.c = C;
    				if(refguess.e.r < row.r) refguess.e.r = row.r;
    				if(refguess.e.c < C) refguess.e.c = C;
    				if(opts.cellDates && cf && p.t == 'n' && fmt_is_date(table_fmt[cf.numFmtId])) {
    					var _d = SSF_parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
    				}
    				if(cm) {
    					if(cm.type == 'XLDAPR') p.D = true;
    					cm = void 0;
    				}
    				break;

    			case 0x0001: /* 'BrtCellBlank' */
    			case 0x000C: /* 'BrtShortBlank' */
    				if(!opts.sheetStubs || pass) break;
    				p = ({t:'z',v:void 0}/*:any*/);
    				C = val[0].c == -1 ? C + 1 : val[0].c;
    				if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
    				else s[encode_col(C) + rr] = p;
    				if(refguess.s.r > row.r) refguess.s.r = row.r;
    				if(refguess.s.c > C) refguess.s.c = C;
    				if(refguess.e.r < row.r) refguess.e.r = row.r;
    				if(refguess.e.c < C) refguess.e.c = C;
    				if(cm) {
    					if(cm.type == 'XLDAPR') p.D = true;
    					cm = void 0;
    				}
    				break;

    			case 0x00B0: /* 'BrtMergeCell' */
    				merges.push(val); break;

    			case 0x0031: { /* 'BrtCellMeta' */
    				cm = ((opts.xlmeta||{}).Cell||[])[val-1];
    			} break;

    			case 0x01EE: /* 'BrtHLink' */
    				var rel = rels['!id'][val.relId];
    				if(rel) {
    					val.Target = rel.Target;
    					if(val.loc) val.Target += "#"+val.loc;
    					val.Rel = rel;
    				} else if(val.relId == '') {
    					val.Target = "#" + val.loc;
    				}
    				for(R=val.rfx.s.r;R<=val.rfx.e.r;++R) for(C=val.rfx.s.c;C<=val.rfx.e.c;++C) {
    					if(opts.dense) {
    						if(!s[R]) s[R] = [];
    						if(!s[R][C]) s[R][C] = {t:'z',v:undefined};
    						s[R][C].l = val;
    					} else {
    						addr = encode_cell({c:C,r:R});
    						if(!s[addr]) s[addr] = {t:'z',v:undefined};
    						s[addr].l = val;
    					}
    				}
    				break;

    			case 0x01AA: /* 'BrtArrFmla' */
    				if(!opts.cellFormula) break;
    				arrayf.push(val);
    				cell = ((opts.dense ? s[R][C] : s[encode_col(C) + rr])/*:any*/);
    				cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
    				cell.F = encode_range(val[0]);
    				break;
    			case 0x01AB: /* 'BrtShrFmla' */
    				if(!opts.cellFormula) break;
    				sharedf[encode_cell(val[0].s)] = val[1];
    				cell = (opts.dense ? s[R][C] : s[encode_col(C) + rr]);
    				cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
    				break;

    			/* identical to 'ColInfo' in XLS */
    			case 0x003C: /* 'BrtColInfo' */
    				if(!opts.cellStyles) break;
    				while(val.e >= val.s) {
    					colinfo[val.e--] = { width: val.w/256, hidden: !!(val.flags & 0x01), level: val.level };
    					if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
    					process_col(colinfo[val.e+1]);
    				}
    				break;

    			case 0x00A1: /* 'BrtBeginAFilter' */
    				s['!autofilter'] = { ref:encode_range(val) };
    				break;

    			case 0x01DC: /* 'BrtMargins' */
    				s['!margins'] = val;
    				break;

    			case 0x0093: /* 'BrtWsProp' */
    				if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
    				if(val.name) wb.Sheets[idx].CodeName = val.name;
    				if(val.above || val.left) s['!outline'] = { above: val.above, left: val.left };
    				break;

    			case 0x0089: /* 'BrtBeginWsView' */
    				if(!wb.Views) wb.Views = [{}];
    				if(!wb.Views[0]) wb.Views[0] = {};
    				if(val.RTL) wb.Views[0].RTL = true;
    				break;

    			case 0x01E5: /* 'BrtWsFmtInfo' */
    				break;

    			case 0x0040: /* 'BrtDVal' */
    			case 0x041D: /* 'BrtDVal14' */
    				break;

    			case 0x0097: /* 'BrtPane' */
    				break;
    			case 0x0098: /* 'BrtSel' */
    			case 0x00AF: /* 'BrtAFilterDateGroupItem' */
    			case 0x0284: /* 'BrtActiveX' */
    			case 0x0271: /* 'BrtBigName' */
    			case 0x0232: /* 'BrtBkHim' */
    			case 0x018C: /* 'BrtBrk' */
    			case 0x0458: /* 'BrtCFIcon' */
    			case 0x047A: /* 'BrtCFRuleExt' */
    			case 0x01D7: /* 'BrtCFVO' */
    			case 0x041A: /* 'BrtCFVO14' */
    			case 0x0289: /* 'BrtCellIgnoreEC' */
    			case 0x0451: /* 'BrtCellIgnoreEC14' */
    			case 0x024D: /* 'BrtCellSmartTagProperty' */
    			case 0x025F: /* 'BrtCellWatch' */
    			case 0x0234: /* 'BrtColor' */
    			case 0x041F: /* 'BrtColor14' */
    			case 0x00A8: /* 'BrtColorFilter' */
    			case 0x00AE: /* 'BrtCustomFilter' */
    			case 0x049C: /* 'BrtCustomFilter14' */
    			case 0x01F3: /* 'BrtDRef' */
    			case 0x01FB: /* 'BrtDXF' */
    			case 0x0226: /* 'BrtDrawing' */
    			case 0x00AB: /* 'BrtDynamicFilter' */
    			case 0x00A7: /* 'BrtFilter' */
    			case 0x0499: /* 'BrtFilter14' */
    			case 0x00A9: /* 'BrtIconFilter' */
    			case 0x049D: /* 'BrtIconFilter14' */
    			case 0x0227: /* 'BrtLegacyDrawing' */
    			case 0x0228: /* 'BrtLegacyDrawingHF' */
    			case 0x0295: /* 'BrtListPart' */
    			case 0x027F: /* 'BrtOleObject' */
    			case 0x01DE: /* 'BrtPageSetup' */
    			case 0x0219: /* 'BrtPhoneticInfo' */
    			case 0x01DD: /* 'BrtPrintOptions' */
    			case 0x0218: /* 'BrtRangeProtection' */
    			case 0x044F: /* 'BrtRangeProtection14' */
    			case 0x02A8: /* 'BrtRangeProtectionIso' */
    			case 0x0450: /* 'BrtRangeProtectionIso14' */
    			case 0x0400: /* 'BrtRwDescent' */
    			case 0x0297: /* 'BrtSheetCalcProp' */
    			case 0x0217: /* 'BrtSheetProtection' */
    			case 0x02A6: /* 'BrtSheetProtectionIso' */
    			case 0x01F8: /* 'BrtSlc' */
    			case 0x0413: /* 'BrtSparkline' */
    			case 0x01AC: /* 'BrtTable' */
    			case 0x00AA: /* 'BrtTop10Filter' */
    			case 0x0C00: /* 'BrtUid' */
    			case 0x0032: /* 'BrtValueMeta' */
    			case 0x0816: /* 'BrtWebExtension' */
    			case 0x0415: /* 'BrtWsFmtInfoEx14' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				pass = false; break;
    			case 0x0025: /* 'BrtACBegin' */
     pass = true; break;
    			case 0x0026: /* 'BrtACEnd' */
     pass = false; break;

    			default:
    				if(RR.T);
    				else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	}, opts);

    	delete opts.supbooks;
    	delete opts['!row'];

    	if(!s["!ref"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);
    	if(opts.sheetRows && s["!ref"]) {
    		var tmpref = safe_decode_range(s["!ref"]);
    		if(opts.sheetRows <= +tmpref.e.r) {
    			tmpref.e.r = opts.sheetRows - 1;
    			if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
    			if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
    			if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
    			if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
    			s["!fullref"] = s["!ref"];
    			s["!ref"] = encode_range(tmpref);
    		}
    	}
    	if(merges.length > 0) s["!merges"] = merges;
    	if(colinfo.length > 0) s["!cols"] = colinfo;
    	if(rowinfo.length > 0) s["!rows"] = rowinfo;
    	return s;
    }

    /* TODO: something useful -- this is a stub */
    function write_ws_bin_cell(ba/*:BufArray*/, cell/*:Cell*/, R/*:number*/, C/*:number*/, opts, ws/*:Worksheet*/, last_seen/*:boolean*/)/*:boolean*/ {
    	if(cell.v === undefined) return false;
    	var vv = "";
    	switch(cell.t) {
    		case 'b': vv = cell.v ? "1" : "0"; break;
    		case 'd': // no BrtCellDate :(
    			cell = dup(cell);
    			cell.z = cell.z || table_fmt[14];
    			cell.v = datenum(parseDate(cell.v)); cell.t = 'n';
    			break;
    		/* falls through */
    		case 'n': case 'e': vv = ''+cell.v; break;
    		default: vv = cell.v; break;
    	}
    	var o/*:any*/ = ({r:R, c:C}/*:any*/);
    	/* TODO: cell style */
    	o.s = get_cell_style(opts.cellXfs, cell, opts);
    	if(cell.l) ws['!links'].push([encode_cell(o), cell.l]);
    	if(cell.c) ws['!comments'].push([encode_cell(o), cell.c]);
    	switch(cell.t) {
    		case 's': case 'str':
    			if(opts.bookSST) {
    				vv = get_sst_id(opts.Strings, (cell.v/*:any*/), opts.revStrings);
    				o.t = "s"; o.v = vv;
    				if(last_seen) write_record(ba, 0x0012 /* BrtShortIsst */, write_BrtShortIsst(cell, o));
    				else write_record(ba, 0x0007 /* BrtCellIsst */, write_BrtCellIsst(cell, o));
    			} else {
    				o.t = "str";
    				if(last_seen) write_record(ba, 0x0011 /* BrtShortSt */, write_BrtShortSt(cell, o));
    				else write_record(ba, 0x0006 /* BrtCellSt */, write_BrtCellSt(cell, o));
    			}
    			return true;
    		case 'n':
    			/* TODO: determine threshold for Real vs RK */
    			if(cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) {
    				if(last_seen) write_record(ba, 0x000D /* BrtShortRk */, write_BrtShortRk(cell, o));
    				else write_record(ba, 0x0002 /* BrtCellRk */, write_BrtCellRk(cell, o));
    			} else {
    				if(last_seen) write_record(ba, 0x0010 /* BrtShortReal */, write_BrtShortReal(cell, o));
    				else write_record(ba, 0x0005 /* BrtCellReal */, write_BrtCellReal(cell, o));
    			} return true;
    		case 'b':
    			o.t = "b";
    			if(last_seen) write_record(ba, 0x000F /* BrtShortBool */, write_BrtShortBool(cell, o));
    			else write_record(ba, 0x0004 /* BrtCellBool */, write_BrtCellBool(cell, o));
    			return true;
    		case 'e':
    			o.t = "e";
    			if(last_seen) write_record(ba, 0x000E /* BrtShortError */, write_BrtShortError(cell, o));
    			else write_record(ba, 0x0003 /* BrtCellError */, write_BrtCellError(cell, o));
    			return true;
    	}
    	if(last_seen) write_record(ba, 0x000C /* BrtShortBlank */, write_BrtShortBlank(cell, o));
    	else write_record(ba, 0x0001 /* BrtCellBlank */, write_BrtCellBlank(cell, o));
    	return true;
    }

    function write_CELLTABLE(ba, ws/*:Worksheet*/, idx/*:number*/, opts/*::, wb:Workbook*/) {
    	var range = safe_decode_range(ws['!ref'] || "A1"), ref, rr = "", cols/*:Array<string>*/ = [];
    	write_record(ba, 0x0091 /* BrtBeginSheetData */);
    	var dense = Array.isArray(ws);
    	var cap = range.e.r;
    	if(ws['!rows']) cap = Math.max(range.e.r, ws['!rows'].length - 1);
    	for(var R = range.s.r; R <= cap; ++R) {
    		rr = encode_row(R);
    		/* [ACCELLTABLE] */
    		/* BrtRowHdr */
    		write_row_header(ba, ws, range, R);
    		var last_seen = false;
    		if(R <= range.e.r) for(var C = range.s.c; C <= range.e.c; ++C) {
    			/* *16384CELL */
    			if(R === range.s.r) cols[C] = encode_col(C);
    			ref = cols[C] + rr;
    			var cell = dense ? (ws[R]||[])[C] : ws[ref];
    			if(!cell) { last_seen = false; continue; }
    			/* write cell */
    			last_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen);
    		}
    	}
    	write_record(ba, 0x0092 /* BrtEndSheetData */);
    }

    function write_MERGECELLS(ba, ws/*:Worksheet*/) {
    	if(!ws || !ws['!merges']) return;
    	write_record(ba, 0x00B1 /* BrtBeginMergeCells */, write_BrtBeginMergeCells(ws['!merges'].length));
    	ws['!merges'].forEach(function(m) { write_record(ba, 0x00B0 /* BrtMergeCell */, write_BrtMergeCell(m)); });
    	write_record(ba, 0x00B2 /* BrtEndMergeCells */);
    }

    function write_COLINFOS(ba, ws/*:Worksheet*//*::, idx:number, opts, wb:Workbook*/) {
    	if(!ws || !ws['!cols']) return;
    	write_record(ba, 0x0186 /* BrtBeginColInfos */);
    	ws['!cols'].forEach(function(m, i) { if(m) write_record(ba, 0x003C /* 'BrtColInfo' */, write_BrtColInfo(i, m)); });
    	write_record(ba, 0x0187 /* BrtEndColInfos */);
    }

    function write_IGNOREECS(ba, ws/*:Worksheet*/) {
    	if(!ws || !ws['!ref']) return;
    	write_record(ba, 0x0288 /* BrtBeginCellIgnoreECs */);
    	write_record(ba, 0x0289 /* BrtCellIgnoreEC */, write_BrtCellIgnoreEC(safe_decode_range(ws['!ref'])));
    	write_record(ba, 0x028A /* BrtEndCellIgnoreECs */);
    }

    function write_HLINKS(ba, ws/*:Worksheet*/, rels) {
    	/* *BrtHLink */
    	ws['!links'].forEach(function(l) {
    		if(!l[1].Target) return;
    		var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK);
    		write_record(ba, 0x01EE /* BrtHLink */, write_BrtHLink(l, rId));
    	});
    	delete ws['!links'];
    }
    function write_LEGACYDRAWING(ba, ws/*:Worksheet*/, idx/*:number*/, rels) {
    	/* [BrtLegacyDrawing] */
    	if(ws['!comments'].length > 0) {
    		var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx+1) + ".vml", RELS.VML);
    		write_record(ba, 0x0227 /* BrtLegacyDrawing */, write_RelID("rId" + rId));
    		ws['!legacy'] = rId;
    	}
    }

    function write_AUTOFILTER(ba, ws, wb, idx) {
    	if(!ws['!autofilter']) return;
    	var data = ws['!autofilter'];
    	var ref = typeof data.ref === "string" ? data.ref : encode_range(data.ref);

    	/* Update FilterDatabase defined name for the worksheet */
    	if(!wb.Workbook) wb.Workbook = ({Sheets:[]}/*:any*/);
    	if(!wb.Workbook.Names) wb.Workbook.Names = [];
    	var names/*: Array<any> */ = wb.Workbook.Names;
    	var range = decode_range(ref);
    	if(range.s.r == range.e.r) { range.e.r = decode_range(ws["!ref"]).e.r; ref = encode_range(range); }
    	for(var i = 0; i < names.length; ++i) {
    		var name = names[i];
    		if(name.Name != '_xlnm._FilterDatabase') continue;
    		if(name.Sheet != idx) continue;
    		name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref; break;
    	}
    	if(i == names.length) names.push({ Name: '_xlnm._FilterDatabase', Sheet: idx, Ref: "'" + wb.SheetNames[idx] + "'!" + ref  });

    	write_record(ba, 0x00A1 /* BrtBeginAFilter */, write_UncheckedRfX(safe_decode_range(ref)));
    	/* *FILTERCOLUMN */
    	/* [SORTSTATE] */
    	/* BrtEndAFilter */
    	write_record(ba, 0x00A2 /* BrtEndAFilter */);
    }

    function write_WSVIEWS2(ba, ws, Workbook) {
    	write_record(ba, 0x0085 /* BrtBeginWsViews */);
    	{ /* 1*WSVIEW2 */
    		/* [ACUID] */
    		write_record(ba, 0x0089 /* BrtBeginWsView */, write_BrtBeginWsView(ws, Workbook));
    		/* [BrtPane] */
    		/* *4BrtSel */
    		/* *4SXSELECT */
    		/* *FRT */
    		write_record(ba, 0x008A /* BrtEndWsView */);
    	}
    	/* *FRT */
    	write_record(ba, 0x0086 /* BrtEndWsViews */);
    }

    function write_SHEETPROTECT(ba, ws) {
    	if(!ws['!protect']) return;
    	/* [BrtSheetProtectionIso] */
    	write_record(ba, 0x0217 /* BrtSheetProtection */, write_BrtSheetProtection(ws['!protect']));
    }

    function write_ws_bin(idx/*:number*/, opts, wb/*:Workbook*/, rels) {
    	var ba = buf_array();
    	var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
    	var c/*:string*/ = s; try { if(wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c; } catch(e) {}
    	var r = safe_decode_range(ws['!ref'] || "A1");
    	if(r.e.c > 0x3FFF || r.e.r > 0xFFFFF) {
    		if(opts.WTF) throw new Error("Range " + (ws['!ref'] || "A1") + " exceeds format limit A1:XFD1048576");
    		r.e.c = Math.min(r.e.c, 0x3FFF);
    		r.e.r = Math.min(r.e.c, 0xFFFFF);
    	}
    	ws['!links'] = [];
    	/* passed back to write_zip and removed there */
    	ws['!comments'] = [];
    	write_record(ba, 0x0081 /* BrtBeginSheet */);
    	if(wb.vbaraw || ws['!outline']) write_record(ba, 0x0093 /* BrtWsProp */, write_BrtWsProp(c, ws['!outline']));
    	write_record(ba, 0x0094 /* BrtWsDim */, write_BrtWsDim(r));
    	write_WSVIEWS2(ba, ws, wb.Workbook);
    	write_COLINFOS(ba, ws);
    	write_CELLTABLE(ba, ws, idx, opts);
    	/* [BrtSheetCalcProp] */
    	write_SHEETPROTECT(ba, ws);
    	/* *([BrtRangeProtectionIso] BrtRangeProtection) */
    	/* [SCENMAN] */
    	write_AUTOFILTER(ba, ws, wb, idx);
    	/* [SORTSTATE] */
    	/* [DCON] */
    	/* [USERSHVIEWS] */
    	write_MERGECELLS(ba, ws);
    	/* [BrtPhoneticInfo] */
    	/* *CONDITIONALFORMATTING */
    	/* [DVALS] */
    	write_HLINKS(ba, ws, rels);
    	/* [BrtPrintOptions] */
    	if(ws['!margins']) write_record(ba, 0x01DC /* BrtMargins */, write_BrtMargins(ws['!margins']));
    	/* [BrtPageSetup] */
    	/* [HEADERFOOTER] */
    	/* [RWBRK] */
    	/* [COLBRK] */
    	/* *BrtBigName */
    	/* [CELLWATCHES] */
    	if(!opts || opts.ignoreEC || (opts.ignoreEC == (void 0))) write_IGNOREECS(ba, ws);
    	/* [SMARTTAGS] */
    	/* [BrtDrawing] */
    	write_LEGACYDRAWING(ba, ws, idx, rels);
    	/* [BrtLegacyDrawingHF] */
    	/* [BrtBkHim] */
    	/* [OLEOBJECTS] */
    	/* [ACTIVEXCONTROLS] */
    	/* [WEBPUBITEMS] */
    	/* [LISTPARTS] */
    	/* FRTWORKSHEET */
    	write_record(ba, 0x0082 /* BrtEndSheet */);
    	return ba.end();
    }
    function parse_Cache(data/*:string*/)/*:[Array<number|string>, string, ?string]*/ {
    	var col/*:Array<number|string>*/ = [];
    	var num = data.match(/^<c:numCache>/);
    	var f;

    	/* 21.2.2.150 pt CT_NumVal */
    	(data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg)||[]).forEach(function(pt) {
    		var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
    		if(!q) return;
    		col[+q[1]] = num ? +q[2] : q[2];
    	});

    	/* 21.2.2.71 formatCode CT_Xstring */
    	var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["","General"])[1]);

    	(data.match(/<c:f>(.*?)<\/c:f>/mg)||[]).forEach(function(F) { f = F.replace(/<.*?>/g,""); });

    	return [col, nf, f];
    }

    /* 21.2 DrawingML - Charts */
    function parse_chart(data/*:?string*/, name/*:string*/, opts, rels, wb, csheet) {
    	var cs/*:Worksheet*/ = ((csheet || {"!type":"chart"})/*:any*/);
    	if(!data) return csheet;
    	/* 21.2.2.27 chart CT_Chart */

    	var C = 0, R = 0, col = "A";
    	var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };

    	/* 21.2.2.120 numCache CT_NumData */
    	(data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm)||[]).forEach(function(nc) {
    		var cache = parse_Cache(nc);
    		refguess.s.r = refguess.s.c = 0;
    		refguess.e.c = C;
    		col = encode_col(C);
    		cache[0].forEach(function(n,i) {
    			cs[col + encode_row(i)] = {t:'n', v:n, z:cache[1] };
    			R = i;
    		});
    		if(refguess.e.r < R) refguess.e.r = R;
    		++C;
    	});
    	if(C > 0) cs["!ref"] = encode_range(refguess);
    	return cs;
    }
    /* 18.3 Worksheets also covers Chartsheets */
    function parse_cs_xml(data/*:?string*/, opts, idx/*:number*/, rels, wb/*::, themes, styles*/)/*:Worksheet*/ {
    	if(!data) return data;
    	/* 18.3.1.12 chartsheet CT_ChartSheet */
    	if(!rels) rels = {'!id':{}};
    	var s = ({'!type':"chart", '!drawel':null, '!rel':""}/*:any*/);
    	var m;

    	/* 18.3.1.83 sheetPr CT_ChartsheetPr */
    	var sheetPr = data.match(sheetprregex);
    	if(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);

    	/* 18.3.1.36 drawing CT_Drawing */
    	if((m = data.match(/drawing r:id="(.*?)"/))) s['!rel'] = m[1];

    	if(rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];
    	return s;
    }

    /* [MS-XLSB] 2.4.331 BrtCsProp */
    function parse_BrtCsProp(data, length/*:number*/) {
    	data.l += 10;
    	var name = parse_XLWideString(data);
    	return { name: name };
    }

    /* [MS-XLSB] 2.1.7.7 Chart Sheet */
    function parse_cs_bin(data, opts, idx/*:number*/, rels, wb/*::, themes, styles*/)/*:Worksheet*/ {
    	if(!data) return data;
    	if(!rels) rels = {'!id':{}};
    	var s = {'!type':"chart", '!drawel':null, '!rel':""};
    	var pass = false;
    	recordhopper(data, function cs_parse(val, R, RT) {
    		switch(RT) {

    			case 0x0226: /* 'BrtDrawing' */
    				s['!rel'] = val; break;

    			case 0x028B: /* 'BrtCsProp' */
    				if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
    				if(val.name) wb.Sheets[idx].CodeName = val.name;
    				break;

    			case 0x0232: /* 'BrtBkHim' */
    			case 0x028C: /* 'BrtCsPageSetup' */
    			case 0x029D: /* 'BrtCsProtection' */
    			case 0x02A7: /* 'BrtCsProtectionIso' */
    			case 0x0227: /* 'BrtLegacyDrawing' */
    			case 0x0228: /* 'BrtLegacyDrawingHF' */
    			case 0x01DC: /* 'BrtMargins' */
    			case 0x0C00: /* 'BrtUid' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				pass = false; break;
    			case 0x0025: /* 'BrtACBegin' */
     break;
    			case 0x0026: /* 'BrtACEnd' */
     break;

    			default:
    				if(R.T > 0) ;
    				else if(R.T < 0) ;
    				else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	}, opts);

    	if(rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];
    	return s;
    }
    /* 18.2.28 (CT_WorkbookProtection) Defaults */
    var WBPropsDef = [
    	['allowRefreshQuery',           false, "bool"],
    	['autoCompressPictures',        true,  "bool"],
    	['backupFile',                  false, "bool"],
    	['checkCompatibility',          false, "bool"],
    	['CodeName',                    ''],
    	['date1904',                    false, "bool"],
    	['defaultThemeVersion',         0,      "int"],
    	['filterPrivacy',               false, "bool"],
    	['hidePivotFieldList',          false, "bool"],
    	['promptedSolutions',           false, "bool"],
    	['publishItems',                false, "bool"],
    	['refreshAllConnections',       false, "bool"],
    	['saveExternalLinkValues',      true,  "bool"],
    	['showBorderUnselectedTables',  true,  "bool"],
    	['showInkAnnotation',           true,  "bool"],
    	['showObjects',                 'all'],
    	['showPivotChartFilter',        false, "bool"],
    	['updateLinks', 'userSet']
    ];

    /* 18.2.30 (CT_BookView) Defaults */
    var WBViewDef = [
    	['activeTab',                   0,      "int"],
    	['autoFilterDateGrouping',      true,  "bool"],
    	['firstSheet',                  0,      "int"],
    	['minimized',                   false, "bool"],
    	['showHorizontalScroll',        true,  "bool"],
    	['showSheetTabs',               true,  "bool"],
    	['showVerticalScroll',          true,  "bool"],
    	['tabRatio',                    600,    "int"],
    	['visibility',                  'visible']
    	//window{Height,Width}, {x,y}Window
    ];

    /* 18.2.19 (CT_Sheet) Defaults */
    var SheetDef = [
    	//['state', 'visible']
    ];

    /* 18.2.2  (CT_CalcPr) Defaults */
    var CalcPrDef = [
    	['calcCompleted', 'true'],
    	['calcMode', 'auto'],
    	['calcOnSave', 'true'],
    	['concurrentCalc', 'true'],
    	['fullCalcOnLoad', 'false'],
    	['fullPrecision', 'true'],
    	['iterate', 'false'],
    	['iterateCount', '100'],
    	['iterateDelta', '0.001'],
    	['refMode', 'A1']
    ];

    /* 18.2.3 (CT_CustomWorkbookView) Defaults */
    /*var CustomWBViewDef = [
    	['autoUpdate', 'false'],
    	['changesSavedWin', 'false'],
    	['includeHiddenRowCol', 'true'],
    	['includePrintSettings', 'true'],
    	['maximized', 'false'],
    	['minimized', 'false'],
    	['onlySync', 'false'],
    	['personalView', 'false'],
    	['showComments', 'commIndicator'],
    	['showFormulaBar', 'true'],
    	['showHorizontalScroll', 'true'],
    	['showObjects', 'all'],
    	['showSheetTabs', 'true'],
    	['showStatusbar', 'true'],
    	['showVerticalScroll', 'true'],
    	['tabRatio', '600'],
    	['xWindow', '0'],
    	['yWindow', '0']
    ];*/

    function push_defaults_array(target, defaults) {
    	for(var j = 0; j != target.length; ++j) { var w = target[j];
    		for(var i=0; i != defaults.length; ++i) { var z = defaults[i];
    			if(w[z[0]] == null) w[z[0]] = z[1];
    			else switch(z[2]) {
    			case "bool": if(typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]]); break;
    			case "int": if(typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10); break;
    			}
    		}
    	}
    }
    function push_defaults(target, defaults) {
    	for(var i = 0; i != defaults.length; ++i) { var z = defaults[i];
    		if(target[z[0]] == null) target[z[0]] = z[1];
    		else switch(z[2]) {
    			case "bool": if(typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]]); break;
    			case "int": if(typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10); break;
    		}
    	}
    }

    function parse_wb_defaults(wb) {
    	push_defaults(wb.WBProps, WBPropsDef);
    	push_defaults(wb.CalcPr, CalcPrDef);

    	push_defaults_array(wb.WBView, WBViewDef);
    	push_defaults_array(wb.Sheets, SheetDef);

    	_ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
    }

    function safe1904(wb/*:Workbook*/)/*:string*/ {
    	/* TODO: store date1904 somewhere else */
    	if(!wb.Workbook) return "false";
    	if(!wb.Workbook.WBProps) return "false";
    	return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
    }

    var badchars = /*#__PURE__*/"][*?\/\\".split("");
    function check_ws_name(n/*:string*/, safe/*:?boolean*/)/*:boolean*/ {
    	if(n.length > 31) { if(safe) return false; throw new Error("Sheet names cannot exceed 31 chars"); }
    	var _good = true;
    	badchars.forEach(function(c) {
    		if(n.indexOf(c) == -1) return;
    		if(!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
    		_good = false;
    	});
    	return _good;
    }
    function check_wb_names(N, S, codes) {
    	N.forEach(function(n,i) {
    		check_ws_name(n);
    		for(var j = 0; j < i; ++j) if(n == N[j]) throw new Error("Duplicate Sheet Name: " + n);
    		if(codes) {
    			var cn = (S && S[i] && S[i].CodeName) || n;
    			if(cn.charCodeAt(0) == 95 && cn.length > 22) throw new Error("Bad Code Name: Worksheet" + cn);
    		}
    	});
    }
    function check_wb(wb) {
    	if(!wb || !wb.SheetNames || !wb.Sheets) throw new Error("Invalid Workbook");
    	if(!wb.SheetNames.length) throw new Error("Workbook is empty");
    	var Sheets = (wb.Workbook && wb.Workbook.Sheets) || [];
    	check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);
    	for(var i = 0; i < wb.SheetNames.length; ++i) check_ws(wb.Sheets[wb.SheetNames[i]], wb.SheetNames[i], i);
    	/* TODO: validate workbook */
    }
    /* 18.2 Workbook */
    var wbnsregex = /<\w+:workbook/;
    function parse_wb_xml(data, opts)/*:WorkbookFile*/ {
    	if(!data) throw new Error("Could not find file");
    	var wb = /*::(*/{ AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, Names:[], xmlns: "" }/*::)*/;
    	var pass = false, xmlns = "xmlns";
    	var dname = {}, dnstart = 0;
    	data.replace(tagregex, function xml_wb(x, idx) {
    		var y/*:any*/ = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<?xml': break;

    			/* 18.2.27 workbook CT_Workbook 1 */
    			case '<workbook':
    				if(x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
    				wb.xmlns = y[xmlns];
    				break;
    			case '</workbook>': break;

    			/* 18.2.13 fileVersion CT_FileVersion ? */
    			case '<fileVersion': delete y[0]; wb.AppVersion = y; break;
    			case '<fileVersion/>': case '</fileVersion>': break;

    			/* 18.2.12 fileSharing CT_FileSharing ? */
    			case '<fileSharing':
    				break;
    			case '<fileSharing/>': break;

    			/* 18.2.28 workbookPr CT_WorkbookPr ? */
    			case '<workbookPr':
    			case '<workbookPr/>':
    				WBPropsDef.forEach(function(w) {
    					if(y[w[0]] == null) return;
    					switch(w[2]) {
    						case "bool": wb.WBProps[w[0]] = parsexmlbool(y[w[0]]); break;
    						case "int": wb.WBProps[w[0]] = parseInt(y[w[0]], 10); break;
    						default: wb.WBProps[w[0]] = y[w[0]];
    					}
    				});
    				if(y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);
    				break;
    			case '</workbookPr>': break;

    			/* 18.2.29 workbookProtection CT_WorkbookProtection ? */
    			case '<workbookProtection':
    				break;
    			case '<workbookProtection/>': break;

    			/* 18.2.1  bookViews CT_BookViews ? */
    			case '<bookViews': case '<bookViews>': case '</bookViews>': break;
    			/* 18.2.30   workbookView CT_BookView + */
    			case '<workbookView': case '<workbookView/>': delete y[0]; wb.WBView.push(y); break;
    			case '</workbookView>': break;

    			/* 18.2.20 sheets CT_Sheets 1 */
    			case '<sheets': case '<sheets>': case '</sheets>': break; // aggregate sheet
    			/* 18.2.19   sheet CT_Sheet + */
    			case '<sheet':
    				switch(y.state) {
    					case "hidden": y.Hidden = 1; break;
    					case "veryHidden": y.Hidden = 2; break;
    					default: y.Hidden = 0;
    				}
    				delete y.state;
    				y.name = unescapexml(utf8read(y.name));
    				delete y[0]; wb.Sheets.push(y); break;
    			case '</sheet>': break;

    			/* 18.2.15 functionGroups CT_FunctionGroups ? */
    			case '<functionGroups': case '<functionGroups/>': break;
    			/* 18.2.14   functionGroup CT_FunctionGroup + */
    			case '<functionGroup': break;

    			/* 18.2.9  externalReferences CT_ExternalReferences ? */
    			case '<externalReferences': case '</externalReferences>': case '<externalReferences>': break;
    			/* 18.2.8    externalReference CT_ExternalReference + */
    			case '<externalReference': break;

    			/* 18.2.6  definedNames CT_DefinedNames ? */
    			case '<definedNames/>': break;
    			case '<definedNames>': case '<definedNames': pass=true; break;
    			case '</definedNames>': pass=false; break;
    			/* 18.2.5    definedName CT_DefinedName + */
    			case '<definedName': {
    				dname = {};
    				dname.Name = utf8read(y.name);
    				if(y.comment) dname.Comment = y.comment;
    				if(y.localSheetId) dname.Sheet = +y.localSheetId;
    				if(parsexmlbool(y.hidden||"0")) dname.Hidden = true;
    				dnstart = idx + x.length;
    			}	break;
    			case '</definedName>': {
    				dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
    				wb.Names.push(dname);
    			} break;
    			case '<definedName/>': break;

    			/* 18.2.2  calcPr CT_CalcPr ? */
    			case '<calcPr': delete y[0]; wb.CalcPr = y; break;
    			case '<calcPr/>': delete y[0]; wb.CalcPr = y; break;
    			case '</calcPr>': break;

    			/* 18.2.16 oleSize CT_OleSize ? (ref required) */
    			case '<oleSize': break;

    			/* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */
    			case '<customWorkbookViews>': case '</customWorkbookViews>': case '<customWorkbookViews': break;
    			/* 18.2.3  customWorkbookView CT_CustomWorkbookView + */
    			case '<customWorkbookView': case '</customWorkbookView>': break;

    			/* 18.2.18 pivotCaches CT_PivotCaches ? */
    			case '<pivotCaches>': case '</pivotCaches>': case '<pivotCaches': break;
    			/* 18.2.17 pivotCache CT_PivotCache ? */
    			case '<pivotCache': break;

    			/* 18.2.21 smartTagPr CT_SmartTagPr ? */
    			case '<smartTagPr': case '<smartTagPr/>': break;

    			/* 18.2.23 smartTagTypes CT_SmartTagTypes ? */
    			case '<smartTagTypes': case '<smartTagTypes>': case '</smartTagTypes>': break;
    			/* 18.2.22 smartTagType CT_SmartTagType ? */
    			case '<smartTagType': break;

    			/* 18.2.24 webPublishing CT_WebPublishing ? */
    			case '<webPublishing': case '<webPublishing/>': break;

    			/* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */
    			case '<fileRecoveryPr': case '<fileRecoveryPr/>': break;

    			/* 18.2.26 webPublishObjects CT_WebPublishObjects ? */
    			case '<webPublishObjects>': case '<webPublishObjects': case '</webPublishObjects>': break;
    			/* 18.2.25 webPublishObject CT_WebPublishObject ? */
    			case '<webPublishObject': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
    			/* 18.2.7  ext CT_Extension + */
    			case '<ext': pass=true; break; //TODO: check with versions of excel
    			case '</ext>': pass=false; break;

    			/* Others */
    			case '<ArchID': break;
    			case '<AlternateContent':
    			case '<AlternateContent>': pass=true; break;
    			case '</AlternateContent>': pass=false; break;

    			/* TODO */
    			case '<revisionPtr': break;

    			default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in workbook');
    		}
    		return x;
    	});
    	if(XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);

    	parse_wb_defaults(wb);

    	return wb;
    }

    function write_wb_xml(wb/*:Workbook*//*::, opts:?WriteOpts*/)/*:string*/ {
    	var o = [XML_HEADER];
    	o[o.length] = writextag('workbook', null, {
    		'xmlns': XMLNS_main[0],
    		//'xmlns:mx': XMLNS.mx,
    		//'xmlns:s': XMLNS_main[0],
    		'xmlns:r': XMLNS.r
    	});

    	var write_names = (wb.Workbook && (wb.Workbook.Names||[]).length > 0);

    	/* fileVersion */
    	/* fileSharing */

    	var workbookPr/*:any*/ = ({codeName:"ThisWorkbook"}/*:any*/);
    	if(wb.Workbook && wb.Workbook.WBProps) {
    		WBPropsDef.forEach(function(x) {
    			/*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw "unreachable"; */
    			if((wb.Workbook.WBProps[x[0]]/*:any*/) == null) return;
    			if((wb.Workbook.WBProps[x[0]]/*:any*/) == x[1]) return;
    			workbookPr[x[0]] = (wb.Workbook.WBProps[x[0]]/*:any*/);
    		});
    		/*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw "unreachable"; */
    		if(wb.Workbook.WBProps.CodeName) { workbookPr.codeName = wb.Workbook.WBProps.CodeName; delete workbookPr.CodeName; }
    	}
    	o[o.length] = (writextag('workbookPr', null, workbookPr));

    	/* workbookProtection */

    	var sheets = wb.Workbook && wb.Workbook.Sheets || [];
    	var i = 0;

    	/* bookViews only written if first worksheet is hidden */
    	if(sheets && sheets[0] && !!sheets[0].Hidden) {
    		o[o.length] = "<bookViews>";
    		for(i = 0; i != wb.SheetNames.length; ++i) {
    			if(!sheets[i]) break;
    			if(!sheets[i].Hidden) break;
    		}
    		if(i == wb.SheetNames.length) i = 0;
    		o[o.length] = '<workbookView firstSheet="' + i + '" activeTab="' + i + '"/>';
    		o[o.length] = "</bookViews>";
    	}

    	o[o.length] = "<sheets>";
    	for(i = 0; i != wb.SheetNames.length; ++i) {
    		var sht = ({name:escapexml(wb.SheetNames[i].slice(0,31))}/*:any*/);
    		sht.sheetId = ""+(i+1);
    		sht["r:id"] = "rId"+(i+1);
    		if(sheets[i]) switch(sheets[i].Hidden) {
    			case 1: sht.state = "hidden"; break;
    			case 2: sht.state = "veryHidden"; break;
    		}
    		o[o.length] = (writextag('sheet',null,sht));
    	}
    	o[o.length] = "</sheets>";

    	/* functionGroups */
    	/* externalReferences */

    	if(write_names) {
    		o[o.length] = "<definedNames>";
    		if(wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function(n) {
    			var d/*:any*/ = {name:n.Name};
    			if(n.Comment) d.comment = n.Comment;
    			if(n.Sheet != null) d.localSheetId = ""+n.Sheet;
    			if(n.Hidden) d.hidden = "1";
    			if(!n.Ref) return;
    			o[o.length] = writextag('definedName', escapexml(n.Ref), d);
    		});
    		o[o.length] = "</definedNames>";
    	}

    	/* calcPr */
    	/* oleSize */
    	/* customWorkbookViews */
    	/* pivotCaches */
    	/* smartTagPr */
    	/* smartTagTypes */
    	/* webPublishing */
    	/* fileRecoveryPr */
    	/* webPublishObjects */
    	/* extLst */

    	if(o.length>2){ o[o.length] = '</workbook>'; o[1]=o[1].replace("/>",">"); }
    	return o.join("");
    }
    /* [MS-XLSB] 2.4.304 BrtBundleSh */
    function parse_BrtBundleSh(data, length/*:number*/) {
    	var z = {};
    	z.Hidden = data.read_shift(4); //hsState ST_SheetState
    	z.iTabID = data.read_shift(4);
    	z.strRelID = parse_RelID(data);
    	z.name = parse_XLWideString(data);
    	return z;
    }
    function write_BrtBundleSh(data, o) {
    	if(!o) o = new_buf(127);
    	o.write_shift(4, data.Hidden);
    	o.write_shift(4, data.iTabID);
    	write_RelID(data.strRelID, o);
    	write_XLWideString(data.name.slice(0,31), o);
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.4.815 BrtWbProp */
    function parse_BrtWbProp(data, length)/*:WBProps*/ {
    	var o/*:WBProps*/ = ({}/*:any*/);
    	var flags = data.read_shift(4);
    	o.defaultThemeVersion = data.read_shift(4);
    	var strName = (length > 8) ? parse_XLWideString(data) : "";
    	if(strName.length > 0) o.CodeName = strName;
    	o.autoCompressPictures = !!(flags & 0x10000);
    	o.backupFile = !!(flags & 0x40);
    	o.checkCompatibility = !!(flags & 0x1000);
    	o.date1904 = !!(flags & 0x01);
    	o.filterPrivacy = !!(flags & 0x08);
    	o.hidePivotFieldList = !!(flags & 0x400);
    	o.promptedSolutions = !!(flags & 0x10);
    	o.publishItems = !!(flags & 0x800);
    	o.refreshAllConnections = !!(flags & 0x40000);
    	o.saveExternalLinkValues = !!(flags & 0x80);
    	o.showBorderUnselectedTables = !!(flags & 0x04);
    	o.showInkAnnotation = !!(flags & 0x20);
    	o.showObjects = ["all", "placeholders", "none"][(flags >> 13) & 0x03];
    	o.showPivotChartFilter = !!(flags & 0x8000);
    	o.updateLinks = ["userSet", "never", "always"][(flags >> 8) & 0x03];
    	return o;
    }
    function write_BrtWbProp(data/*:?WBProps*/, o) {
    	if(!o) o = new_buf(72);
    	var flags = 0;
    	if(data) {
    		/* TODO: mirror parse_BrtWbProp fields */
    		if(data.filterPrivacy) flags |= 0x08;
    	}
    	o.write_shift(4, flags);
    	o.write_shift(4, 0);
    	write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o);
    	return o.slice(0, o.l);
    }

    function parse_BrtFRTArchID$(data, length) {
    	var o = {};
    	data.read_shift(4);
    	o.ArchID = data.read_shift(4);
    	data.l += length - 8;
    	return o;
    }

    /* [MS-XLSB] 2.4.687 BrtName */
    function parse_BrtName(data, length, opts) {
    	var end = data.l + length;
    	data.l += 4; //var flags = data.read_shift(4);
    	data.l += 1; //var chKey = data.read_shift(1);
    	var itab = data.read_shift(4);
    	var name = parse_XLNameWideString(data);
    	var formula = parse_XLSBNameParsedFormula(data, 0, opts);
    	var comment = parse_XLNullableWideString(data);
    	//if(0 /* fProc */) {
    		// unusedstring1: XLNullableWideString
    		// description: XLNullableWideString
    		// helpTopic: XLNullableWideString
    		// unusedstring2: XLNullableWideString
    	//}
    	data.l = end;
    	var out = ({Name:name, Ptg:formula}/*:any*/);
    	if(itab < 0xFFFFFFF) out.Sheet = itab;
    	if(comment) out.Comment = comment;
    	return out;
    }

    /* [MS-XLSB] 2.1.7.61 Workbook */
    function parse_wb_bin(data, opts)/*:WorkbookFile*/ {
    	var wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: "" };
    	var state/*:Array<string>*/ = [];
    	var pass = false;

    	if(!opts) opts = {};
    	opts.biff = 12;

    	var Names = [];
    	var supbooks = ([[]]/*:any*/);
    	supbooks.SheetNames = [];
    	supbooks.XTI = [];

    	XLSBRecordEnum[0x0010] = { n:"BrtFRTArchID$", f:parse_BrtFRTArchID$ };

    	recordhopper(data, function hopper_wb(val, R, RT) {
    		switch(RT) {
    			case 0x009C: /* 'BrtBundleSh' */
    				supbooks.SheetNames.push(val.name);
    				wb.Sheets.push(val); break;

    			case 0x0099: /* 'BrtWbProp' */
    				wb.WBProps = val; break;

    			case 0x0027: /* 'BrtName' */
    				if(val.Sheet != null) opts.SID = val.Sheet;
    				val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
    				delete opts.SID;
    				delete val.Ptg;
    				Names.push(val);
    				break;
    			case 0x040C: /* 'BrtNameExt' */ break;

    			case 0x0165: /* 'BrtSupSelf' */
    			case 0x0166: /* 'BrtSupSame' */
    			case 0x0163: /* 'BrtSupBookSrc' */
    			case 0x029B: /* 'BrtSupAddin' */
    				if(!supbooks[0].length) supbooks[0] = [RT, val];
    				else supbooks.push([RT, val]);
    				supbooks[supbooks.length - 1].XTI = [];
    				break;
    			case 0x016A: /* 'BrtExternSheet' */
    				if(supbooks.length === 0) { supbooks[0] = []; supbooks[0].XTI = []; }
    				supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
    				supbooks.XTI = supbooks.XTI.concat(val);
    				break;
    			case 0x0169: /* 'BrtPlaceholderName' */
    				break;

    			case 0x0817: /* 'BrtAbsPath15' */
    			case 0x009E: /* 'BrtBookView' */
    			case 0x008F: /* 'BrtBeginBundleShs' */
    			case 0x0298: /* 'BrtBeginFnGroup' */
    			case 0x0161: /* 'BrtBeginExternals' */
    				break;

    			/* case 'BrtModelTimeGroupingCalcCol' */
    			case 0x0C00: /* 'BrtUid' */
    			case 0x0C01: /* 'BrtRevisionPtr' */
    			case 0x0216: /* 'BrtBookProtection' */
    			case 0x02A5: /* 'BrtBookProtectionIso' */
    			case 0x009D: /* 'BrtCalcProp' */
    			case 0x0262: /* 'BrtCrashRecErr' */
    			case 0x0802: /* 'BrtDecoupledPivotCacheID' */
    			case 0x009B: /* 'BrtFileRecover' */
    			case 0x0224: /* 'BrtFileSharing' */
    			case 0x02A4: /* 'BrtFileSharingIso' */
    			case 0x0080: /* 'BrtFileVersion' */
    			case 0x0299: /* 'BrtFnGroup' */
    			case 0x0850: /* 'BrtModelRelationship' */
    			case 0x084D: /* 'BrtModelTable' */
    			case 0x0225: /* 'BrtOleSize' */
    			case 0x0805: /* 'BrtPivotTableRef' */
    			case 0x0254: /* 'BrtSmartTagType' */
    			case 0x081C: /* 'BrtTableSlicerCacheID' */
    			case 0x081B: /* 'BrtTableSlicerCacheIDs' */
    			case 0x0822: /* 'BrtTimelineCachePivotCacheID' */
    			case 0x018D: /* 'BrtUserBookView' */
    			case 0x009A: /* 'BrtWbFactoid' */
    			case 0x045D: /* 'BrtWbProp14' */
    			case 0x0229: /* 'BrtWebOpt' */
    			case 0x082B: /* 'BrtWorkBookPr15' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				state.push(RT); pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				state.pop(); pass = false; break;
    			case 0x0025: /* 'BrtACBegin' */
    				state.push(RT); pass = true; break;
    			case 0x0026: /* 'BrtACEnd' */
    				state.pop(); pass = false; break;

    			case 0x0010: /* 'BrtFRTArchID$' */ break;

    			default:
    				if(R.T);
    				else if(!pass || (opts.WTF && state[state.length-1] != 0x0025 /* BrtACBegin */ && state[state.length-1] != 0x0023 /* BrtFRTBegin */)) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	}, opts);

    	parse_wb_defaults(wb);

    	// $FlowIgnore
    	wb.Names = Names;

    	(wb/*:any*/).supbooks = supbooks;
    	return wb;
    }

    function write_BUNDLESHS(ba, wb/*::, opts*/) {
    	write_record(ba, 0x008F /* BrtBeginBundleShs */);
    	for(var idx = 0; idx != wb.SheetNames.length; ++idx) {
    		var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
    		var d = { Hidden: viz, iTabID: idx+1, strRelID: 'rId' + (idx+1), name: wb.SheetNames[idx] };
    		write_record(ba, 0x009C /* BrtBundleSh */, write_BrtBundleSh(d));
    	}
    	write_record(ba, 0x0090 /* BrtEndBundleShs */);
    }

    /* [MS-XLSB] 2.4.649 BrtFileVersion */
    function write_BrtFileVersion(data, o) {
    	if(!o) o = new_buf(127);
    	for(var i = 0; i != 4; ++i) o.write_shift(4, 0);
    	write_XLWideString("SheetJS", o);
    	write_XLWideString(XLSX.version, o);
    	write_XLWideString(XLSX.version, o);
    	write_XLWideString("7262", o);
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }

    /* [MS-XLSB] 2.4.301 BrtBookView */
    function write_BrtBookView(idx, o) {
    	if(!o) o = new_buf(29);
    	o.write_shift(-4, 0);
    	o.write_shift(-4, 460);
    	o.write_shift(4,  28800);
    	o.write_shift(4,  17600);
    	o.write_shift(4,  500);
    	o.write_shift(4,  idx);
    	o.write_shift(4,  idx);
    	var flags = 0x78;
    	o.write_shift(1,  flags);
    	return o.length > o.l ? o.slice(0, o.l) : o;
    }

    function write_BOOKVIEWS(ba, wb/*::, opts*/) {
    	/* required if hidden tab appears before visible tab */
    	if(!wb.Workbook || !wb.Workbook.Sheets) return;
    	var sheets = wb.Workbook.Sheets;
    	var i = 0, vistab = -1, hidden = -1;
    	for(; i < sheets.length; ++i) {
    		if(!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i;
    		else if(sheets[i].Hidden == 1 && hidden == -1) hidden = i;
    	}
    	if(hidden > vistab) return;
    	write_record(ba, 0x0087 /* BrtBeginBookViews */);
    	write_record(ba, 0x009E /* BrtBookView */, write_BrtBookView(vistab));
    	/* 1*(BrtBookView *FRT) */
    	write_record(ba, 0x0088 /* BrtEndBookViews */);
    }

    /* [MS-XLSB] 2.4.305 BrtCalcProp */
    /*function write_BrtCalcProp(data, o) {
    	if(!o) o = new_buf(26);
    	o.write_shift(4,0); // force recalc
    	o.write_shift(4,1);
    	o.write_shift(4,0);
    	write_Xnum(0, o);
    	o.write_shift(-4, 1023);
    	o.write_shift(1, 0x33);
    	o.write_shift(1, 0x00);
    	return o;
    }*/

    /* [MS-XLSB] 2.4.646 BrtFileRecover */
    /*function write_BrtFileRecover(data, o) {
    	if(!o) o = new_buf(1);
    	o.write_shift(1,0);
    	return o;
    }*/

    /* [MS-XLSB] 2.1.7.61 Workbook */
    function write_wb_bin(wb, opts) {
    	var ba = buf_array();
    	write_record(ba, 0x0083 /* BrtBeginBook */);
    	write_record(ba, 0x0080 /* BrtFileVersion */, write_BrtFileVersion());
    	/* [[BrtFileSharingIso] BrtFileSharing] */
    	write_record(ba, 0x0099 /* BrtWbProp */, write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
    	/* [ACABSPATH] */
    	/* [[BrtBookProtectionIso] BrtBookProtection] */
    	write_BOOKVIEWS(ba, wb);
    	write_BUNDLESHS(ba, wb);
    	/* [FNGROUP] */
    	/* [EXTERNALS] */
    	/* *BrtName */
    	/* write_record(ba, 0x009D BrtCalcProp, write_BrtCalcProp()); */
    	/* [BrtOleSize] */
    	/* *(BrtUserBookView *FRT) */
    	/* [PIVOTCACHEIDS] */
    	/* [BrtWbFactoid] */
    	/* [SMARTTAGTYPES] */
    	/* [BrtWebOpt] */
    	/* write_record(ba, 0x009B BrtFileRecover, write_BrtFileRecover()); */
    	/* [WEBPUBITEMS] */
    	/* [CRERRS] */
    	/* FRTWORKBOOK */
    	write_record(ba, 0x0084 /* BrtEndBook */);

    	return ba.end();
    }
    function parse_wb(data, name/*:string*/, opts)/*:WorkbookFile*/ {
    	if(name.slice(-4)===".bin") return parse_wb_bin((data/*:any*/), opts);
    	return parse_wb_xml((data/*:any*/), opts);
    }

    function parse_ws(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
    	if(name.slice(-4)===".bin") return parse_ws_bin((data/*:any*/), opts, idx, rels, wb, themes, styles);
    	return parse_ws_xml((data/*:any*/), opts, idx, rels, wb, themes, styles);
    }

    function parse_cs(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
    	if(name.slice(-4)===".bin") return parse_cs_bin((data/*:any*/), opts, idx, rels, wb);
    	return parse_cs_xml((data/*:any*/), opts, idx, rels, wb);
    }

    function parse_ms(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
    	if(name.slice(-4)===".bin") return parse_ms_bin();
    	return parse_ms_xml();
    }

    function parse_ds(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
    	if(name.slice(-4)===".bin") return parse_ds_bin();
    	return parse_ds_xml();
    }

    function parse_sty(data, name/*:string*/, themes, opts) {
    	if(name.slice(-4)===".bin") return parse_sty_bin((data/*:any*/), themes, opts);
    	return parse_sty_xml((data/*:any*/), themes, opts);
    }

    function parse_theme(data/*:string*/, name/*:string*/, opts) {
    	return parse_theme_xml(data, opts);
    }

    function parse_sst(data, name/*:string*/, opts)/*:SST*/ {
    	if(name.slice(-4)===".bin") return parse_sst_bin((data/*:any*/), opts);
    	return parse_sst_xml((data/*:any*/), opts);
    }

    function parse_cmnt(data, name/*:string*/, opts)/*:Array<RawComment>*/ {
    	if(name.slice(-4)===".bin") return parse_comments_bin((data/*:any*/), opts);
    	return parse_comments_xml((data/*:any*/), opts);
    }

    function parse_cc(data, name/*:string*/, opts) {
    	if(name.slice(-4)===".bin") return parse_cc_bin((data/*:any*/));
    	return parse_cc_xml((data/*:any*/));
    }

    function parse_xlink(data, rel, name/*:string*/, opts) {
    	if(name.slice(-4)===".bin") return parse_xlink_bin((data/*:any*/), rel, name, opts);
    	return parse_xlink_xml();
    }

    function parse_xlmeta(data, name/*:string*/, opts) {
    	if(name.slice(-4)===".bin") return parse_xlmeta_bin((data/*:any*/), name, opts);
    	return parse_xlmeta_xml((data/*:any*/), name, opts);
    }

    function write_wb(wb, name/*:string*/, opts) {
    	return (name.slice(-4)===".bin" ? write_wb_bin : write_wb_xml)(wb);
    }

    function write_ws(data/*:number*/, name/*:string*/, opts, wb/*:Workbook*/, rels) {
    	return (name.slice(-4)===".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);
    }

    function write_sty(data, name/*:string*/, opts) {
    	return (name.slice(-4)===".bin" ? write_sty_bin : write_sty_xml)(data, opts);
    }

    function write_sst(data/*:SST*/, name/*:string*/, opts) {
    	return (name.slice(-4)===".bin" ? write_sst_bin : write_sst_xml)(data, opts);
    }

    function write_cmnt(data/*:Array<any>*/, name/*:string*/, opts) {
    	return (name.slice(-4)===".bin" ? write_comments_bin : write_comments_xml)(data);
    }
    /*
    function write_cc(data, name:string, opts) {
    	return (name.slice(-4)===".bin" ? write_cc_bin : write_cc_xml)(data, opts);
    }
    */

    function write_xlmeta(name/*:string*/) {
    	return (name.slice(-4)===".bin" ? write_xlmeta_bin : write_xlmeta_xml)();
    }
    var attregexg2=/([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
    var attregex2=/([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
    function xlml_parsexmltag(tag/*:string*/, skip_root/*:?boolean*/) {
    	var words = tag.split(/\s+/);
    	var z/*:any*/ = ([]/*:any*/); if(!skip_root) z[0] = words[0];
    	if(words.length === 1) return z;
    	var m = tag.match(attregexg2), y, j, w, i;
    	if(m) for(i = 0; i != m.length; ++i) {
    		y = m[i].match(attregex2);
    /*:: if(!y || !y[2]) continue; */
    		if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1,y[2].length-1);
    		else {
    			if(y[1].slice(0,6) === "xmlns:") w = "xmlns"+y[1].slice(6);
    			else w = y[1].slice(j+1);
    			z[w] = y[2].slice(1,y[2].length-1);
    		}
    	}
    	return z;
    }
    function xlml_parsexmltagobj(tag/*:string*/) {
    	var words = tag.split(/\s+/);
    	var z = {};
    	if(words.length === 1) return z;
    	var m = tag.match(attregexg2), y, j, w, i;
    	if(m) for(i = 0; i != m.length; ++i) {
    		y = m[i].match(attregex2);
    /*:: if(!y || !y[2]) continue; */
    		if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1,y[2].length-1);
    		else {
    			if(y[1].slice(0,6) === "xmlns:") w = "xmlns"+y[1].slice(6);
    			else w = y[1].slice(j+1);
    			z[w] = y[2].slice(1,y[2].length-1);
    		}
    	}
    	return z;
    }

    // ----

    /* map from xlml named formats to SSF TODO: localize */
    var XLMLFormatMap/*: {[string]:string}*/;

    function xlml_format(format, value)/*:string*/ {
    	var fmt = XLMLFormatMap[format] || unescapexml(format);
    	if(fmt === "General") return SSF_general(value);
    	return SSF_format(fmt, value);
    }

    function xlml_set_custprop(Custprops, key, cp, val/*:string*/) {
    	var oval/*:any*/ = val;
    	switch((cp[0].match(/dt:dt="([\w.]+)"/)||["",""])[1]) {
    		case "boolean": oval = parsexmlbool(val); break;
    		case "i2": case "int": oval = parseInt(val, 10); break;
    		case "r4": case "float": oval = parseFloat(val); break;
    		case "date": case "dateTime.tz": oval = parseDate(val); break;
    		case "i8": case "string": case "fixed": case "uuid": case "bin.base64": break;
    		default: throw new Error("bad custprop:" + cp[0]);
    	}
    	Custprops[unescapexml(key)] = oval;
    }

    function safe_format_xlml(cell/*:Cell*/, nf, o) {
    	if(cell.t === 'z') return;
    	if(!o || o.cellText !== false) try {
    		if(cell.t === 'e') { cell.w = cell.w || BErr[cell.v]; }
    		else if(nf === "General") {
    			if(cell.t === 'n') {
    				if((cell.v|0) === cell.v) cell.w = cell.v.toString(10);
    				else cell.w = SSF_general_num(cell.v);
    			}
    			else cell.w = SSF_general(cell.v);
    		}
    		else cell.w = xlml_format(nf||"General", cell.v);
    	} catch(e) { if(o.WTF) throw e; }
    	try {
    		var z = XLMLFormatMap[nf]||nf||"General";
    		if(o.cellNF) cell.z = z;
    		if(o.cellDates && cell.t == 'n' && fmt_is_date(z)) {
    			var _d = SSF_parse_date_code(cell.v); if(_d) { cell.t = 'd'; cell.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
    		}
    	} catch(e) { if(o.WTF) throw e; }
    }

    function process_style_xlml(styles, stag, opts) {
    	if(opts.cellStyles) {
    		if(stag.Interior) {
    			var I = stag.Interior;
    			if(I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
    		}
    	}
    	styles[stag.ID] = stag;
    }

    /* TODO: there must exist some form of OSP-blessed spec */
    function parse_xlml_data(xml, ss, data, cell/*:any*/, base, styles, csty, row, arrayf, o) {
    	var nf = "General", sid = cell.StyleID, S = {}; o = o || {};
    	var interiors = [];
    	var i = 0;
    	if(sid === undefined && row) sid = row.StyleID;
    	if(sid === undefined && csty) sid = csty.StyleID;
    	while(styles[sid] !== undefined) {
    		if(styles[sid].nf) nf = styles[sid].nf;
    		if(styles[sid].Interior) interiors.push(styles[sid].Interior);
    		if(!styles[sid].Parent) break;
    		sid = styles[sid].Parent;
    	}
    	switch(data.Type) {
    		case 'Boolean':
    			cell.t = 'b';
    			cell.v = parsexmlbool(xml);
    			break;
    		case 'String':
    			cell.t = 's'; cell.r = xlml_fixstr(unescapexml(xml));
    			cell.v = (xml.indexOf("<") > -1 ? unescapexml(ss||xml).replace(/<.*?>/g, "") : cell.r); // todo: BR etc
    			break;
    		case 'DateTime':
    			if(xml.slice(-1) != "Z") xml += "Z";
    			cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
    			if(cell.v !== cell.v) cell.v = unescapexml(xml);
    			else if(cell.v<60) cell.v = cell.v -1;
    			if(!nf || nf == "General") nf = "yyyy-mm-dd";
    			/* falls through */
    		case 'Number':
    			if(cell.v === undefined) cell.v=+xml;
    			if(!cell.t) cell.t = 'n';
    			break;
    		case 'Error': cell.t = 'e'; cell.v = RBErr[xml]; if(o.cellText !== false) cell.w = xml; break;
    		default:
    			if(xml == "" && ss == "") { cell.t = 'z'; }
    			else { cell.t = 's'; cell.v = xlml_fixstr(ss||xml); }
    			break;
    	}
    	safe_format_xlml(cell, nf, o);
    	if(o.cellFormula !== false) {
    		if(cell.Formula) {
    			var fstr = unescapexml(cell.Formula);
    			/* strictly speaking, the leading = is required but some writers omit */
    			if(fstr.charCodeAt(0) == 61 /* = */) fstr = fstr.slice(1);
    			cell.f = rc_to_a1(fstr, base);
    			delete cell.Formula;
    			if(cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);
    			else if(cell.ArrayRange) {
    				cell.F = rc_to_a1(cell.ArrayRange, base);
    				arrayf.push([safe_decode_range(cell.F), cell.F]);
    			}
    		} else {
    			for(i = 0; i < arrayf.length; ++i)
    				if(base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r)
    					if(base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c)
    						cell.F = arrayf[i][1];
    		}
    	}
    	if(o.cellStyles) {
    		interiors.forEach(function(x) {
    			if(!S.patternType && x.patternType) S.patternType = x.patternType;
    		});
    		cell.s = S;
    	}
    	if(cell.StyleID !== undefined) cell.ixfe = cell.StyleID;
    }

    function xlml_clean_comment(comment/*:any*/) {
    	comment.t = comment.v || "";
    	comment.t = comment.t.replace(/\r\n/g,"\n").replace(/\r/g,"\n");
    	comment.v = comment.w = comment.ixfe = undefined;
    }

    /* TODO: Everything */
    function parse_xlml_xml(d, _opts)/*:Workbook*/ {
    	var opts = _opts || {};
    	make_ssf();
    	var str = debom(xlml_normalize(d));
    	if(opts.type == 'binary' || opts.type == 'array' || opts.type == 'base64') {
    		if(typeof $cptable !== 'undefined') str = $cptable.utils.decode(65001, char_codes(str));
    		else str = utf8read(str);
    	}
    	var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
    	opening = opening.replace(/".*?"/g, "");
    	if((opening.indexOf(">") & 1023) > Math.min((opening.indexOf(",") & 1023), (opening.indexOf(";")&1023))) { var _o = dup(opts); _o.type = "string"; return PRN.to_workbook(str, _o); }
    	if(opening.indexOf("<?xml") == -1) ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) { if(opening.indexOf("<" + tag) >= 0) ishtml = true; });
    	if(ishtml) return html_to_workbook(str, opts);

    	XLMLFormatMap = ({
    		"General Number": "General",
    		"General Date": table_fmt[22],
    		"Long Date": "dddd, mmmm dd, yyyy",
    		"Medium Date": table_fmt[15],
    		"Short Date": table_fmt[14],
    		"Long Time": table_fmt[19],
    		"Medium Time": table_fmt[18],
    		"Short Time": table_fmt[20],
    		"Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    		"Fixed": table_fmt[2],
    		"Standard": table_fmt[4],
    		"Percent": table_fmt[10],
    		"Scientific": table_fmt[11],
    		"Yes/No": '"Yes";"Yes";"No";@',
    		"True/False": '"True";"True";"False";@',
    		"On/Off": '"Yes";"Yes";"No";@'
    	}/*:any*/);


    	var Rn;
    	var state = [], tmp;
    	var sheets = {}, sheetnames/*:Array<string>*/ = [], cursheet/*:Worksheet*/ = (opts.dense ? [] : {}), sheetname = "";
    	var cell = ({}/*:any*/), row = {};// eslint-disable-line no-unused-vars
    	var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
    	var c = 0, r = 0;
    	var refguess/*:Range*/ = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
    	var styles = {}, stag = {};
    	var ss = "", fidx = 0;
    	var merges/*:Array<Range>*/ = [];
    	var Props = {}, Custprops = {}, pidx = 0, cp = [];
    	var comments/*:Array<Comment>*/ = [], comment/*:Comment*/ = ({}/*:any*/);
    	var cstys = [], csty, seencol = false;
    	var arrayf/*:Array<[Range, string]>*/ = [];
    	var rowinfo/*:Array<RowInfo>*/ = [], rowobj = {}, cc = 0, rr = 0;
    	var Workbook/*:WBWBProps*/ = ({ Sheets:[], WBProps:{date1904:false} }/*:any*/), wsprops = {};
    	xlmlregex.lastIndex = 0;
    	str = str.replace(/<!--([\s\S]*?)-->/mg,"");
    	var raw_Rn3 = "";
    	while((Rn = xlmlregex.exec(str))) switch((Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase())) {
    		case 'data' /*case 'Data'*/:
    			if(raw_Rn3 == "data") {
    				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
    				break;
    			}
    			if(state[state.length-1][1]) break;
    			if(Rn[1]==='/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length-1][0]==/*"Comment"*/"comment"?comment:cell, {c:c,r:r}, styles, cstys[c], row, arrayf, opts);
    			else { ss = ""; dtag = xlml_parsexmltag(Rn[0]); didx = Rn.index + Rn[0].length; }
    			break;
    		case 'cell' /*case 'Cell'*/:
    			if(Rn[1]==='/'){
    				if(comments.length > 0) cell.c = comments;
    				if((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {
    					if(opts.dense) {
    						if(!cursheet[r]) cursheet[r] = [];
    						cursheet[r][c] = cell;
    					} else cursheet[encode_col(c) + encode_row(r)] = cell;
    				}
    				if(cell.HRef) {
    					cell.l = ({Target:unescapexml(cell.HRef)}/*:any*/);
    					if(cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
    					delete cell.HRef; delete cell.HRefScreenTip;
    				}
    				if(cell.MergeAcross || cell.MergeDown) {
    					cc = c + (parseInt(cell.MergeAcross,10)|0);
    					rr = r + (parseInt(cell.MergeDown,10)|0);
    					merges.push({s:{c:c,r:r},e:{c:cc,r:rr}});
    				}
    				if(!opts.sheetStubs) { if(cell.MergeAcross) c = cc + 1; else ++c; }
    				else if(cell.MergeAcross || cell.MergeDown) {
    					/*:: if(!cc) cc = 0; if(!rr) rr = 0; */
    					for(var cma = c; cma <= cc; ++cma) {
    						for(var cmd = r; cmd <= rr; ++cmd) {
    							if(cma > c || cmd > r) {
    								if(opts.dense) {
    									if(!cursheet[cmd]) cursheet[cmd] = [];
    									cursheet[cmd][cma] = {t:'z'};
    								} else cursheet[encode_col(cma) + encode_row(cmd)] = {t:'z'};
    							}
    						}
    					}
    					c = cc + 1;
    				}
    				else ++c;
    			} else {
    				cell = xlml_parsexmltagobj(Rn[0]);
    				if(cell.Index) c = +cell.Index - 1;
    				if(c < refguess.s.c) refguess.s.c = c;
    				if(c > refguess.e.c) refguess.e.c = c;
    				if(Rn[0].slice(-2) === "/>") ++c;
    				comments = [];
    			}
    			break;
    		case 'row' /*case 'Row'*/:
    			if(Rn[1]==='/' || Rn[0].slice(-2) === "/>") {
    				if(r < refguess.s.r) refguess.s.r = r;
    				if(r > refguess.e.r) refguess.e.r = r;
    				if(Rn[0].slice(-2) === "/>") {
    					row = xlml_parsexmltag(Rn[0]);
    					if(row.Index) r = +row.Index - 1;
    				}
    				c = 0; ++r;
    			} else {
    				row = xlml_parsexmltag(Rn[0]);
    				if(row.Index) r = +row.Index - 1;
    				rowobj = {};
    				if(row.AutoFitHeight == "0" || row.Height) {
    					rowobj.hpx = parseInt(row.Height, 10); rowobj.hpt = px2pt(rowobj.hpx);
    					rowinfo[r] = rowobj;
    				}
    				if(row.Hidden == "1") { rowobj.hidden = true; rowinfo[r] = rowobj; }
    			}
    			break;
    		case 'worksheet' /*case 'Worksheet'*/: /* TODO: read range from FullRows/FullColumns */
    			if(Rn[1]==='/'){
    				if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
    				sheetnames.push(sheetname);
    				if(refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
    					cursheet["!ref"] = encode_range(refguess);
    					if(opts.sheetRows && opts.sheetRows <= refguess.e.r) {
    						cursheet["!fullref"] = cursheet["!ref"];
    						refguess.e.r = opts.sheetRows - 1;
    						cursheet["!ref"] = encode_range(refguess);
    					}
    				}
    				if(merges.length) cursheet["!merges"] = merges;
    				if(cstys.length > 0) cursheet["!cols"] = cstys;
    				if(rowinfo.length > 0) cursheet["!rows"] = rowinfo;
    				sheets[sheetname] = cursheet;
    			} else {
    				refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
    				r = c = 0;
    				state.push([Rn[3], false]);
    				tmp = xlml_parsexmltag(Rn[0]);
    				sheetname = unescapexml(tmp.Name);
    				cursheet = (opts.dense ? [] : {});
    				merges = [];
    				arrayf = [];
    				rowinfo = [];
    				wsprops = {name:sheetname, Hidden:0};
    				Workbook.Sheets.push(wsprops);
    			}
    			break;
    		case 'table' /*case 'Table'*/:
    			if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    			else if(Rn[0].slice(-2) == "/>") break;
    			else {
    				state.push([Rn[3], false]);
    				cstys = []; seencol = false;
    			}
    			break;

    		case 'style' /*case 'Style'*/:
    			if(Rn[1]==='/') process_style_xlml(styles, stag, opts);
    			else stag = xlml_parsexmltag(Rn[0]);
    			break;

    		case 'numberformat' /*case 'NumberFormat'*/:
    			stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
    			if(XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
    			for(var ssfidx = 0; ssfidx != 0x188; ++ssfidx) if(table_fmt[ssfidx] == stag.nf) break;
    			if(ssfidx == 0x188) for(ssfidx = 0x39; ssfidx != 0x188; ++ssfidx) if(table_fmt[ssfidx] == null) { SSF_load(stag.nf, ssfidx); break; }
    			break;

    		case 'column' /*case 'Column'*/:
    			if(state[state.length-1][0] !== /*'Table'*/'table') break;
    			csty = xlml_parsexmltag(Rn[0]);
    			if(csty.Hidden) { csty.hidden = true; delete csty.Hidden; }
    			if(csty.Width) csty.wpx = parseInt(csty.Width, 10);
    			if(!seencol && csty.wpx > 10) {
    				seencol = true; MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);
    				for(var _col = 0; _col < cstys.length; ++_col) if(cstys[_col]) process_col(cstys[_col]);
    			}
    			if(seencol) process_col(csty);
    			cstys[(csty.Index-1||cstys.length)] = csty;
    			for(var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty);
    			break;

    		case 'namedrange' /*case 'NamedRange'*/:
    			if(Rn[1]==='/') break;
    			if(!Workbook.Names) Workbook.Names = [];
    			var _NamedRange = parsexmltag(Rn[0]);
    			var _DefinedName/*:DefinedName*/ = ({
    				Name: _NamedRange.Name,
    				Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), {r:0, c:0})
    			}/*:any*/);
    			if(Workbook.Sheets.length>0) _DefinedName.Sheet=Workbook.Sheets.length-1;
    			/*:: if(Workbook.Names) */Workbook.Names.push(_DefinedName);
    			break;

    		case 'namedcell' /*case 'NamedCell'*/: break;
    		case 'b' /*case 'B'*/: break;
    		case 'i' /*case 'I'*/: break;
    		case 'u' /*case 'U'*/: break;
    		case 's' /*case 'S'*/: break;
    		case 'em' /*case 'EM'*/: break;
    		case 'h2' /*case 'H2'*/: break;
    		case 'h3' /*case 'H3'*/: break;
    		case 'sub' /*case 'Sub'*/: break;
    		case 'sup' /*case 'Sup'*/: break;
    		case 'span' /*case 'Span'*/: break;
    		case 'alignment' /*case 'Alignment'*/:
    			break;
    		case 'borders' /*case 'Borders'*/: break;
    		case 'border' /*case 'Border'*/: break;
    		case 'font' /*case 'Font'*/:
    			if(Rn[0].slice(-2) === "/>") break;
    			else if(Rn[1]==="/") ss += str.slice(fidx, Rn.index);
    			else fidx = Rn.index + Rn[0].length;
    			break;
    		case 'interior' /*case 'Interior'*/:
    			if(!opts.cellStyles) break;
    			stag.Interior = xlml_parsexmltag(Rn[0]);
    			break;
    		case 'protection' /*case 'Protection'*/: break;

    		case 'author' /*case 'Author'*/:
    		case 'title' /*case 'Title'*/:
    		case 'description' /*case 'Description'*/:
    		case 'created' /*case 'Created'*/:
    		case 'keywords' /*case 'Keywords'*/:
    		case 'subject' /*case 'Subject'*/:
    		case 'category' /*case 'Category'*/:
    		case 'company' /*case 'Company'*/:
    		case 'lastauthor' /*case 'LastAuthor'*/:
    		case 'lastsaved' /*case 'LastSaved'*/:
    		case 'lastprinted' /*case 'LastPrinted'*/:
    		case 'version' /*case 'Version'*/:
    		case 'revision' /*case 'Revision'*/:
    		case 'totaltime' /*case 'TotalTime'*/:
    		case 'hyperlinkbase' /*case 'HyperlinkBase'*/:
    		case 'manager' /*case 'Manager'*/:
    		case 'contentstatus' /*case 'ContentStatus'*/:
    		case 'identifier' /*case 'Identifier'*/:
    		case 'language' /*case 'Language'*/:
    		case 'appname' /*case 'AppName'*/:
    			if(Rn[0].slice(-2) === "/>") break;
    			else if(Rn[1]==="/") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
    			else pidx = Rn.index + Rn[0].length;
    			break;
    		case 'paragraphs' /*case 'Paragraphs'*/: break;

    		case 'styles' /*case 'Styles'*/:
    		case 'workbook' /*case 'Workbook'*/:
    			if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    			else state.push([Rn[3], false]);
    			break;

    		case 'comment' /*case 'Comment'*/:
    			if(Rn[1]==='/'){
    				if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
    				xlml_clean_comment(comment);
    				comments.push(comment);
    			} else {
    				state.push([Rn[3], false]);
    				tmp = xlml_parsexmltag(Rn[0]);
    				comment = ({a:tmp.Author}/*:any*/);
    			}
    			break;

    		case 'autofilter' /*case 'AutoFilter'*/:
    			if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    			else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
    				var AutoFilter = xlml_parsexmltag(Rn[0]);
    				cursheet['!autofilter'] = { ref:rc_to_a1(AutoFilter.Range).replace(/\$/g,"") };
    				state.push([Rn[3], true]);
    			}
    			break;

    		case 'name' /*case 'Name'*/: break;

    		case 'datavalidation' /*case 'DataValidation'*/:
    			if(Rn[1]==='/'){
    				if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
    			} else {
    				if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
    			}
    			break;

    		case 'pixelsperinch' /*case 'PixelsPerInch'*/:
    			break;
    		case 'componentoptions' /*case 'ComponentOptions'*/:
    		case 'documentproperties' /*case 'DocumentProperties'*/:
    		case 'customdocumentproperties' /*case 'CustomDocumentProperties'*/:
    		case 'officedocumentsettings' /*case 'OfficeDocumentSettings'*/:
    		case 'pivottable' /*case 'PivotTable'*/:
    		case 'pivotcache' /*case 'PivotCache'*/:
    		case 'names' /*case 'Names'*/:
    		case 'mapinfo' /*case 'MapInfo'*/:
    		case 'pagebreaks' /*case 'PageBreaks'*/:
    		case 'querytable' /*case 'QueryTable'*/:
    		case 'sorting' /*case 'Sorting'*/:
    		case 'schema' /*case 'Schema'*/: //case 'data' /*case 'data'*/:
    		case 'conditionalformatting' /*case 'ConditionalFormatting'*/:
    		case 'smarttagtype' /*case 'SmartTagType'*/:
    		case 'smarttags' /*case 'SmartTags'*/:
    		case 'excelworkbook' /*case 'ExcelWorkbook'*/:
    		case 'workbookoptions' /*case 'WorkbookOptions'*/:
    		case 'worksheetoptions' /*case 'WorksheetOptions'*/:
    			if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    			else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
    			break;

    		case 'null' /*case 'Null'*/: break;

    		default:
    			/* FODS file root is <office:document> */
    			if(state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
    			/* UOS file root is <uof:UOF> */
    			if(state.length == 0 && Rn[3] == "uof"/*"UOF"*/) return parse_fods(str, opts);

    			var seen = true;
    			switch(state[state.length-1][0]) {
    				/* OfficeDocumentSettings */
    				case 'officedocumentsettings' /*case 'OfficeDocumentSettings'*/: switch(Rn[3]) {
    					case 'allowpng' /*case 'AllowPNG'*/: break;
    					case 'removepersonalinformation' /*case 'RemovePersonalInformation'*/: break;
    					case 'downloadcomponents' /*case 'DownloadComponents'*/: break;
    					case 'locationofcomponents' /*case 'LocationOfComponents'*/: break;
    					case 'colors' /*case 'Colors'*/: break;
    					case 'color' /*case 'Color'*/: break;
    					case 'index' /*case 'Index'*/: break;
    					case 'rgb' /*case 'RGB'*/: break;
    					case 'targetscreensize' /*case 'TargetScreenSize'*/: break;
    					case 'readonlyrecommended' /*case 'ReadOnlyRecommended'*/: break;
    					default: seen = false;
    				} break;

    				/* ComponentOptions */
    				case 'componentoptions' /*case 'ComponentOptions'*/: switch(Rn[3]) {
    					case 'toolbar' /*case 'Toolbar'*/: break;
    					case 'hideofficelogo' /*case 'HideOfficeLogo'*/: break;
    					case 'spreadsheetautofit' /*case 'SpreadsheetAutoFit'*/: break;
    					case 'label' /*case 'Label'*/: break;
    					case 'caption' /*case 'Caption'*/: break;
    					case 'maxheight' /*case 'MaxHeight'*/: break;
    					case 'maxwidth' /*case 'MaxWidth'*/: break;
    					case 'nextsheetnumber' /*case 'NextSheetNumber'*/: break;
    					default: seen = false;
    				} break;

    				/* ExcelWorkbook */
    				case 'excelworkbook' /*case 'ExcelWorkbook'*/: switch(Rn[3]) {
    					case 'date1904' /*case 'Date1904'*/:
    						/*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */
    						Workbook.WBProps.date1904 = true;
    						break;
    					case 'windowheight' /*case 'WindowHeight'*/: break;
    					case 'windowwidth' /*case 'WindowWidth'*/: break;
    					case 'windowtopx' /*case 'WindowTopX'*/: break;
    					case 'windowtopy' /*case 'WindowTopY'*/: break;
    					case 'tabratio' /*case 'TabRatio'*/: break;
    					case 'protectstructure' /*case 'ProtectStructure'*/: break;
    					case 'protectwindow' /*case 'ProtectWindow'*/: break;
    					case 'protectwindows' /*case 'ProtectWindows'*/: break;
    					case 'activesheet' /*case 'ActiveSheet'*/: break;
    					case 'displayinknotes' /*case 'DisplayInkNotes'*/: break;
    					case 'firstvisiblesheet' /*case 'FirstVisibleSheet'*/: break;
    					case 'supbook' /*case 'SupBook'*/: break;
    					case 'sheetname' /*case 'SheetName'*/: break;
    					case 'sheetindex' /*case 'SheetIndex'*/: break;
    					case 'sheetindexfirst' /*case 'SheetIndexFirst'*/: break;
    					case 'sheetindexlast' /*case 'SheetIndexLast'*/: break;
    					case 'dll' /*case 'Dll'*/: break;
    					case 'acceptlabelsinformulas' /*case 'AcceptLabelsInFormulas'*/: break;
    					case 'donotsavelinkvalues' /*case 'DoNotSaveLinkValues'*/: break;
    					case 'iteration' /*case 'Iteration'*/: break;
    					case 'maxiterations' /*case 'MaxIterations'*/: break;
    					case 'maxchange' /*case 'MaxChange'*/: break;
    					case 'path' /*case 'Path'*/: break;
    					case 'xct' /*case 'Xct'*/: break;
    					case 'count' /*case 'Count'*/: break;
    					case 'selectedsheets' /*case 'SelectedSheets'*/: break;
    					case 'calculation' /*case 'Calculation'*/: break;
    					case 'uncalced' /*case 'Uncalced'*/: break;
    					case 'startupprompt' /*case 'StartupPrompt'*/: break;
    					case 'crn' /*case 'Crn'*/: break;
    					case 'externname' /*case 'ExternName'*/: break;
    					case 'formula' /*case 'Formula'*/: break;
    					case 'colfirst' /*case 'ColFirst'*/: break;
    					case 'collast' /*case 'ColLast'*/: break;
    					case 'wantadvise' /*case 'WantAdvise'*/: break;
    					case 'boolean' /*case 'Boolean'*/: break;
    					case 'error' /*case 'Error'*/: break;
    					case 'text' /*case 'Text'*/: break;
    					case 'ole' /*case 'OLE'*/: break;
    					case 'noautorecover' /*case 'NoAutoRecover'*/: break;
    					case 'publishobjects' /*case 'PublishObjects'*/: break;
    					case 'donotcalculatebeforesave' /*case 'DoNotCalculateBeforeSave'*/: break;
    					case 'number' /*case 'Number'*/: break;
    					case 'refmoder1c1' /*case 'RefModeR1C1'*/: break;
    					case 'embedsavesmarttags' /*case 'EmbedSaveSmartTags'*/: break;
    					default: seen = false;
    				} break;

    				/* WorkbookOptions */
    				case 'workbookoptions' /*case 'WorkbookOptions'*/: switch(Rn[3]) {
    					case 'owcversion' /*case 'OWCVersion'*/: break;
    					case 'height' /*case 'Height'*/: break;
    					case 'width' /*case 'Width'*/: break;
    					default: seen = false;
    				} break;

    				/* WorksheetOptions */
    				case 'worksheetoptions' /*case 'WorksheetOptions'*/: switch(Rn[3]) {
    					case 'visible' /*case 'Visible'*/:
    						if(Rn[0].slice(-2) === "/>");
    						else if(Rn[1]==="/") switch(str.slice(pidx, Rn.index)) {
    							case "SheetHidden": wsprops.Hidden = 1; break;
    							case "SheetVeryHidden": wsprops.Hidden = 2; break;
    						}
    						else pidx = Rn.index + Rn[0].length;
    						break;
    					case 'header' /*case 'Header'*/:
    						if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
    						if(!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet['!margins'].header = +parsexmltag(Rn[0]).Margin;
    						break;
    					case 'footer' /*case 'Footer'*/:
    						if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
    						if(!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet['!margins'].footer = +parsexmltag(Rn[0]).Margin;
    						break;
    					case 'pagemargins' /*case 'PageMargins'*/:
    						var pagemargins = parsexmltag(Rn[0]);
    						if(!cursheet['!margins']) default_margins(cursheet['!margins']={},'xlml');
    						if(!isNaN(+pagemargins.Top)) cursheet['!margins'].top = +pagemargins.Top;
    						if(!isNaN(+pagemargins.Left)) cursheet['!margins'].left = +pagemargins.Left;
    						if(!isNaN(+pagemargins.Right)) cursheet['!margins'].right = +pagemargins.Right;
    						if(!isNaN(+pagemargins.Bottom)) cursheet['!margins'].bottom = +pagemargins.Bottom;
    						break;
    					case 'displayrighttoleft' /*case 'DisplayRightToLeft'*/:
    						if(!Workbook.Views) Workbook.Views = [];
    						if(!Workbook.Views[0]) Workbook.Views[0] = {};
    						Workbook.Views[0].RTL = true;
    						break;

    					case 'freezepanes' /*case 'FreezePanes'*/: break;
    					case 'frozennosplit' /*case 'FrozenNoSplit'*/: break;

    					case 'splithorizontal' /*case 'SplitHorizontal'*/:
    					case 'splitvertical' /*case 'SplitVertical'*/:
    						break;

    					case 'donotdisplaygridlines' /*case 'DoNotDisplayGridlines'*/:
    						break;

    					case 'activerow' /*case 'ActiveRow'*/: break;
    					case 'activecol' /*case 'ActiveCol'*/: break;
    					case 'toprowbottompane' /*case 'TopRowBottomPane'*/: break;
    					case 'leftcolumnrightpane' /*case 'LeftColumnRightPane'*/: break;

    					case 'unsynced' /*case 'Unsynced'*/: break;
    					case 'print' /*case 'Print'*/: break;
    					case 'printerrors' /*case 'PrintErrors'*/: break;
    					case 'panes' /*case 'Panes'*/: break;
    					case 'scale' /*case 'Scale'*/: break;
    					case 'pane' /*case 'Pane'*/: break;
    					case 'number' /*case 'Number'*/: break;
    					case 'layout' /*case 'Layout'*/: break;
    					case 'pagesetup' /*case 'PageSetup'*/: break;
    					case 'selected' /*case 'Selected'*/: break;
    					case 'protectobjects' /*case 'ProtectObjects'*/: break;
    					case 'enableselection' /*case 'EnableSelection'*/: break;
    					case 'protectscenarios' /*case 'ProtectScenarios'*/: break;
    					case 'validprinterinfo' /*case 'ValidPrinterInfo'*/: break;
    					case 'horizontalresolution' /*case 'HorizontalResolution'*/: break;
    					case 'verticalresolution' /*case 'VerticalResolution'*/: break;
    					case 'numberofcopies' /*case 'NumberofCopies'*/: break;
    					case 'activepane' /*case 'ActivePane'*/: break;
    					case 'toprowvisible' /*case 'TopRowVisible'*/: break;
    					case 'leftcolumnvisible' /*case 'LeftColumnVisible'*/: break;
    					case 'fittopage' /*case 'FitToPage'*/: break;
    					case 'rangeselection' /*case 'RangeSelection'*/: break;
    					case 'papersizeindex' /*case 'PaperSizeIndex'*/: break;
    					case 'pagelayoutzoom' /*case 'PageLayoutZoom'*/: break;
    					case 'pagebreakzoom' /*case 'PageBreakZoom'*/: break;
    					case 'filteron' /*case 'FilterOn'*/: break;
    					case 'fitwidth' /*case 'FitWidth'*/: break;
    					case 'fitheight' /*case 'FitHeight'*/: break;
    					case 'commentslayout' /*case 'CommentsLayout'*/: break;
    					case 'zoom' /*case 'Zoom'*/: break;
    					case 'lefttoright' /*case 'LeftToRight'*/: break;
    					case 'gridlines' /*case 'Gridlines'*/: break;
    					case 'allowsort' /*case 'AllowSort'*/: break;
    					case 'allowfilter' /*case 'AllowFilter'*/: break;
    					case 'allowinsertrows' /*case 'AllowInsertRows'*/: break;
    					case 'allowdeleterows' /*case 'AllowDeleteRows'*/: break;
    					case 'allowinsertcols' /*case 'AllowInsertCols'*/: break;
    					case 'allowdeletecols' /*case 'AllowDeleteCols'*/: break;
    					case 'allowinserthyperlinks' /*case 'AllowInsertHyperlinks'*/: break;
    					case 'allowformatcells' /*case 'AllowFormatCells'*/: break;
    					case 'allowsizecols' /*case 'AllowSizeCols'*/: break;
    					case 'allowsizerows' /*case 'AllowSizeRows'*/: break;
    					case 'nosummaryrowsbelowdetail' /*case 'NoSummaryRowsBelowDetail'*/:
    						if(!cursheet["!outline"]) cursheet["!outline"] = {};
    						cursheet["!outline"].above = true;
    						break;
    					case 'tabcolorindex' /*case 'TabColorIndex'*/: break;
    					case 'donotdisplayheadings' /*case 'DoNotDisplayHeadings'*/: break;
    					case 'showpagelayoutzoom' /*case 'ShowPageLayoutZoom'*/: break;
    					case 'nosummarycolumnsrightdetail' /*case 'NoSummaryColumnsRightDetail'*/:
    						if(!cursheet["!outline"]) cursheet["!outline"] = {};
    						cursheet["!outline"].left = true;
    						break;
    					case 'blackandwhite' /*case 'BlackAndWhite'*/: break;
    					case 'donotdisplayzeros' /*case 'DoNotDisplayZeros'*/: break;
    					case 'displaypagebreak' /*case 'DisplayPageBreak'*/: break;
    					case 'rowcolheadings' /*case 'RowColHeadings'*/: break;
    					case 'donotdisplayoutline' /*case 'DoNotDisplayOutline'*/: break;
    					case 'noorientation' /*case 'NoOrientation'*/: break;
    					case 'allowusepivottables' /*case 'AllowUsePivotTables'*/: break;
    					case 'zeroheight' /*case 'ZeroHeight'*/: break;
    					case 'viewablerange' /*case 'ViewableRange'*/: break;
    					case 'selection' /*case 'Selection'*/: break;
    					case 'protectcontents' /*case 'ProtectContents'*/: break;
    					default: seen = false;
    				} break;

    				/* PivotTable */
    				case 'pivottable' /*case 'PivotTable'*/: case 'pivotcache' /*case 'PivotCache'*/: switch(Rn[3]) {
    					case 'immediateitemsondrop' /*case 'ImmediateItemsOnDrop'*/: break;
    					case 'showpagemultipleitemlabel' /*case 'ShowPageMultipleItemLabel'*/: break;
    					case 'compactrowindent' /*case 'CompactRowIndent'*/: break;
    					case 'location' /*case 'Location'*/: break;
    					case 'pivotfield' /*case 'PivotField'*/: break;
    					case 'orientation' /*case 'Orientation'*/: break;
    					case 'layoutform' /*case 'LayoutForm'*/: break;
    					case 'layoutsubtotallocation' /*case 'LayoutSubtotalLocation'*/: break;
    					case 'layoutcompactrow' /*case 'LayoutCompactRow'*/: break;
    					case 'position' /*case 'Position'*/: break;
    					case 'pivotitem' /*case 'PivotItem'*/: break;
    					case 'datatype' /*case 'DataType'*/: break;
    					case 'datafield' /*case 'DataField'*/: break;
    					case 'sourcename' /*case 'SourceName'*/: break;
    					case 'parentfield' /*case 'ParentField'*/: break;
    					case 'ptlineitems' /*case 'PTLineItems'*/: break;
    					case 'ptlineitem' /*case 'PTLineItem'*/: break;
    					case 'countofsameitems' /*case 'CountOfSameItems'*/: break;
    					case 'item' /*case 'Item'*/: break;
    					case 'itemtype' /*case 'ItemType'*/: break;
    					case 'ptsource' /*case 'PTSource'*/: break;
    					case 'cacheindex' /*case 'CacheIndex'*/: break;
    					case 'consolidationreference' /*case 'ConsolidationReference'*/: break;
    					case 'filename' /*case 'FileName'*/: break;
    					case 'reference' /*case 'Reference'*/: break;
    					case 'nocolumngrand' /*case 'NoColumnGrand'*/: break;
    					case 'norowgrand' /*case 'NoRowGrand'*/: break;
    					case 'blanklineafteritems' /*case 'BlankLineAfterItems'*/: break;
    					case 'hidden' /*case 'Hidden'*/: break;
    					case 'subtotal' /*case 'Subtotal'*/: break;
    					case 'basefield' /*case 'BaseField'*/: break;
    					case 'mapchilditems' /*case 'MapChildItems'*/: break;
    					case 'function' /*case 'Function'*/: break;
    					case 'refreshonfileopen' /*case 'RefreshOnFileOpen'*/: break;
    					case 'printsettitles' /*case 'PrintSetTitles'*/: break;
    					case 'mergelabels' /*case 'MergeLabels'*/: break;
    					case 'defaultversion' /*case 'DefaultVersion'*/: break;
    					case 'refreshname' /*case 'RefreshName'*/: break;
    					case 'refreshdate' /*case 'RefreshDate'*/: break;
    					case 'refreshdatecopy' /*case 'RefreshDateCopy'*/: break;
    					case 'versionlastrefresh' /*case 'VersionLastRefresh'*/: break;
    					case 'versionlastupdate' /*case 'VersionLastUpdate'*/: break;
    					case 'versionupdateablemin' /*case 'VersionUpdateableMin'*/: break;
    					case 'versionrefreshablemin' /*case 'VersionRefreshableMin'*/: break;
    					case 'calculation' /*case 'Calculation'*/: break;
    					default: seen = false;
    				} break;

    				/* PageBreaks */
    				case 'pagebreaks' /*case 'PageBreaks'*/: switch(Rn[3]) {
    					case 'colbreaks' /*case 'ColBreaks'*/: break;
    					case 'colbreak' /*case 'ColBreak'*/: break;
    					case 'rowbreaks' /*case 'RowBreaks'*/: break;
    					case 'rowbreak' /*case 'RowBreak'*/: break;
    					case 'colstart' /*case 'ColStart'*/: break;
    					case 'colend' /*case 'ColEnd'*/: break;
    					case 'rowend' /*case 'RowEnd'*/: break;
    					default: seen = false;
    				} break;

    				/* AutoFilter */
    				case 'autofilter' /*case 'AutoFilter'*/: switch(Rn[3]) {
    					case 'autofiltercolumn' /*case 'AutoFilterColumn'*/: break;
    					case 'autofiltercondition' /*case 'AutoFilterCondition'*/: break;
    					case 'autofilterand' /*case 'AutoFilterAnd'*/: break;
    					case 'autofilteror' /*case 'AutoFilterOr'*/: break;
    					default: seen = false;
    				} break;

    				/* QueryTable */
    				case 'querytable' /*case 'QueryTable'*/: switch(Rn[3]) {
    					case 'id' /*case 'Id'*/: break;
    					case 'autoformatfont' /*case 'AutoFormatFont'*/: break;
    					case 'autoformatpattern' /*case 'AutoFormatPattern'*/: break;
    					case 'querysource' /*case 'QuerySource'*/: break;
    					case 'querytype' /*case 'QueryType'*/: break;
    					case 'enableredirections' /*case 'EnableRedirections'*/: break;
    					case 'refreshedinxl9' /*case 'RefreshedInXl9'*/: break;
    					case 'urlstring' /*case 'URLString'*/: break;
    					case 'htmltables' /*case 'HTMLTables'*/: break;
    					case 'connection' /*case 'Connection'*/: break;
    					case 'commandtext' /*case 'CommandText'*/: break;
    					case 'refreshinfo' /*case 'RefreshInfo'*/: break;
    					case 'notitles' /*case 'NoTitles'*/: break;
    					case 'nextid' /*case 'NextId'*/: break;
    					case 'columninfo' /*case 'ColumnInfo'*/: break;
    					case 'overwritecells' /*case 'OverwriteCells'*/: break;
    					case 'donotpromptforfile' /*case 'DoNotPromptForFile'*/: break;
    					case 'textwizardsettings' /*case 'TextWizardSettings'*/: break;
    					case 'source' /*case 'Source'*/: break;
    					case 'number' /*case 'Number'*/: break;
    					case 'decimal' /*case 'Decimal'*/: break;
    					case 'thousandseparator' /*case 'ThousandSeparator'*/: break;
    					case 'trailingminusnumbers' /*case 'TrailingMinusNumbers'*/: break;
    					case 'formatsettings' /*case 'FormatSettings'*/: break;
    					case 'fieldtype' /*case 'FieldType'*/: break;
    					case 'delimiters' /*case 'Delimiters'*/: break;
    					case 'tab' /*case 'Tab'*/: break;
    					case 'comma' /*case 'Comma'*/: break;
    					case 'autoformatname' /*case 'AutoFormatName'*/: break;
    					case 'versionlastedit' /*case 'VersionLastEdit'*/: break;
    					case 'versionlastrefresh' /*case 'VersionLastRefresh'*/: break;
    					default: seen = false;
    				} break;

    				case 'datavalidation' /*case 'DataValidation'*/:
    				switch(Rn[3]) {
    					case 'range' /*case 'Range'*/: break;

    					case 'type' /*case 'Type'*/: break;
    					case 'min' /*case 'Min'*/: break;
    					case 'max' /*case 'Max'*/: break;
    					case 'sort' /*case 'Sort'*/: break;
    					case 'descending' /*case 'Descending'*/: break;
    					case 'order' /*case 'Order'*/: break;
    					case 'casesensitive' /*case 'CaseSensitive'*/: break;
    					case 'value' /*case 'Value'*/: break;
    					case 'errorstyle' /*case 'ErrorStyle'*/: break;
    					case 'errormessage' /*case 'ErrorMessage'*/: break;
    					case 'errortitle' /*case 'ErrorTitle'*/: break;
    					case 'inputmessage' /*case 'InputMessage'*/: break;
    					case 'inputtitle' /*case 'InputTitle'*/: break;
    					case 'combohide' /*case 'ComboHide'*/: break;
    					case 'inputhide' /*case 'InputHide'*/: break;
    					case 'condition' /*case 'Condition'*/: break;
    					case 'qualifier' /*case 'Qualifier'*/: break;
    					case 'useblank' /*case 'UseBlank'*/: break;
    					case 'value1' /*case 'Value1'*/: break;
    					case 'value2' /*case 'Value2'*/: break;
    					case 'format' /*case 'Format'*/: break;

    					case 'cellrangelist' /*case 'CellRangeList'*/: break;
    					default: seen = false;
    				} break;

    				case 'sorting' /*case 'Sorting'*/:
    				case 'conditionalformatting' /*case 'ConditionalFormatting'*/:
    				switch(Rn[3]) {
    					case 'range' /*case 'Range'*/: break;
    					case 'type' /*case 'Type'*/: break;
    					case 'min' /*case 'Min'*/: break;
    					case 'max' /*case 'Max'*/: break;
    					case 'sort' /*case 'Sort'*/: break;
    					case 'descending' /*case 'Descending'*/: break;
    					case 'order' /*case 'Order'*/: break;
    					case 'casesensitive' /*case 'CaseSensitive'*/: break;
    					case 'value' /*case 'Value'*/: break;
    					case 'errorstyle' /*case 'ErrorStyle'*/: break;
    					case 'errormessage' /*case 'ErrorMessage'*/: break;
    					case 'errortitle' /*case 'ErrorTitle'*/: break;
    					case 'cellrangelist' /*case 'CellRangeList'*/: break;
    					case 'inputmessage' /*case 'InputMessage'*/: break;
    					case 'inputtitle' /*case 'InputTitle'*/: break;
    					case 'combohide' /*case 'ComboHide'*/: break;
    					case 'inputhide' /*case 'InputHide'*/: break;
    					case 'condition' /*case 'Condition'*/: break;
    					case 'qualifier' /*case 'Qualifier'*/: break;
    					case 'useblank' /*case 'UseBlank'*/: break;
    					case 'value1' /*case 'Value1'*/: break;
    					case 'value2' /*case 'Value2'*/: break;
    					case 'format' /*case 'Format'*/: break;
    					default: seen = false;
    				} break;

    				/* MapInfo (schema) */
    				case 'mapinfo' /*case 'MapInfo'*/: case 'schema' /*case 'Schema'*/: case 'data' /*case 'data'*/: switch(Rn[3]) {
    					case 'map' /*case 'Map'*/: break;
    					case 'entry' /*case 'Entry'*/: break;
    					case 'range' /*case 'Range'*/: break;
    					case 'xpath' /*case 'XPath'*/: break;
    					case 'field' /*case 'Field'*/: break;
    					case 'xsdtype' /*case 'XSDType'*/: break;
    					case 'filteron' /*case 'FilterOn'*/: break;
    					case 'aggregate' /*case 'Aggregate'*/: break;
    					case 'elementtype' /*case 'ElementType'*/: break;
    					case 'attributetype' /*case 'AttributeType'*/: break;
    				/* These are from xsd (XML Schema Definition) */
    					case 'schema' /*case 'schema'*/:
    					case 'element' /*case 'element'*/:
    					case 'complextype' /*case 'complexType'*/:
    					case 'datatype' /*case 'datatype'*/:
    					case 'all' /*case 'all'*/:
    					case 'attribute' /*case 'attribute'*/:
    					case 'extends' /*case 'extends'*/: break;

    					case 'row' /*case 'row'*/: break;
    					default: seen = false;
    				} break;

    				/* SmartTags (can be anything) */
    				case 'smarttags' /*case 'SmartTags'*/: break;

    				default: seen = false; break;
    			}
    			if(seen) break;
    			/* CustomDocumentProperties */
    			if(Rn[3].match(/!\[CDATA/)) break;
    			if(!state[state.length-1][1]) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
    			if(state[state.length-1][0]===/*'CustomDocumentProperties'*/'customdocumentproperties') {
    				if(Rn[0].slice(-2) === "/>") break;
    				else if(Rn[1]==="/") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
    				else { cp = Rn; pidx = Rn.index + Rn[0].length; }
    				break;
    			}
    			if(opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
    	}
    	var out = ({}/*:any*/);
    	if(!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
    	out.SheetNames = sheetnames;
    	out.Workbook = Workbook;
    	out.SSF = dup(table_fmt);
    	out.Props = Props;
    	out.Custprops = Custprops;
    	return out;
    }

    function parse_xlml(data/*:RawBytes|string*/, opts)/*:Workbook*/ {
    	fix_read_opts(opts=opts||{});
    	switch(opts.type||"base64") {
    		case "base64": return parse_xlml_xml(Base64_decode(data), opts);
    		case "binary": case "buffer": case "file": return parse_xlml_xml(data, opts);
    		case "array": return parse_xlml_xml(a2s(data), opts);
    	}
    	/*:: throw new Error("unsupported type " + opts.type); */
    }

    /* TODO */
    function write_props_xlml(wb/*:Workbook*/, opts)/*:string*/ {
    	var o/*:Array<string>*/ = [];
    	/* DocumentProperties */
    	if(wb.Props) o.push(xlml_write_docprops(wb.Props, opts));
    	/* CustomDocumentProperties */
    	if(wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops));
    	return o.join("");
    }
    /* TODO */
    function write_wb_xlml(/*::wb, opts*/)/*:string*/ {
    	/* OfficeDocumentSettings */
    	/* ExcelWorkbook */
    	return "";
    }
    /* TODO */
    function write_sty_xlml(wb, opts)/*:string*/ {
    	/* Styles */
    	var styles/*:Array<string>*/ = ['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];
    	opts.cellXfs.forEach(function(xf, id) {
    		var payload/*:Array<string>*/ = [];
    		payload.push(writextag('NumberFormat', null, {"ss:Format": escapexml(table_fmt[xf.numFmtId])}));

    		var o = /*::(*/{"ss:ID": "s" + (21+id)}/*:: :any)*/;
    		styles.push(writextag('Style', payload.join(""), o));
    	});
    	return writextag("Styles", styles.join(""));
    }
    function write_name_xlml(n) { return writextag("NamedRange", null, {"ss:Name": n.Name, "ss:RefersTo":"=" + a1_to_rc(n.Ref, {r:0,c:0})}); }
    function write_names_xlml(wb/*::, opts*/)/*:string*/ {
    	if(!((wb||{}).Workbook||{}).Names) return "";
    	/*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error("unreachable"); */
    	var names/*:Array<any>*/ = wb.Workbook.Names;
    	var out/*:Array<string>*/ = [];
    	for(var i = 0; i < names.length; ++i) {
    		var n = names[i];
    		if(n.Sheet != null) continue;
    		if(n.Name.match(/^_xlfn\./)) continue;
    		out.push(write_name_xlml(n));
    	}
    	return writextag("Names", out.join(""));
    }
    function write_ws_xlml_names(ws/*:Worksheet*/, opts, idx/*:number*/, wb/*:Workbook*/)/*:string*/ {
    	if(!ws) return "";
    	if(!((wb||{}).Workbook||{}).Names) return "";
    	/*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error("unreachable"); */
    	var names/*:Array<any>*/ = wb.Workbook.Names;
    	var out/*:Array<string>*/ = [];
    	for(var i = 0; i < names.length; ++i) {
    		var n = names[i];
    		if(n.Sheet != idx) continue;
    		/*switch(n.Name) {
    			case "_": continue;
    		}*/
    		if(n.Name.match(/^_xlfn\./)) continue;
    		out.push(write_name_xlml(n));
    	}
    	return out.join("");
    }
    /* WorksheetOptions */
    function write_ws_xlml_wsopts(ws/*:Worksheet*/, opts, idx/*:number*/, wb/*:Workbook*/)/*:string*/ {
    	if(!ws) return "";
    	var o/*:Array<string>*/ = [];
    	/* NOTE: spec technically allows any order, but stick with implied order */

    	/* FitToPage */
    	/* DoNotDisplayColHeaders */
    	/* DoNotDisplayRowHeaders */
    	/* ViewableRange */
    	/* Selection */
    	/* GridlineColor */
    	/* Name */
    	/* ExcelWorksheetType */
    	/* IntlMacro */
    	/* Unsynced */
    	/* Selected */
    	/* CodeName */

    	if(ws['!margins']) {
    		o.push("<PageSetup>");
    		if(ws['!margins'].header) o.push(writextag("Header", null, {'x:Margin':ws['!margins'].header}));
    		if(ws['!margins'].footer) o.push(writextag("Footer", null, {'x:Margin':ws['!margins'].footer}));
    		o.push(writextag("PageMargins", null, {
    			'x:Bottom': ws['!margins'].bottom || "0.75",
    			'x:Left': ws['!margins'].left || "0.7",
    			'x:Right': ws['!margins'].right || "0.7",
    			'x:Top': ws['!margins'].top || "0.75"
    		}));
    		o.push("</PageSetup>");
    	}

    	/* PageSetup */
    	/* DisplayPageBreak */
    	/* TransitionExpressionEvaluation */
    	/* TransitionFormulaEntry */
    	/* Print */
    	/* Zoom */
    	/* PageLayoutZoom */
    	/* PageBreakZoom */
    	/* ShowPageBreakZoom */
    	/* DefaultRowHeight */
    	/* DefaultColumnWidth */
    	/* StandardWidth */

    	if(wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
    		/* Visible */
    		if(wb.Workbook.Sheets[idx].Hidden) o.push(writextag("Visible", (wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden"), {}));
    		else {
    			/* Selected */
    			for(var i = 0; i < idx; ++i) if(wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;
    			if(i == idx) o.push("<Selected/>");
    		}
    	}

    	/* LeftColumnVisible */

    	if(((((wb||{}).Workbook||{}).Views||[])[0]||{}).RTL) o.push("<DisplayRightToLeft/>");

    	/* GridlineColorIndex */
    	/* DisplayFormulas */
    	/* DoNotDisplayGridlines */
    	/* DoNotDisplayHeadings */
    	/* DoNotDisplayOutline */
    	/* ApplyAutomaticOutlineStyles */
    	/* NoSummaryRowsBelowDetail */
    	/* NoSummaryColumnsRightDetail */
    	/* DoNotDisplayZeros */
    	/* ActiveRow */
    	/* ActiveColumn */
    	/* FilterOn */
    	/* RangeSelection */
    	/* TopRowVisible */
    	/* TopRowBottomPane */
    	/* LeftColumnRightPane */
    	/* ActivePane */
    	/* SplitHorizontal */
    	/* SplitVertical */
    	/* FreezePanes */
    	/* FrozenNoSplit */
    	/* TabColorIndex */
    	/* Panes */

    	/* NOTE: Password not supported in XLML Format */
    	if(ws['!protect']) {
    		o.push(writetag("ProtectContents", "True"));
    		if(ws['!protect'].objects) o.push(writetag("ProtectObjects", "True"));
    		if(ws['!protect'].scenarios) o.push(writetag("ProtectScenarios", "True"));
    		if(ws['!protect'].selectLockedCells != null && !ws['!protect'].selectLockedCells) o.push(writetag("EnableSelection", "NoSelection"));
    		else if(ws['!protect'].selectUnlockedCells != null && !ws['!protect'].selectUnlockedCells) o.push(writetag("EnableSelection", "UnlockedCells"));
    	[
    		[ "formatCells", "AllowFormatCells" ],
    		[ "formatColumns", "AllowSizeCols" ],
    		[ "formatRows", "AllowSizeRows" ],
    		[ "insertColumns", "AllowInsertCols" ],
    		[ "insertRows", "AllowInsertRows" ],
    		[ "insertHyperlinks", "AllowInsertHyperlinks" ],
    		[ "deleteColumns", "AllowDeleteCols" ],
    		[ "deleteRows", "AllowDeleteRows" ],
    		[ "sort", "AllowSort" ],
    		[ "autoFilter", "AllowFilter" ],
    		[ "pivotTables", "AllowUsePivotTables" ]
    	].forEach(function(x) { if(ws['!protect'][x[0]]) o.push("<"+x[1]+"/>"); });
    	}

    	if(o.length == 0) return "";
    	return writextag("WorksheetOptions", o.join(""), {xmlns:XLMLNS.x});
    }
    function write_ws_xlml_comment(comments/*:Array<any>*/)/*:string*/ {
    	return comments.map(function(c) {
    		// TODO: formatted text
    		var t = xlml_unfixstr(c.t||"");
    		var d =writextag("ss:Data", t, {"xmlns":"http://www.w3.org/TR/REC-html40"});
    		return writextag("Comment", d, {"ss:Author":c.a});
    	}).join("");
    }
    function write_ws_xlml_cell(cell, ref/*:string*/, ws, opts, idx/*:number*/, wb, addr)/*:string*/{
    	if(!cell || (cell.v == undefined && cell.f == undefined)) return "";

    	var attr = {};
    	if(cell.f) attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
    	if(cell.F && cell.F.slice(0, ref.length) == ref) {
    		var end = decode_cell(cell.F.slice(ref.length + 1));
    		attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
    	}

    	if(cell.l && cell.l.Target) {
    		attr["ss:HRef"] = escapexml(cell.l.Target);
    		if(cell.l.Tooltip) attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
    	}

    	if(ws['!merges']) {
    		var marr = ws['!merges'];
    		for(var mi = 0; mi != marr.length; ++mi) {
    			if(marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;
    			if(marr[mi].e.c > marr[mi].s.c) attr['ss:MergeAcross'] = marr[mi].e.c - marr[mi].s.c;
    			if(marr[mi].e.r > marr[mi].s.r) attr['ss:MergeDown'] = marr[mi].e.r - marr[mi].s.r;
    		}
    	}

    	var t = "", p = "";
    	switch(cell.t) {
    		case 'z': if(!opts.sheetStubs) return ""; break;
    		case 'n': t = 'Number'; p = String(cell.v); break;
    		case 'b': t = 'Boolean'; p = (cell.v ? "1" : "0"); break;
    		case 'e': t = 'Error'; p = BErr[cell.v]; break;
    		case 'd': t = 'DateTime'; p = new Date(cell.v).toISOString(); if(cell.z == null) cell.z = cell.z || table_fmt[14]; break;
    		case 's': t = 'String'; p = escapexlml(cell.v||""); break;
    	}
    	/* TODO: cell style */
    	var os = get_cell_style(opts.cellXfs, cell, opts);
    	attr["ss:StyleID"] = "s" + (21+os);
    	attr["ss:Index"] = addr.c + 1;
    	var _v = (cell.v != null ? p : "");
    	var m = cell.t == 'z' ? "" : ('<Data ss:Type="' + t + '">' + _v + '</Data>');

    	if((cell.c||[]).length > 0) m += write_ws_xlml_comment(cell.c);

    	return writextag("Cell", m, attr);
    }
    function write_ws_xlml_row(R/*:number*/, row)/*:string*/ {
    	var o = '<Row ss:Index="' + (R+1) + '"';
    	if(row) {
    		if(row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);
    		if(row.hpx) o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
    		if(row.hidden) o += ' ss:Hidden="1"';
    	}
    	return o + '>';
    }
    /* TODO */
    function write_ws_xlml_table(ws/*:Worksheet*/, opts, idx/*:number*/, wb/*:Workbook*/)/*:string*/ {
    	if(!ws['!ref']) return "";
    	var range/*:Range*/ = safe_decode_range(ws['!ref']);
    	var marr/*:Array<Range>*/ = ws['!merges'] || [], mi = 0;
    	var o/*:Array<string>*/ = [];
    	if(ws['!cols']) ws['!cols'].forEach(function(n, i) {
    		process_col(n);
    		var w = !!n.width;
    		var p = col_obj_w(i, n);
    		var k/*:any*/ = {"ss:Index":i+1};
    		if(w) k['ss:Width'] = width2px(p.width);
    		if(n.hidden) k['ss:Hidden']="1";
    		o.push(writextag("Column",null,k));
    	});
    	var dense = Array.isArray(ws);
    	for(var R = range.s.r; R <= range.e.r; ++R) {
    		var row = [write_ws_xlml_row(R, (ws['!rows']||[])[R])];
    		for(var C = range.s.c; C <= range.e.c; ++C) {
    			var skip = false;
    			for(mi = 0; mi != marr.length; ++mi) {
    				if(marr[mi].s.c > C) continue;
    				if(marr[mi].s.r > R) continue;
    				if(marr[mi].e.c < C) continue;
    				if(marr[mi].e.r < R) continue;
    				if(marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
    				break;
    			}
    			if(skip) continue;
    			var addr = {r:R,c:C};
    			var ref = encode_cell(addr), cell = dense ? (ws[R]||[])[C] : ws[ref];
    			row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
    		}
    		row.push("</Row>");
    		if(row.length > 2) o.push(row.join(""));
    	}
    	return o.join("");
    }
    function write_ws_xlml(idx/*:number*/, opts, wb/*:Workbook*/)/*:string*/ {
    	var o/*:Array<string>*/ = [];
    	var s = wb.SheetNames[idx];
    	var ws = wb.Sheets[s];

    	var t/*:string*/ = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
    	if(t.length > 0) o.push("<Names>" + t + "</Names>");

    	/* Table */
    	t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
    	if(t.length > 0) o.push("<Table>" + t + "</Table>");

    	/* WorksheetOptions */
    	o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));

    	return o.join("");
    }
    function write_xlml(wb, opts)/*:string*/ {
    	if(!opts) opts = {};
    	if(!wb.SSF) wb.SSF = dup(table_fmt);
    	if(wb.SSF) {
    		make_ssf(); SSF_load_table(wb.SSF);
    		// $FlowIgnore
    		opts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;
    		opts.ssf = wb.SSF;
    		opts.cellXfs = [];
    		get_cell_style(opts.cellXfs, {}, {revssf:{"General":0}});
    	}
    	var d/*:Array<string>*/ = [];
    	d.push(write_props_xlml(wb, opts));
    	d.push(write_wb_xlml());
    	d.push("");
    	d.push("");
    	for(var i = 0; i < wb.SheetNames.length; ++i)
    		d.push(writextag("Worksheet", write_ws_xlml(i, opts, wb), {"ss:Name":escapexml(wb.SheetNames[i])}));
    	d[2] = write_sty_xlml(wb, opts);
    	d[3] = write_names_xlml(wb);
    	return XML_HEADER + writextag("Workbook", d.join(""), {
    		'xmlns':      XLMLNS.ss,
    		'xmlns:o':    XLMLNS.o,
    		'xmlns:x':    XLMLNS.x,
    		'xmlns:ss':   XLMLNS.ss,
    		'xmlns:dt':   XLMLNS.dt,
    		'xmlns:html': XLMLNS.html
    	});
    }
    /* [MS-OLEDS] 2.3.8 CompObjStream */
    function parse_compobj(obj/*:CFBEntry*/) {
    	var v = {};
    	var o = obj.content;
    	/*:: if(o == null) return; */

    	/* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */
    	o.l = 28;

    	v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
    	v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);

    	if(o.length - o.l <= 4) return v;

    	var m/*:number*/ = o.read_shift(4);
    	if(m == 0 || m > 40) return v;
    	o.l-=4; v.Reserved1 = o.read_shift(0, "lpstr-ansi");

    	if(o.length - o.l <= 4) return v;
    	m = o.read_shift(4);
    	if(m !== 0x71b239f4) return v;
    	v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);

    	m = o.read_shift(4);
    	if(m == 0 || m > 40) return v;
    	o.l-=4; v.Reserved2 = o.read_shift(0, "lpwstr");
    }

    /*
    	Continue logic for:
    	- 2.4.58 Continue          0x003c
    	- 2.4.59 ContinueBigName   0x043c
    	- 2.4.60 ContinueFrt       0x0812
    	- 2.4.61 ContinueFrt11     0x0875
    	- 2.4.62 ContinueFrt12     0x087f
    */
    var CONTINUE_RT = [ 0x003c, 0x043c, 0x0812, 0x0875, 0x087f ];
    function slurp(RecordType, R, blob, length/*:number*/, opts)/*:any*/ {
    	var l = length;
    	var bufs = [];
    	var d = blob.slice(blob.l,blob.l+l);
    	if(opts && opts.enc && opts.enc.insitu && d.length > 0) switch(RecordType) {
    	case 0x0009: case 0x0209: case 0x0409: case 0x0809/* BOF */: case 0x002f /* FilePass */: case 0x0195 /* FileLock */: case 0x00e1 /* InterfaceHdr */: case 0x0196 /* RRDInfo */: case 0x0138 /* RRDHead */: case 0x0194 /* UsrExcl */: case 0x000a /* EOF */:
    		break;
    	case 0x0085 /* BoundSheet8 */:
    		break;
    	default:
    		opts.enc.insitu(d);
    	}
    	bufs.push(d);
    	blob.l += l;
    	var nextrt = __readUInt16LE(blob,blob.l), next = XLSRecordEnum[nextrt];
    	var start = 0;
    	while(next != null && CONTINUE_RT.indexOf(nextrt) > -1) {
    		l = __readUInt16LE(blob,blob.l+2);
    		start = blob.l + 4;
    		if(nextrt == 0x0812 /* ContinueFrt */) start += 4;
    		else if(nextrt == 0x0875 || nextrt == 0x087f) {
    			start += 12;
    		}
    		d = blob.slice(start,blob.l+4+l);
    		bufs.push(d);
    		blob.l += 4+l;
    		next = (XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)]);
    	}
    	var b = (bconcat(bufs)/*:any*/);
    	prep_blob(b, 0);
    	var ll = 0; b.lens = [];
    	for(var j = 0; j < bufs.length; ++j) { b.lens.push(ll); ll += bufs[j].length; }
    	if(b.length < length) throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b.length + " < " + length;
    	return R.f(b, b.length, opts);
    }

    function safe_format_xf(p/*:any*/, opts/*:ParseOpts*/, date1904/*:?boolean*/) {
    	if(p.t === 'z') return;
    	if(!p.XF) return;
    	var fmtid = 0;
    	try {
    		fmtid = p.z || p.XF.numFmtId || 0;
    		if(opts.cellNF) p.z = table_fmt[fmtid];
    	} catch(e) { if(opts.WTF) throw e; }
    	if(!opts || opts.cellText !== false) try {
    		if(p.t === 'e') { p.w = p.w || BErr[p.v]; }
    		else if(fmtid === 0 || fmtid == "General") {
    			if(p.t === 'n') {
    				if((p.v|0) === p.v) p.w = p.v.toString(10);
    				else p.w = SSF_general_num(p.v);
    			}
    			else p.w = SSF_general(p.v);
    		}
    		else p.w = SSF_format(fmtid,p.v, {date1904:!!date1904, dateNF: opts && opts.dateNF});
    	} catch(e) { if(opts.WTF) throw e; }
    	if(opts.cellDates && fmtid && p.t == 'n' && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
    		var _d = SSF_parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
    	}
    }

    function make_cell(val, ixfe, t)/*:Cell*/ {
    	return ({v:val, ixfe:ixfe, t:t}/*:any*/);
    }

    // 2.3.2
    function parse_workbook(blob, options/*:ParseOpts*/)/*:Workbook*/ {
    	var wb = ({opts:{}}/*:any*/);
    	var Sheets = {};
    	var out/*:Worksheet*/ = ((options.dense ? [] : {})/*:any*/);
    	var Directory = {};
    	var range/*:Range*/ = ({}/*:any*/);
    	var last_formula = null;
    	var sst/*:SST*/ = ([]/*:any*/);
    	var cur_sheet = "";
    	var Preamble = {};
    	var lastcell, last_cell = "", cc/*:Cell*/, cmnt, rngC, rngR;
    	var sharedf = {};
    	var arrayf/*:Array<[Range, string]>*/ = [];
    	var temp_val/*:Cell*/;
    	var country;
    	var XFs = []; /* XF records */
    	var palette/*:Array<[number, number, number]>*/ = [];
    	var Workbook/*:WBWBProps*/ = ({ Sheets:[], WBProps:{date1904:false}, Views:[{}] }/*:any*/), wsprops = {};
    	var get_rgb = function getrgb(icv/*:number*/)/*:[number, number, number]*/ {
    		if(icv < 8) return XLSIcv[icv];
    		if(icv < 64) return palette[icv-8] || XLSIcv[icv];
    		return XLSIcv[icv];
    	};
    	var process_cell_style = function pcs(cell, line/*:any*/, options) {
    		var xfd = line.XF.data;
    		if(!xfd || !xfd.patternType || !options || !options.cellStyles) return;
    		line.s = ({}/*:any*/);
    		line.s.patternType = xfd.patternType;
    		var t;
    		if((t = rgb2Hex(get_rgb(xfd.icvFore)))) { line.s.fgColor = {rgb:t}; }
    		if((t = rgb2Hex(get_rgb(xfd.icvBack)))) { line.s.bgColor = {rgb:t}; }
    	};
    	var addcell = function addcell(cell/*:any*/, line/*:any*/, options/*:any*/) {
    		if(file_depth > 1) return;
    		if(options.sheetRows && cell.r >= options.sheetRows) return;
    		if(options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);
    		delete line.ixfe; delete line.XF;
    		lastcell = cell;
    		last_cell = encode_cell(cell);
    		if(!range || !range.s || !range.e) range = {s:{r:0,c:0},e:{r:0,c:0}};
    		if(cell.r < range.s.r) range.s.r = cell.r;
    		if(cell.c < range.s.c) range.s.c = cell.c;
    		if(cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
    		if(cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
    		if(options.cellFormula && line.f) {
    			for(var afi = 0; afi < arrayf.length; ++afi) {
    				if(arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
    				if(arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
    				line.F = encode_range(arrayf[afi][0]);
    				if(arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
    				if(line.f) line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
    				break;
    			}
    		}
    		{
    			if(options.dense) {
    				if(!out[cell.r]) out[cell.r] = [];
    				out[cell.r][cell.c] = line;
    			} else out[last_cell] = line;
    		}
    	};
    	var opts = ({
    		enc: false, // encrypted
    		sbcch: 0, // cch in the preceding SupBook
    		snames: [], // sheetnames
    		sharedf: sharedf, // shared formulae by address
    		arrayf: arrayf, // array formulae array
    		rrtabid: [], // RRTabId
    		lastuser: "", // Last User from WriteAccess
    		biff: 8, // BIFF version
    		codepage: 0, // CP from CodePage record
    		winlocked: 0, // fLockWn from WinProtect
    		cellStyles: !!options && !!options.cellStyles,
    		WTF: !!options && !!options.wtf
    	}/*:any*/);
    	if(options.password) opts.password = options.password;
    	var themes;
    	var merges/*:Array<Range>*/ = [];
    	var objects = [];
    	var colinfo/*:Array<ColInfo>*/ = [], rowinfo/*:Array<RowInfo>*/ = [];
    	var seencol = false;
    	var supbooks = ([]/*:any*/); // 1-indexed, will hold extern names
    	supbooks.SheetNames = opts.snames;
    	supbooks.sharedf = opts.sharedf;
    	supbooks.arrayf = opts.arrayf;
    	supbooks.names = [];
    	supbooks.XTI = [];
    	var last_RT = 0;
    	var file_depth = 0; /* TODO: make a real stack */
    	var BIFF2Fmt = 0, BIFF2FmtTable/*:Array<string>*/ = [];
    	var FilterDatabases = []; /* TODO: sort out supbooks and process elsewhere */
    	var last_lbl/*:?DefinedName*/;

    	/* explicit override for some broken writers */
    	opts.codepage = 1200;
    	set_cp(1200);
    	var seen_codepage = false;
    	while(blob.l < blob.length - 1) {
    		var s = blob.l;
    		var RecordType = blob.read_shift(2);
    		if(RecordType === 0 && last_RT === 0x000a /* EOF */) break;
    		var length = (blob.l === blob.length ? 0 : blob.read_shift(2));
    		var R = XLSRecordEnum[RecordType];
    		//console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);
    		//if(!R) console.log(blob.slice(blob.l, blob.l + length));
    		if(R && R.f) {
    			if(options.bookSheets) {
    				if(last_RT === 0x0085 /* BoundSheet8 */ && RecordType !== 0x0085 /* R.n !== 'BoundSheet8' */) break;
    			}
    			last_RT = RecordType;
    			if(R.r === 2 || R.r == 12) {
    				var rt = blob.read_shift(2); length -= 2;
    				if(!opts.enc && rt !== RecordType && (((rt&0xFF)<<8)|(rt>>8)) !== RecordType) throw new Error("rt mismatch: " + rt + "!=" + RecordType);
    				if(R.r == 12){
    					blob.l += 10; length -= 10;
    				} // skip FRT
    			}
    			//console.error(R,blob.l,length,blob.length);
    			var val/*:any*/ = ({}/*:any*/);
    			if(RecordType === 0x000a /* EOF */) val = /*::(*/R.f(blob, length, opts)/*:: :any)*/;
    			else val = /*::(*/slurp(RecordType, R, blob, length, opts)/*:: :any)*/;
    			/*:: val = (val:any); */
    			if(file_depth == 0 && [0x0009, 0x0209, 0x0409, 0x0809].indexOf(last_RT) === -1 /* 'BOF' */) continue;
    			switch(RecordType) {
    				case 0x0022 /* Date1904 */:
    					/*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */
    					wb.opts.Date1904 = Workbook.WBProps.date1904 = val; break;
    				case 0x0086 /* WriteProtect */: wb.opts.WriteProtect = true; break;
    				case 0x002f /* FilePass */:
    					if(!opts.enc) blob.l = 0;
    					opts.enc = val;
    					if(!options.password) throw new Error("File is password-protected");
    					if(val.valid == null) throw new Error("Encryption scheme unsupported");
    					if(!val.valid) throw new Error("Password is incorrect");
    					break;
    				case 0x005c /* WriteAccess */: opts.lastuser = val; break;
    				case 0x0042 /* CodePage */:
    					var cpval = Number(val);
    					/* overrides based on test cases */
    					switch(cpval) {
    						case 0x5212: cpval =  1200; break;
    						case 0x8000: cpval = 10000; break;
    						case 0x8001: cpval =  1252; break;
    					}
    					set_cp(opts.codepage = cpval);
    					seen_codepage = true;
    					break;
    				case 0x013d /* RRTabId */: opts.rrtabid = val; break;
    				case 0x0019 /* WinProtect */: opts.winlocked = val; break;
    				case 0x01b7 /* RefreshAll */: wb.opts["RefreshAll"] = val; break;
    				case 0x000c /* CalcCount */: wb.opts["CalcCount"] = val; break;
    				case 0x0010 /* CalcDelta */: wb.opts["CalcDelta"] = val; break;
    				case 0x0011 /* CalcIter */: wb.opts["CalcIter"] = val; break;
    				case 0x000d /* CalcMode */: wb.opts["CalcMode"] = val; break;
    				case 0x000e /* CalcPrecision */: wb.opts["CalcPrecision"] = val; break;
    				case 0x005f /* CalcSaveRecalc */: wb.opts["CalcSaveRecalc"] = val; break;
    				case 0x000f /* CalcRefMode */: opts.CalcRefMode = val; break; // TODO: implement R1C1
    				case 0x08a3 /* ForceFullCalculation */: wb.opts.FullCalc = val; break;
    				case 0x0081 /* WsBool */:
    					if(val.fDialog) out["!type"] = "dialog";
    					if(!val.fBelow) (out["!outline"] || (out["!outline"] = {})).above = true;
    					if(!val.fRight) (out["!outline"] || (out["!outline"] = {})).left = true;
    					break; // TODO
    				case 0x00e0 /* XF */:
    					XFs.push(val); break;
    				case 0x01ae /* SupBook */:
    					supbooks.push([val]);
    					supbooks[supbooks.length-1].XTI = [];
    					break;
    				case 0x0023: case 0x0223 /* ExternName */:
    					supbooks[supbooks.length-1].push(val);
    					break;
    				case 0x0018: case 0x0218 /* Lbl */:
    					last_lbl = ({
    						Name: val.Name,
    						Ref: stringify_formula(val.rgce,range,null,supbooks,opts)
    					}/*:DefinedName*/);
    					if(val.itab > 0) last_lbl.Sheet = val.itab - 1;
    					supbooks.names.push(last_lbl);
    					if(!supbooks[0]) { supbooks[0] = []; supbooks[0].XTI = []; }
    					supbooks[supbooks.length-1].push(val);
    					if(val.Name == "_xlnm._FilterDatabase" && val.itab > 0)
    						if(val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == 'PtgArea3d')
    							FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
    					break;
    				case 0x0016 /* ExternCount */: opts.ExternCount = val; break;
    				case 0x0017 /* ExternSheet */:
    					if(supbooks.length == 0) { supbooks[0] = []; supbooks[0].XTI = []; }
    					supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val); supbooks.XTI = supbooks.XTI.concat(val); break;
    				case 0x0894 /* NameCmt */:
    					/* TODO: search for correct name */
    					if(opts.biff < 8) break;
    					if(last_lbl != null) last_lbl.Comment = val[1];
    					break;
    				case 0x0012 /* Protect */: out["!protect"] = val; break; /* for sheet or book */
    				case 0x0013 /* Password */: if(val !== 0 && opts.WTF) console.error("Password verifier: " + val); break;
    				case 0x0085 /* BoundSheet8 */: {
    					Directory[val.pos] = val;
    					opts.snames.push(val.name);
    				} break;
    				case 0x000a /* EOF */: {
    					if(--file_depth) break;
    					if(range.e) {
    						if(range.e.r > 0 && range.e.c > 0) {
    							range.e.r--; range.e.c--;
    							out["!ref"] = encode_range(range);
    							if(options.sheetRows && options.sheetRows <= range.e.r) {
    								var tmpri = range.e.r;
    								range.e.r = options.sheetRows - 1;
    								out["!fullref"] = out["!ref"];
    								out["!ref"] = encode_range(range);
    								range.e.r = tmpri;
    							}
    							range.e.r++; range.e.c++;
    						}
    						if(merges.length > 0) out["!merges"] = merges;
    						if(objects.length > 0) out["!objects"] = objects;
    						if(colinfo.length > 0) out["!cols"] = colinfo;
    						if(rowinfo.length > 0) out["!rows"] = rowinfo;
    						Workbook.Sheets.push(wsprops);
    					}
    					if(cur_sheet === "") Preamble = out; else Sheets[cur_sheet] = out;
    					out = ((options.dense ? [] : {})/*:any*/);
    				} break;
    				case 0x0009: case 0x0209: case 0x0409: case 0x0809 /* BOF */: {
    					if(opts.biff === 8) opts.biff = {
    						/*::[*/0x0009/*::]*/:2,
    						/*::[*/0x0209/*::]*/:3,
    						/*::[*/0x0409/*::]*/:4
    					}[RecordType] || {
    						/*::[*/0x0200/*::]*/:2,
    						/*::[*/0x0300/*::]*/:3,
    						/*::[*/0x0400/*::]*/:4,
    						/*::[*/0x0500/*::]*/:5,
    						/*::[*/0x0600/*::]*/:8,
    						/*::[*/0x0002/*::]*/:2,
    						/*::[*/0x0007/*::]*/:2
    					}[val.BIFFVer] || 8;
    					opts.biffguess = val.BIFFVer == 0;
    					if(val.BIFFVer == 0 && val.dt == 0x1000) { opts.biff = 5; seen_codepage = true; set_cp(opts.codepage = 28591); }
    					if(opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;
    					if(file_depth++) break;
    					out = ((options.dense ? [] : {})/*:any*/);

    					if(opts.biff < 8 && !seen_codepage) { seen_codepage = true; set_cp(opts.codepage = options.codepage || 1252); }

    					if(opts.biff < 5 || val.BIFFVer == 0 && val.dt == 0x1000) {
    						if(cur_sheet === "") cur_sheet = "Sheet1";
    						range = {s:{r:0,c:0},e:{r:0,c:0}};
    						/* fake BoundSheet8 */
    						var fakebs8 = {pos: blob.l - length, name:cur_sheet};
    						Directory[fakebs8.pos] = fakebs8;
    						opts.snames.push(cur_sheet);
    					}
    					else cur_sheet = (Directory[s] || {name:""}).name;
    					if(val.dt == 0x20) out["!type"] = "chart";
    					if(val.dt == 0x40) out["!type"] = "macro";
    					merges = [];
    					objects = [];
    					opts.arrayf = arrayf = [];
    					colinfo = []; rowinfo = [];
    					seencol = false;
    					wsprops = {Hidden:(Directory[s]||{hs:0}).hs, name:cur_sheet };
    				} break;
    				case 0x0203 /* Number */: case 0x0003 /* BIFF2NUM */: case 0x0002 /* BIFF2INT */: {
    					if(out["!type"] == "chart") if(options.dense ? (out[val.r]||[])[val.c]: out[encode_cell({c:val.c, r:val.r})]) ++val.c;
    					temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe]||{}, v:val.val, t:'n'}/*:any*/);
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    				} break;
    				case 0x0005: case 0x0205 /* BoolErr */: {
    					temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:val.t}/*:any*/);
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    				} break;
    				case 0x027e /* RK */: {
    					temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.rknum, t:'n'}/*:any*/);
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    				} break;
    				case 0x00bd /* MulRk */: {
    					for(var j = val.c; j <= val.C; ++j) {
    						var ixfe = val.rkrec[j-val.c][0];
    						temp_val= ({ixfe:ixfe, XF:XFs[ixfe], v:val.rkrec[j-val.c][1], t:'n'}/*:any*/);
    						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    						safe_format_xf(temp_val, options, wb.opts.Date1904);
    						addcell({c:j, r:val.r}, temp_val, options);
    					}
    				} break;
    				case 0x0006: case 0x0206: case 0x0406 /* Formula */: {
    					if(val.val == 'String') { last_formula = val; break; }
    					temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
    					temp_val.XF = XFs[temp_val.ixfe];
    					if(options.cellFormula) {
    						var _f = val.formula;
    						if(_f && _f[0] && _f[0][0] && _f[0][0][0] == 'PtgExp') {
    							var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
    							var _fe = encode_cell({r:_fr, c:_fc});
    							if(sharedf[_fe]) temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
    							else temp_val.F = ((options.dense ? (out[_fr]||[])[_fc]: out[_fe]) || {}).F;
    						} else temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
    					}
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell(val.cell, temp_val, options);
    					last_formula = val;
    				} break;
    				case 0x0007: case 0x0207 /* String */: {
    					if(last_formula) { /* technically always true */
    						last_formula.val = val;
    						temp_val = make_cell(val, last_formula.cell.ixfe, 's');
    						temp_val.XF = XFs[temp_val.ixfe];
    						if(options.cellFormula) {
    							temp_val.f = ""+stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
    						}
    						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    						safe_format_xf(temp_val, options, wb.opts.Date1904);
    						addcell(last_formula.cell, temp_val, options);
    						last_formula = null;
    					} else throw new Error("String record expects Formula");
    				} break;
    				case 0x0021: case 0x0221 /* Array */: {
    					arrayf.push(val);
    					var _arraystart = encode_cell(val[0].s);
    					cc = options.dense ? (out[val[0].s.r]||[])[val[0].s.c] : out[_arraystart];
    					if(options.cellFormula && cc) {
    						if(!last_formula) break; /* technically unreachable */
    						if(!_arraystart || !cc) break;
    						cc.f = ""+stringify_formula(val[1], range, val[0], supbooks, opts);
    						cc.F = encode_range(val[0]);
    					}
    				} break;
    				case 0x04bc /* ShrFmla */: {
    					if(!options.cellFormula) break;
    					if(last_cell) {
    						/* TODO: capture range */
    						if(!last_formula) break; /* technically unreachable */
    						sharedf[encode_cell(last_formula.cell)]= val[0];
    						cc = options.dense ? (out[last_formula.cell.r]||[])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
    						(cc||{}).f = ""+stringify_formula(val[0], range, lastcell, supbooks, opts);
    					}
    				} break;
    				case 0x00fd /* LabelSst */:
    					temp_val=make_cell(sst[val.isst].t, val.ixfe, 's');
    					if(sst[val.isst].h) temp_val.h = sst[val.isst].h;
    					temp_val.XF = XFs[temp_val.ixfe];
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    					break;
    				case 0x0201 /* Blank */: if(options.sheetStubs) {
    					temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], t:'z'}/*:any*/);
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    				} break;
    				case 0x00be /* MulBlank */: if(options.sheetStubs) {
    					for(var _j = val.c; _j <= val.C; ++_j) {
    						var _ixfe = val.ixfe[_j-val.c];
    						temp_val= ({ixfe:_ixfe, XF:XFs[_ixfe], t:'z'}/*:any*/);
    						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    						safe_format_xf(temp_val, options, wb.opts.Date1904);
    						addcell({c:_j, r:val.r}, temp_val, options);
    					}
    				} break;
    				case 0x00d6 /* RString */:
    				case 0x0204 /* Label */: case 0x0004 /* BIFF2STR */:
    					temp_val=make_cell(val.val, val.ixfe, 's');
    					temp_val.XF = XFs[temp_val.ixfe];
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    					break;

    				case 0x0000: case 0x0200 /* Dimensions */: {
    					if(file_depth === 1) range = val; /* TODO: stack */
    				} break;
    				case 0x00fc /* SST */: {
    					sst = val;
    				} break;
    				case 0x041e /* Format */: { /* val = [id, fmt] */
    					if(opts.biff == 4) {
    						BIFF2FmtTable[BIFF2Fmt++] = val[1];
    						for(var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) if(table_fmt[b4idx] == val[1]) break;
    						if(b4idx >= 163) SSF_load(val[1], BIFF2Fmt + 163);
    					}
    					else SSF_load(val[1], val[0]);
    				} break;
    				case 0x001e /* BIFF2FORMAT */: {
    					BIFF2FmtTable[BIFF2Fmt++] = val;
    					for(var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if(table_fmt[b2idx] == val) break;
    					if(b2idx >= 163) SSF_load(val, BIFF2Fmt + 163);
    				} break;

    				case 0x00e5 /* MergeCells */: merges = merges.concat(val); break;

    				case 0x005d /* Obj */: objects[val.cmo[0]] = opts.lastobj = val; break;
    				case 0x01b6 /* TxO */: opts.lastobj.TxO = val; break;
    				case 0x007f /* ImData */: opts.lastobj.ImData = val; break;

    				case 0x01b8 /* HLink */: {
    					for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
    						for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
    							cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
    							if(cc) cc.l = val[1];
    						}
    				} break;
    				case 0x0800 /* HLinkTooltip */: {
    					for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
    						for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
    							cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
    							if(cc && cc.l) cc.l.Tooltip = val[1];
    							}
    				} break;
    				case 0x001c /* Note */: {
    					if(opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */
    					cc = options.dense ? (out[val[0].r]||[])[val[0].c] : out[encode_cell(val[0])];
    					var noteobj = objects[val[2]];
    					if(!cc) {
    						if(options.dense) {
    							if(!out[val[0].r]) out[val[0].r] = [];
    							cc = out[val[0].r][val[0].c] = ({t:"z"}/*:any*/);
    						} else {
    							cc = out[encode_cell(val[0])] = ({t:"z"}/*:any*/);
    						}
    						range.e.r = Math.max(range.e.r, val[0].r);
    						range.s.r = Math.min(range.s.r, val[0].r);
    						range.e.c = Math.max(range.e.c, val[0].c);
    						range.s.c = Math.min(range.s.c, val[0].c);
    					}
    					if(!cc.c) cc.c = [];
    					cmnt = {a:val[1],t:noteobj.TxO.t};
    					cc.c.push(cmnt);
    				} break;
    				case 0x087d /* XFExt */: update_xfext(XFs[val.ixfe], val.ext); break;
    				case 0x007d /* ColInfo */: {
    					if(!opts.cellStyles) break;
    					while(val.e >= val.s) {
    						colinfo[val.e--] = { width: val.w/256, level: (val.level || 0), hidden: !!(val.flags & 1) };
    						if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
    						process_col(colinfo[val.e+1]);
    					}
    				} break;
    				case 0x0208 /* Row */: {
    					var rowobj = {};
    					if(val.level != null) { rowinfo[val.r] = rowobj; rowobj.level = val.level; }
    					if(val.hidden) { rowinfo[val.r] = rowobj; rowobj.hidden = true; }
    					if(val.hpt) {
    						rowinfo[val.r] = rowobj;
    						rowobj.hpt = val.hpt; rowobj.hpx = pt2px(val.hpt);
    					}
    				} break;
    				case 0x0026 /* LeftMargin */:
    				case 0x0027 /* RightMargin */:
    				case 0x0028 /* TopMargin */:
    				case 0x0029 /* BottomMargin */:
    					if(!out['!margins']) default_margins(out['!margins'] = {});
    					out['!margins'][({0x26: "left", 0x27:"right", 0x28:"top", 0x29:"bottom"})[RecordType]] = val;
    					break;
    				case 0x00a1 /* Setup */: // TODO
    					if(!out['!margins']) default_margins(out['!margins'] = {});
    					out['!margins'].header = val.header;
    					out['!margins'].footer = val.footer;
    					break;
    				case 0x023e /* Window2 */: // TODO
    					// $FlowIgnore
    					if(val.RTL) Workbook.Views[0].RTL = true;
    					break;
    				case 0x0092 /* Palette */: palette = val; break;
    				case 0x0896 /* Theme */: themes = val; break;
    				case 0x008c /* Country */: country = val; break;
    				case 0x01ba /* CodeName */: {
    					/*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */
    					if(!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook";
    					else wsprops.CodeName = val || wsprops.name;
    				} break;
    			}
    		} else {
    			if(!R) console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
    			blob.l += length;
    		}
    	}
    	wb.SheetNames=keys(Directory).sort(function(a,b) { return Number(a) - Number(b); }).map(function(x){return Directory[x].name;});
    	if(!options.bookSheets) wb.Sheets=Sheets;
    	if(!wb.SheetNames.length && Preamble["!ref"]) {
    		wb.SheetNames.push("Sheet1");
    		/*jshint -W069 */
    		if(wb.Sheets) wb.Sheets["Sheet1"] = Preamble;
    		/*jshint +W069 */
    	} else wb.Preamble=Preamble;
    	if(wb.Sheets) FilterDatabases.forEach(function(r,i) { wb.Sheets[wb.SheetNames[i]]['!autofilter'] = r; });
    	wb.Strings = sst;
    	wb.SSF = dup(table_fmt);
    	if(opts.enc) wb.Encryption = opts.enc;
    	if(themes) wb.Themes = themes;
    	wb.Metadata = {};
    	if(country !== undefined) wb.Metadata.Country = country;
    	if(supbooks.names.length > 0) Workbook.Names = supbooks.names;
    	wb.Workbook = Workbook;
    	return wb;
    }

    /* TODO: split props*/
    var PSCLSID = {
    	SI: "e0859ff2f94f6810ab9108002b27b3d9",
    	DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
    	UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
    };
    function parse_xls_props(cfb/*:CFBContainer*/, props, o) {
    	/* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */
    	var DSI = CFB.find(cfb, '/!DocumentSummaryInformation');
    	if(DSI && DSI.size > 0) try {
    		var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
    		for(var d in DocSummary) props[d] = DocSummary[d];
    	} catch(e) {if(o.WTF) throw e;/* empty */}

    	/* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/
    	var SI = CFB.find(cfb, '/!SummaryInformation');
    	if(SI && SI.size > 0) try {
    		var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
    		for(var s in Summary) if(props[s] == null) props[s] = Summary[s];
    	} catch(e) {if(o.WTF) throw e;/* empty */}

    	if(props.HeadingPairs && props.TitlesOfParts) {
    		load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
    		delete props.HeadingPairs; delete props.TitlesOfParts;
    	}
    }
    function write_xls_props(wb/*:Workbook*/, cfb/*:CFBContainer*/) {
    	var DSEntries = [], SEntries = [], CEntries = [];
    	var i = 0, Keys;
    	var DocSummaryRE/*:{[key:string]:string}*/ = evert_key(DocSummaryPIDDSI, "n");
    	var SummaryRE/*:{[key:string]:string}*/ = evert_key(SummaryPIDSI, "n");
    	if(wb.Props) {
    		Keys = keys(wb.Props);
    		// $FlowIgnore
    		for(i = 0; i < Keys.length; ++i) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Props[Keys[i]]]);
    	}
    	if(wb.Custprops) {
    		Keys = keys(wb.Custprops);
    		// $FlowIgnore
    		for(i = 0; i < Keys.length; ++i) if(!Object.prototype.hasOwnProperty.call((wb.Props||{}), Keys[i])) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Custprops[Keys[i]]]);
    	}
    	var CEntries2 = [];
    	for(i = 0; i < CEntries.length; ++i) {
    		if(XLSPSSkip.indexOf(CEntries[i][0]) > -1 || PseudoPropsPairs.indexOf(CEntries[i][0]) > -1) continue;
    		if(CEntries[i][1] == null) continue;
    		CEntries2.push(CEntries[i]);
    	}
    	if(SEntries.length) CFB.utils.cfb_add(cfb, "/\u0005SummaryInformation", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));
    	if(DSEntries.length || CEntries2.length) CFB.utils.cfb_add(cfb, "/\u0005DocumentSummaryInformation", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));
    }

    function parse_xlscfb(cfb/*:any*/, options/*:?ParseOpts*/)/*:Workbook*/ {
    if(!options) options = {};
    fix_read_opts(options);
    reset_cp();
    if(options.codepage) set_ansi(options.codepage);
    var CompObj/*:?CFBEntry*/, WB/*:?any*/;
    if(cfb.FullPaths) {
    	if(CFB.find(cfb, '/encryption')) throw new Error("File is password-protected");
    	CompObj = CFB.find(cfb, '!CompObj');
    	WB = CFB.find(cfb, '/Workbook') || CFB.find(cfb, '/Book');
    } else {
    	switch(options.type) {
    		case 'base64': cfb = s2a(Base64_decode(cfb)); break;
    		case 'binary': cfb = s2a(cfb); break;
    		case 'buffer': break;
    		case 'array': if(!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb); break;
    	}
    	prep_blob(cfb, 0);
    	WB = ({content: cfb}/*:any*/);
    }
    var /*::CompObjP, */WorkbookP/*:: :Workbook = XLSX.utils.book_new(); */;

    var _data/*:?any*/;
    if(CompObj) /*::CompObjP = */parse_compobj(CompObj);
    if(options.bookProps && !options.bookSheets) WorkbookP = ({}/*:any*/);
    else/*:: if(cfb instanceof CFBContainer) */ {
    	var T = has_buf ? 'buffer' : 'array';
    	if(WB && WB.content) WorkbookP = parse_workbook(WB.content, options);
    	/* Quattro Pro 7-8 */
    	else if((_data=CFB.find(cfb, 'PerfectOffice_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
    	/* Quattro Pro 9 */
    	else if((_data=CFB.find(cfb, 'NativeContent_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
    	/* Works 4 for Mac */
    	else if((_data=CFB.find(cfb, 'MN0')) && _data.content) throw new Error("Unsupported Works 4 for Mac file");
    	else throw new Error("Cannot find Workbook stream");
    	if(options.bookVBA && cfb.FullPaths && CFB.find(cfb, '/_VBA_PROJECT_CUR/VBA/dir')) WorkbookP.vbaraw = make_vba_xls(cfb);
    }

    var props = {};
    if(cfb.FullPaths) parse_xls_props(/*::((*/cfb/*:: :any):CFBContainer)*/, props, options);

    WorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */
    if(options.bookFiles) WorkbookP.cfb = cfb;
    /*WorkbookP.CompObjP = CompObjP; // TODO: storage? */
    return WorkbookP;
    }


    function write_xlscfb(wb/*:Workbook*/, opts/*:WriteOpts*/)/*:CFBContainer*/ {
    	var o = opts || {};
    	var cfb = CFB.utils.cfb_new({root:"R"});
    	var wbpath = "/Workbook";
    	switch(o.bookType || "xls") {
    		case "xls": o.bookType = "biff8";
    		/* falls through */
    		case "xla": if(!o.bookType) o.bookType = "xla";
    		/* falls through */
    		case "biff8": wbpath = "/Workbook"; o.biff = 8; break;
    		case "biff5": wbpath = "/Book"; o.biff = 5; break;
    		default: throw new Error("invalid type " + o.bookType + " for XLS CFB");
    	}
    	CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));
    	if(o.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb);
    	// TODO: SI, DSI, CO
    	if(o.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, {type: typeof wb.vbaraw == "string" ? "binary" : "buffer"}));
    	return cfb;
    }
    /* [MS-XLSB] 2.3 Record Enumeration */
    var XLSBRecordEnum = {
    	/*::[*/0x0000/*::]*/: { /* n:"BrtRowHdr", */ f:parse_BrtRowHdr },
    	/*::[*/0x0001/*::]*/: { /* n:"BrtCellBlank", */ f:parse_BrtCellBlank },
    	/*::[*/0x0002/*::]*/: { /* n:"BrtCellRk", */ f:parse_BrtCellRk },
    	/*::[*/0x0003/*::]*/: { /* n:"BrtCellError", */ f:parse_BrtCellError },
    	/*::[*/0x0004/*::]*/: { /* n:"BrtCellBool", */ f:parse_BrtCellBool },
    	/*::[*/0x0005/*::]*/: { /* n:"BrtCellReal", */ f:parse_BrtCellReal },
    	/*::[*/0x0006/*::]*/: { /* n:"BrtCellSt", */ f:parse_BrtCellSt },
    	/*::[*/0x0007/*::]*/: { /* n:"BrtCellIsst", */ f:parse_BrtCellIsst },
    	/*::[*/0x0008/*::]*/: { /* n:"BrtFmlaString", */ f:parse_BrtFmlaString },
    	/*::[*/0x0009/*::]*/: { /* n:"BrtFmlaNum", */ f:parse_BrtFmlaNum },
    	/*::[*/0x000A/*::]*/: { /* n:"BrtFmlaBool", */ f:parse_BrtFmlaBool },
    	/*::[*/0x000B/*::]*/: { /* n:"BrtFmlaError", */ f:parse_BrtFmlaError },
    	/*::[*/0x000C/*::]*/: { /* n:"BrtShortBlank", */ f:parse_BrtShortBlank },
    	/*::[*/0x000D/*::]*/: { /* n:"BrtShortRk", */ f:parse_BrtShortRk },
    	/*::[*/0x000E/*::]*/: { /* n:"BrtShortError", */ f:parse_BrtShortError },
    	/*::[*/0x000F/*::]*/: { /* n:"BrtShortBool", */ f:parse_BrtShortBool },
    	/*::[*/0x0010/*::]*/: { /* n:"BrtShortReal", */ f:parse_BrtShortReal },
    	/*::[*/0x0011/*::]*/: { /* n:"BrtShortSt", */ f:parse_BrtShortSt },
    	/*::[*/0x0012/*::]*/: { /* n:"BrtShortIsst", */ f:parse_BrtShortIsst },
    	/*::[*/0x0013/*::]*/: { /* n:"BrtSSTItem", */ f:parse_RichStr },
    	/*::[*/0x0014/*::]*/: { /* n:"BrtPCDIMissing" */ },
    	/*::[*/0x0015/*::]*/: { /* n:"BrtPCDINumber" */ },
    	/*::[*/0x0016/*::]*/: { /* n:"BrtPCDIBoolean" */ },
    	/*::[*/0x0017/*::]*/: { /* n:"BrtPCDIError" */ },
    	/*::[*/0x0018/*::]*/: { /* n:"BrtPCDIString" */ },
    	/*::[*/0x0019/*::]*/: { /* n:"BrtPCDIDatetime" */ },
    	/*::[*/0x001A/*::]*/: { /* n:"BrtPCDIIndex" */ },
    	/*::[*/0x001B/*::]*/: { /* n:"BrtPCDIAMissing" */ },
    	/*::[*/0x001C/*::]*/: { /* n:"BrtPCDIANumber" */ },
    	/*::[*/0x001D/*::]*/: { /* n:"BrtPCDIABoolean" */ },
    	/*::[*/0x001E/*::]*/: { /* n:"BrtPCDIAError" */ },
    	/*::[*/0x001F/*::]*/: { /* n:"BrtPCDIAString" */ },
    	/*::[*/0x0020/*::]*/: { /* n:"BrtPCDIADatetime" */ },
    	/*::[*/0x0021/*::]*/: { /* n:"BrtPCRRecord" */ },
    	/*::[*/0x0022/*::]*/: { /* n:"BrtPCRRecordDt" */ },
    	/*::[*/0x0023/*::]*/: { /* n:"BrtFRTBegin", */ T:1 },
    	/*::[*/0x0024/*::]*/: { /* n:"BrtFRTEnd", */ T:-1 },
    	/*::[*/0x0025/*::]*/: { /* n:"BrtACBegin", */ T:1 },
    	/*::[*/0x0026/*::]*/: { /* n:"BrtACEnd", */ T:-1 },
    	/*::[*/0x0027/*::]*/: { /* n:"BrtName", */ f:parse_BrtName },
    	/*::[*/0x0028/*::]*/: { /* n:"BrtIndexRowBlock" */ },
    	/*::[*/0x002A/*::]*/: { /* n:"BrtIndexBlock" */ },
    	/*::[*/0x002B/*::]*/: { /* n:"BrtFont", */ f:parse_BrtFont },
    	/*::[*/0x002C/*::]*/: { /* n:"BrtFmt", */ f:parse_BrtFmt },
    	/*::[*/0x002D/*::]*/: { /* n:"BrtFill", */ f:parse_BrtFill },
    	/*::[*/0x002E/*::]*/: { /* n:"BrtBorder", */ f:parse_BrtBorder },
    	/*::[*/0x002F/*::]*/: { /* n:"BrtXF", */ f:parse_BrtXF },
    	/*::[*/0x0030/*::]*/: { /* n:"BrtStyle" */ },
    	/*::[*/0x0031/*::]*/: { /* n:"BrtCellMeta", */ f:parse_Int32LE },
    	/*::[*/0x0032/*::]*/: { /* n:"BrtValueMeta" */ },
    	/*::[*/0x0033/*::]*/: { /* n:"BrtMdb" */ f:parse_BrtMdb },
    	/*::[*/0x0034/*::]*/: { /* n:"BrtBeginFmd", */ T:1 },
    	/*::[*/0x0035/*::]*/: { /* n:"BrtEndFmd", */ T:-1 },
    	/*::[*/0x0036/*::]*/: { /* n:"BrtBeginMdx", */ T:1 },
    	/*::[*/0x0037/*::]*/: { /* n:"BrtEndMdx", */ T:-1 },
    	/*::[*/0x0038/*::]*/: { /* n:"BrtBeginMdxTuple", */ T:1 },
    	/*::[*/0x0039/*::]*/: { /* n:"BrtEndMdxTuple", */ T:-1 },
    	/*::[*/0x003A/*::]*/: { /* n:"BrtMdxMbrIstr" */ },
    	/*::[*/0x003B/*::]*/: { /* n:"BrtStr" */ },
    	/*::[*/0x003C/*::]*/: { /* n:"BrtColInfo", */ f:parse_ColInfo },
    	/*::[*/0x003E/*::]*/: { /* n:"BrtCellRString", */ f:parse_BrtCellRString },
    	/*::[*/0x003F/*::]*/: { /* n:"BrtCalcChainItem$", */ f:parse_BrtCalcChainItem$ },
    	/*::[*/0x0040/*::]*/: { /* n:"BrtDVal", */ f:parse_BrtDVal },
    	/*::[*/0x0041/*::]*/: { /* n:"BrtSxvcellNum" */ },
    	/*::[*/0x0042/*::]*/: { /* n:"BrtSxvcellStr" */ },
    	/*::[*/0x0043/*::]*/: { /* n:"BrtSxvcellBool" */ },
    	/*::[*/0x0044/*::]*/: { /* n:"BrtSxvcellErr" */ },
    	/*::[*/0x0045/*::]*/: { /* n:"BrtSxvcellDate" */ },
    	/*::[*/0x0046/*::]*/: { /* n:"BrtSxvcellNil" */ },
    	/*::[*/0x0080/*::]*/: { /* n:"BrtFileVersion" */ },
    	/*::[*/0x0081/*::]*/: { /* n:"BrtBeginSheet", */ T:1 },
    	/*::[*/0x0082/*::]*/: { /* n:"BrtEndSheet", */ T:-1 },
    	/*::[*/0x0083/*::]*/: { /* n:"BrtBeginBook", */ T:1, f:parsenoop, p:0 },
    	/*::[*/0x0084/*::]*/: { /* n:"BrtEndBook", */ T:-1 },
    	/*::[*/0x0085/*::]*/: { /* n:"BrtBeginWsViews", */ T:1 },
    	/*::[*/0x0086/*::]*/: { /* n:"BrtEndWsViews", */ T:-1 },
    	/*::[*/0x0087/*::]*/: { /* n:"BrtBeginBookViews", */ T:1 },
    	/*::[*/0x0088/*::]*/: { /* n:"BrtEndBookViews", */ T:-1 },
    	/*::[*/0x0089/*::]*/: { /* n:"BrtBeginWsView", */ T:1, f:parse_BrtBeginWsView },
    	/*::[*/0x008A/*::]*/: { /* n:"BrtEndWsView", */ T:-1 },
    	/*::[*/0x008B/*::]*/: { /* n:"BrtBeginCsViews", */ T:1 },
    	/*::[*/0x008C/*::]*/: { /* n:"BrtEndCsViews", */ T:-1 },
    	/*::[*/0x008D/*::]*/: { /* n:"BrtBeginCsView", */ T:1 },
    	/*::[*/0x008E/*::]*/: { /* n:"BrtEndCsView", */ T:-1 },
    	/*::[*/0x008F/*::]*/: { /* n:"BrtBeginBundleShs", */ T:1 },
    	/*::[*/0x0090/*::]*/: { /* n:"BrtEndBundleShs", */ T:-1 },
    	/*::[*/0x0091/*::]*/: { /* n:"BrtBeginSheetData", */ T:1 },
    	/*::[*/0x0092/*::]*/: { /* n:"BrtEndSheetData", */ T:-1 },
    	/*::[*/0x0093/*::]*/: { /* n:"BrtWsProp", */ f:parse_BrtWsProp },
    	/*::[*/0x0094/*::]*/: { /* n:"BrtWsDim", */ f:parse_BrtWsDim, p:16 },
    	/*::[*/0x0097/*::]*/: { /* n:"BrtPane", */ f:parse_BrtPane },
    	/*::[*/0x0098/*::]*/: { /* n:"BrtSel" */ },
    	/*::[*/0x0099/*::]*/: { /* n:"BrtWbProp", */ f:parse_BrtWbProp },
    	/*::[*/0x009A/*::]*/: { /* n:"BrtWbFactoid" */ },
    	/*::[*/0x009B/*::]*/: { /* n:"BrtFileRecover" */ },
    	/*::[*/0x009C/*::]*/: { /* n:"BrtBundleSh", */ f:parse_BrtBundleSh },
    	/*::[*/0x009D/*::]*/: { /* n:"BrtCalcProp" */ },
    	/*::[*/0x009E/*::]*/: { /* n:"BrtBookView" */ },
    	/*::[*/0x009F/*::]*/: { /* n:"BrtBeginSst", */ T:1, f:parse_BrtBeginSst },
    	/*::[*/0x00A0/*::]*/: { /* n:"BrtEndSst", */ T:-1 },
    	/*::[*/0x00A1/*::]*/: { /* n:"BrtBeginAFilter", */ T:1, f:parse_UncheckedRfX },
    	/*::[*/0x00A2/*::]*/: { /* n:"BrtEndAFilter", */ T:-1 },
    	/*::[*/0x00A3/*::]*/: { /* n:"BrtBeginFilterColumn", */ T:1 },
    	/*::[*/0x00A4/*::]*/: { /* n:"BrtEndFilterColumn", */ T:-1 },
    	/*::[*/0x00A5/*::]*/: { /* n:"BrtBeginFilters", */ T:1 },
    	/*::[*/0x00A6/*::]*/: { /* n:"BrtEndFilters", */ T:-1 },
    	/*::[*/0x00A7/*::]*/: { /* n:"BrtFilter" */ },
    	/*::[*/0x00A8/*::]*/: { /* n:"BrtColorFilter" */ },
    	/*::[*/0x00A9/*::]*/: { /* n:"BrtIconFilter" */ },
    	/*::[*/0x00AA/*::]*/: { /* n:"BrtTop10Filter" */ },
    	/*::[*/0x00AB/*::]*/: { /* n:"BrtDynamicFilter" */ },
    	/*::[*/0x00AC/*::]*/: { /* n:"BrtBeginCustomFilters", */ T:1 },
    	/*::[*/0x00AD/*::]*/: { /* n:"BrtEndCustomFilters", */ T:-1 },
    	/*::[*/0x00AE/*::]*/: { /* n:"BrtCustomFilter" */ },
    	/*::[*/0x00AF/*::]*/: { /* n:"BrtAFilterDateGroupItem" */ },
    	/*::[*/0x00B0/*::]*/: { /* n:"BrtMergeCell", */ f:parse_BrtMergeCell },
    	/*::[*/0x00B1/*::]*/: { /* n:"BrtBeginMergeCells", */ T:1 },
    	/*::[*/0x00B2/*::]*/: { /* n:"BrtEndMergeCells", */ T:-1 },
    	/*::[*/0x00B3/*::]*/: { /* n:"BrtBeginPivotCacheDef", */ T:1 },
    	/*::[*/0x00B4/*::]*/: { /* n:"BrtEndPivotCacheDef", */ T:-1 },
    	/*::[*/0x00B5/*::]*/: { /* n:"BrtBeginPCDFields", */ T:1 },
    	/*::[*/0x00B6/*::]*/: { /* n:"BrtEndPCDFields", */ T:-1 },
    	/*::[*/0x00B7/*::]*/: { /* n:"BrtBeginPCDField", */ T:1 },
    	/*::[*/0x00B8/*::]*/: { /* n:"BrtEndPCDField", */ T:-1 },
    	/*::[*/0x00B9/*::]*/: { /* n:"BrtBeginPCDSource", */ T:1 },
    	/*::[*/0x00BA/*::]*/: { /* n:"BrtEndPCDSource", */ T:-1 },
    	/*::[*/0x00BB/*::]*/: { /* n:"BrtBeginPCDSRange", */ T:1 },
    	/*::[*/0x00BC/*::]*/: { /* n:"BrtEndPCDSRange", */ T:-1 },
    	/*::[*/0x00BD/*::]*/: { /* n:"BrtBeginPCDFAtbl", */ T:1 },
    	/*::[*/0x00BE/*::]*/: { /* n:"BrtEndPCDFAtbl", */ T:-1 },
    	/*::[*/0x00BF/*::]*/: { /* n:"BrtBeginPCDIRun", */ T:1 },
    	/*::[*/0x00C0/*::]*/: { /* n:"BrtEndPCDIRun", */ T:-1 },
    	/*::[*/0x00C1/*::]*/: { /* n:"BrtBeginPivotCacheRecords", */ T:1 },
    	/*::[*/0x00C2/*::]*/: { /* n:"BrtEndPivotCacheRecords", */ T:-1 },
    	/*::[*/0x00C3/*::]*/: { /* n:"BrtBeginPCDHierarchies", */ T:1 },
    	/*::[*/0x00C4/*::]*/: { /* n:"BrtEndPCDHierarchies", */ T:-1 },
    	/*::[*/0x00C5/*::]*/: { /* n:"BrtBeginPCDHierarchy", */ T:1 },
    	/*::[*/0x00C6/*::]*/: { /* n:"BrtEndPCDHierarchy", */ T:-1 },
    	/*::[*/0x00C7/*::]*/: { /* n:"BrtBeginPCDHFieldsUsage", */ T:1 },
    	/*::[*/0x00C8/*::]*/: { /* n:"BrtEndPCDHFieldsUsage", */ T:-1 },
    	/*::[*/0x00C9/*::]*/: { /* n:"BrtBeginExtConnection", */ T:1 },
    	/*::[*/0x00CA/*::]*/: { /* n:"BrtEndExtConnection", */ T:-1 },
    	/*::[*/0x00CB/*::]*/: { /* n:"BrtBeginECDbProps", */ T:1 },
    	/*::[*/0x00CC/*::]*/: { /* n:"BrtEndECDbProps", */ T:-1 },
    	/*::[*/0x00CD/*::]*/: { /* n:"BrtBeginECOlapProps", */ T:1 },
    	/*::[*/0x00CE/*::]*/: { /* n:"BrtEndECOlapProps", */ T:-1 },
    	/*::[*/0x00CF/*::]*/: { /* n:"BrtBeginPCDSConsol", */ T:1 },
    	/*::[*/0x00D0/*::]*/: { /* n:"BrtEndPCDSConsol", */ T:-1 },
    	/*::[*/0x00D1/*::]*/: { /* n:"BrtBeginPCDSCPages", */ T:1 },
    	/*::[*/0x00D2/*::]*/: { /* n:"BrtEndPCDSCPages", */ T:-1 },
    	/*::[*/0x00D3/*::]*/: { /* n:"BrtBeginPCDSCPage", */ T:1 },
    	/*::[*/0x00D4/*::]*/: { /* n:"BrtEndPCDSCPage", */ T:-1 },
    	/*::[*/0x00D5/*::]*/: { /* n:"BrtBeginPCDSCPItem", */ T:1 },
    	/*::[*/0x00D6/*::]*/: { /* n:"BrtEndPCDSCPItem", */ T:-1 },
    	/*::[*/0x00D7/*::]*/: { /* n:"BrtBeginPCDSCSets", */ T:1 },
    	/*::[*/0x00D8/*::]*/: { /* n:"BrtEndPCDSCSets", */ T:-1 },
    	/*::[*/0x00D9/*::]*/: { /* n:"BrtBeginPCDSCSet", */ T:1 },
    	/*::[*/0x00DA/*::]*/: { /* n:"BrtEndPCDSCSet", */ T:-1 },
    	/*::[*/0x00DB/*::]*/: { /* n:"BrtBeginPCDFGroup", */ T:1 },
    	/*::[*/0x00DC/*::]*/: { /* n:"BrtEndPCDFGroup", */ T:-1 },
    	/*::[*/0x00DD/*::]*/: { /* n:"BrtBeginPCDFGItems", */ T:1 },
    	/*::[*/0x00DE/*::]*/: { /* n:"BrtEndPCDFGItems", */ T:-1 },
    	/*::[*/0x00DF/*::]*/: { /* n:"BrtBeginPCDFGRange", */ T:1 },
    	/*::[*/0x00E0/*::]*/: { /* n:"BrtEndPCDFGRange", */ T:-1 },
    	/*::[*/0x00E1/*::]*/: { /* n:"BrtBeginPCDFGDiscrete", */ T:1 },
    	/*::[*/0x00E2/*::]*/: { /* n:"BrtEndPCDFGDiscrete", */ T:-1 },
    	/*::[*/0x00E3/*::]*/: { /* n:"BrtBeginPCDSDTupleCache", */ T:1 },
    	/*::[*/0x00E4/*::]*/: { /* n:"BrtEndPCDSDTupleCache", */ T:-1 },
    	/*::[*/0x00E5/*::]*/: { /* n:"BrtBeginPCDSDTCEntries", */ T:1 },
    	/*::[*/0x00E6/*::]*/: { /* n:"BrtEndPCDSDTCEntries", */ T:-1 },
    	/*::[*/0x00E7/*::]*/: { /* n:"BrtBeginPCDSDTCEMembers", */ T:1 },
    	/*::[*/0x00E8/*::]*/: { /* n:"BrtEndPCDSDTCEMembers", */ T:-1 },
    	/*::[*/0x00E9/*::]*/: { /* n:"BrtBeginPCDSDTCEMember", */ T:1 },
    	/*::[*/0x00EA/*::]*/: { /* n:"BrtEndPCDSDTCEMember", */ T:-1 },
    	/*::[*/0x00EB/*::]*/: { /* n:"BrtBeginPCDSDTCQueries", */ T:1 },
    	/*::[*/0x00EC/*::]*/: { /* n:"BrtEndPCDSDTCQueries", */ T:-1 },
    	/*::[*/0x00ED/*::]*/: { /* n:"BrtBeginPCDSDTCQuery", */ T:1 },
    	/*::[*/0x00EE/*::]*/: { /* n:"BrtEndPCDSDTCQuery", */ T:-1 },
    	/*::[*/0x00EF/*::]*/: { /* n:"BrtBeginPCDSDTCSets", */ T:1 },
    	/*::[*/0x00F0/*::]*/: { /* n:"BrtEndPCDSDTCSets", */ T:-1 },
    	/*::[*/0x00F1/*::]*/: { /* n:"BrtBeginPCDSDTCSet", */ T:1 },
    	/*::[*/0x00F2/*::]*/: { /* n:"BrtEndPCDSDTCSet", */ T:-1 },
    	/*::[*/0x00F3/*::]*/: { /* n:"BrtBeginPCDCalcItems", */ T:1 },
    	/*::[*/0x00F4/*::]*/: { /* n:"BrtEndPCDCalcItems", */ T:-1 },
    	/*::[*/0x00F5/*::]*/: { /* n:"BrtBeginPCDCalcItem", */ T:1 },
    	/*::[*/0x00F6/*::]*/: { /* n:"BrtEndPCDCalcItem", */ T:-1 },
    	/*::[*/0x00F7/*::]*/: { /* n:"BrtBeginPRule", */ T:1 },
    	/*::[*/0x00F8/*::]*/: { /* n:"BrtEndPRule", */ T:-1 },
    	/*::[*/0x00F9/*::]*/: { /* n:"BrtBeginPRFilters", */ T:1 },
    	/*::[*/0x00FA/*::]*/: { /* n:"BrtEndPRFilters", */ T:-1 },
    	/*::[*/0x00FB/*::]*/: { /* n:"BrtBeginPRFilter", */ T:1 },
    	/*::[*/0x00FC/*::]*/: { /* n:"BrtEndPRFilter", */ T:-1 },
    	/*::[*/0x00FD/*::]*/: { /* n:"BrtBeginPNames", */ T:1 },
    	/*::[*/0x00FE/*::]*/: { /* n:"BrtEndPNames", */ T:-1 },
    	/*::[*/0x00FF/*::]*/: { /* n:"BrtBeginPName", */ T:1 },
    	/*::[*/0x0100/*::]*/: { /* n:"BrtEndPName", */ T:-1 },
    	/*::[*/0x0101/*::]*/: { /* n:"BrtBeginPNPairs", */ T:1 },
    	/*::[*/0x0102/*::]*/: { /* n:"BrtEndPNPairs", */ T:-1 },
    	/*::[*/0x0103/*::]*/: { /* n:"BrtBeginPNPair", */ T:1 },
    	/*::[*/0x0104/*::]*/: { /* n:"BrtEndPNPair", */ T:-1 },
    	/*::[*/0x0105/*::]*/: { /* n:"BrtBeginECWebProps", */ T:1 },
    	/*::[*/0x0106/*::]*/: { /* n:"BrtEndECWebProps", */ T:-1 },
    	/*::[*/0x0107/*::]*/: { /* n:"BrtBeginEcWpTables", */ T:1 },
    	/*::[*/0x0108/*::]*/: { /* n:"BrtEndECWPTables", */ T:-1 },
    	/*::[*/0x0109/*::]*/: { /* n:"BrtBeginECParams", */ T:1 },
    	/*::[*/0x010A/*::]*/: { /* n:"BrtEndECParams", */ T:-1 },
    	/*::[*/0x010B/*::]*/: { /* n:"BrtBeginECParam", */ T:1 },
    	/*::[*/0x010C/*::]*/: { /* n:"BrtEndECParam", */ T:-1 },
    	/*::[*/0x010D/*::]*/: { /* n:"BrtBeginPCDKPIs", */ T:1 },
    	/*::[*/0x010E/*::]*/: { /* n:"BrtEndPCDKPIs", */ T:-1 },
    	/*::[*/0x010F/*::]*/: { /* n:"BrtBeginPCDKPI", */ T:1 },
    	/*::[*/0x0110/*::]*/: { /* n:"BrtEndPCDKPI", */ T:-1 },
    	/*::[*/0x0111/*::]*/: { /* n:"BrtBeginDims", */ T:1 },
    	/*::[*/0x0112/*::]*/: { /* n:"BrtEndDims", */ T:-1 },
    	/*::[*/0x0113/*::]*/: { /* n:"BrtBeginDim", */ T:1 },
    	/*::[*/0x0114/*::]*/: { /* n:"BrtEndDim", */ T:-1 },
    	/*::[*/0x0115/*::]*/: { /* n:"BrtIndexPartEnd" */ },
    	/*::[*/0x0116/*::]*/: { /* n:"BrtBeginStyleSheet", */ T:1 },
    	/*::[*/0x0117/*::]*/: { /* n:"BrtEndStyleSheet", */ T:-1 },
    	/*::[*/0x0118/*::]*/: { /* n:"BrtBeginSXView", */ T:1 },
    	/*::[*/0x0119/*::]*/: { /* n:"BrtEndSXVI", */ T:-1 },
    	/*::[*/0x011A/*::]*/: { /* n:"BrtBeginSXVI", */ T:1 },
    	/*::[*/0x011B/*::]*/: { /* n:"BrtBeginSXVIs", */ T:1 },
    	/*::[*/0x011C/*::]*/: { /* n:"BrtEndSXVIs", */ T:-1 },
    	/*::[*/0x011D/*::]*/: { /* n:"BrtBeginSXVD", */ T:1 },
    	/*::[*/0x011E/*::]*/: { /* n:"BrtEndSXVD", */ T:-1 },
    	/*::[*/0x011F/*::]*/: { /* n:"BrtBeginSXVDs", */ T:1 },
    	/*::[*/0x0120/*::]*/: { /* n:"BrtEndSXVDs", */ T:-1 },
    	/*::[*/0x0121/*::]*/: { /* n:"BrtBeginSXPI", */ T:1 },
    	/*::[*/0x0122/*::]*/: { /* n:"BrtEndSXPI", */ T:-1 },
    	/*::[*/0x0123/*::]*/: { /* n:"BrtBeginSXPIs", */ T:1 },
    	/*::[*/0x0124/*::]*/: { /* n:"BrtEndSXPIs", */ T:-1 },
    	/*::[*/0x0125/*::]*/: { /* n:"BrtBeginSXDI", */ T:1 },
    	/*::[*/0x0126/*::]*/: { /* n:"BrtEndSXDI", */ T:-1 },
    	/*::[*/0x0127/*::]*/: { /* n:"BrtBeginSXDIs", */ T:1 },
    	/*::[*/0x0128/*::]*/: { /* n:"BrtEndSXDIs", */ T:-1 },
    	/*::[*/0x0129/*::]*/: { /* n:"BrtBeginSXLI", */ T:1 },
    	/*::[*/0x012A/*::]*/: { /* n:"BrtEndSXLI", */ T:-1 },
    	/*::[*/0x012B/*::]*/: { /* n:"BrtBeginSXLIRws", */ T:1 },
    	/*::[*/0x012C/*::]*/: { /* n:"BrtEndSXLIRws", */ T:-1 },
    	/*::[*/0x012D/*::]*/: { /* n:"BrtBeginSXLICols", */ T:1 },
    	/*::[*/0x012E/*::]*/: { /* n:"BrtEndSXLICols", */ T:-1 },
    	/*::[*/0x012F/*::]*/: { /* n:"BrtBeginSXFormat", */ T:1 },
    	/*::[*/0x0130/*::]*/: { /* n:"BrtEndSXFormat", */ T:-1 },
    	/*::[*/0x0131/*::]*/: { /* n:"BrtBeginSXFormats", */ T:1 },
    	/*::[*/0x0132/*::]*/: { /* n:"BrtEndSxFormats", */ T:-1 },
    	/*::[*/0x0133/*::]*/: { /* n:"BrtBeginSxSelect", */ T:1 },
    	/*::[*/0x0134/*::]*/: { /* n:"BrtEndSxSelect", */ T:-1 },
    	/*::[*/0x0135/*::]*/: { /* n:"BrtBeginISXVDRws", */ T:1 },
    	/*::[*/0x0136/*::]*/: { /* n:"BrtEndISXVDRws", */ T:-1 },
    	/*::[*/0x0137/*::]*/: { /* n:"BrtBeginISXVDCols", */ T:1 },
    	/*::[*/0x0138/*::]*/: { /* n:"BrtEndISXVDCols", */ T:-1 },
    	/*::[*/0x0139/*::]*/: { /* n:"BrtEndSXLocation", */ T:-1 },
    	/*::[*/0x013A/*::]*/: { /* n:"BrtBeginSXLocation", */ T:1 },
    	/*::[*/0x013B/*::]*/: { /* n:"BrtEndSXView", */ T:-1 },
    	/*::[*/0x013C/*::]*/: { /* n:"BrtBeginSXTHs", */ T:1 },
    	/*::[*/0x013D/*::]*/: { /* n:"BrtEndSXTHs", */ T:-1 },
    	/*::[*/0x013E/*::]*/: { /* n:"BrtBeginSXTH", */ T:1 },
    	/*::[*/0x013F/*::]*/: { /* n:"BrtEndSXTH", */ T:-1 },
    	/*::[*/0x0140/*::]*/: { /* n:"BrtBeginISXTHRws", */ T:1 },
    	/*::[*/0x0141/*::]*/: { /* n:"BrtEndISXTHRws", */ T:-1 },
    	/*::[*/0x0142/*::]*/: { /* n:"BrtBeginISXTHCols", */ T:1 },
    	/*::[*/0x0143/*::]*/: { /* n:"BrtEndISXTHCols", */ T:-1 },
    	/*::[*/0x0144/*::]*/: { /* n:"BrtBeginSXTDMPS", */ T:1 },
    	/*::[*/0x0145/*::]*/: { /* n:"BrtEndSXTDMPs", */ T:-1 },
    	/*::[*/0x0146/*::]*/: { /* n:"BrtBeginSXTDMP", */ T:1 },
    	/*::[*/0x0147/*::]*/: { /* n:"BrtEndSXTDMP", */ T:-1 },
    	/*::[*/0x0148/*::]*/: { /* n:"BrtBeginSXTHItems", */ T:1 },
    	/*::[*/0x0149/*::]*/: { /* n:"BrtEndSXTHItems", */ T:-1 },
    	/*::[*/0x014A/*::]*/: { /* n:"BrtBeginSXTHItem", */ T:1 },
    	/*::[*/0x014B/*::]*/: { /* n:"BrtEndSXTHItem", */ T:-1 },
    	/*::[*/0x014C/*::]*/: { /* n:"BrtBeginMetadata", */ T:1 },
    	/*::[*/0x014D/*::]*/: { /* n:"BrtEndMetadata", */ T:-1 },
    	/*::[*/0x014E/*::]*/: { /* n:"BrtBeginEsmdtinfo", */ T:1 },
    	/*::[*/0x014F/*::]*/: { /* n:"BrtMdtinfo", */ f:parse_BrtMdtinfo },
    	/*::[*/0x0150/*::]*/: { /* n:"BrtEndEsmdtinfo", */ T:-1 },
    	/*::[*/0x0151/*::]*/: { /* n:"BrtBeginEsmdb", */ f:parse_BrtBeginEsmdb, T:1 },
    	/*::[*/0x0152/*::]*/: { /* n:"BrtEndEsmdb", */ T:-1 },
    	/*::[*/0x0153/*::]*/: { /* n:"BrtBeginEsfmd", */ T:1 },
    	/*::[*/0x0154/*::]*/: { /* n:"BrtEndEsfmd", */ T:-1 },
    	/*::[*/0x0155/*::]*/: { /* n:"BrtBeginSingleCells", */ T:1 },
    	/*::[*/0x0156/*::]*/: { /* n:"BrtEndSingleCells", */ T:-1 },
    	/*::[*/0x0157/*::]*/: { /* n:"BrtBeginList", */ T:1 },
    	/*::[*/0x0158/*::]*/: { /* n:"BrtEndList", */ T:-1 },
    	/*::[*/0x0159/*::]*/: { /* n:"BrtBeginListCols", */ T:1 },
    	/*::[*/0x015A/*::]*/: { /* n:"BrtEndListCols", */ T:-1 },
    	/*::[*/0x015B/*::]*/: { /* n:"BrtBeginListCol", */ T:1 },
    	/*::[*/0x015C/*::]*/: { /* n:"BrtEndListCol", */ T:-1 },
    	/*::[*/0x015D/*::]*/: { /* n:"BrtBeginListXmlCPr", */ T:1 },
    	/*::[*/0x015E/*::]*/: { /* n:"BrtEndListXmlCPr", */ T:-1 },
    	/*::[*/0x015F/*::]*/: { /* n:"BrtListCCFmla" */ },
    	/*::[*/0x0160/*::]*/: { /* n:"BrtListTrFmla" */ },
    	/*::[*/0x0161/*::]*/: { /* n:"BrtBeginExternals", */ T:1 },
    	/*::[*/0x0162/*::]*/: { /* n:"BrtEndExternals", */ T:-1 },
    	/*::[*/0x0163/*::]*/: { /* n:"BrtSupBookSrc", */ f:parse_RelID},
    	/*::[*/0x0165/*::]*/: { /* n:"BrtSupSelf" */ },
    	/*::[*/0x0166/*::]*/: { /* n:"BrtSupSame" */ },
    	/*::[*/0x0167/*::]*/: { /* n:"BrtSupTabs" */ },
    	/*::[*/0x0168/*::]*/: { /* n:"BrtBeginSupBook", */ T:1 },
    	/*::[*/0x0169/*::]*/: { /* n:"BrtPlaceholderName" */ },
    	/*::[*/0x016A/*::]*/: { /* n:"BrtExternSheet", */ f:parse_ExternSheet },
    	/*::[*/0x016B/*::]*/: { /* n:"BrtExternTableStart" */ },
    	/*::[*/0x016C/*::]*/: { /* n:"BrtExternTableEnd" */ },
    	/*::[*/0x016E/*::]*/: { /* n:"BrtExternRowHdr" */ },
    	/*::[*/0x016F/*::]*/: { /* n:"BrtExternCellBlank" */ },
    	/*::[*/0x0170/*::]*/: { /* n:"BrtExternCellReal" */ },
    	/*::[*/0x0171/*::]*/: { /* n:"BrtExternCellBool" */ },
    	/*::[*/0x0172/*::]*/: { /* n:"BrtExternCellError" */ },
    	/*::[*/0x0173/*::]*/: { /* n:"BrtExternCellString" */ },
    	/*::[*/0x0174/*::]*/: { /* n:"BrtBeginEsmdx", */ T:1 },
    	/*::[*/0x0175/*::]*/: { /* n:"BrtEndEsmdx", */ T:-1 },
    	/*::[*/0x0176/*::]*/: { /* n:"BrtBeginMdxSet", */ T:1 },
    	/*::[*/0x0177/*::]*/: { /* n:"BrtEndMdxSet", */ T:-1 },
    	/*::[*/0x0178/*::]*/: { /* n:"BrtBeginMdxMbrProp", */ T:1 },
    	/*::[*/0x0179/*::]*/: { /* n:"BrtEndMdxMbrProp", */ T:-1 },
    	/*::[*/0x017A/*::]*/: { /* n:"BrtBeginMdxKPI", */ T:1 },
    	/*::[*/0x017B/*::]*/: { /* n:"BrtEndMdxKPI", */ T:-1 },
    	/*::[*/0x017C/*::]*/: { /* n:"BrtBeginEsstr", */ T:1 },
    	/*::[*/0x017D/*::]*/: { /* n:"BrtEndEsstr", */ T:-1 },
    	/*::[*/0x017E/*::]*/: { /* n:"BrtBeginPRFItem", */ T:1 },
    	/*::[*/0x017F/*::]*/: { /* n:"BrtEndPRFItem", */ T:-1 },
    	/*::[*/0x0180/*::]*/: { /* n:"BrtBeginPivotCacheIDs", */ T:1 },
    	/*::[*/0x0181/*::]*/: { /* n:"BrtEndPivotCacheIDs", */ T:-1 },
    	/*::[*/0x0182/*::]*/: { /* n:"BrtBeginPivotCacheID", */ T:1 },
    	/*::[*/0x0183/*::]*/: { /* n:"BrtEndPivotCacheID", */ T:-1 },
    	/*::[*/0x0184/*::]*/: { /* n:"BrtBeginISXVIs", */ T:1 },
    	/*::[*/0x0185/*::]*/: { /* n:"BrtEndISXVIs", */ T:-1 },
    	/*::[*/0x0186/*::]*/: { /* n:"BrtBeginColInfos", */ T:1 },
    	/*::[*/0x0187/*::]*/: { /* n:"BrtEndColInfos", */ T:-1 },
    	/*::[*/0x0188/*::]*/: { /* n:"BrtBeginRwBrk", */ T:1 },
    	/*::[*/0x0189/*::]*/: { /* n:"BrtEndRwBrk", */ T:-1 },
    	/*::[*/0x018A/*::]*/: { /* n:"BrtBeginColBrk", */ T:1 },
    	/*::[*/0x018B/*::]*/: { /* n:"BrtEndColBrk", */ T:-1 },
    	/*::[*/0x018C/*::]*/: { /* n:"BrtBrk" */ },
    	/*::[*/0x018D/*::]*/: { /* n:"BrtUserBookView" */ },
    	/*::[*/0x018E/*::]*/: { /* n:"BrtInfo" */ },
    	/*::[*/0x018F/*::]*/: { /* n:"BrtCUsr" */ },
    	/*::[*/0x0190/*::]*/: { /* n:"BrtUsr" */ },
    	/*::[*/0x0191/*::]*/: { /* n:"BrtBeginUsers", */ T:1 },
    	/*::[*/0x0193/*::]*/: { /* n:"BrtEOF" */ },
    	/*::[*/0x0194/*::]*/: { /* n:"BrtUCR" */ },
    	/*::[*/0x0195/*::]*/: { /* n:"BrtRRInsDel" */ },
    	/*::[*/0x0196/*::]*/: { /* n:"BrtRREndInsDel" */ },
    	/*::[*/0x0197/*::]*/: { /* n:"BrtRRMove" */ },
    	/*::[*/0x0198/*::]*/: { /* n:"BrtRREndMove" */ },
    	/*::[*/0x0199/*::]*/: { /* n:"BrtRRChgCell" */ },
    	/*::[*/0x019A/*::]*/: { /* n:"BrtRREndChgCell" */ },
    	/*::[*/0x019B/*::]*/: { /* n:"BrtRRHeader" */ },
    	/*::[*/0x019C/*::]*/: { /* n:"BrtRRUserView" */ },
    	/*::[*/0x019D/*::]*/: { /* n:"BrtRRRenSheet" */ },
    	/*::[*/0x019E/*::]*/: { /* n:"BrtRRInsertSh" */ },
    	/*::[*/0x019F/*::]*/: { /* n:"BrtRRDefName" */ },
    	/*::[*/0x01A0/*::]*/: { /* n:"BrtRRNote" */ },
    	/*::[*/0x01A1/*::]*/: { /* n:"BrtRRConflict" */ },
    	/*::[*/0x01A2/*::]*/: { /* n:"BrtRRTQSIF" */ },
    	/*::[*/0x01A3/*::]*/: { /* n:"BrtRRFormat" */ },
    	/*::[*/0x01A4/*::]*/: { /* n:"BrtRREndFormat" */ },
    	/*::[*/0x01A5/*::]*/: { /* n:"BrtRRAutoFmt" */ },
    	/*::[*/0x01A6/*::]*/: { /* n:"BrtBeginUserShViews", */ T:1 },
    	/*::[*/0x01A7/*::]*/: { /* n:"BrtBeginUserShView", */ T:1 },
    	/*::[*/0x01A8/*::]*/: { /* n:"BrtEndUserShView", */ T:-1 },
    	/*::[*/0x01A9/*::]*/: { /* n:"BrtEndUserShViews", */ T:-1 },
    	/*::[*/0x01AA/*::]*/: { /* n:"BrtArrFmla", */ f:parse_BrtArrFmla },
    	/*::[*/0x01AB/*::]*/: { /* n:"BrtShrFmla", */ f:parse_BrtShrFmla },
    	/*::[*/0x01AC/*::]*/: { /* n:"BrtTable" */ },
    	/*::[*/0x01AD/*::]*/: { /* n:"BrtBeginExtConnections", */ T:1 },
    	/*::[*/0x01AE/*::]*/: { /* n:"BrtEndExtConnections", */ T:-1 },
    	/*::[*/0x01AF/*::]*/: { /* n:"BrtBeginPCDCalcMems", */ T:1 },
    	/*::[*/0x01B0/*::]*/: { /* n:"BrtEndPCDCalcMems", */ T:-1 },
    	/*::[*/0x01B1/*::]*/: { /* n:"BrtBeginPCDCalcMem", */ T:1 },
    	/*::[*/0x01B2/*::]*/: { /* n:"BrtEndPCDCalcMem", */ T:-1 },
    	/*::[*/0x01B3/*::]*/: { /* n:"BrtBeginPCDHGLevels", */ T:1 },
    	/*::[*/0x01B4/*::]*/: { /* n:"BrtEndPCDHGLevels", */ T:-1 },
    	/*::[*/0x01B5/*::]*/: { /* n:"BrtBeginPCDHGLevel", */ T:1 },
    	/*::[*/0x01B6/*::]*/: { /* n:"BrtEndPCDHGLevel", */ T:-1 },
    	/*::[*/0x01B7/*::]*/: { /* n:"BrtBeginPCDHGLGroups", */ T:1 },
    	/*::[*/0x01B8/*::]*/: { /* n:"BrtEndPCDHGLGroups", */ T:-1 },
    	/*::[*/0x01B9/*::]*/: { /* n:"BrtBeginPCDHGLGroup", */ T:1 },
    	/*::[*/0x01BA/*::]*/: { /* n:"BrtEndPCDHGLGroup", */ T:-1 },
    	/*::[*/0x01BB/*::]*/: { /* n:"BrtBeginPCDHGLGMembers", */ T:1 },
    	/*::[*/0x01BC/*::]*/: { /* n:"BrtEndPCDHGLGMembers", */ T:-1 },
    	/*::[*/0x01BD/*::]*/: { /* n:"BrtBeginPCDHGLGMember", */ T:1 },
    	/*::[*/0x01BE/*::]*/: { /* n:"BrtEndPCDHGLGMember", */ T:-1 },
    	/*::[*/0x01BF/*::]*/: { /* n:"BrtBeginQSI", */ T:1 },
    	/*::[*/0x01C0/*::]*/: { /* n:"BrtEndQSI", */ T:-1 },
    	/*::[*/0x01C1/*::]*/: { /* n:"BrtBeginQSIR", */ T:1 },
    	/*::[*/0x01C2/*::]*/: { /* n:"BrtEndQSIR", */ T:-1 },
    	/*::[*/0x01C3/*::]*/: { /* n:"BrtBeginDeletedNames", */ T:1 },
    	/*::[*/0x01C4/*::]*/: { /* n:"BrtEndDeletedNames", */ T:-1 },
    	/*::[*/0x01C5/*::]*/: { /* n:"BrtBeginDeletedName", */ T:1 },
    	/*::[*/0x01C6/*::]*/: { /* n:"BrtEndDeletedName", */ T:-1 },
    	/*::[*/0x01C7/*::]*/: { /* n:"BrtBeginQSIFs", */ T:1 },
    	/*::[*/0x01C8/*::]*/: { /* n:"BrtEndQSIFs", */ T:-1 },
    	/*::[*/0x01C9/*::]*/: { /* n:"BrtBeginQSIF", */ T:1 },
    	/*::[*/0x01CA/*::]*/: { /* n:"BrtEndQSIF", */ T:-1 },
    	/*::[*/0x01CB/*::]*/: { /* n:"BrtBeginAutoSortScope", */ T:1 },
    	/*::[*/0x01CC/*::]*/: { /* n:"BrtEndAutoSortScope", */ T:-1 },
    	/*::[*/0x01CD/*::]*/: { /* n:"BrtBeginConditionalFormatting", */ T:1 },
    	/*::[*/0x01CE/*::]*/: { /* n:"BrtEndConditionalFormatting", */ T:-1 },
    	/*::[*/0x01CF/*::]*/: { /* n:"BrtBeginCFRule", */ T:1 },
    	/*::[*/0x01D0/*::]*/: { /* n:"BrtEndCFRule", */ T:-1 },
    	/*::[*/0x01D1/*::]*/: { /* n:"BrtBeginIconSet", */ T:1 },
    	/*::[*/0x01D2/*::]*/: { /* n:"BrtEndIconSet", */ T:-1 },
    	/*::[*/0x01D3/*::]*/: { /* n:"BrtBeginDatabar", */ T:1 },
    	/*::[*/0x01D4/*::]*/: { /* n:"BrtEndDatabar", */ T:-1 },
    	/*::[*/0x01D5/*::]*/: { /* n:"BrtBeginColorScale", */ T:1 },
    	/*::[*/0x01D6/*::]*/: { /* n:"BrtEndColorScale", */ T:-1 },
    	/*::[*/0x01D7/*::]*/: { /* n:"BrtCFVO" */ },
    	/*::[*/0x01D8/*::]*/: { /* n:"BrtExternValueMeta" */ },
    	/*::[*/0x01D9/*::]*/: { /* n:"BrtBeginColorPalette", */ T:1 },
    	/*::[*/0x01DA/*::]*/: { /* n:"BrtEndColorPalette", */ T:-1 },
    	/*::[*/0x01DB/*::]*/: { /* n:"BrtIndexedColor" */ },
    	/*::[*/0x01DC/*::]*/: { /* n:"BrtMargins", */ f:parse_BrtMargins },
    	/*::[*/0x01DD/*::]*/: { /* n:"BrtPrintOptions" */ },
    	/*::[*/0x01DE/*::]*/: { /* n:"BrtPageSetup" */ },
    	/*::[*/0x01DF/*::]*/: { /* n:"BrtBeginHeaderFooter", */ T:1 },
    	/*::[*/0x01E0/*::]*/: { /* n:"BrtEndHeaderFooter", */ T:-1 },
    	/*::[*/0x01E1/*::]*/: { /* n:"BrtBeginSXCrtFormat", */ T:1 },
    	/*::[*/0x01E2/*::]*/: { /* n:"BrtEndSXCrtFormat", */ T:-1 },
    	/*::[*/0x01E3/*::]*/: { /* n:"BrtBeginSXCrtFormats", */ T:1 },
    	/*::[*/0x01E4/*::]*/: { /* n:"BrtEndSXCrtFormats", */ T:-1 },
    	/*::[*/0x01E5/*::]*/: { /* n:"BrtWsFmtInfo", */ f:parse_BrtWsFmtInfo },
    	/*::[*/0x01E6/*::]*/: { /* n:"BrtBeginMgs", */ T:1 },
    	/*::[*/0x01E7/*::]*/: { /* n:"BrtEndMGs", */ T:-1 },
    	/*::[*/0x01E8/*::]*/: { /* n:"BrtBeginMGMaps", */ T:1 },
    	/*::[*/0x01E9/*::]*/: { /* n:"BrtEndMGMaps", */ T:-1 },
    	/*::[*/0x01EA/*::]*/: { /* n:"BrtBeginMG", */ T:1 },
    	/*::[*/0x01EB/*::]*/: { /* n:"BrtEndMG", */ T:-1 },
    	/*::[*/0x01EC/*::]*/: { /* n:"BrtBeginMap", */ T:1 },
    	/*::[*/0x01ED/*::]*/: { /* n:"BrtEndMap", */ T:-1 },
    	/*::[*/0x01EE/*::]*/: { /* n:"BrtHLink", */ f:parse_BrtHLink },
    	/*::[*/0x01EF/*::]*/: { /* n:"BrtBeginDCon", */ T:1 },
    	/*::[*/0x01F0/*::]*/: { /* n:"BrtEndDCon", */ T:-1 },
    	/*::[*/0x01F1/*::]*/: { /* n:"BrtBeginDRefs", */ T:1 },
    	/*::[*/0x01F2/*::]*/: { /* n:"BrtEndDRefs", */ T:-1 },
    	/*::[*/0x01F3/*::]*/: { /* n:"BrtDRef" */ },
    	/*::[*/0x01F4/*::]*/: { /* n:"BrtBeginScenMan", */ T:1 },
    	/*::[*/0x01F5/*::]*/: { /* n:"BrtEndScenMan", */ T:-1 },
    	/*::[*/0x01F6/*::]*/: { /* n:"BrtBeginSct", */ T:1 },
    	/*::[*/0x01F7/*::]*/: { /* n:"BrtEndSct", */ T:-1 },
    	/*::[*/0x01F8/*::]*/: { /* n:"BrtSlc" */ },
    	/*::[*/0x01F9/*::]*/: { /* n:"BrtBeginDXFs", */ T:1 },
    	/*::[*/0x01FA/*::]*/: { /* n:"BrtEndDXFs", */ T:-1 },
    	/*::[*/0x01FB/*::]*/: { /* n:"BrtDXF" */ },
    	/*::[*/0x01FC/*::]*/: { /* n:"BrtBeginTableStyles", */ T:1 },
    	/*::[*/0x01FD/*::]*/: { /* n:"BrtEndTableStyles", */ T:-1 },
    	/*::[*/0x01FE/*::]*/: { /* n:"BrtBeginTableStyle", */ T:1 },
    	/*::[*/0x01FF/*::]*/: { /* n:"BrtEndTableStyle", */ T:-1 },
    	/*::[*/0x0200/*::]*/: { /* n:"BrtTableStyleElement" */ },
    	/*::[*/0x0201/*::]*/: { /* n:"BrtTableStyleClient" */ },
    	/*::[*/0x0202/*::]*/: { /* n:"BrtBeginVolDeps", */ T:1 },
    	/*::[*/0x0203/*::]*/: { /* n:"BrtEndVolDeps", */ T:-1 },
    	/*::[*/0x0204/*::]*/: { /* n:"BrtBeginVolType", */ T:1 },
    	/*::[*/0x0205/*::]*/: { /* n:"BrtEndVolType", */ T:-1 },
    	/*::[*/0x0206/*::]*/: { /* n:"BrtBeginVolMain", */ T:1 },
    	/*::[*/0x0207/*::]*/: { /* n:"BrtEndVolMain", */ T:-1 },
    	/*::[*/0x0208/*::]*/: { /* n:"BrtBeginVolTopic", */ T:1 },
    	/*::[*/0x0209/*::]*/: { /* n:"BrtEndVolTopic", */ T:-1 },
    	/*::[*/0x020A/*::]*/: { /* n:"BrtVolSubtopic" */ },
    	/*::[*/0x020B/*::]*/: { /* n:"BrtVolRef" */ },
    	/*::[*/0x020C/*::]*/: { /* n:"BrtVolNum" */ },
    	/*::[*/0x020D/*::]*/: { /* n:"BrtVolErr" */ },
    	/*::[*/0x020E/*::]*/: { /* n:"BrtVolStr" */ },
    	/*::[*/0x020F/*::]*/: { /* n:"BrtVolBool" */ },
    	/*::[*/0x0210/*::]*/: { /* n:"BrtBeginCalcChain$", */ T:1 },
    	/*::[*/0x0211/*::]*/: { /* n:"BrtEndCalcChain$", */ T:-1 },
    	/*::[*/0x0212/*::]*/: { /* n:"BrtBeginSortState", */ T:1 },
    	/*::[*/0x0213/*::]*/: { /* n:"BrtEndSortState", */ T:-1 },
    	/*::[*/0x0214/*::]*/: { /* n:"BrtBeginSortCond", */ T:1 },
    	/*::[*/0x0215/*::]*/: { /* n:"BrtEndSortCond", */ T:-1 },
    	/*::[*/0x0216/*::]*/: { /* n:"BrtBookProtection" */ },
    	/*::[*/0x0217/*::]*/: { /* n:"BrtSheetProtection" */ },
    	/*::[*/0x0218/*::]*/: { /* n:"BrtRangeProtection" */ },
    	/*::[*/0x0219/*::]*/: { /* n:"BrtPhoneticInfo" */ },
    	/*::[*/0x021A/*::]*/: { /* n:"BrtBeginECTxtWiz", */ T:1 },
    	/*::[*/0x021B/*::]*/: { /* n:"BrtEndECTxtWiz", */ T:-1 },
    	/*::[*/0x021C/*::]*/: { /* n:"BrtBeginECTWFldInfoLst", */ T:1 },
    	/*::[*/0x021D/*::]*/: { /* n:"BrtEndECTWFldInfoLst", */ T:-1 },
    	/*::[*/0x021E/*::]*/: { /* n:"BrtBeginECTwFldInfo", */ T:1 },
    	/*::[*/0x0224/*::]*/: { /* n:"BrtFileSharing" */ },
    	/*::[*/0x0225/*::]*/: { /* n:"BrtOleSize" */ },
    	/*::[*/0x0226/*::]*/: { /* n:"BrtDrawing", */ f:parse_RelID },
    	/*::[*/0x0227/*::]*/: { /* n:"BrtLegacyDrawing" */ },
    	/*::[*/0x0228/*::]*/: { /* n:"BrtLegacyDrawingHF" */ },
    	/*::[*/0x0229/*::]*/: { /* n:"BrtWebOpt" */ },
    	/*::[*/0x022A/*::]*/: { /* n:"BrtBeginWebPubItems", */ T:1 },
    	/*::[*/0x022B/*::]*/: { /* n:"BrtEndWebPubItems", */ T:-1 },
    	/*::[*/0x022C/*::]*/: { /* n:"BrtBeginWebPubItem", */ T:1 },
    	/*::[*/0x022D/*::]*/: { /* n:"BrtEndWebPubItem", */ T:-1 },
    	/*::[*/0x022E/*::]*/: { /* n:"BrtBeginSXCondFmt", */ T:1 },
    	/*::[*/0x022F/*::]*/: { /* n:"BrtEndSXCondFmt", */ T:-1 },
    	/*::[*/0x0230/*::]*/: { /* n:"BrtBeginSXCondFmts", */ T:1 },
    	/*::[*/0x0231/*::]*/: { /* n:"BrtEndSXCondFmts", */ T:-1 },
    	/*::[*/0x0232/*::]*/: { /* n:"BrtBkHim" */ },
    	/*::[*/0x0234/*::]*/: { /* n:"BrtColor" */ },
    	/*::[*/0x0235/*::]*/: { /* n:"BrtBeginIndexedColors", */ T:1 },
    	/*::[*/0x0236/*::]*/: { /* n:"BrtEndIndexedColors", */ T:-1 },
    	/*::[*/0x0239/*::]*/: { /* n:"BrtBeginMRUColors", */ T:1 },
    	/*::[*/0x023A/*::]*/: { /* n:"BrtEndMRUColors", */ T:-1 },
    	/*::[*/0x023C/*::]*/: { /* n:"BrtMRUColor" */ },
    	/*::[*/0x023D/*::]*/: { /* n:"BrtBeginDVals", */ T:1 },
    	/*::[*/0x023E/*::]*/: { /* n:"BrtEndDVals", */ T:-1 },
    	/*::[*/0x0241/*::]*/: { /* n:"BrtSupNameStart" */ },
    	/*::[*/0x0242/*::]*/: { /* n:"BrtSupNameValueStart" */ },
    	/*::[*/0x0243/*::]*/: { /* n:"BrtSupNameValueEnd" */ },
    	/*::[*/0x0244/*::]*/: { /* n:"BrtSupNameNum" */ },
    	/*::[*/0x0245/*::]*/: { /* n:"BrtSupNameErr" */ },
    	/*::[*/0x0246/*::]*/: { /* n:"BrtSupNameSt" */ },
    	/*::[*/0x0247/*::]*/: { /* n:"BrtSupNameNil" */ },
    	/*::[*/0x0248/*::]*/: { /* n:"BrtSupNameBool" */ },
    	/*::[*/0x0249/*::]*/: { /* n:"BrtSupNameFmla" */ },
    	/*::[*/0x024A/*::]*/: { /* n:"BrtSupNameBits" */ },
    	/*::[*/0x024B/*::]*/: { /* n:"BrtSupNameEnd" */ },
    	/*::[*/0x024C/*::]*/: { /* n:"BrtEndSupBook", */ T:-1 },
    	/*::[*/0x024D/*::]*/: { /* n:"BrtCellSmartTagProperty" */ },
    	/*::[*/0x024E/*::]*/: { /* n:"BrtBeginCellSmartTag", */ T:1 },
    	/*::[*/0x024F/*::]*/: { /* n:"BrtEndCellSmartTag", */ T:-1 },
    	/*::[*/0x0250/*::]*/: { /* n:"BrtBeginCellSmartTags", */ T:1 },
    	/*::[*/0x0251/*::]*/: { /* n:"BrtEndCellSmartTags", */ T:-1 },
    	/*::[*/0x0252/*::]*/: { /* n:"BrtBeginSmartTags", */ T:1 },
    	/*::[*/0x0253/*::]*/: { /* n:"BrtEndSmartTags", */ T:-1 },
    	/*::[*/0x0254/*::]*/: { /* n:"BrtSmartTagType" */ },
    	/*::[*/0x0255/*::]*/: { /* n:"BrtBeginSmartTagTypes", */ T:1 },
    	/*::[*/0x0256/*::]*/: { /* n:"BrtEndSmartTagTypes", */ T:-1 },
    	/*::[*/0x0257/*::]*/: { /* n:"BrtBeginSXFilters", */ T:1 },
    	/*::[*/0x0258/*::]*/: { /* n:"BrtEndSXFilters", */ T:-1 },
    	/*::[*/0x0259/*::]*/: { /* n:"BrtBeginSXFILTER", */ T:1 },
    	/*::[*/0x025A/*::]*/: { /* n:"BrtEndSXFilter", */ T:-1 },
    	/*::[*/0x025B/*::]*/: { /* n:"BrtBeginFills", */ T:1 },
    	/*::[*/0x025C/*::]*/: { /* n:"BrtEndFills", */ T:-1 },
    	/*::[*/0x025D/*::]*/: { /* n:"BrtBeginCellWatches", */ T:1 },
    	/*::[*/0x025E/*::]*/: { /* n:"BrtEndCellWatches", */ T:-1 },
    	/*::[*/0x025F/*::]*/: { /* n:"BrtCellWatch" */ },
    	/*::[*/0x0260/*::]*/: { /* n:"BrtBeginCRErrs", */ T:1 },
    	/*::[*/0x0261/*::]*/: { /* n:"BrtEndCRErrs", */ T:-1 },
    	/*::[*/0x0262/*::]*/: { /* n:"BrtCrashRecErr" */ },
    	/*::[*/0x0263/*::]*/: { /* n:"BrtBeginFonts", */ T:1 },
    	/*::[*/0x0264/*::]*/: { /* n:"BrtEndFonts", */ T:-1 },
    	/*::[*/0x0265/*::]*/: { /* n:"BrtBeginBorders", */ T:1 },
    	/*::[*/0x0266/*::]*/: { /* n:"BrtEndBorders", */ T:-1 },
    	/*::[*/0x0267/*::]*/: { /* n:"BrtBeginFmts", */ T:1 },
    	/*::[*/0x0268/*::]*/: { /* n:"BrtEndFmts", */ T:-1 },
    	/*::[*/0x0269/*::]*/: { /* n:"BrtBeginCellXFs", */ T:1 },
    	/*::[*/0x026A/*::]*/: { /* n:"BrtEndCellXFs", */ T:-1 },
    	/*::[*/0x026B/*::]*/: { /* n:"BrtBeginStyles", */ T:1 },
    	/*::[*/0x026C/*::]*/: { /* n:"BrtEndStyles", */ T:-1 },
    	/*::[*/0x0271/*::]*/: { /* n:"BrtBigName" */ },
    	/*::[*/0x0272/*::]*/: { /* n:"BrtBeginCellStyleXFs", */ T:1 },
    	/*::[*/0x0273/*::]*/: { /* n:"BrtEndCellStyleXFs", */ T:-1 },
    	/*::[*/0x0274/*::]*/: { /* n:"BrtBeginComments", */ T:1 },
    	/*::[*/0x0275/*::]*/: { /* n:"BrtEndComments", */ T:-1 },
    	/*::[*/0x0276/*::]*/: { /* n:"BrtBeginCommentAuthors", */ T:1 },
    	/*::[*/0x0277/*::]*/: { /* n:"BrtEndCommentAuthors", */ T:-1 },
    	/*::[*/0x0278/*::]*/: { /* n:"BrtCommentAuthor", */ f:parse_BrtCommentAuthor },
    	/*::[*/0x0279/*::]*/: { /* n:"BrtBeginCommentList", */ T:1 },
    	/*::[*/0x027A/*::]*/: { /* n:"BrtEndCommentList", */ T:-1 },
    	/*::[*/0x027B/*::]*/: { /* n:"BrtBeginComment", */ T:1, f:parse_BrtBeginComment},
    	/*::[*/0x027C/*::]*/: { /* n:"BrtEndComment", */ T:-1 },
    	/*::[*/0x027D/*::]*/: { /* n:"BrtCommentText", */ f:parse_BrtCommentText },
    	/*::[*/0x027E/*::]*/: { /* n:"BrtBeginOleObjects", */ T:1 },
    	/*::[*/0x027F/*::]*/: { /* n:"BrtOleObject" */ },
    	/*::[*/0x0280/*::]*/: { /* n:"BrtEndOleObjects", */ T:-1 },
    	/*::[*/0x0281/*::]*/: { /* n:"BrtBeginSxrules", */ T:1 },
    	/*::[*/0x0282/*::]*/: { /* n:"BrtEndSxRules", */ T:-1 },
    	/*::[*/0x0283/*::]*/: { /* n:"BrtBeginActiveXControls", */ T:1 },
    	/*::[*/0x0284/*::]*/: { /* n:"BrtActiveX" */ },
    	/*::[*/0x0285/*::]*/: { /* n:"BrtEndActiveXControls", */ T:-1 },
    	/*::[*/0x0286/*::]*/: { /* n:"BrtBeginPCDSDTCEMembersSortBy", */ T:1 },
    	/*::[*/0x0288/*::]*/: { /* n:"BrtBeginCellIgnoreECs", */ T:1 },
    	/*::[*/0x0289/*::]*/: { /* n:"BrtCellIgnoreEC" */ },
    	/*::[*/0x028A/*::]*/: { /* n:"BrtEndCellIgnoreECs", */ T:-1 },
    	/*::[*/0x028B/*::]*/: { /* n:"BrtCsProp", */ f:parse_BrtCsProp },
    	/*::[*/0x028C/*::]*/: { /* n:"BrtCsPageSetup" */ },
    	/*::[*/0x028D/*::]*/: { /* n:"BrtBeginUserCsViews", */ T:1 },
    	/*::[*/0x028E/*::]*/: { /* n:"BrtEndUserCsViews", */ T:-1 },
    	/*::[*/0x028F/*::]*/: { /* n:"BrtBeginUserCsView", */ T:1 },
    	/*::[*/0x0290/*::]*/: { /* n:"BrtEndUserCsView", */ T:-1 },
    	/*::[*/0x0291/*::]*/: { /* n:"BrtBeginPcdSFCIEntries", */ T:1 },
    	/*::[*/0x0292/*::]*/: { /* n:"BrtEndPCDSFCIEntries", */ T:-1 },
    	/*::[*/0x0293/*::]*/: { /* n:"BrtPCDSFCIEntry" */ },
    	/*::[*/0x0294/*::]*/: { /* n:"BrtBeginListParts", */ T:1 },
    	/*::[*/0x0295/*::]*/: { /* n:"BrtListPart" */ },
    	/*::[*/0x0296/*::]*/: { /* n:"BrtEndListParts", */ T:-1 },
    	/*::[*/0x0297/*::]*/: { /* n:"BrtSheetCalcProp" */ },
    	/*::[*/0x0298/*::]*/: { /* n:"BrtBeginFnGroup", */ T:1 },
    	/*::[*/0x0299/*::]*/: { /* n:"BrtFnGroup" */ },
    	/*::[*/0x029A/*::]*/: { /* n:"BrtEndFnGroup", */ T:-1 },
    	/*::[*/0x029B/*::]*/: { /* n:"BrtSupAddin" */ },
    	/*::[*/0x029C/*::]*/: { /* n:"BrtSXTDMPOrder" */ },
    	/*::[*/0x029D/*::]*/: { /* n:"BrtCsProtection" */ },
    	/*::[*/0x029F/*::]*/: { /* n:"BrtBeginWsSortMap", */ T:1 },
    	/*::[*/0x02A0/*::]*/: { /* n:"BrtEndWsSortMap", */ T:-1 },
    	/*::[*/0x02A1/*::]*/: { /* n:"BrtBeginRRSort", */ T:1 },
    	/*::[*/0x02A2/*::]*/: { /* n:"BrtEndRRSort", */ T:-1 },
    	/*::[*/0x02A3/*::]*/: { /* n:"BrtRRSortItem" */ },
    	/*::[*/0x02A4/*::]*/: { /* n:"BrtFileSharingIso" */ },
    	/*::[*/0x02A5/*::]*/: { /* n:"BrtBookProtectionIso" */ },
    	/*::[*/0x02A6/*::]*/: { /* n:"BrtSheetProtectionIso" */ },
    	/*::[*/0x02A7/*::]*/: { /* n:"BrtCsProtectionIso" */ },
    	/*::[*/0x02A8/*::]*/: { /* n:"BrtRangeProtectionIso" */ },
    	/*::[*/0x02A9/*::]*/: { /* n:"BrtDValList" */ },
    	/*::[*/0x0400/*::]*/: { /* n:"BrtRwDescent" */ },
    	/*::[*/0x0401/*::]*/: { /* n:"BrtKnownFonts" */ },
    	/*::[*/0x0402/*::]*/: { /* n:"BrtBeginSXTupleSet", */ T:1 },
    	/*::[*/0x0403/*::]*/: { /* n:"BrtEndSXTupleSet", */ T:-1 },
    	/*::[*/0x0404/*::]*/: { /* n:"BrtBeginSXTupleSetHeader", */ T:1 },
    	/*::[*/0x0405/*::]*/: { /* n:"BrtEndSXTupleSetHeader", */ T:-1 },
    	/*::[*/0x0406/*::]*/: { /* n:"BrtSXTupleSetHeaderItem" */ },
    	/*::[*/0x0407/*::]*/: { /* n:"BrtBeginSXTupleSetData", */ T:1 },
    	/*::[*/0x0408/*::]*/: { /* n:"BrtEndSXTupleSetData", */ T:-1 },
    	/*::[*/0x0409/*::]*/: { /* n:"BrtBeginSXTupleSetRow", */ T:1 },
    	/*::[*/0x040A/*::]*/: { /* n:"BrtEndSXTupleSetRow", */ T:-1 },
    	/*::[*/0x040B/*::]*/: { /* n:"BrtSXTupleSetRowItem" */ },
    	/*::[*/0x040C/*::]*/: { /* n:"BrtNameExt" */ },
    	/*::[*/0x040D/*::]*/: { /* n:"BrtPCDH14" */ },
    	/*::[*/0x040E/*::]*/: { /* n:"BrtBeginPCDCalcMem14", */ T:1 },
    	/*::[*/0x040F/*::]*/: { /* n:"BrtEndPCDCalcMem14", */ T:-1 },
    	/*::[*/0x0410/*::]*/: { /* n:"BrtSXTH14" */ },
    	/*::[*/0x0411/*::]*/: { /* n:"BrtBeginSparklineGroup", */ T:1 },
    	/*::[*/0x0412/*::]*/: { /* n:"BrtEndSparklineGroup", */ T:-1 },
    	/*::[*/0x0413/*::]*/: { /* n:"BrtSparkline" */ },
    	/*::[*/0x0414/*::]*/: { /* n:"BrtSXDI14" */ },
    	/*::[*/0x0415/*::]*/: { /* n:"BrtWsFmtInfoEx14" */ },
    	/*::[*/0x0416/*::]*/: { /* n:"BrtBeginConditionalFormatting14", */ T:1 },
    	/*::[*/0x0417/*::]*/: { /* n:"BrtEndConditionalFormatting14", */ T:-1 },
    	/*::[*/0x0418/*::]*/: { /* n:"BrtBeginCFRule14", */ T:1 },
    	/*::[*/0x0419/*::]*/: { /* n:"BrtEndCFRule14", */ T:-1 },
    	/*::[*/0x041A/*::]*/: { /* n:"BrtCFVO14" */ },
    	/*::[*/0x041B/*::]*/: { /* n:"BrtBeginDatabar14", */ T:1 },
    	/*::[*/0x041C/*::]*/: { /* n:"BrtBeginIconSet14", */ T:1 },
    	/*::[*/0x041D/*::]*/: { /* n:"BrtDVal14", */ f: parse_BrtDVal14 },
    	/*::[*/0x041E/*::]*/: { /* n:"BrtBeginDVals14", */ T:1 },
    	/*::[*/0x041F/*::]*/: { /* n:"BrtColor14" */ },
    	/*::[*/0x0420/*::]*/: { /* n:"BrtBeginSparklines", */ T:1 },
    	/*::[*/0x0421/*::]*/: { /* n:"BrtEndSparklines", */ T:-1 },
    	/*::[*/0x0422/*::]*/: { /* n:"BrtBeginSparklineGroups", */ T:1 },
    	/*::[*/0x0423/*::]*/: { /* n:"BrtEndSparklineGroups", */ T:-1 },
    	/*::[*/0x0425/*::]*/: { /* n:"BrtSXVD14" */ },
    	/*::[*/0x0426/*::]*/: { /* n:"BrtBeginSXView14", */ T:1 },
    	/*::[*/0x0427/*::]*/: { /* n:"BrtEndSXView14", */ T:-1 },
    	/*::[*/0x0428/*::]*/: { /* n:"BrtBeginSXView16", */ T:1 },
    	/*::[*/0x0429/*::]*/: { /* n:"BrtEndSXView16", */ T:-1 },
    	/*::[*/0x042A/*::]*/: { /* n:"BrtBeginPCD14", */ T:1 },
    	/*::[*/0x042B/*::]*/: { /* n:"BrtEndPCD14", */ T:-1 },
    	/*::[*/0x042C/*::]*/: { /* n:"BrtBeginExtConn14", */ T:1 },
    	/*::[*/0x042D/*::]*/: { /* n:"BrtEndExtConn14", */ T:-1 },
    	/*::[*/0x042E/*::]*/: { /* n:"BrtBeginSlicerCacheIDs", */ T:1 },
    	/*::[*/0x042F/*::]*/: { /* n:"BrtEndSlicerCacheIDs", */ T:-1 },
    	/*::[*/0x0430/*::]*/: { /* n:"BrtBeginSlicerCacheID", */ T:1 },
    	/*::[*/0x0431/*::]*/: { /* n:"BrtEndSlicerCacheID", */ T:-1 },
    	/*::[*/0x0433/*::]*/: { /* n:"BrtBeginSlicerCache", */ T:1 },
    	/*::[*/0x0434/*::]*/: { /* n:"BrtEndSlicerCache", */ T:-1 },
    	/*::[*/0x0435/*::]*/: { /* n:"BrtBeginSlicerCacheDef", */ T:1 },
    	/*::[*/0x0436/*::]*/: { /* n:"BrtEndSlicerCacheDef", */ T:-1 },
    	/*::[*/0x0437/*::]*/: { /* n:"BrtBeginSlicersEx", */ T:1 },
    	/*::[*/0x0438/*::]*/: { /* n:"BrtEndSlicersEx", */ T:-1 },
    	/*::[*/0x0439/*::]*/: { /* n:"BrtBeginSlicerEx", */ T:1 },
    	/*::[*/0x043A/*::]*/: { /* n:"BrtEndSlicerEx", */ T:-1 },
    	/*::[*/0x043B/*::]*/: { /* n:"BrtBeginSlicer", */ T:1 },
    	/*::[*/0x043C/*::]*/: { /* n:"BrtEndSlicer", */ T:-1 },
    	/*::[*/0x043D/*::]*/: { /* n:"BrtSlicerCachePivotTables" */ },
    	/*::[*/0x043E/*::]*/: { /* n:"BrtBeginSlicerCacheOlapImpl", */ T:1 },
    	/*::[*/0x043F/*::]*/: { /* n:"BrtEndSlicerCacheOlapImpl", */ T:-1 },
    	/*::[*/0x0440/*::]*/: { /* n:"BrtBeginSlicerCacheLevelsData", */ T:1 },
    	/*::[*/0x0441/*::]*/: { /* n:"BrtEndSlicerCacheLevelsData", */ T:-1 },
    	/*::[*/0x0442/*::]*/: { /* n:"BrtBeginSlicerCacheLevelData", */ T:1 },
    	/*::[*/0x0443/*::]*/: { /* n:"BrtEndSlicerCacheLevelData", */ T:-1 },
    	/*::[*/0x0444/*::]*/: { /* n:"BrtBeginSlicerCacheSiRanges", */ T:1 },
    	/*::[*/0x0445/*::]*/: { /* n:"BrtEndSlicerCacheSiRanges", */ T:-1 },
    	/*::[*/0x0446/*::]*/: { /* n:"BrtBeginSlicerCacheSiRange", */ T:1 },
    	/*::[*/0x0447/*::]*/: { /* n:"BrtEndSlicerCacheSiRange", */ T:-1 },
    	/*::[*/0x0448/*::]*/: { /* n:"BrtSlicerCacheOlapItem" */ },
    	/*::[*/0x0449/*::]*/: { /* n:"BrtBeginSlicerCacheSelections", */ T:1 },
    	/*::[*/0x044A/*::]*/: { /* n:"BrtSlicerCacheSelection" */ },
    	/*::[*/0x044B/*::]*/: { /* n:"BrtEndSlicerCacheSelections", */ T:-1 },
    	/*::[*/0x044C/*::]*/: { /* n:"BrtBeginSlicerCacheNative", */ T:1 },
    	/*::[*/0x044D/*::]*/: { /* n:"BrtEndSlicerCacheNative", */ T:-1 },
    	/*::[*/0x044E/*::]*/: { /* n:"BrtSlicerCacheNativeItem" */ },
    	/*::[*/0x044F/*::]*/: { /* n:"BrtRangeProtection14" */ },
    	/*::[*/0x0450/*::]*/: { /* n:"BrtRangeProtectionIso14" */ },
    	/*::[*/0x0451/*::]*/: { /* n:"BrtCellIgnoreEC14" */ },
    	/*::[*/0x0457/*::]*/: { /* n:"BrtList14" */ },
    	/*::[*/0x0458/*::]*/: { /* n:"BrtCFIcon" */ },
    	/*::[*/0x0459/*::]*/: { /* n:"BrtBeginSlicerCachesPivotCacheIDs", */ T:1 },
    	/*::[*/0x045A/*::]*/: { /* n:"BrtEndSlicerCachesPivotCacheIDs", */ T:-1 },
    	/*::[*/0x045B/*::]*/: { /* n:"BrtBeginSlicers", */ T:1 },
    	/*::[*/0x045C/*::]*/: { /* n:"BrtEndSlicers", */ T:-1 },
    	/*::[*/0x045D/*::]*/: { /* n:"BrtWbProp14" */ },
    	/*::[*/0x045E/*::]*/: { /* n:"BrtBeginSXEdit", */ T:1 },
    	/*::[*/0x045F/*::]*/: { /* n:"BrtEndSXEdit", */ T:-1 },
    	/*::[*/0x0460/*::]*/: { /* n:"BrtBeginSXEdits", */ T:1 },
    	/*::[*/0x0461/*::]*/: { /* n:"BrtEndSXEdits", */ T:-1 },
    	/*::[*/0x0462/*::]*/: { /* n:"BrtBeginSXChange", */ T:1 },
    	/*::[*/0x0463/*::]*/: { /* n:"BrtEndSXChange", */ T:-1 },
    	/*::[*/0x0464/*::]*/: { /* n:"BrtBeginSXChanges", */ T:1 },
    	/*::[*/0x0465/*::]*/: { /* n:"BrtEndSXChanges", */ T:-1 },
    	/*::[*/0x0466/*::]*/: { /* n:"BrtSXTupleItems" */ },
    	/*::[*/0x0468/*::]*/: { /* n:"BrtBeginSlicerStyle", */ T:1 },
    	/*::[*/0x0469/*::]*/: { /* n:"BrtEndSlicerStyle", */ T:-1 },
    	/*::[*/0x046A/*::]*/: { /* n:"BrtSlicerStyleElement" */ },
    	/*::[*/0x046B/*::]*/: { /* n:"BrtBeginStyleSheetExt14", */ T:1 },
    	/*::[*/0x046C/*::]*/: { /* n:"BrtEndStyleSheetExt14", */ T:-1 },
    	/*::[*/0x046D/*::]*/: { /* n:"BrtBeginSlicerCachesPivotCacheID", */ T:1 },
    	/*::[*/0x046E/*::]*/: { /* n:"BrtEndSlicerCachesPivotCacheID", */ T:-1 },
    	/*::[*/0x046F/*::]*/: { /* n:"BrtBeginConditionalFormattings", */ T:1 },
    	/*::[*/0x0470/*::]*/: { /* n:"BrtEndConditionalFormattings", */ T:-1 },
    	/*::[*/0x0471/*::]*/: { /* n:"BrtBeginPCDCalcMemExt", */ T:1 },
    	/*::[*/0x0472/*::]*/: { /* n:"BrtEndPCDCalcMemExt", */ T:-1 },
    	/*::[*/0x0473/*::]*/: { /* n:"BrtBeginPCDCalcMemsExt", */ T:1 },
    	/*::[*/0x0474/*::]*/: { /* n:"BrtEndPCDCalcMemsExt", */ T:-1 },
    	/*::[*/0x0475/*::]*/: { /* n:"BrtPCDField14" */ },
    	/*::[*/0x0476/*::]*/: { /* n:"BrtBeginSlicerStyles", */ T:1 },
    	/*::[*/0x0477/*::]*/: { /* n:"BrtEndSlicerStyles", */ T:-1 },
    	/*::[*/0x0478/*::]*/: { /* n:"BrtBeginSlicerStyleElements", */ T:1 },
    	/*::[*/0x0479/*::]*/: { /* n:"BrtEndSlicerStyleElements", */ T:-1 },
    	/*::[*/0x047A/*::]*/: { /* n:"BrtCFRuleExt" */ },
    	/*::[*/0x047B/*::]*/: { /* n:"BrtBeginSXCondFmt14", */ T:1 },
    	/*::[*/0x047C/*::]*/: { /* n:"BrtEndSXCondFmt14", */ T:-1 },
    	/*::[*/0x047D/*::]*/: { /* n:"BrtBeginSXCondFmts14", */ T:1 },
    	/*::[*/0x047E/*::]*/: { /* n:"BrtEndSXCondFmts14", */ T:-1 },
    	/*::[*/0x0480/*::]*/: { /* n:"BrtBeginSortCond14", */ T:1 },
    	/*::[*/0x0481/*::]*/: { /* n:"BrtEndSortCond14", */ T:-1 },
    	/*::[*/0x0482/*::]*/: { /* n:"BrtEndDVals14", */ T:-1 },
    	/*::[*/0x0483/*::]*/: { /* n:"BrtEndIconSet14", */ T:-1 },
    	/*::[*/0x0484/*::]*/: { /* n:"BrtEndDatabar14", */ T:-1 },
    	/*::[*/0x0485/*::]*/: { /* n:"BrtBeginColorScale14", */ T:1 },
    	/*::[*/0x0486/*::]*/: { /* n:"BrtEndColorScale14", */ T:-1 },
    	/*::[*/0x0487/*::]*/: { /* n:"BrtBeginSxrules14", */ T:1 },
    	/*::[*/0x0488/*::]*/: { /* n:"BrtEndSxrules14", */ T:-1 },
    	/*::[*/0x0489/*::]*/: { /* n:"BrtBeginPRule14", */ T:1 },
    	/*::[*/0x048A/*::]*/: { /* n:"BrtEndPRule14", */ T:-1 },
    	/*::[*/0x048B/*::]*/: { /* n:"BrtBeginPRFilters14", */ T:1 },
    	/*::[*/0x048C/*::]*/: { /* n:"BrtEndPRFilters14", */ T:-1 },
    	/*::[*/0x048D/*::]*/: { /* n:"BrtBeginPRFilter14", */ T:1 },
    	/*::[*/0x048E/*::]*/: { /* n:"BrtEndPRFilter14", */ T:-1 },
    	/*::[*/0x048F/*::]*/: { /* n:"BrtBeginPRFItem14", */ T:1 },
    	/*::[*/0x0490/*::]*/: { /* n:"BrtEndPRFItem14", */ T:-1 },
    	/*::[*/0x0491/*::]*/: { /* n:"BrtBeginCellIgnoreECs14", */ T:1 },
    	/*::[*/0x0492/*::]*/: { /* n:"BrtEndCellIgnoreECs14", */ T:-1 },
    	/*::[*/0x0493/*::]*/: { /* n:"BrtDxf14" */ },
    	/*::[*/0x0494/*::]*/: { /* n:"BrtBeginDxF14s", */ T:1 },
    	/*::[*/0x0495/*::]*/: { /* n:"BrtEndDxf14s", */ T:-1 },
    	/*::[*/0x0499/*::]*/: { /* n:"BrtFilter14" */ },
    	/*::[*/0x049A/*::]*/: { /* n:"BrtBeginCustomFilters14", */ T:1 },
    	/*::[*/0x049C/*::]*/: { /* n:"BrtCustomFilter14" */ },
    	/*::[*/0x049D/*::]*/: { /* n:"BrtIconFilter14" */ },
    	/*::[*/0x049E/*::]*/: { /* n:"BrtPivotCacheConnectionName" */ },
    	/*::[*/0x0800/*::]*/: { /* n:"BrtBeginDecoupledPivotCacheIDs", */ T:1 },
    	/*::[*/0x0801/*::]*/: { /* n:"BrtEndDecoupledPivotCacheIDs", */ T:-1 },
    	/*::[*/0x0802/*::]*/: { /* n:"BrtDecoupledPivotCacheID" */ },
    	/*::[*/0x0803/*::]*/: { /* n:"BrtBeginPivotTableRefs", */ T:1 },
    	/*::[*/0x0804/*::]*/: { /* n:"BrtEndPivotTableRefs", */ T:-1 },
    	/*::[*/0x0805/*::]*/: { /* n:"BrtPivotTableRef" */ },
    	/*::[*/0x0806/*::]*/: { /* n:"BrtSlicerCacheBookPivotTables" */ },
    	/*::[*/0x0807/*::]*/: { /* n:"BrtBeginSxvcells", */ T:1 },
    	/*::[*/0x0808/*::]*/: { /* n:"BrtEndSxvcells", */ T:-1 },
    	/*::[*/0x0809/*::]*/: { /* n:"BrtBeginSxRow", */ T:1 },
    	/*::[*/0x080A/*::]*/: { /* n:"BrtEndSxRow", */ T:-1 },
    	/*::[*/0x080C/*::]*/: { /* n:"BrtPcdCalcMem15" */ },
    	/*::[*/0x0813/*::]*/: { /* n:"BrtQsi15" */ },
    	/*::[*/0x0814/*::]*/: { /* n:"BrtBeginWebExtensions", */ T:1 },
    	/*::[*/0x0815/*::]*/: { /* n:"BrtEndWebExtensions", */ T:-1 },
    	/*::[*/0x0816/*::]*/: { /* n:"BrtWebExtension" */ },
    	/*::[*/0x0817/*::]*/: { /* n:"BrtAbsPath15" */ },
    	/*::[*/0x0818/*::]*/: { /* n:"BrtBeginPivotTableUISettings", */ T:1 },
    	/*::[*/0x0819/*::]*/: { /* n:"BrtEndPivotTableUISettings", */ T:-1 },
    	/*::[*/0x081B/*::]*/: { /* n:"BrtTableSlicerCacheIDs" */ },
    	/*::[*/0x081C/*::]*/: { /* n:"BrtTableSlicerCacheID" */ },
    	/*::[*/0x081D/*::]*/: { /* n:"BrtBeginTableSlicerCache", */ T:1 },
    	/*::[*/0x081E/*::]*/: { /* n:"BrtEndTableSlicerCache", */ T:-1 },
    	/*::[*/0x081F/*::]*/: { /* n:"BrtSxFilter15" */ },
    	/*::[*/0x0820/*::]*/: { /* n:"BrtBeginTimelineCachePivotCacheIDs", */ T:1 },
    	/*::[*/0x0821/*::]*/: { /* n:"BrtEndTimelineCachePivotCacheIDs", */ T:-1 },
    	/*::[*/0x0822/*::]*/: { /* n:"BrtTimelineCachePivotCacheID" */ },
    	/*::[*/0x0823/*::]*/: { /* n:"BrtBeginTimelineCacheIDs", */ T:1 },
    	/*::[*/0x0824/*::]*/: { /* n:"BrtEndTimelineCacheIDs", */ T:-1 },
    	/*::[*/0x0825/*::]*/: { /* n:"BrtBeginTimelineCacheID", */ T:1 },
    	/*::[*/0x0826/*::]*/: { /* n:"BrtEndTimelineCacheID", */ T:-1 },
    	/*::[*/0x0827/*::]*/: { /* n:"BrtBeginTimelinesEx", */ T:1 },
    	/*::[*/0x0828/*::]*/: { /* n:"BrtEndTimelinesEx", */ T:-1 },
    	/*::[*/0x0829/*::]*/: { /* n:"BrtBeginTimelineEx", */ T:1 },
    	/*::[*/0x082A/*::]*/: { /* n:"BrtEndTimelineEx", */ T:-1 },
    	/*::[*/0x082B/*::]*/: { /* n:"BrtWorkBookPr15" */ },
    	/*::[*/0x082C/*::]*/: { /* n:"BrtPCDH15" */ },
    	/*::[*/0x082D/*::]*/: { /* n:"BrtBeginTimelineStyle", */ T:1 },
    	/*::[*/0x082E/*::]*/: { /* n:"BrtEndTimelineStyle", */ T:-1 },
    	/*::[*/0x082F/*::]*/: { /* n:"BrtTimelineStyleElement" */ },
    	/*::[*/0x0830/*::]*/: { /* n:"BrtBeginTimelineStylesheetExt15", */ T:1 },
    	/*::[*/0x0831/*::]*/: { /* n:"BrtEndTimelineStylesheetExt15", */ T:-1 },
    	/*::[*/0x0832/*::]*/: { /* n:"BrtBeginTimelineStyles", */ T:1 },
    	/*::[*/0x0833/*::]*/: { /* n:"BrtEndTimelineStyles", */ T:-1 },
    	/*::[*/0x0834/*::]*/: { /* n:"BrtBeginTimelineStyleElements", */ T:1 },
    	/*::[*/0x0835/*::]*/: { /* n:"BrtEndTimelineStyleElements", */ T:-1 },
    	/*::[*/0x0836/*::]*/: { /* n:"BrtDxf15" */ },
    	/*::[*/0x0837/*::]*/: { /* n:"BrtBeginDxfs15", */ T:1 },
    	/*::[*/0x0838/*::]*/: { /* n:"BrtEndDxfs15", */ T:-1 },
    	/*::[*/0x0839/*::]*/: { /* n:"BrtSlicerCacheHideItemsWithNoData" */ },
    	/*::[*/0x083A/*::]*/: { /* n:"BrtBeginItemUniqueNames", */ T:1 },
    	/*::[*/0x083B/*::]*/: { /* n:"BrtEndItemUniqueNames", */ T:-1 },
    	/*::[*/0x083C/*::]*/: { /* n:"BrtItemUniqueName" */ },
    	/*::[*/0x083D/*::]*/: { /* n:"BrtBeginExtConn15", */ T:1 },
    	/*::[*/0x083E/*::]*/: { /* n:"BrtEndExtConn15", */ T:-1 },
    	/*::[*/0x083F/*::]*/: { /* n:"BrtBeginOledbPr15", */ T:1 },
    	/*::[*/0x0840/*::]*/: { /* n:"BrtEndOledbPr15", */ T:-1 },
    	/*::[*/0x0841/*::]*/: { /* n:"BrtBeginDataFeedPr15", */ T:1 },
    	/*::[*/0x0842/*::]*/: { /* n:"BrtEndDataFeedPr15", */ T:-1 },
    	/*::[*/0x0843/*::]*/: { /* n:"BrtTextPr15" */ },
    	/*::[*/0x0844/*::]*/: { /* n:"BrtRangePr15" */ },
    	/*::[*/0x0845/*::]*/: { /* n:"BrtDbCommand15" */ },
    	/*::[*/0x0846/*::]*/: { /* n:"BrtBeginDbTables15", */ T:1 },
    	/*::[*/0x0847/*::]*/: { /* n:"BrtEndDbTables15", */ T:-1 },
    	/*::[*/0x0848/*::]*/: { /* n:"BrtDbTable15" */ },
    	/*::[*/0x0849/*::]*/: { /* n:"BrtBeginDataModel", */ T:1 },
    	/*::[*/0x084A/*::]*/: { /* n:"BrtEndDataModel", */ T:-1 },
    	/*::[*/0x084B/*::]*/: { /* n:"BrtBeginModelTables", */ T:1 },
    	/*::[*/0x084C/*::]*/: { /* n:"BrtEndModelTables", */ T:-1 },
    	/*::[*/0x084D/*::]*/: { /* n:"BrtModelTable" */ },
    	/*::[*/0x084E/*::]*/: { /* n:"BrtBeginModelRelationships", */ T:1 },
    	/*::[*/0x084F/*::]*/: { /* n:"BrtEndModelRelationships", */ T:-1 },
    	/*::[*/0x0850/*::]*/: { /* n:"BrtModelRelationship" */ },
    	/*::[*/0x0851/*::]*/: { /* n:"BrtBeginECTxtWiz15", */ T:1 },
    	/*::[*/0x0852/*::]*/: { /* n:"BrtEndECTxtWiz15", */ T:-1 },
    	/*::[*/0x0853/*::]*/: { /* n:"BrtBeginECTWFldInfoLst15", */ T:1 },
    	/*::[*/0x0854/*::]*/: { /* n:"BrtEndECTWFldInfoLst15", */ T:-1 },
    	/*::[*/0x0855/*::]*/: { /* n:"BrtBeginECTWFldInfo15", */ T:1 },
    	/*::[*/0x0856/*::]*/: { /* n:"BrtFieldListActiveItem" */ },
    	/*::[*/0x0857/*::]*/: { /* n:"BrtPivotCacheIdVersion" */ },
    	/*::[*/0x0858/*::]*/: { /* n:"BrtSXDI15" */ },
    	/*::[*/0x0859/*::]*/: { /* n:"BrtBeginModelTimeGroupings", */ T:1 },
    	/*::[*/0x085A/*::]*/: { /* n:"BrtEndModelTimeGroupings", */ T:-1 },
    	/*::[*/0x085B/*::]*/: { /* n:"BrtBeginModelTimeGrouping", */ T:1 },
    	/*::[*/0x085C/*::]*/: { /* n:"BrtEndModelTimeGrouping", */ T:-1 },
    	/*::[*/0x085D/*::]*/: { /* n:"BrtModelTimeGroupingCalcCol" */ },
    	/*::[*/0x0C00/*::]*/: { /* n:"BrtUid" */ },
    	/*::[*/0x0C01/*::]*/: { /* n:"BrtRevisionPtr" */ },
    	/*::[*/0x1000/*::]*/: { /* n:"BrtBeginDynamicArrayPr", */ T:1 },
    	/*::[*/0x1001/*::]*/: { /* n:"BrtEndDynamicArrayPr", */ T:-1 },
    	/*::[*/0x138A/*::]*/: { /* n:"BrtBeginRichValueBlock", */ T:1 },
    	/*::[*/0x138B/*::]*/: { /* n:"BrtEndRichValueBlock", */ T:-1 },
    	/*::[*/0x13D9/*::]*/: { /* n:"BrtBeginRichFilters", */ T:1 },
    	/*::[*/0x13DA/*::]*/: { /* n:"BrtEndRichFilters", */ T:-1 },
    	/*::[*/0x13DB/*::]*/: { /* n:"BrtRichFilter" */ },
    	/*::[*/0x13DC/*::]*/: { /* n:"BrtBeginRichFilterColumn", */ T:1 },
    	/*::[*/0x13DD/*::]*/: { /* n:"BrtEndRichFilterColumn", */ T:-1 },
    	/*::[*/0x13DE/*::]*/: { /* n:"BrtBeginCustomRichFilters", */ T:1 },
    	/*::[*/0x13DF/*::]*/: { /* n:"BrtEndCustomRichFilters", */ T:-1 },
    	/*::[*/0x13E0/*::]*/: { /* n:"BrtCustomRichFilter" */ },
    	/*::[*/0x13E1/*::]*/: { /* n:"BrtTop10RichFilter" */ },
    	/*::[*/0x13E2/*::]*/: { /* n:"BrtDynamicRichFilter" */ },
    	/*::[*/0x13E4/*::]*/: { /* n:"BrtBeginRichSortCondition", */ T:1 },
    	/*::[*/0x13E5/*::]*/: { /* n:"BrtEndRichSortCondition", */ T:-1 },
    	/*::[*/0x13E6/*::]*/: { /* n:"BrtRichFilterDateGroupItem" */ },
    	/*::[*/0x13E7/*::]*/: { /* n:"BrtBeginCalcFeatures", */ T:1 },
    	/*::[*/0x13E8/*::]*/: { /* n:"BrtEndCalcFeatures", */ T:-1 },
    	/*::[*/0x13E9/*::]*/: { /* n:"BrtCalcFeature" */ },
    	/*::[*/0x13EB/*::]*/: { /* n:"BrtExternalLinksPr" */ },
    	/*::[*/0xFFFF/*::]*/: { n:"" }
    };

    /* [MS-XLS] 2.3 Record Enumeration (and other sources) */
    var XLSRecordEnum = {
    	/* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */
    	/*::[*/0x0006/*::]*/: { /* n:"Formula", */ f:parse_Formula },
    	/*::[*/0x000a/*::]*/: { /* n:"EOF", */ f:parsenoop2 },
    	/*::[*/0x000c/*::]*/: { /* n:"CalcCount", */ f:parseuint16 }, //
    	/*::[*/0x000d/*::]*/: { /* n:"CalcMode", */ f:parseuint16 }, //
    	/*::[*/0x000e/*::]*/: { /* n:"CalcPrecision", */ f:parsebool }, //
    	/*::[*/0x000f/*::]*/: { /* n:"CalcRefMode", */ f:parsebool }, //
    	/*::[*/0x0010/*::]*/: { /* n:"CalcDelta", */ f:parse_Xnum }, //
    	/*::[*/0x0011/*::]*/: { /* n:"CalcIter", */ f:parsebool }, //
    	/*::[*/0x0012/*::]*/: { /* n:"Protect", */ f:parsebool },
    	/*::[*/0x0013/*::]*/: { /* n:"Password", */ f:parseuint16 },
    	/*::[*/0x0014/*::]*/: { /* n:"Header", */ f:parse_XLHeaderFooter },
    	/*::[*/0x0015/*::]*/: { /* n:"Footer", */ f:parse_XLHeaderFooter },
    	/*::[*/0x0017/*::]*/: { /* n:"ExternSheet", */ f:parse_ExternSheet },
    	/*::[*/0x0018/*::]*/: { /* n:"Lbl", */ f:parse_Lbl },
    	/*::[*/0x0019/*::]*/: { /* n:"WinProtect", */ f:parsebool },
    	/*::[*/0x001a/*::]*/: { /* n:"VerticalPageBreaks", */ },
    	/*::[*/0x001b/*::]*/: { /* n:"HorizontalPageBreaks", */ },
    	/*::[*/0x001c/*::]*/: { /* n:"Note", */ f:parse_Note },
    	/*::[*/0x001d/*::]*/: { /* n:"Selection", */ },
    	/*::[*/0x0022/*::]*/: { /* n:"Date1904", */ f:parsebool },
    	/*::[*/0x0023/*::]*/: { /* n:"ExternName", */ f:parse_ExternName },
    	/*::[*/0x0026/*::]*/: { /* n:"LeftMargin", */ f:parse_Xnum }, // *
    	/*::[*/0x0027/*::]*/: { /* n:"RightMargin", */ f:parse_Xnum }, // *
    	/*::[*/0x0028/*::]*/: { /* n:"TopMargin", */ f:parse_Xnum }, // *
    	/*::[*/0x0029/*::]*/: { /* n:"BottomMargin", */ f:parse_Xnum }, // *
    	/*::[*/0x002a/*::]*/: { /* n:"PrintRowCol", */ f:parsebool },
    	/*::[*/0x002b/*::]*/: { /* n:"PrintGrid", */ f:parsebool },
    	/*::[*/0x002f/*::]*/: { /* n:"FilePass", */ f:parse_FilePass },
    	/*::[*/0x0031/*::]*/: { /* n:"Font", */ f:parse_Font },
    	/*::[*/0x0033/*::]*/: { /* n:"PrintSize", */ f:parseuint16 },
    	/*::[*/0x003c/*::]*/: { /* n:"Continue", */ },
    	/*::[*/0x003d/*::]*/: { /* n:"Window1", */ f:parse_Window1 },
    	/*::[*/0x0040/*::]*/: { /* n:"Backup", */ f:parsebool },
    	/*::[*/0x0041/*::]*/: { /* n:"Pane", */ f:parse_Pane },
    	/*::[*/0x0042/*::]*/: { /* n:"CodePage", */ f:parseuint16 },
    	/*::[*/0x004d/*::]*/: { /* n:"Pls", */ },
    	/*::[*/0x0050/*::]*/: { /* n:"DCon", */ },
    	/*::[*/0x0051/*::]*/: { /* n:"DConRef", */ },
    	/*::[*/0x0052/*::]*/: { /* n:"DConName", */ },
    	/*::[*/0x0055/*::]*/: { /* n:"DefColWidth", */ f:parseuint16 },
    	/*::[*/0x0059/*::]*/: { /* n:"XCT", */ },
    	/*::[*/0x005a/*::]*/: { /* n:"CRN", */ },
    	/*::[*/0x005b/*::]*/: { /* n:"FileSharing", */ },
    	/*::[*/0x005c/*::]*/: { /* n:"WriteAccess", */ f:parse_WriteAccess },
    	/*::[*/0x005d/*::]*/: { /* n:"Obj", */ f:parse_Obj },
    	/*::[*/0x005e/*::]*/: { /* n:"Uncalced", */ },
    	/*::[*/0x005f/*::]*/: { /* n:"CalcSaveRecalc", */ f:parsebool }, //
    	/*::[*/0x0060/*::]*/: { /* n:"Template", */ },
    	/*::[*/0x0061/*::]*/: { /* n:"Intl", */ },
    	/*::[*/0x0063/*::]*/: { /* n:"ObjProtect", */ f:parsebool },
    	/*::[*/0x007d/*::]*/: { /* n:"ColInfo", */ f:parse_ColInfo },
    	/*::[*/0x0080/*::]*/: { /* n:"Guts", */ f:parse_Guts },
    	/*::[*/0x0081/*::]*/: { /* n:"WsBool", */ f:parse_WsBool },
    	/*::[*/0x0082/*::]*/: { /* n:"GridSet", */ f:parseuint16 },
    	/*::[*/0x0083/*::]*/: { /* n:"HCenter", */ f:parsebool },
    	/*::[*/0x0084/*::]*/: { /* n:"VCenter", */ f:parsebool },
    	/*::[*/0x0085/*::]*/: { /* n:"BoundSheet8", */ f:parse_BoundSheet8 },
    	/*::[*/0x0086/*::]*/: { /* n:"WriteProtect", */ },
    	/*::[*/0x008c/*::]*/: { /* n:"Country", */ f:parse_Country },
    	/*::[*/0x008d/*::]*/: { /* n:"HideObj", */ f:parseuint16 },
    	/*::[*/0x0090/*::]*/: { /* n:"Sort", */ },
    	/*::[*/0x0092/*::]*/: { /* n:"Palette", */ f:parse_Palette },
    	/*::[*/0x0097/*::]*/: { /* n:"Sync", */ },
    	/*::[*/0x0098/*::]*/: { /* n:"LPr", */ },
    	/*::[*/0x0099/*::]*/: { /* n:"DxGCol", */ },
    	/*::[*/0x009a/*::]*/: { /* n:"FnGroupName", */ },
    	/*::[*/0x009b/*::]*/: { /* n:"FilterMode", */ },
    	/*::[*/0x009c/*::]*/: { /* n:"BuiltInFnGroupCount", */ f:parseuint16 },
    	/*::[*/0x009d/*::]*/: { /* n:"AutoFilterInfo", */ },
    	/*::[*/0x009e/*::]*/: { /* n:"AutoFilter", */ },
    	/*::[*/0x00a0/*::]*/: { /* n:"Scl", */ f:parse_Scl },
    	/*::[*/0x00a1/*::]*/: { /* n:"Setup", */ f:parse_Setup },
    	/*::[*/0x00ae/*::]*/: { /* n:"ScenMan", */ },
    	/*::[*/0x00af/*::]*/: { /* n:"SCENARIO", */ },
    	/*::[*/0x00b0/*::]*/: { /* n:"SxView", */ },
    	/*::[*/0x00b1/*::]*/: { /* n:"Sxvd", */ },
    	/*::[*/0x00b2/*::]*/: { /* n:"SXVI", */ },
    	/*::[*/0x00b4/*::]*/: { /* n:"SxIvd", */ },
    	/*::[*/0x00b5/*::]*/: { /* n:"SXLI", */ },
    	/*::[*/0x00b6/*::]*/: { /* n:"SXPI", */ },
    	/*::[*/0x00b8/*::]*/: { /* n:"DocRoute", */ },
    	/*::[*/0x00b9/*::]*/: { /* n:"RecipName", */ },
    	/*::[*/0x00bd/*::]*/: { /* n:"MulRk", */ f:parse_MulRk },
    	/*::[*/0x00be/*::]*/: { /* n:"MulBlank", */ f:parse_MulBlank },
    	/*::[*/0x00c1/*::]*/: { /* n:"Mms", */ f:parsenoop2 },
    	/*::[*/0x00c5/*::]*/: { /* n:"SXDI", */ },
    	/*::[*/0x00c6/*::]*/: { /* n:"SXDB", */ },
    	/*::[*/0x00c7/*::]*/: { /* n:"SXFDB", */ },
    	/*::[*/0x00c8/*::]*/: { /* n:"SXDBB", */ },
    	/*::[*/0x00c9/*::]*/: { /* n:"SXNum", */ },
    	/*::[*/0x00ca/*::]*/: { /* n:"SxBool", */ f:parsebool },
    	/*::[*/0x00cb/*::]*/: { /* n:"SxErr", */ },
    	/*::[*/0x00cc/*::]*/: { /* n:"SXInt", */ },
    	/*::[*/0x00cd/*::]*/: { /* n:"SXString", */ },
    	/*::[*/0x00ce/*::]*/: { /* n:"SXDtr", */ },
    	/*::[*/0x00cf/*::]*/: { /* n:"SxNil", */ },
    	/*::[*/0x00d0/*::]*/: { /* n:"SXTbl", */ },
    	/*::[*/0x00d1/*::]*/: { /* n:"SXTBRGIITM", */ },
    	/*::[*/0x00d2/*::]*/: { /* n:"SxTbpg", */ },
    	/*::[*/0x00d3/*::]*/: { /* n:"ObProj", */ },
    	/*::[*/0x00d5/*::]*/: { /* n:"SXStreamID", */ },
    	/*::[*/0x00d7/*::]*/: { /* n:"DBCell", */ },
    	/*::[*/0x00d8/*::]*/: { /* n:"SXRng", */ },
    	/*::[*/0x00d9/*::]*/: { /* n:"SxIsxoper", */ },
    	/*::[*/0x00da/*::]*/: { /* n:"BookBool", */ f:parseuint16 },
    	/*::[*/0x00dc/*::]*/: { /* n:"DbOrParamQry", */ },
    	/*::[*/0x00dd/*::]*/: { /* n:"ScenarioProtect", */ f:parsebool },
    	/*::[*/0x00de/*::]*/: { /* n:"OleObjectSize", */ },
    	/*::[*/0x00e0/*::]*/: { /* n:"XF", */ f:parse_XF },
    	/*::[*/0x00e1/*::]*/: { /* n:"InterfaceHdr", */ f:parse_InterfaceHdr },
    	/*::[*/0x00e2/*::]*/: { /* n:"InterfaceEnd", */ f:parsenoop2 },
    	/*::[*/0x00e3/*::]*/: { /* n:"SXVS", */ },
    	/*::[*/0x00e5/*::]*/: { /* n:"MergeCells", */ f:parse_MergeCells },
    	/*::[*/0x00e9/*::]*/: { /* n:"BkHim", */ },
    	/*::[*/0x00eb/*::]*/: { /* n:"MsoDrawingGroup", */ },
    	/*::[*/0x00ec/*::]*/: { /* n:"MsoDrawing", */ },
    	/*::[*/0x00ed/*::]*/: { /* n:"MsoDrawingSelection", */ },
    	/*::[*/0x00ef/*::]*/: { /* n:"PhoneticInfo", */ },
    	/*::[*/0x00f0/*::]*/: { /* n:"SxRule", */ },
    	/*::[*/0x00f1/*::]*/: { /* n:"SXEx", */ },
    	/*::[*/0x00f2/*::]*/: { /* n:"SxFilt", */ },
    	/*::[*/0x00f4/*::]*/: { /* n:"SxDXF", */ },
    	/*::[*/0x00f5/*::]*/: { /* n:"SxItm", */ },
    	/*::[*/0x00f6/*::]*/: { /* n:"SxName", */ },
    	/*::[*/0x00f7/*::]*/: { /* n:"SxSelect", */ },
    	/*::[*/0x00f8/*::]*/: { /* n:"SXPair", */ },
    	/*::[*/0x00f9/*::]*/: { /* n:"SxFmla", */ },
    	/*::[*/0x00fb/*::]*/: { /* n:"SxFormat", */ },
    	/*::[*/0x00fc/*::]*/: { /* n:"SST", */ f:parse_SST },
    	/*::[*/0x00fd/*::]*/: { /* n:"LabelSst", */ f:parse_LabelSst },
    	/*::[*/0x00ff/*::]*/: { /* n:"ExtSST", */ f:parse_ExtSST },
    	/*::[*/0x0100/*::]*/: { /* n:"SXVDEx", */ },
    	/*::[*/0x0103/*::]*/: { /* n:"SXFormula", */ },
    	/*::[*/0x0122/*::]*/: { /* n:"SXDBEx", */ },
    	/*::[*/0x0137/*::]*/: { /* n:"RRDInsDel", */ },
    	/*::[*/0x0138/*::]*/: { /* n:"RRDHead", */ },
    	/*::[*/0x013b/*::]*/: { /* n:"RRDChgCell", */ },
    	/*::[*/0x013d/*::]*/: { /* n:"RRTabId", */ f:parseuint16a },
    	/*::[*/0x013e/*::]*/: { /* n:"RRDRenSheet", */ },
    	/*::[*/0x013f/*::]*/: { /* n:"RRSort", */ },
    	/*::[*/0x0140/*::]*/: { /* n:"RRDMove", */ },
    	/*::[*/0x014a/*::]*/: { /* n:"RRFormat", */ },
    	/*::[*/0x014b/*::]*/: { /* n:"RRAutoFmt", */ },
    	/*::[*/0x014d/*::]*/: { /* n:"RRInsertSh", */ },
    	/*::[*/0x014e/*::]*/: { /* n:"RRDMoveBegin", */ },
    	/*::[*/0x014f/*::]*/: { /* n:"RRDMoveEnd", */ },
    	/*::[*/0x0150/*::]*/: { /* n:"RRDInsDelBegin", */ },
    	/*::[*/0x0151/*::]*/: { /* n:"RRDInsDelEnd", */ },
    	/*::[*/0x0152/*::]*/: { /* n:"RRDConflict", */ },
    	/*::[*/0x0153/*::]*/: { /* n:"RRDDefName", */ },
    	/*::[*/0x0154/*::]*/: { /* n:"RRDRstEtxp", */ },
    	/*::[*/0x015f/*::]*/: { /* n:"LRng", */ },
    	/*::[*/0x0160/*::]*/: { /* n:"UsesELFs", */ f:parsebool },
    	/*::[*/0x0161/*::]*/: { /* n:"DSF", */ f:parsenoop2 },
    	/*::[*/0x0191/*::]*/: { /* n:"CUsr", */ },
    	/*::[*/0x0192/*::]*/: { /* n:"CbUsr", */ },
    	/*::[*/0x0193/*::]*/: { /* n:"UsrInfo", */ },
    	/*::[*/0x0194/*::]*/: { /* n:"UsrExcl", */ },
    	/*::[*/0x0195/*::]*/: { /* n:"FileLock", */ },
    	/*::[*/0x0196/*::]*/: { /* n:"RRDInfo", */ },
    	/*::[*/0x0197/*::]*/: { /* n:"BCUsrs", */ },
    	/*::[*/0x0198/*::]*/: { /* n:"UsrChk", */ },
    	/*::[*/0x01a9/*::]*/: { /* n:"UserBView", */ },
    	/*::[*/0x01aa/*::]*/: { /* n:"UserSViewBegin", */ },
    	/*::[*/0x01ab/*::]*/: { /* n:"UserSViewEnd", */ },
    	/*::[*/0x01ac/*::]*/: { /* n:"RRDUserView", */ },
    	/*::[*/0x01ad/*::]*/: { /* n:"Qsi", */ },
    	/*::[*/0x01ae/*::]*/: { /* n:"SupBook", */ f:parse_SupBook },
    	/*::[*/0x01af/*::]*/: { /* n:"Prot4Rev", */ f:parsebool },
    	/*::[*/0x01b0/*::]*/: { /* n:"CondFmt", */ },
    	/*::[*/0x01b1/*::]*/: { /* n:"CF", */ },
    	/*::[*/0x01b2/*::]*/: { /* n:"DVal", */ },
    	/*::[*/0x01b5/*::]*/: { /* n:"DConBin", */ },
    	/*::[*/0x01b6/*::]*/: { /* n:"TxO", */ f:parse_TxO },
    	/*::[*/0x01b7/*::]*/: { /* n:"RefreshAll", */ f:parsebool }, //
    	/*::[*/0x01b8/*::]*/: { /* n:"HLink", */ f:parse_HLink },
    	/*::[*/0x01b9/*::]*/: { /* n:"Lel", */ },
    	/*::[*/0x01ba/*::]*/: { /* n:"CodeName", */ f:parse_XLUnicodeString },
    	/*::[*/0x01bb/*::]*/: { /* n:"SXFDBType", */ },
    	/*::[*/0x01bc/*::]*/: { /* n:"Prot4RevPass", */ f:parseuint16 },
    	/*::[*/0x01bd/*::]*/: { /* n:"ObNoMacros", */ },
    	/*::[*/0x01be/*::]*/: { /* n:"Dv", */ },
    	/*::[*/0x01c0/*::]*/: { /* n:"Excel9File", */ f:parsenoop2 },
    	/*::[*/0x01c1/*::]*/: { /* n:"RecalcId", */ f:parse_RecalcId, r:2},
    	/*::[*/0x01c2/*::]*/: { /* n:"EntExU2", */ f:parsenoop2 },
    	/*::[*/0x0200/*::]*/: { /* n:"Dimensions", */ f:parse_Dimensions },
    	/*::[*/0x0201/*::]*/: { /* n:"Blank", */ f:parse_Blank },
    	/*::[*/0x0203/*::]*/: { /* n:"Number", */ f:parse_Number },
    	/*::[*/0x0204/*::]*/: { /* n:"Label", */ f:parse_Label },
    	/*::[*/0x0205/*::]*/: { /* n:"BoolErr", */ f:parse_BoolErr },
    	/*::[*/0x0207/*::]*/: { /* n:"String", */ f:parse_String },
    	/*::[*/0x0208/*::]*/: { /* n:"Row", */ f:parse_Row },
    	/*::[*/0x020b/*::]*/: { /* n:"Index", */ },
    	/*::[*/0x0221/*::]*/: { /* n:"Array", */ f:parse_Array },
    	/*::[*/0x0225/*::]*/: { /* n:"DefaultRowHeight", */ f:parse_DefaultRowHeight },
    	/*::[*/0x0236/*::]*/: { /* n:"Table", */ },
    	/*::[*/0x023e/*::]*/: { /* n:"Window2", */ f:parse_Window2 },
    	/*::[*/0x027e/*::]*/: { /* n:"RK", */ f:parse_RK },
    	/*::[*/0x0293/*::]*/: { /* n:"Style", */ },
    	/*::[*/0x0418/*::]*/: { /* n:"BigName", */ },
    	/*::[*/0x041e/*::]*/: { /* n:"Format", */ f:parse_Format },
    	/*::[*/0x043c/*::]*/: { /* n:"ContinueBigName", */ },
    	/*::[*/0x04bc/*::]*/: { /* n:"ShrFmla", */ f:parse_ShrFmla },
    	/*::[*/0x0800/*::]*/: { /* n:"HLinkTooltip", */ f:parse_HLinkTooltip },
    	/*::[*/0x0801/*::]*/: { /* n:"WebPub", */ },
    	/*::[*/0x0802/*::]*/: { /* n:"QsiSXTag", */ },
    	/*::[*/0x0803/*::]*/: { /* n:"DBQueryExt", */ },
    	/*::[*/0x0804/*::]*/: { /* n:"ExtString", */ },
    	/*::[*/0x0805/*::]*/: { /* n:"TxtQry", */ },
    	/*::[*/0x0806/*::]*/: { /* n:"Qsir", */ },
    	/*::[*/0x0807/*::]*/: { /* n:"Qsif", */ },
    	/*::[*/0x0808/*::]*/: { /* n:"RRDTQSIF", */ },
    	/*::[*/0x0809/*::]*/: { /* n:"BOF", */ f:parse_BOF },
    	/*::[*/0x080a/*::]*/: { /* n:"OleDbConn", */ },
    	/*::[*/0x080b/*::]*/: { /* n:"WOpt", */ },
    	/*::[*/0x080c/*::]*/: { /* n:"SXViewEx", */ },
    	/*::[*/0x080d/*::]*/: { /* n:"SXTH", */ },
    	/*::[*/0x080e/*::]*/: { /* n:"SXPIEx", */ },
    	/*::[*/0x080f/*::]*/: { /* n:"SXVDTEx", */ },
    	/*::[*/0x0810/*::]*/: { /* n:"SXViewEx9", */ },
    	/*::[*/0x0812/*::]*/: { /* n:"ContinueFrt", */ },
    	/*::[*/0x0813/*::]*/: { /* n:"RealTimeData", */ },
    	/*::[*/0x0850/*::]*/: { /* n:"ChartFrtInfo", */ },
    	/*::[*/0x0851/*::]*/: { /* n:"FrtWrapper", */ },
    	/*::[*/0x0852/*::]*/: { /* n:"StartBlock", */ },
    	/*::[*/0x0853/*::]*/: { /* n:"EndBlock", */ },
    	/*::[*/0x0854/*::]*/: { /* n:"StartObject", */ },
    	/*::[*/0x0855/*::]*/: { /* n:"EndObject", */ },
    	/*::[*/0x0856/*::]*/: { /* n:"CatLab", */ },
    	/*::[*/0x0857/*::]*/: { /* n:"YMult", */ },
    	/*::[*/0x0858/*::]*/: { /* n:"SXViewLink", */ },
    	/*::[*/0x0859/*::]*/: { /* n:"PivotChartBits", */ },
    	/*::[*/0x085a/*::]*/: { /* n:"FrtFontList", */ },
    	/*::[*/0x0862/*::]*/: { /* n:"SheetExt", */ },
    	/*::[*/0x0863/*::]*/: { /* n:"BookExt", */ r:12},
    	/*::[*/0x0864/*::]*/: { /* n:"SXAddl", */ },
    	/*::[*/0x0865/*::]*/: { /* n:"CrErr", */ },
    	/*::[*/0x0866/*::]*/: { /* n:"HFPicture", */ },
    	/*::[*/0x0867/*::]*/: { /* n:"FeatHdr", */ f:parsenoop2 },
    	/*::[*/0x0868/*::]*/: { /* n:"Feat", */ },
    	/*::[*/0x086a/*::]*/: { /* n:"DataLabExt", */ },
    	/*::[*/0x086b/*::]*/: { /* n:"DataLabExtContents", */ },
    	/*::[*/0x086c/*::]*/: { /* n:"CellWatch", */ },
    	/*::[*/0x0871/*::]*/: { /* n:"FeatHdr11", */ },
    	/*::[*/0x0872/*::]*/: { /* n:"Feature11", */ },
    	/*::[*/0x0874/*::]*/: { /* n:"DropDownObjIds", */ },
    	/*::[*/0x0875/*::]*/: { /* n:"ContinueFrt11", */ },
    	/*::[*/0x0876/*::]*/: { /* n:"DConn", */ },
    	/*::[*/0x0877/*::]*/: { /* n:"List12", */ },
    	/*::[*/0x0878/*::]*/: { /* n:"Feature12", */ },
    	/*::[*/0x0879/*::]*/: { /* n:"CondFmt12", */ },
    	/*::[*/0x087a/*::]*/: { /* n:"CF12", */ },
    	/*::[*/0x087b/*::]*/: { /* n:"CFEx", */ },
    	/*::[*/0x087c/*::]*/: { /* n:"XFCRC", */ f:parse_XFCRC, r:12 },
    	/*::[*/0x087d/*::]*/: { /* n:"XFExt", */ f:parse_XFExt, r:12 },
    	/*::[*/0x087e/*::]*/: { /* n:"AutoFilter12", */ },
    	/*::[*/0x087f/*::]*/: { /* n:"ContinueFrt12", */ },
    	/*::[*/0x0884/*::]*/: { /* n:"MDTInfo", */ },
    	/*::[*/0x0885/*::]*/: { /* n:"MDXStr", */ },
    	/*::[*/0x0886/*::]*/: { /* n:"MDXTuple", */ },
    	/*::[*/0x0887/*::]*/: { /* n:"MDXSet", */ },
    	/*::[*/0x0888/*::]*/: { /* n:"MDXProp", */ },
    	/*::[*/0x0889/*::]*/: { /* n:"MDXKPI", */ },
    	/*::[*/0x088a/*::]*/: { /* n:"MDB", */ },
    	/*::[*/0x088b/*::]*/: { /* n:"PLV", */ },
    	/*::[*/0x088c/*::]*/: { /* n:"Compat12", */ f:parsebool, r:12 },
    	/*::[*/0x088d/*::]*/: { /* n:"DXF", */ },
    	/*::[*/0x088e/*::]*/: { /* n:"TableStyles", */ r:12 },
    	/*::[*/0x088f/*::]*/: { /* n:"TableStyle", */ },
    	/*::[*/0x0890/*::]*/: { /* n:"TableStyleElement", */ },
    	/*::[*/0x0892/*::]*/: { /* n:"StyleExt", */ },
    	/*::[*/0x0893/*::]*/: { /* n:"NamePublish", */ },
    	/*::[*/0x0894/*::]*/: { /* n:"NameCmt", */ f:parse_NameCmt, r:12 },
    	/*::[*/0x0895/*::]*/: { /* n:"SortData", */ },
    	/*::[*/0x0896/*::]*/: { /* n:"Theme", */ f:parse_Theme, r:12 },
    	/*::[*/0x0897/*::]*/: { /* n:"GUIDTypeLib", */ },
    	/*::[*/0x0898/*::]*/: { /* n:"FnGrp12", */ },
    	/*::[*/0x0899/*::]*/: { /* n:"NameFnGrp12", */ },
    	/*::[*/0x089a/*::]*/: { /* n:"MTRSettings", */ f:parse_MTRSettings, r:12 },
    	/*::[*/0x089b/*::]*/: { /* n:"CompressPictures", */ f:parsenoop2 },
    	/*::[*/0x089c/*::]*/: { /* n:"HeaderFooter", */ },
    	/*::[*/0x089d/*::]*/: { /* n:"CrtLayout12", */ },
    	/*::[*/0x089e/*::]*/: { /* n:"CrtMlFrt", */ },
    	/*::[*/0x089f/*::]*/: { /* n:"CrtMlFrtContinue", */ },
    	/*::[*/0x08a3/*::]*/: { /* n:"ForceFullCalculation", */ f:parse_ForceFullCalculation },
    	/*::[*/0x08a4/*::]*/: { /* n:"ShapePropsStream", */ },
    	/*::[*/0x08a5/*::]*/: { /* n:"TextPropsStream", */ },
    	/*::[*/0x08a6/*::]*/: { /* n:"RichTextStream", */ },
    	/*::[*/0x08a7/*::]*/: { /* n:"CrtLayout12A", */ },
    	/*::[*/0x1001/*::]*/: { /* n:"Units", */ },
    	/*::[*/0x1002/*::]*/: { /* n:"Chart", */ },
    	/*::[*/0x1003/*::]*/: { /* n:"Series", */ },
    	/*::[*/0x1006/*::]*/: { /* n:"DataFormat", */ },
    	/*::[*/0x1007/*::]*/: { /* n:"LineFormat", */ },
    	/*::[*/0x1009/*::]*/: { /* n:"MarkerFormat", */ },
    	/*::[*/0x100a/*::]*/: { /* n:"AreaFormat", */ },
    	/*::[*/0x100b/*::]*/: { /* n:"PieFormat", */ },
    	/*::[*/0x100c/*::]*/: { /* n:"AttachedLabel", */ },
    	/*::[*/0x100d/*::]*/: { /* n:"SeriesText", */ },
    	/*::[*/0x1014/*::]*/: { /* n:"ChartFormat", */ },
    	/*::[*/0x1015/*::]*/: { /* n:"Legend", */ },
    	/*::[*/0x1016/*::]*/: { /* n:"SeriesList", */ },
    	/*::[*/0x1017/*::]*/: { /* n:"Bar", */ },
    	/*::[*/0x1018/*::]*/: { /* n:"Line", */ },
    	/*::[*/0x1019/*::]*/: { /* n:"Pie", */ },
    	/*::[*/0x101a/*::]*/: { /* n:"Area", */ },
    	/*::[*/0x101b/*::]*/: { /* n:"Scatter", */ },
    	/*::[*/0x101c/*::]*/: { /* n:"CrtLine", */ },
    	/*::[*/0x101d/*::]*/: { /* n:"Axis", */ },
    	/*::[*/0x101e/*::]*/: { /* n:"Tick", */ },
    	/*::[*/0x101f/*::]*/: { /* n:"ValueRange", */ },
    	/*::[*/0x1020/*::]*/: { /* n:"CatSerRange", */ },
    	/*::[*/0x1021/*::]*/: { /* n:"AxisLine", */ },
    	/*::[*/0x1022/*::]*/: { /* n:"CrtLink", */ },
    	/*::[*/0x1024/*::]*/: { /* n:"DefaultText", */ },
    	/*::[*/0x1025/*::]*/: { /* n:"Text", */ },
    	/*::[*/0x1026/*::]*/: { /* n:"FontX", */ f:parseuint16 },
    	/*::[*/0x1027/*::]*/: { /* n:"ObjectLink", */ },
    	/*::[*/0x1032/*::]*/: { /* n:"Frame", */ },
    	/*::[*/0x1033/*::]*/: { /* n:"Begin", */ },
    	/*::[*/0x1034/*::]*/: { /* n:"End", */ },
    	/*::[*/0x1035/*::]*/: { /* n:"PlotArea", */ },
    	/*::[*/0x103a/*::]*/: { /* n:"Chart3d", */ },
    	/*::[*/0x103c/*::]*/: { /* n:"PicF", */ },
    	/*::[*/0x103d/*::]*/: { /* n:"DropBar", */ },
    	/*::[*/0x103e/*::]*/: { /* n:"Radar", */ },
    	/*::[*/0x103f/*::]*/: { /* n:"Surf", */ },
    	/*::[*/0x1040/*::]*/: { /* n:"RadarArea", */ },
    	/*::[*/0x1041/*::]*/: { /* n:"AxisParent", */ },
    	/*::[*/0x1043/*::]*/: { /* n:"LegendException", */ },
    	/*::[*/0x1044/*::]*/: { /* n:"ShtProps", */ f:parse_ShtProps },
    	/*::[*/0x1045/*::]*/: { /* n:"SerToCrt", */ },
    	/*::[*/0x1046/*::]*/: { /* n:"AxesUsed", */ },
    	/*::[*/0x1048/*::]*/: { /* n:"SBaseRef", */ },
    	/*::[*/0x104a/*::]*/: { /* n:"SerParent", */ },
    	/*::[*/0x104b/*::]*/: { /* n:"SerAuxTrend", */ },
    	/*::[*/0x104e/*::]*/: { /* n:"IFmtRecord", */ },
    	/*::[*/0x104f/*::]*/: { /* n:"Pos", */ },
    	/*::[*/0x1050/*::]*/: { /* n:"AlRuns", */ },
    	/*::[*/0x1051/*::]*/: { /* n:"BRAI", */ },
    	/*::[*/0x105b/*::]*/: { /* n:"SerAuxErrBar", */ },
    	/*::[*/0x105c/*::]*/: { /* n:"ClrtClient", */ f:parse_ClrtClient },
    	/*::[*/0x105d/*::]*/: { /* n:"SerFmt", */ },
    	/*::[*/0x105f/*::]*/: { /* n:"Chart3DBarShape", */ },
    	/*::[*/0x1060/*::]*/: { /* n:"Fbi", */ },
    	/*::[*/0x1061/*::]*/: { /* n:"BopPop", */ },
    	/*::[*/0x1062/*::]*/: { /* n:"AxcExt", */ },
    	/*::[*/0x1063/*::]*/: { /* n:"Dat", */ },
    	/*::[*/0x1064/*::]*/: { /* n:"PlotGrowth", */ },
    	/*::[*/0x1065/*::]*/: { /* n:"SIIndex", */ },
    	/*::[*/0x1066/*::]*/: { /* n:"GelFrame", */ },
    	/*::[*/0x1067/*::]*/: { /* n:"BopPopCustom", */ },
    	/*::[*/0x1068/*::]*/: { /* n:"Fbi2", */ },

    	/*::[*/0x0000/*::]*/: { /* n:"Dimensions", */ f:parse_Dimensions },
    	/*::[*/0x0001/*::]*/: { /* n:"BIFF2BLANK", */ },
    	/*::[*/0x0002/*::]*/: { /* n:"BIFF2INT", */ f:parse_BIFF2INT },
    	/*::[*/0x0003/*::]*/: { /* n:"BIFF2NUM", */ f:parse_BIFF2NUM },
    	/*::[*/0x0004/*::]*/: { /* n:"BIFF2STR", */ f:parse_BIFF2STR },
    	/*::[*/0x0005/*::]*/: { /* n:"BoolErr", */ f:parse_BoolErr },
    	/*::[*/0x0007/*::]*/: { /* n:"String", */ f:parse_BIFF2STRING },
    	/*::[*/0x0008/*::]*/: { /* n:"BIFF2ROW", */ },
    	/*::[*/0x0009/*::]*/: { /* n:"BOF", */ f:parse_BOF },
    	/*::[*/0x000b/*::]*/: { /* n:"Index", */ },
    	/*::[*/0x0016/*::]*/: { /* n:"ExternCount", */ f:parseuint16 },
    	/*::[*/0x001e/*::]*/: { /* n:"BIFF2FORMAT", */ f:parse_BIFF2Format },
    	/*::[*/0x001f/*::]*/: { /* n:"BIFF2FMTCNT", */ }, /* 16-bit cnt of BIFF2FORMAT records */
    	/*::[*/0x0020/*::]*/: { /* n:"BIFF2COLINFO", */ },
    	/*::[*/0x0021/*::]*/: { /* n:"Array", */ f:parse_Array },
    	/*::[*/0x0024/*::]*/: { /* n:"COLWIDTH", */ },
    	/*::[*/0x0025/*::]*/: { /* n:"DefaultRowHeight", */ f:parse_DefaultRowHeight },
    	// 0x2c ??
    	// 0x2d ??
    	// 0x2e ??
    	// 0x30 FONTCOUNT: number of fonts
    	/*::[*/0x0032/*::]*/: { /* n:"BIFF2FONTXTRA", */ f:parse_BIFF2FONTXTRA },
    	// 0x35: INFOOPTS
    	// 0x36: TABLE (BIFF2 only)
    	// 0x37: TABLE2 (BIFF2 only)
    	// 0x38: WNDESK
    	// 0x39 ??
    	// 0x3a: BEGINPREF
    	// 0x3b: ENDPREF
    	/*::[*/0x003e/*::]*/: { /* n:"BIFF2WINDOW2", */ },
    	// 0x3f ??
    	// 0x46: SHOWSCROLL
    	// 0x47: SHOWFORMULA
    	// 0x48: STATUSBAR
    	// 0x49: SHORTMENUS
    	// 0x4A:
    	// 0x4B:
    	// 0x4C:
    	// 0x4E:
    	// 0x4F:
    	// 0x58: TOOLBAR (BIFF3)

    	/* - - - */
    	/*::[*/0x0034/*::]*/: { /* n:"DDEObjName", */ },
    	/*::[*/0x0043/*::]*/: { /* n:"BIFF2XF", */ },
    	/*::[*/0x0044/*::]*/: { /* n:"BIFF2XFINDEX", */ f:parseuint16 },
    	/*::[*/0x0045/*::]*/: { /* n:"BIFF2FONTCLR", */ },
    	/*::[*/0x0056/*::]*/: { /* n:"BIFF4FMTCNT", */ }, /* 16-bit cnt, similar to BIFF2 */
    	/*::[*/0x007e/*::]*/: { /* n:"RK", */ }, /* Not necessarily same as 0x027e */
    	/*::[*/0x007f/*::]*/: { /* n:"ImData", */ f:parse_ImData },
    	/*::[*/0x0087/*::]*/: { /* n:"Addin", */ },
    	/*::[*/0x0088/*::]*/: { /* n:"Edg", */ },
    	/*::[*/0x0089/*::]*/: { /* n:"Pub", */ },
    	// 0x8A
    	// 0x8B LH: alternate menu key flag (BIFF3/4)
    	// 0x8E
    	// 0x8F
    	/*::[*/0x0091/*::]*/: { /* n:"Sub", */ },
    	// 0x93 STYLE
    	/*::[*/0x0094/*::]*/: { /* n:"LHRecord", */ },
    	/*::[*/0x0095/*::]*/: { /* n:"LHNGraph", */ },
    	/*::[*/0x0096/*::]*/: { /* n:"Sound", */ },
    	// 0xA2 FNPROTO: function prototypes (BIFF4)
    	// 0xA3
    	// 0xA8
    	/*::[*/0x00a9/*::]*/: { /* n:"CoordList", */ },
    	/*::[*/0x00ab/*::]*/: { /* n:"GCW", */ },
    	/*::[*/0x00bc/*::]*/: { /* n:"ShrFmla", */ }, /* Not necessarily same as 0x04bc */
    	/*::[*/0x00bf/*::]*/: { /* n:"ToolbarHdr", */ },
    	/*::[*/0x00c0/*::]*/: { /* n:"ToolbarEnd", */ },
    	/*::[*/0x00c2/*::]*/: { /* n:"AddMenu", */ },
    	/*::[*/0x00c3/*::]*/: { /* n:"DelMenu", */ },
    	/*::[*/0x00d6/*::]*/: { /* n:"RString", */ f:parse_RString },
    	/*::[*/0x00df/*::]*/: { /* n:"UDDesc", */ },
    	/*::[*/0x00ea/*::]*/: { /* n:"TabIdConf", */ },
    	/*::[*/0x0162/*::]*/: { /* n:"XL5Modify", */ },
    	/*::[*/0x01a5/*::]*/: { /* n:"FileSharing2", */ },
    	/*::[*/0x0206/*::]*/: { /* n:"Formula", */ f:parse_Formula },
    	/*::[*/0x0209/*::]*/: { /* n:"BOF", */ f:parse_BOF },
    	/*::[*/0x0218/*::]*/: { /* n:"Lbl", */ f:parse_Lbl },
    	/*::[*/0x0223/*::]*/: { /* n:"ExternName", */ f:parse_ExternName },
    	/*::[*/0x0231/*::]*/: { /* n:"Font", */ },
    	/*::[*/0x0243/*::]*/: { /* n:"BIFF3XF", */ },
    	/*::[*/0x0406/*::]*/: { /* n:"Formula", */ f:parse_Formula },
    	/*::[*/0x0409/*::]*/: { /* n:"BOF", */ f:parse_BOF },
    	/*::[*/0x0443/*::]*/: { /* n:"BIFF4XF", */ },
    	/*::[*/0x086d/*::]*/: { /* n:"FeatInfo", */ },
    	/*::[*/0x0873/*::]*/: { /* n:"FeatInfo11", */ },
    	/*::[*/0x0881/*::]*/: { /* n:"SXAddl12", */ },
    	/*::[*/0x08c0/*::]*/: { /* n:"AutoWebPub", */ },
    	/*::[*/0x08c1/*::]*/: { /* n:"ListObj", */ },
    	/*::[*/0x08c2/*::]*/: { /* n:"ListField", */ },
    	/*::[*/0x08c3/*::]*/: { /* n:"ListDV", */ },
    	/*::[*/0x08c4/*::]*/: { /* n:"ListCondFmt", */ },
    	/*::[*/0x08c5/*::]*/: { /* n:"ListCF", */ },
    	/*::[*/0x08c6/*::]*/: { /* n:"FMQry", */ },
    	/*::[*/0x08c7/*::]*/: { /* n:"FMSQry", */ },
    	/*::[*/0x08c8/*::]*/: { /* n:"PLV", */ },
    	/*::[*/0x08c9/*::]*/: { /* n:"LnExt", */ },
    	/*::[*/0x08ca/*::]*/: { /* n:"MkrExt", */ },
    	/*::[*/0x08cb/*::]*/: { /* n:"CrtCoopt", */ },
    	/*::[*/0x08d6/*::]*/: { /* n:"FRTArchId$", */ r:12 },

    	/*::[*/0x7262/*::]*/: {}
    };

    function write_biff_rec(ba/*:BufArray*/, type/*:number*/, payload, length/*:?number*/)/*:void*/ {
    	var t/*:number*/ = type;
    	if(isNaN(t)) return;
    	var len = length || (payload||[]).length || 0;
    	var o = ba.next(4);
    	o.write_shift(2, t);
    	o.write_shift(2, len);
    	if(/*:: len != null &&*/len > 0 && is_buf(payload)) ba.push(payload);
    }

    function write_biff_continue(ba/*:BufArray*/, type/*:number*/, payload, length/*:?number*/)/*:void*/ {
    	var len = length || (payload||[]).length || 0;
    	if(len <= 8224) return write_biff_rec(ba, type, payload, len);
    	var t = type;
    	if(isNaN(t)) return;
    	var parts = payload.parts || [], sidx = 0;
    	var i = 0, w = 0;
    	while(w + (parts[sidx] || 8224) <= 8224) { w+= (parts[sidx] || 8224); sidx++; }
    	var o = ba.next(4);
    	o.write_shift(2, t);
    	o.write_shift(2, w);
    	ba.push(payload.slice(i, i + w));
    	i += w;
    	while(i < len) {
    		o = ba.next(4);
    		o.write_shift(2, 0x3c); // TODO: figure out correct continue type
    		w = 0;
    		while(w + (parts[sidx] || 8224) <= 8224) { w+= (parts[sidx] || 8224); sidx++; }
    		o.write_shift(2, w);
    		ba.push(payload.slice(i, i+w)); i+= w;
    	}
    }

    function write_BIFF2Cell(out, r/*:number*/, c/*:number*/) {
    	if(!out) out = new_buf(7);
    	out.write_shift(2, r);
    	out.write_shift(2, c);
    	out.write_shift(2, 0);
    	out.write_shift(1, 0);
    	return out;
    }

    function write_BIFF2BERR(r/*:number*/, c/*:number*/, val, t/*:?string*/) {
    	var out = new_buf(9);
    	write_BIFF2Cell(out, r, c);
    	write_Bes(val, t || 'b', out);
    	return out;
    }

    /* TODO: codepage, large strings */
    function write_BIFF2LABEL(r/*:number*/, c/*:number*/, val) {
    	var out = new_buf(8 + 2*val.length);
    	write_BIFF2Cell(out, r, c);
    	out.write_shift(1, val.length);
    	out.write_shift(val.length, val, 'sbcs');
    	return out.l < out.length ? out.slice(0, out.l) : out;
    }

    function write_ws_biff2_cell(ba/*:BufArray*/, cell/*:Cell*/, R/*:number*/, C/*:number*//*::, opts*/) {
    	if(cell.v != null) switch(cell.t) {
    		case 'd': case 'n':
    			var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;
    			if((v == (v|0)) && (v >= 0) && (v < 65536))
    				write_biff_rec(ba, 0x0002, write_BIFF2INT(R, C, v));
    			else
    				write_biff_rec(ba, 0x0003, write_BIFF2NUM(R,C, v));
    			return;
    		case 'b': case 'e': write_biff_rec(ba, 0x0005, write_BIFF2BERR(R, C, cell.v, cell.t)); return;
    		/* TODO: codepage, sst */
    		case 's': case 'str':
    			write_biff_rec(ba, 0x0004, write_BIFF2LABEL(R, C, (cell.v||"").slice(0,255)));
    			return;
    	}
    	write_biff_rec(ba, 0x0001, write_BIFF2Cell(null, R, C));
    }

    function write_ws_biff2(ba/*:BufArray*/, ws/*:Worksheet*/, idx/*:number*/, opts/*::, wb:Workbook*/) {
    	var dense = Array.isArray(ws);
    	var range = safe_decode_range(ws['!ref'] || "A1"), ref/*:string*/, rr = "", cols/*:Array<string>*/ = [];
    	if(range.e.c > 0xFF || range.e.r > 0x3FFF) {
    		if(opts.WTF) throw new Error("Range " + (ws['!ref'] || "A1") + " exceeds format limit A1:IV16384");
    		range.e.c = Math.min(range.e.c, 0xFF);
    		range.e.r = Math.min(range.e.c, 0x3FFF);
    		ref = encode_range(range);
    	}
    	for(var R = range.s.r; R <= range.e.r; ++R) {
    		rr = encode_row(R);
    		for(var C = range.s.c; C <= range.e.c; ++C) {
    			if(R === range.s.r) cols[C] = encode_col(C);
    			ref = cols[C] + rr;
    			var cell = dense ? (ws[R]||[])[C] : ws[ref];
    			if(!cell) continue;
    			/* write cell */
    			write_ws_biff2_cell(ba, cell, R, C);
    		}
    	}
    }

    /* Based on test files */
    function write_biff2_buf(wb/*:Workbook*/, opts/*:WriteOpts*/) {
    	var o = opts || {};
    	var ba = buf_array();
    	var idx = 0;
    	for(var i=0;i<wb.SheetNames.length;++i) if(wb.SheetNames[i] == o.sheet) idx=i;
    	if(idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet);
    	write_biff_rec(ba, (o.biff == 4 ? 0x0409 : (o.biff == 3 ? 0x0209 : 0x0009)), write_BOF(wb, 0x10, o));
    	/* ... */
    	write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o);
    	/* ... */
    	write_biff_rec(ba, 0x000A);
    	return ba.end();
    }

    function write_FONTS_biff8(ba, data, opts) {
    	write_biff_rec(ba, 0x0031 /* Font */, write_Font({
    		sz:12,
    		color: {theme:1},
    		name: "Arial",
    		family: 2,
    		scheme: "minor"
    	}, opts));
    }


    function write_FMTS_biff8(ba, NF/*:?SSFTable*/, opts) {
    	if(!NF) return;
    	[[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {
    		/*:: if(!NF) return; */
    		for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) write_biff_rec(ba, 0x041E /* Format */, write_Format(i, NF[i], opts));
    	});
    }

    function write_FEAT(ba, ws) {
    	/* [MS-XLS] 2.4.112 */
    	var o = new_buf(19);
    	o.write_shift(4, 0x867); o.write_shift(4, 0); o.write_shift(4, 0);
    	o.write_shift(2, 3); o.write_shift(1, 1); o.write_shift(4, 0);
    	write_biff_rec(ba, 0x0867 /* FeatHdr */, o);
    	/* [MS-XLS] 2.4.111 */
    	o = new_buf(39);
    	o.write_shift(4, 0x868); o.write_shift(4, 0); o.write_shift(4, 0);
    	o.write_shift(2, 3); o.write_shift(1, 0); o.write_shift(4, 0);
    	o.write_shift(2, 1); o.write_shift(4, 4); o.write_shift(2, 0);
    	write_Ref8U(safe_decode_range(ws['!ref']||"A1"), o);
    	o.write_shift(4, 4);
    	write_biff_rec(ba, 0x0868 /* Feat */, o);
    }

    function write_CELLXFS_biff8(ba, opts) {
    	for(var i = 0; i < 16; ++i) write_biff_rec(ba, 0x00e0 /* XF */, write_XF({numFmtId:0, style:true}, 0, opts));
    	opts.cellXfs.forEach(function(c) {
    		write_biff_rec(ba, 0x00e0 /* XF */, write_XF(c, 0, opts));
    	});
    }

    function write_ws_biff8_hlinks(ba/*:BufArray*/, ws) {
    	for(var R=0; R<ws['!links'].length; ++R) {
    		var HL = ws['!links'][R];
    		write_biff_rec(ba, 0x01b8 /* HLink */, write_HLink(HL));
    		if(HL[1].Tooltip) write_biff_rec(ba, 0x0800 /* HLinkTooltip */, write_HLinkTooltip(HL));
    	}
    	delete ws['!links'];
    }

    function write_ws_cols_biff8(ba, cols) {
    	if(!cols) return;
    	var cnt = 0;
    	cols.forEach(function(col, idx) {
    		if(++cnt <= 256 && col) {
    			write_biff_rec(ba, 0x007d /* ColInfo */, write_ColInfo(col_obj_w(idx, col), idx));
    		}
    	});
    }

    function write_ws_biff8_cell(ba/*:BufArray*/, cell/*:Cell*/, R/*:number*/, C/*:number*/, opts) {
    	var os = 16 + get_cell_style(opts.cellXfs, cell, opts);
    	if(cell.v == null && !cell.bf) {
    		write_biff_rec(ba, 0x0201 /* Blank */, write_XLSCell(R, C, os));
    		return;
    	}
    	if(cell.bf) write_biff_rec(ba, 0x0006 /* Formula */, write_Formula(cell, R, C, opts, os));
    	else switch(cell.t) {
    		case 'd': case 'n':
    			var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;
    			/* TODO: emit RK as appropriate */
    			write_biff_rec(ba, 0x0203 /* Number */, write_Number(R, C, v, os));
    			break;
    		case 'b': case 'e':
    			write_biff_rec(ba, 0x0205 /* BoolErr */, write_BoolErr(R, C, cell.v, os, opts, cell.t));
    			break;
    		/* TODO: codepage, sst */
    		case 's': case 'str':
    			if(opts.bookSST) {
    				var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);
    				write_biff_rec(ba, 0x00fd /* LabelSst */, write_LabelSst(R, C, isst, os));
    			} else write_biff_rec(ba, 0x0204 /* Label */, write_Label(R, C, (cell.v||"").slice(0,255), os, opts));
    			break;
    		default:
    			write_biff_rec(ba, 0x0201 /* Blank */, write_XLSCell(R, C, os));
    	}
    }

    /* [MS-XLS] 2.1.7.20.5 */
    function write_ws_biff8(idx/*:number*/, opts, wb/*:Workbook*/) {
    	var ba = buf_array();
    	var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
    	var _WB/*:WBWBProps*/ = ((wb||{}).Workbook||{}/*:any*/);
    	var _sheet/*:WBWSProp*/ = ((_WB.Sheets||[])[idx]||{}/*:any*/);
    	var dense = Array.isArray(ws);
    	var b8 = opts.biff == 8;
    	var ref/*:string*/, rr = "", cols/*:Array<string>*/ = [];
    	var range = safe_decode_range(ws['!ref'] || "A1");
    	var MAX_ROWS = b8 ? 65536 : 16384;
    	if(range.e.c > 0xFF || range.e.r >= MAX_ROWS) {
    		if(opts.WTF) throw new Error("Range " + (ws['!ref'] || "A1") + " exceeds format limit A1:IV16384");
    		range.e.c = Math.min(range.e.c, 0xFF);
    		range.e.r = Math.min(range.e.c, MAX_ROWS-1);
    	}

    	write_biff_rec(ba, 0x0809, write_BOF(wb, 0x10, opts));
    	/* [Uncalced] Index */
    	write_biff_rec(ba, 0x000d /* CalcMode */, writeuint16(1));
    	write_biff_rec(ba, 0x000c /* CalcCount */, writeuint16(100));
    	write_biff_rec(ba, 0x000f /* CalcRefMode */, writebool(true));
    	write_biff_rec(ba, 0x0011 /* CalcIter */, writebool(false));
    	write_biff_rec(ba, 0x0010 /* CalcDelta */, write_Xnum(0.001));
    	write_biff_rec(ba, 0x005f /* CalcSaveRecalc */, writebool(true));
    	write_biff_rec(ba, 0x002a /* PrintRowCol */, writebool(false));
    	write_biff_rec(ba, 0x002b /* PrintGrid */, writebool(false));
    	write_biff_rec(ba, 0x0082 /* GridSet */, writeuint16(1));
    	write_biff_rec(ba, 0x0080 /* Guts */, write_Guts([0,0]));
    	/* DefaultRowHeight WsBool [Sync] [LPr] [HorizontalPageBreaks] [VerticalPageBreaks] */
    	/* Header (string) */
    	/* Footer (string) */
    	write_biff_rec(ba, 0x0083 /* HCenter */, writebool(false));
    	write_biff_rec(ba, 0x0084 /* VCenter */, writebool(false));
    	/* ... */
    	if(b8) write_ws_cols_biff8(ba, ws["!cols"]);
    	/* ... */
    	write_biff_rec(ba, 0x200, write_Dimensions(range, opts));
    	/* ... */

    	if(b8) ws['!links'] = [];
    	for(var R = range.s.r; R <= range.e.r; ++R) {
    		rr = encode_row(R);
    		for(var C = range.s.c; C <= range.e.c; ++C) {
    			if(R === range.s.r) cols[C] = encode_col(C);
    			ref = cols[C] + rr;
    			var cell = dense ? (ws[R]||[])[C] : ws[ref];
    			if(!cell) continue;
    			/* write cell */
    			write_ws_biff8_cell(ba, cell, R, C, opts);
    			if(b8 && cell.l) ws['!links'].push([ref, cell.l]);
    		}
    	}
    	var cname/*:string*/ = _sheet.CodeName || _sheet.name || s;
    	/* ... */
    	if(b8) write_biff_rec(ba, 0x023e /* Window2 */, write_Window2((_WB.Views||[])[0]));
    	/* ... */
    	if(b8 && (ws['!merges']||[]).length) write_biff_rec(ba, 0x00e5 /* MergeCells */, write_MergeCells(ws['!merges']));
    	/* [LRng] *QUERYTABLE [PHONETICINFO] CONDFMTS */
    	if(b8) write_ws_biff8_hlinks(ba, ws);
    	/* [DVAL] */
    	write_biff_rec(ba, 0x01ba /* CodeName */, write_XLUnicodeString(cname));
    	/* *WebPub *CellWatch [SheetExt] */
    	if(b8) write_FEAT(ba, ws);
    	/* *FEAT11 *RECORD12 */
    	write_biff_rec(ba, 0x000a /* EOF */);
    	return ba.end();
    }

    /* [MS-XLS] 2.1.7.20.3 */
    function write_biff8_global(wb/*:Workbook*/, bufs, opts/*:WriteOpts*/) {
    	var A = buf_array();
    	var _WB/*:WBWBProps*/ = ((wb||{}).Workbook||{}/*:any*/);
    	var _sheets/*:Array<WBWSProp>*/ = (_WB.Sheets||[]);
    	var _wb/*:WBProps*/ = /*::((*/_WB.WBProps||{/*::CodeName:"ThisWorkbook"*/}/*:: ):any)*/;
    	var b8 = opts.biff == 8, b5 = opts.biff == 5;
    	write_biff_rec(A, 0x0809, write_BOF(wb, 0x05, opts));
    	if(opts.bookType == "xla") write_biff_rec(A, 0x0087 /* Addin */);
    	write_biff_rec(A, 0x00e1 /* InterfaceHdr */, b8 ? writeuint16(0x04b0) : null);
    	write_biff_rec(A, 0x00c1 /* Mms */, writezeroes(2));
    	if(b5) write_biff_rec(A, 0x00bf /* ToolbarHdr */);
    	if(b5) write_biff_rec(A, 0x00c0 /* ToolbarEnd */);
    	write_biff_rec(A, 0x00e2 /* InterfaceEnd */);
    	write_biff_rec(A, 0x005c /* WriteAccess */, write_WriteAccess("SheetJS", opts));
    	/* [FileSharing] */
    	write_biff_rec(A, 0x0042 /* CodePage */, writeuint16(b8 ? 0x04b0 : 0x04E4));
    	/* *2047 Lel */
    	if(b8) write_biff_rec(A, 0x0161 /* DSF */, writeuint16(0));
    	if(b8) write_biff_rec(A, 0x01c0 /* Excel9File */);
    	write_biff_rec(A, 0x013d /* RRTabId */, write_RRTabId(wb.SheetNames.length));
    	if(b8 && wb.vbaraw) write_biff_rec(A, 0x00d3 /* ObProj */);
    	/* [ObNoMacros] */
    	if(b8 && wb.vbaraw) {
    		var cname/*:string*/ = _wb.CodeName || "ThisWorkbook";
    		write_biff_rec(A, 0x01ba /* CodeName */, write_XLUnicodeString(cname));
    	}
    	write_biff_rec(A, 0x009c /* BuiltInFnGroupCount */, writeuint16(0x11));
    	/* *FnGroupName *FnGrp12 */
    	/* *Lbl */
    	/* [OleObjectSize] */
    	write_biff_rec(A, 0x0019 /* WinProtect */, writebool(false));
    	write_biff_rec(A, 0x0012 /* Protect */, writebool(false));
    	write_biff_rec(A, 0x0013 /* Password */, writeuint16(0));
    	if(b8) write_biff_rec(A, 0x01af /* Prot4Rev */, writebool(false));
    	if(b8) write_biff_rec(A, 0x01bc /* Prot4RevPass */, writeuint16(0));
    	write_biff_rec(A, 0x003d /* Window1 */, write_Window1());
    	write_biff_rec(A, 0x0040 /* Backup */, writebool(false));
    	write_biff_rec(A, 0x008d /* HideObj */, writeuint16(0));
    	write_biff_rec(A, 0x0022 /* Date1904 */, writebool(safe1904(wb)=="true"));
    	write_biff_rec(A, 0x000e /* CalcPrecision */, writebool(true));
    	if(b8) write_biff_rec(A, 0x01b7 /* RefreshAll */, writebool(false));
    	write_biff_rec(A, 0x00DA /* BookBool */, writeuint16(0));
    	/* ... */
    	write_FONTS_biff8(A, wb, opts);
    	write_FMTS_biff8(A, wb.SSF, opts);
    	write_CELLXFS_biff8(A, opts);
    	/* ... */
    	if(b8) write_biff_rec(A, 0x0160 /* UsesELFs */, writebool(false));
    	var a = A.end();

    	var C = buf_array();
    	/* METADATA [MTRSettings] [ForceFullCalculation] */
    	if(b8) write_biff_rec(C, 0x008C, write_Country());
    	/* *SUPBOOK *LBL *RTD [RecalcId] *HFPicture *MSODRAWINGGROUP */

    	/* BIFF8: [SST *Continue] ExtSST */
    	if(b8 && opts.Strings) write_biff_continue(C, 0x00FC, write_SST(opts.Strings));

    	/* *WebPub [WOpt] [CrErr] [BookExt] *FeatHdr *DConn [THEME] [CompressPictures] [Compat12] [GUIDTypeLib] */
    	write_biff_rec(C, 0x000A /* EOF */);
    	var c = C.end();

    	var B = buf_array();
    	var blen = 0, j = 0;
    	for(j = 0; j < wb.SheetNames.length; ++j) blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;
    	var start = a.length + blen + c.length;
    	for(j = 0; j < wb.SheetNames.length; ++j) {
    		var _sheet/*:WBWSProp*/ = _sheets[j] || ({}/*:any*/);
    		write_biff_rec(B, 0x0085 /* BoundSheet8 */, write_BoundSheet8({pos:start, hs:_sheet.Hidden||0, dt:0, name:wb.SheetNames[j]}, opts));
    		start += bufs[j].length;
    	}
    	/* 1*BoundSheet8 */
    	var b = B.end();
    	if(blen != b.length) throw new Error("BS8 " + blen + " != " + b.length);

    	var out = [];
    	if(a.length) out.push(a);
    	if(b.length) out.push(b);
    	if(c.length) out.push(c);
    	return bconcat(out);
    }

    /* [MS-XLS] 2.1.7.20 Workbook Stream */
    function write_biff8_buf(wb/*:Workbook*/, opts/*:WriteOpts*/) {
    	var o = opts || {};
    	var bufs = [];

    	if(wb && !wb.SSF) {
    		wb.SSF = dup(table_fmt);
    	}
    	if(wb && wb.SSF) {
    		make_ssf(); SSF_load_table(wb.SSF);
    		// $FlowIgnore
    		o.revssf = evert_num(wb.SSF); o.revssf[wb.SSF[65535]] = 0;
    		o.ssf = wb.SSF;
    	}

    	o.Strings = /*::((*/[]/*:: :any):SST)*/; o.Strings.Count = 0; o.Strings.Unique = 0;
    	fix_write_opts(o);

    	o.cellXfs = [];
    	get_cell_style(o.cellXfs, {}, {revssf:{"General":0}});

    	if(!wb.Props) wb.Props = {};

    	for(var i = 0; i < wb.SheetNames.length; ++i) bufs[bufs.length] = write_ws_biff8(i, o, wb);
    	bufs.unshift(write_biff8_global(wb, bufs, o));
    	return bconcat(bufs);
    }

    function write_biff_buf(wb/*:Workbook*/, opts/*:WriteOpts*/) {
    	for(var i = 0; i <= wb.SheetNames.length; ++i) {
    		var ws = wb.Sheets[wb.SheetNames[i]];
    		if(!ws || !ws["!ref"]) continue;
    		var range = decode_range(ws["!ref"]);
    		if(range.e.c > 255) { // note: 255 is IV
    		if(typeof console != "undefined" && console.error) console.error("Worksheet '" + wb.SheetNames[i] + "' extends beyond column IV (255).  Data may be lost.");
    		}
    	}

    	var o = opts || {};
    	switch(o.biff || 2) {
    		case 8: case 5: return write_biff8_buf(wb, opts);
    		case 4: case 3: case 2: return write_biff2_buf(wb, opts);
    	}
    	throw new Error("invalid type " + o.bookType + " for BIFF");
    }
    /* note: browser DOM element cannot see mso- style attrs, must parse */
    function html_to_sheet(str/*:string*/, _opts)/*:Workbook*/ {
    	var opts = _opts || {};
    	var ws/*:Worksheet*/ = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
    	str = str.replace(/<!--.*?-->/g, "");
    	var mtch/*:any*/ = str.match(/<table/i);
    	if(!mtch) throw new Error("Invalid HTML: could not find <table>");
    	var mtch2/*:any*/ = str.match(/<\/table/i);
    	var i/*:number*/ = mtch.index, j/*:number*/ = mtch2 && mtch2.index || str.length;
    	var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
    	var R = -1, C = 0, RS = 0, CS = 0;
    	var range/*:Range*/ = {s:{r:10000000, c:10000000},e:{r:0,c:0}};
    	var merges/*:Array<Range>*/ = [];
    	for(i = 0; i < rows.length; ++i) {
    		var row = rows[i].trim();
    		var hd = row.slice(0,3).toLowerCase();
    		if(hd == "<tr") { ++R; if(opts.sheetRows && opts.sheetRows <= R) { --R; break; } C = 0; continue; }
    		if(hd != "<td" && hd != "<th") continue;
    		var cells = row.split(/<\/t[dh]>/i);
    		for(j = 0; j < cells.length; ++j) {
    			var cell = cells[j].trim();
    			if(!cell.match(/<t[dh]/i)) continue;
    			var m = cell, cc = 0;
    			/* TODO: parse styles etc */
    			while(m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1) m = m.slice(cc+1);
    			for(var midx = 0; midx < merges.length; ++midx) {
    				var _merge/*:Range*/ = merges[midx];
    				if(_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) { C = _merge.e.c + 1; midx = -1; }
    			}
    			var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
    			CS = tag.colspan ? +tag.colspan : 1;
    			if((RS = +tag.rowspan)>1 || CS>1) merges.push({s:{r:R,c:C},e:{r:R + (RS||1) - 1, c:C + CS - 1}});
    			var _t/*:string*/ = tag.t || tag["data-t"] || "";
    			/* TODO: generate stub cells */
    			if(!m.length) { C += CS; continue; }
    			m = htmldecode(m);
    			if(range.s.r > R) range.s.r = R; if(range.e.r < R) range.e.r = R;
    			if(range.s.c > C) range.s.c = C; if(range.e.c < C) range.e.c = C;
    			if(!m.length) { C += CS; continue; }
    			var o/*:Cell*/ = {t:'s', v:m};
    			if(opts.raw || !m.trim().length || _t == 's');
    			else if(m === 'TRUE') o = {t:'b', v:true};
    			else if(m === 'FALSE') o = {t:'b', v:false};
    			else if(!isNaN(fuzzynum(m))) o = {t:'n', v:fuzzynum(m)};
    			else if(!isNaN(fuzzydate(m).getDate())) {
    				o = ({t:'d', v:parseDate(m)}/*:any*/);
    				if(!opts.cellDates) o = ({t:'n', v:datenum(o.v)}/*:any*/);
    				o.z = opts.dateNF || table_fmt[14];
    			}
    			if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = o; }
    			else ws[encode_cell({r:R, c:C})] = o;
    			C += CS;
    		}
    	}
    	ws['!ref'] = encode_range(range);
    	if(merges.length) ws["!merges"] = merges;
    	return ws;
    }
    function make_html_row(ws/*:Worksheet*/, r/*:Range*/, R/*:number*/, o/*:Sheet2HTMLOpts*/)/*:string*/ {
    	var M/*:Array<Range>*/ = (ws['!merges'] ||[]);
    	var oo/*:Array<string>*/ = [];
    	for(var C = r.s.c; C <= r.e.c; ++C) {
    		var RS = 0, CS = 0;
    		for(var j = 0; j < M.length; ++j) {
    			if(M[j].s.r > R || M[j].s.c > C) continue;
    			if(M[j].e.r < R || M[j].e.c < C) continue;
    			if(M[j].s.r < R || M[j].s.c < C) { RS = -1; break; }
    			RS = M[j].e.r - M[j].s.r + 1; CS = M[j].e.c - M[j].s.c + 1; break;
    		}
    		if(RS < 0) continue;
    		var coord = encode_cell({r:R,c:C});
    		var cell = o.dense ? (ws[R]||[])[C] : ws[coord];
    		/* TODO: html entities */
    		var w = (cell && cell.v != null) && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
    		var sp = ({}/*:any*/);
    		if(RS > 1) sp.rowspan = RS;
    		if(CS > 1) sp.colspan = CS;
    		if(o.editable) w = '<span contenteditable="true">' + w + '</span>';
    		else if(cell) {
    			sp["data-t"] = cell && cell.t || 'z';
    			if(cell.v != null) sp["data-v"] = cell.v;
    			if(cell.z != null) sp["data-z"] = cell.z;
    			if(cell.l && (cell.l.Target || "#").charAt(0) != "#") w = '<a href="' + cell.l.Target +'">' + w + '</a>';
    		}
    		sp.id = (o.id || "sjs") + "-" + coord;
    		oo.push(writextag('td', w, sp));
    	}
    	var preamble = "<tr>";
    	return preamble + oo.join("") + "</tr>";
    }

    var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
    var HTML_END = '</body></html>';

    function html_to_workbook(str/*:string*/, opts)/*:Workbook*/ {
    	var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
    	if(!mtch || mtch.length == 0) throw new Error("Invalid HTML: could not find <table>");
    	if(mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
    	var wb = book_new();
    	mtch.forEach(function(s, idx) { book_append_sheet(wb, html_to_sheet(s, opts), "Sheet" + (idx+1)); });
    	return wb;
    }

    function make_html_preamble(ws/*:Worksheet*/, R/*:Range*/, o/*:Sheet2HTMLOpts*/)/*:string*/ {
    	var out/*:Array<string>*/ = [];
    	return out.join("") + '<table' + (o && o.id ? ' id="' + o.id + '"' : "") + '>';
    }

    function sheet_to_html(ws/*:Worksheet*/, opts/*:?Sheet2HTMLOpts*//*, wb:?Workbook*/)/*:string*/ {
    	var o = opts || {};
    	var header = o.header != null ? o.header : HTML_BEGIN;
    	var footer = o.footer != null ? o.footer : HTML_END;
    	var out/*:Array<string>*/ = [header];
    	var r = decode_range(ws['!ref']);
    	o.dense = Array.isArray(ws);
    	out.push(make_html_preamble(ws, r, o));
    	for(var R = r.s.r; R <= r.e.r; ++R) out.push(make_html_row(ws, r, R, o));
    	out.push("</table>" + footer);
    	return out.join("");
    }

    function sheet_add_dom(ws/*:Worksheet*/, table/*:HTMLElement*/, _opts/*:?any*/)/*:Worksheet*/ {
    	var opts = _opts || {};
    	var or_R = 0, or_C = 0;
    	if(opts.origin != null) {
    		if(typeof opts.origin == 'number') or_R = opts.origin;
    		else {
    			var _origin/*:CellAddress*/ = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
    			or_R = _origin.r; or_C = _origin.c;
    		}
    	}

    	var rows/*:HTMLCollection<HTMLTableRowElement>*/ = table.getElementsByTagName('tr');
    	var sheetRows = Math.min(opts.sheetRows||10000000, rows.length);
    	var range/*:Range*/ = {s:{r:0,c:0},e:{r:or_R,c:or_C}};
    	if(ws["!ref"]) {
    		var _range/*:Range*/ = decode_range(ws["!ref"]);
    		range.s.r = Math.min(range.s.r, _range.s.r);
    		range.s.c = Math.min(range.s.c, _range.s.c);
    		range.e.r = Math.max(range.e.r, _range.e.r);
    		range.e.c = Math.max(range.e.c, _range.e.c);
    		if(or_R == -1) range.e.r = or_R = _range.e.r + 1;
    	}
    	var merges/*:Array<Range>*/ = [], midx = 0;
    	var rowinfo/*:Array<RowInfo>*/ = ws["!rows"] || (ws["!rows"] = []);
    	var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;
    	if(!ws["!cols"]) ws['!cols'] = [];
    	for(; _R < rows.length && R < sheetRows; ++_R) {
    		var row/*:HTMLTableRowElement*/ = rows[_R];
    		if (is_dom_element_hidden(row)) {
    			if (opts.display) continue;
    			rowinfo[R] = {hidden: true};
    		}
    		var elts/*:HTMLCollection<HTMLTableCellElement>*/ = (row.children/*:any*/);
    		for(_C = C = 0; _C < elts.length; ++_C) {
    			var elt/*:HTMLTableCellElement*/ = elts[_C];
    			if (opts.display && is_dom_element_hidden(elt)) continue;
    			var v/*:?string*/ = elt.hasAttribute('data-v') ? elt.getAttribute('data-v') : elt.hasAttribute('v') ? elt.getAttribute('v') : htmldecode(elt.innerHTML);
    			var z/*:?string*/ = elt.getAttribute('data-z') || elt.getAttribute('z');
    			for(midx = 0; midx < merges.length; ++midx) {
    				var m/*:Range*/ = merges[midx];
    				if(m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) { C = m.e.c+1 - or_C; midx = -1; }
    			}
    			/* TODO: figure out how to extract nonstandard mso- style */
    			CS = +elt.getAttribute("colspan") || 1;
    			if( ((RS = (+elt.getAttribute("rowspan") || 1)))>1 || CS>1) merges.push({s:{r:R + or_R,c:C + or_C},e:{r:R + or_R + (RS||1) - 1, c:C + or_C + (CS||1) - 1}});
    			var o/*:Cell*/ = {t:'s', v:v};
    			var _t/*:string*/ = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
    			if(v != null) {
    				if(v.length == 0) o.t = _t || 'z';
    				else if(opts.raw || v.trim().length == 0 || _t == "s");
    				else if(v === 'TRUE') o = {t:'b', v:true};
    				else if(v === 'FALSE') o = {t:'b', v:false};
    				else if(!isNaN(fuzzynum(v))) o = {t:'n', v:fuzzynum(v)};
    				else if(!isNaN(fuzzydate(v).getDate())) {
    					o = ({t:'d', v:parseDate(v)}/*:any*/);
    					if(!opts.cellDates) o = ({t:'n', v:datenum(o.v)}/*:any*/);
    					o.z = opts.dateNF || table_fmt[14];
    				}
    			}
    			if(o.z === undefined && z != null) o.z = z;
    			/* The first link is used.  Links are assumed to be fully specified.
    			 * TODO: The right way to process relative links is to make a new <a> */
    			var l = "", Aelts = elt.getElementsByTagName("A");
    			if(Aelts && Aelts.length) for(var Aelti = 0; Aelti < Aelts.length; ++Aelti)	if(Aelts[Aelti].hasAttribute("href")) {
    				l = Aelts[Aelti].getAttribute("href"); if(l.charAt(0) != "#") break;
    			}
    			if(l && l.charAt(0) != "#") o.l = ({ Target: l });
    			if(opts.dense) { if(!ws[R + or_R]) ws[R + or_R] = []; ws[R + or_R][C + or_C] = o; }
    			else ws[encode_cell({c:C + or_C, r:R + or_R})] = o;
    			if(range.e.c < C + or_C) range.e.c = C + or_C;
    			C += CS;
    		}
    		++R;
    	}
    	if(merges.length) ws['!merges'] = (ws["!merges"] || []).concat(merges);
    	range.e.r = Math.max(range.e.r, R - 1 + or_R);
    	ws['!ref'] = encode_range(range);
    	if(R >= sheetRows) ws['!fullref'] = encode_range((range.e.r = rows.length-_R+R-1 + or_R,range)); // We can count the real number of rows to parse but we don't to improve the performance
    	return ws;
    }

    function parse_dom_table(table/*:HTMLElement*/, _opts/*:?any*/)/*:Worksheet*/ {
    	var opts = _opts || {};
    	var ws/*:Worksheet*/ = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
    	return sheet_add_dom(ws, table, _opts);
    }

    function table_to_book(table/*:HTMLElement*/, opts/*:?any*/)/*:Workbook*/ {
    	return sheet_to_workbook(parse_dom_table(table, opts), opts);
    }

    function is_dom_element_hidden(element/*:HTMLElement*/)/*:boolean*/ {
    	var display/*:string*/ = '';
    	var get_computed_style/*:?function*/ = get_get_computed_style_function(element);
    	if(get_computed_style) display = get_computed_style(element).getPropertyValue('display');
    	if(!display) display = element.style && element.style.display;
    	return display === 'none';
    }

    /* global getComputedStyle */
    function get_get_computed_style_function(element/*:HTMLElement*/)/*:?function*/ {
    	// The proper getComputedStyle implementation is the one defined in the element window
    	if(element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === 'function') return element.ownerDocument.defaultView.getComputedStyle;
    	// If it is not available, try to get one from the global namespace
    	if(typeof getComputedStyle === 'function') return getComputedStyle;
    	return null;
    }
    /* OpenDocument */
    function parse_text_p(text/*:string*//*::, tag*/)/*:Array<any>*/ {
    	/* 6.1.2 White Space Characters */
    	var fixed = text
    		.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ")
    		.replace(/<text:s\/>/g," ")
    		.replace(/<text:s text:c="(\d+)"\/>/g, function($$,$1) { return Array(parseInt($1,10)+1).join(" "); })
    		.replace(/<text:tab[^>]*\/>/g,"\t")
    		.replace(/<text:line-break\/>/g,"\n");
    	var v = unescapexml(fixed.replace(/<[^>]*>/g,""));

    	return [v];
    }

    var number_formats_ods = {
    	/* ods name: [short ssf fmt, long ssf fmt] */
    	day:           ["d",   "dd"],
    	month:         ["m",   "mm"],
    	year:          ["y",   "yy"],
    	hours:         ["h",   "hh"],
    	minutes:       ["m",   "mm"],
    	seconds:       ["s",   "ss"],
    	"am-pm":       ["A/P", "AM/PM"],
    	"day-of-week": ["ddd", "dddd"],
    	era:           ["e",   "ee"],
    	/* there is no native representation of LO "Q" format */
    	quarter:       ["\\Qm", "m\\\"th quarter\""]
    };


    function parse_content_xml(d/*:string*/, _opts)/*:Workbook*/ {
    		var opts = _opts || {};
    		var str = xlml_normalize(d);
    		var state/*:Array<any>*/ = [], tmp;
    		var tag/*:: = {}*/;
    		var NFtag = {name:""}, NF = "", pidx = 0;
    		var sheetag/*:: = {name:"", '名称':""}*/;
    		var rowtag/*:: = {'行号':""}*/;
    		var Sheets = {}, SheetNames/*:Array<string>*/ = [];
    		var ws = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
    		var Rn, q/*:: :any = ({t:"", v:null, z:null, w:"",c:[],}:any)*/;
    		var ctag = ({value:""}/*:any*/);
    		var textp = "", textpidx = 0;
    		var textR = [];
    		var R = -1, C = -1, range = {s: {r:1000000,c:10000000}, e: {r:0, c:0}};
    		var row_ol = 0;
    		var number_format_map = {};
    		var merges/*:Array<Range>*/ = [], mrange = {}, mR = 0, mC = 0;
    		var rowinfo/*:Array<RowInfo>*/ = [], rowpeat = 1, colpeat = 1;
    		var arrayf/*:Array<[Range, string]>*/ = [];
    		var WB = {Names:[]};
    		var atag = ({}/*:any*/);
    		var _Ref/*:[string, string]*/ = ["", ""];
    		var comments/*:Array<Comment>*/ = [], comment/*:Comment*/ = ({}/*:any*/);
    		var creator = "", creatoridx = 0;
    		var isstub = false, intable = false;
    		var i = 0;
    		xlmlregex.lastIndex = 0;
    		str = str.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");
    		while((Rn = xlmlregex.exec(str))) switch((Rn[3]=Rn[3].replace(/_.*$/,""))) {

    			case 'table': case '工作表': // 9.1.2 <table:table>
    				if(Rn[1]==='/') {
    					if(range.e.c >= range.s.c && range.e.r >= range.s.r) ws['!ref'] = encode_range(range);
    					else ws['!ref'] = "A1:A1";
    					if(opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
    						ws['!fullref'] = ws['!ref'];
    						range.e.r = opts.sheetRows - 1;
    						ws['!ref'] = encode_range(range);
    					}
    					if(merges.length) ws['!merges'] = merges;
    					if(rowinfo.length) ws["!rows"] = rowinfo;
    					sheetag.name = sheetag['名称'] || sheetag.name;
    					if(typeof JSON !== 'undefined') JSON.stringify(sheetag);
    					SheetNames.push(sheetag.name);
    					Sheets[sheetag.name] = ws;
    					intable = false;
    				}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
    					sheetag = parsexmltag(Rn[0], false);
    					R = C = -1;
    					range.s.r = range.s.c = 10000000; range.e.r = range.e.c = 0;
    					ws = opts.dense ? ([]/*:any*/) : ({}/*:any*/); merges = [];
    					rowinfo = [];
    					intable = true;
    				}
    				break;

    			case 'table-row-group': // 9.1.9 <table:table-row-group>
    				if(Rn[1] === "/") --row_ol; else ++row_ol;
    				break;
    			case 'table-row': case '行': // 9.1.3 <table:table-row>
    				if(Rn[1] === '/') { R+=rowpeat; rowpeat = 1; break; }
    				rowtag = parsexmltag(Rn[0], false);
    				if(rowtag['行号']) R = rowtag['行号'] - 1; else if(R == -1) R = 0;
    				rowpeat = +rowtag['number-rows-repeated'] || 1;
    				/* TODO: remove magic */
    				if(rowpeat < 10) for(i = 0; i < rowpeat; ++i) if(row_ol > 0) rowinfo[R + i] = {level: row_ol};
    				C = -1; break;
    			case 'covered-table-cell': // 9.1.5 <table:covered-table-cell>
    				if(Rn[1] !== '/') ++C;
    				if(opts.sheetStubs) {
    					if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = {t:'z'}; }
    					else ws[encode_cell({r:R,c:C})] = {t:'z'};
    				}
    				textp = ""; textR = [];
    				break; /* stub */
    			case 'table-cell': case '数据':
    				if(Rn[0].charAt(Rn[0].length-2) === '/') {
    					++C;
    					ctag = parsexmltag(Rn[0], false);
    					colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
    					q = ({t:'z', v:null/*:: , z:null, w:"",c:[]*/}/*:any*/);
    					if(ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));
    					if((ctag['数据类型'] || ctag['value-type']) == "string") {
    						q.t = "s"; q.v = unescapexml(ctag['string-value'] || "");
    						if(opts.dense) {
    							if(!ws[R]) ws[R] = [];
    							ws[R][C] = q;
    						} else {
    							ws[encode_cell({r:R,c:C})] = q;
    						}
    					}
    					C+= colpeat-1;
    				} else if(Rn[1]!=='/') {
    					++C;
    					textp = ""; textpidx = 0; textR = [];
    					colpeat = 1;
    					var rptR = rowpeat ? R + rowpeat - 1 : R;
    					if(C > range.e.c) range.e.c = C;
    					if(C < range.s.c) range.s.c = C;
    					if(R < range.s.r) range.s.r = R;
    					if(rptR > range.e.r) range.e.r = rptR;
    					ctag = parsexmltag(Rn[0], false);
    					comments = []; comment = ({}/*:any*/);
    					q = ({t:ctag['数据类型'] || ctag['value-type'], v:null/*:: , z:null, w:"",c:[]*/}/*:any*/);
    					if(opts.cellFormula) {
    						if(ctag.formula) ctag.formula = unescapexml(ctag.formula);
    						if(ctag['number-matrix-columns-spanned'] && ctag['number-matrix-rows-spanned']) {
    							mR = parseInt(ctag['number-matrix-rows-spanned'],10) || 0;
    							mC = parseInt(ctag['number-matrix-columns-spanned'],10) || 0;
    							mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
    							q.F = encode_range(mrange);
    							arrayf.push([mrange, q.F]);
    						}
    						if(ctag.formula) q.f = ods_to_csf_formula(ctag.formula);
    						else for(i = 0; i < arrayf.length; ++i)
    							if(R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r)
    								if(C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c)
    									q.F = arrayf[i][1];
    					}
    					if(ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {
    						mR = parseInt(ctag['number-rows-spanned'],10) || 0;
    						mC = parseInt(ctag['number-columns-spanned'],10) || 0;
    						mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
    						merges.push(mrange);
    					}

    					/* 19.675.2 table:number-columns-repeated */
    					if(ctag['number-columns-repeated']) colpeat = parseInt(ctag['number-columns-repeated'], 10);

    					/* 19.385 office:value-type */
    					switch(q.t) {
    						case 'boolean': q.t = 'b'; q.v = parsexmlbool(ctag['boolean-value']); break;
    						case 'float': q.t = 'n'; q.v = parseFloat(ctag.value); break;
    						case 'percentage': q.t = 'n'; q.v = parseFloat(ctag.value); break;
    						case 'currency': q.t = 'n'; q.v = parseFloat(ctag.value); break;
    						case 'date': q.t = 'd'; q.v = parseDate(ctag['date-value']);
    							if(!opts.cellDates) { q.t = 'n'; q.v = datenum(q.v); }
    							q.z = 'm/d/yy'; break;
    						case 'time': q.t = 'n'; q.v = parse_isodur(ctag['time-value'])/86400;
    							if(opts.cellDates) { q.t = 'd'; q.v = numdate(q.v); }
    							q.z = 'HH:MM:SS'; break;
    						case 'number': q.t = 'n'; q.v = parseFloat(ctag['数据数值']); break;
    						default:
    							if(q.t === 'string' || q.t === 'text' || !q.t) {
    								q.t = 's';
    								if(ctag['string-value'] != null) { textp = unescapexml(ctag['string-value']); textR = []; }
    							} else throw new Error('Unsupported value type ' + q.t);
    					}
    				} else {
    					isstub = false;
    					if(q.t === 's') {
    						q.v = textp || '';
    						if(textR.length) q.R = textR;
    						isstub = textpidx == 0;
    					}
    					if(atag.Target) q.l = atag;
    					if(comments.length > 0) { q.c = comments; comments = []; }
    					if(textp && opts.cellText !== false) q.w = textp;
    					if(isstub) { q.t = "z"; delete q.v; }
    					if(!isstub || opts.sheetStubs) {
    						if(!(opts.sheetRows && opts.sheetRows <= R)) {
    							for(var rpt = 0; rpt < rowpeat; ++rpt) {
    								colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
    								if(opts.dense) {
    									if(!ws[R + rpt]) ws[R + rpt] = [];
    									ws[R + rpt][C] = rpt == 0 ? q : dup(q);
    									while(--colpeat > 0) ws[R + rpt][C + colpeat] = dup(q);
    								} else {
    									ws[encode_cell({r:R + rpt,c:C})] = q;
    									while(--colpeat > 0) ws[encode_cell({r:R + rpt,c:C + colpeat})] = dup(q);
    								}
    								if(range.e.c <= C) range.e.c = C;
    							}
    						}
    					}
    					colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
    					C += colpeat-1; colpeat = 0;
    					q = {/*:: t:"", v:null, z:null, w:"",c:[]*/};
    					textp = ""; textR = [];
    				}
    				atag = ({}/*:any*/);
    				break; // 9.1.4 <table:table-cell>

    			/* pure state */
    			case 'document': // TODO: <office:document> is the root for FODS
    			case 'document-content': case '电子表格文档': // 3.1.3.2 <office:document-content>
    			case 'spreadsheet': case '主体': // 3.7 <office:spreadsheet>
    			case 'scripts': // 3.12 <office:scripts>
    			case 'styles': // TODO <office:styles>
    			case 'font-face-decls': // 3.14 <office:font-face-decls>
    			case 'master-styles': // 3.15.4 <office:master-styles> -- relevant for FODS
    				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
    				break;

    			case 'annotation': // 14.1 <office:annotation>
    				if(Rn[1]==='/'){
    					if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
    					comment.t = textp;
    					if(textR.length) /*::(*/comment/*:: :any)*/.R = textR;
    					comment.a = creator;
    					comments.push(comment);
    				}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') {state.push([Rn[3], false]);}
    				creator = ""; creatoridx = 0;
    				textp = ""; textpidx = 0; textR = [];
    				break;

    			case 'creator': // 4.3.2.7 <dc:creator>
    				if(Rn[1]==='/') { creator = str.slice(creatoridx,Rn.index); }
    				else creatoridx = Rn.index + Rn[0].length;
    				break;

    			/* ignore state */
    			case 'meta': case '元数据': // TODO: <office:meta> <uof:元数据> FODS/UOF
    			case 'settings': // TODO: <office:settings>
    			case 'config-item-set': // TODO: <office:config-item-set>
    			case 'config-item-map-indexed': // TODO: <office:config-item-map-indexed>
    			case 'config-item-map-entry': // TODO: <office:config-item-map-entry>
    			case 'config-item-map-named': // TODO: <office:config-item-map-entry>
    			case 'shapes': // 9.2.8 <table:shapes>
    			case 'frame': // 10.4.2 <draw:frame>
    			case 'text-box': // 10.4.3 <draw:text-box>
    			case 'image': // 10.4.4 <draw:image>
    			case 'data-pilot-tables': // 9.6.2 <table:data-pilot-tables>
    			case 'list-style': // 16.30 <text:list-style>
    			case 'form': // 13.13 <form:form>
    			case 'dde-links': // 9.8 <table:dde-links>
    			case 'event-listeners': // TODO
    			case 'chart': // TODO
    				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], false]);
    				textp = ""; textpidx = 0; textR = [];
    				break;

    			case 'scientific-number': // TODO: <number:scientific-number>
    				break;
    			case 'currency-symbol': // TODO: <number:currency-symbol>
    				break;
    			case 'currency-style': // TODO: <number:currency-style>
    				break;
    			case 'number-style': // 16.27.2 <number:number-style>
    			case 'percentage-style': // 16.27.9 <number:percentage-style>
    			case 'date-style': // 16.27.10 <number:date-style>
    			case 'time-style': // 16.27.18 <number:time-style>
    				if(Rn[1]==='/'){
    					number_format_map[NFtag.name] = NF;
    					if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
    				} else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
    					NF = "";
    					NFtag = parsexmltag(Rn[0], false);
    					state.push([Rn[3], true]);
    				} break;

    			case 'script': break; // 3.13 <office:script>
    			case 'libraries': break; // TODO: <ooo:libraries>
    			case 'automatic-styles': break; // 3.15.3 <office:automatic-styles>

    			case 'default-style': // TODO: <style:default-style>
    			case 'page-layout': break; // TODO: <style:page-layout>
    			case 'style': // 16.2 <style:style>
    				break;
    			case 'map': break; // 16.3 <style:map>
    			case 'font-face': break; // 16.21 <style:font-face>

    			case 'paragraph-properties': break; // 17.6 <style:paragraph-properties>
    			case 'table-properties': break; // 17.15 <style:table-properties>
    			case 'table-column-properties': break; // 17.16 <style:table-column-properties>
    			case 'table-row-properties': break; // 17.17 <style:table-row-properties>
    			case 'table-cell-properties': break; // 17.18 <style:table-cell-properties>

    			case 'number': // 16.27.3 <number:number>
    				switch(state[state.length-1][0]) {
    					case 'time-style':
    					case 'date-style':
    						tag = parsexmltag(Rn[0], false);
    						NF += number_formats_ods[Rn[3]][tag.style==='long'?1:0]; break;
    				} break;

    			case 'fraction': break; // TODO 16.27.6 <number:fraction>

    			case 'day': // 16.27.11 <number:day>
    			case 'month': // 16.27.12 <number:month>
    			case 'year': // 16.27.13 <number:year>
    			case 'era': // 16.27.14 <number:era>
    			case 'day-of-week': // 16.27.15 <number:day-of-week>
    			case 'week-of-year': // 16.27.16 <number:week-of-year>
    			case 'quarter': // 16.27.17 <number:quarter>
    			case 'hours': // 16.27.19 <number:hours>
    			case 'minutes': // 16.27.20 <number:minutes>
    			case 'seconds': // 16.27.21 <number:seconds>
    			case 'am-pm': // 16.27.22 <number:am-pm>
    				switch(state[state.length-1][0]) {
    					case 'time-style':
    					case 'date-style':
    						tag = parsexmltag(Rn[0], false);
    						NF += number_formats_ods[Rn[3]][tag.style==='long'?1:0]; break;
    				} break;

    			case 'boolean-style': break; // 16.27.23 <number:boolean-style>
    			case 'boolean': break; // 16.27.24 <number:boolean>
    			case 'text-style': break; // 16.27.25 <number:text-style>
    			case 'text': // 16.27.26 <number:text>
    				if(Rn[0].slice(-2) === "/>") break;
    				else if(Rn[1]==="/") switch(state[state.length-1][0]) {
    					case 'number-style':
    					case 'date-style':
    					case 'time-style':
    						NF += str.slice(pidx, Rn.index);
    						break;
    				}
    				else pidx = Rn.index + Rn[0].length;
    				break;

    			case 'named-range': // 9.4.12 <table:named-range>
    				tag = parsexmltag(Rn[0], false);
    				_Ref = ods_to_csf_3D(tag['cell-range-address']);
    				var nrange = ({Name:tag.name, Ref:_Ref[0] + '!' + _Ref[1]}/*:any*/);
    				if(intable) nrange.Sheet = SheetNames.length;
    				WB.Names.push(nrange);
    				break;

    			case 'text-content': break; // 16.27.27 <number:text-content>
    			case 'text-properties': break; // 16.27.27 <style:text-properties>
    			case 'embedded-text': break; // 16.27.4 <number:embedded-text>

    			case 'body': case '电子表格': break; // 3.3 16.9.6 19.726.3

    			case 'forms': break; // 12.25.2 13.2
    			case 'table-column': break; // 9.1.6 <table:table-column>
    			case 'table-header-rows': break; // 9.1.7 <table:table-header-rows>
    			case 'table-rows': break; // 9.1.12 <table:table-rows>
    			/* TODO: outline levels */
    			case 'table-column-group': break; // 9.1.10 <table:table-column-group>
    			case 'table-header-columns': break; // 9.1.11 <table:table-header-columns>
    			case 'table-columns': break; // 9.1.12 <table:table-columns>

    			case 'null-date': break; // 9.4.2 <table:null-date> TODO: date1904

    			case 'graphic-properties': break; // 17.21 <style:graphic-properties>
    			case 'calculation-settings': break; // 9.4.1 <table:calculation-settings>
    			case 'named-expressions': break; // 9.4.11 <table:named-expressions>
    			case 'label-range': break; // 9.4.9 <table:label-range>
    			case 'label-ranges': break; // 9.4.10 <table:label-ranges>
    			case 'named-expression': break; // 9.4.13 <table:named-expression>
    			case 'sort': break; // 9.4.19 <table:sort>
    			case 'sort-by': break; // 9.4.20 <table:sort-by>
    			case 'sort-groups': break; // 9.4.22 <table:sort-groups>

    			case 'tab': break; // 6.1.4 <text:tab>
    			case 'line-break': break; // 6.1.5 <text:line-break>
    			case 'span': break; // 6.1.7 <text:span>
    			case 'p': case '文本串': // 5.1.3 <text:p>
    				if(['master-styles'].indexOf(state[state.length-1][0]) > -1) break;
    				if(Rn[1]==='/' && (!ctag || !ctag['string-value'])) {
    					var ptp = parse_text_p(str.slice(textpidx,Rn.index));
    					textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
    				} else { parsexmltag(Rn[0], false); textpidx = Rn.index + Rn[0].length; }
    				break; // <text:p>
    			case 's': break; // <text:s>

    			case 'database-range': // 9.4.15 <table:database-range>
    				if(Rn[1]==='/') break;
    				try {
    					_Ref = ods_to_csf_3D(parsexmltag(Rn[0])['target-range-address']);
    					Sheets[_Ref[0]]['!autofilter'] = { ref:_Ref[1] };
    				} catch(e) {/* empty */}
    				break;

    			case 'date': break; // <*:date>

    			case 'object': break; // 10.4.6.2 <draw:object>
    			case 'title': case '标题': break; // <*:title> OR <uof:标题>
    			case 'desc': break; // <*:desc>
    			case 'binary-data': break; // 10.4.5 TODO: b64 blob

    			/* 9.2 Advanced Tables */
    			case 'table-source': break; // 9.2.6
    			case 'scenario': break; // 9.2.6

    			case 'iteration': break; // 9.4.3 <table:iteration>
    			case 'content-validations': break; // 9.4.4 <table:
    			case 'content-validation': break; // 9.4.5 <table:
    			case 'help-message': break; // 9.4.6 <table:
    			case 'error-message': break; // 9.4.7 <table:
    			case 'database-ranges': break; // 9.4.14 <table:database-ranges>
    			case 'filter': break; // 9.5.2 <table:filter>
    			case 'filter-and': break; // 9.5.3 <table:filter-and>
    			case 'filter-or': break; // 9.5.4 <table:filter-or>
    			case 'filter-condition': break; // 9.5.5 <table:filter-condition>

    			case 'list-level-style-bullet': break; // 16.31 <text:
    			case 'list-level-style-number': break; // 16.32 <text:
    			case 'list-level-properties': break; // 17.19 <style:

    			/* 7.3 Document Fields */
    			case 'sender-firstname': // 7.3.6.2
    			case 'sender-lastname': // 7.3.6.3
    			case 'sender-initials': // 7.3.6.4
    			case 'sender-title': // 7.3.6.5
    			case 'sender-position': // 7.3.6.6
    			case 'sender-email': // 7.3.6.7
    			case 'sender-phone-private': // 7.3.6.8
    			case 'sender-fax': // 7.3.6.9
    			case 'sender-company': // 7.3.6.10
    			case 'sender-phone-work': // 7.3.6.11
    			case 'sender-street': // 7.3.6.12
    			case 'sender-city': // 7.3.6.13
    			case 'sender-postal-code': // 7.3.6.14
    			case 'sender-country': // 7.3.6.15
    			case 'sender-state-or-province': // 7.3.6.16
    			case 'author-name': // 7.3.7.1
    			case 'author-initials': // 7.3.7.2
    			case 'chapter': // 7.3.8
    			case 'file-name': // 7.3.9
    			case 'template-name': // 7.3.9
    			case 'sheet-name': // 7.3.9
    				break;

    			case 'event-listener':
    				break;
    			/* TODO: FODS Properties */
    			case 'initial-creator':
    			case 'creation-date':
    			case 'print-date':
    			case 'generator':
    			case 'document-statistic':
    			case 'user-defined':
    			case 'editing-duration':
    			case 'editing-cycles':
    				break;

    			/* TODO: FODS Config */
    			case 'config-item':
    				break;

    			/* TODO: style tokens */
    			case 'page-number': break; // TODO <text:page-number>
    			case 'page-count': break; // TODO <text:page-count>
    			case 'time': break; // TODO <text:time>

    			/* 9.3 Advanced Table Cells */
    			case 'cell-range-source': break; // 9.3.1 <table:
    			case 'detective': break; // 9.3.2 <table:
    			case 'operation': break; // 9.3.3 <table:
    			case 'highlighted-range': break; // 9.3.4 <table:

    			/* 9.6 Data Pilot Tables <table: */
    			case 'data-pilot-table': // 9.6.3
    			case 'source-cell-range': // 9.6.5
    			case 'source-service': // 9.6.6
    			case 'data-pilot-field': // 9.6.7
    			case 'data-pilot-level': // 9.6.8
    			case 'data-pilot-subtotals': // 9.6.9
    			case 'data-pilot-subtotal': // 9.6.10
    			case 'data-pilot-members': // 9.6.11
    			case 'data-pilot-member': // 9.6.12
    			case 'data-pilot-display-info': // 9.6.13
    			case 'data-pilot-sort-info': // 9.6.14
    			case 'data-pilot-layout-info': // 9.6.15
    			case 'data-pilot-field-reference': // 9.6.16
    			case 'data-pilot-groups': // 9.6.17
    			case 'data-pilot-group': // 9.6.18
    			case 'data-pilot-group-member': // 9.6.19
    				break;

    			/* 10.3 Drawing Shapes */
    			case 'rect': // 10.3.2
    				break;

    			/* 14.6 DDE Connections */
    			case 'dde-connection-decls': // 14.6.2 <text:
    			case 'dde-connection-decl': // 14.6.3 <text:
    			case 'dde-link': // 14.6.4 <table:
    			case 'dde-source': // 14.6.5 <office:
    				break;

    			case 'properties': break; // 13.7 <form:properties>
    			case 'property': break; // 13.8 <form:property>

    			case 'a': // 6.1.8 hyperlink
    				if(Rn[1]!== '/') {
    					atag = parsexmltag(Rn[0], false);
    					if(!atag.href) break;
    					atag.Target = unescapexml(atag.href); delete atag.href;
    					if(atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
    						_Ref = ods_to_csf_3D(atag.Target.slice(1));
    						atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
    					} else if(atag.Target.match(/^\.\.[\\\/]/)) atag.Target = atag.Target.slice(3);
    				}
    				break;

    			/* non-standard */
    			case 'table-protection': break;
    			case 'data-pilot-grand-total': break; // <table:
    			case 'office-document-common-attrs': break; // bare
    			default: switch(Rn[2]) {
    				case 'dc:':       // TODO: properties
    				case 'calcext:':  // ignore undocumented extensions
    				case 'loext:':    // ignore undocumented extensions
    				case 'ooo:':      // ignore undocumented extensions
    				case 'chartooo:': // ignore undocumented extensions
    				case 'draw:':     // TODO: drawing
    				case 'style:':    // TODO: styles
    				case 'chart:':    // TODO: charts
    				case 'form:':     // TODO: forms
    				case 'uof:':      // TODO: uof
    				case '表:':       // TODO: uof
    				case '字:':       // TODO: uof
    					break;
    				default: if(opts.WTF) throw new Error(Rn);
    			}
    		}
    		var out/*:Workbook*/ = ({
    			Sheets: Sheets,
    			SheetNames: SheetNames,
    			Workbook: WB
    		}/*:any*/);
    		if(opts.bookSheets) delete /*::(*/out/*:: :any)*/.Sheets;
    		return out;
    }

    function parse_ods(zip/*:ZIPFile*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	opts = opts || ({}/*:any*/);
    	if(safegetzipfile(zip, 'META-INF/manifest.xml')) parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'), opts);
    	var content = getzipstr(zip, 'content.xml');
    	if(!content) throw new Error("Missing content.xml in ODS / UOF file");
    	var wb = parse_content_xml(utf8read(content), opts);
    	if(safegetzipfile(zip, 'meta.xml')) wb.Props = parse_core_props(getzipdata(zip, 'meta.xml'));
    	return wb;
    }
    function parse_fods(data/*:string*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	return parse_content_xml(data, opts);
    }

    /* OpenDocument */
    var write_styles_ods/*:{(wb:any, opts:any):string}*/ = /* @__PURE__ */(function() {
    	var master_styles = [
    		'<office:master-styles>',
    			'<style:master-page style:name="mp1" style:page-layout-name="mp1">',
    				'<style:header/>',
    				'<style:header-left style:display="false"/>',
    				'<style:footer/>',
    				'<style:footer-left style:display="false"/>',
    			'</style:master-page>',
    		'</office:master-styles>'
    	].join("");

    	var payload = '<office:document-styles ' + wxt_helper({
    		'xmlns:office':   "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
    		'xmlns:table':    "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
    		'xmlns:style':    "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
    		'xmlns:text':     "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
    		'xmlns:draw':     "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
    		'xmlns:fo':       "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
    		'xmlns:xlink':    "http://www.w3.org/1999/xlink",
    		'xmlns:dc':       "http://purl.org/dc/elements/1.1/",
    		'xmlns:number':   "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
    		'xmlns:svg':      "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
    		'xmlns:of':       "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
    		'office:version': "1.2"
    	}) + '>' + master_styles + '</office:document-styles>';

    	return function wso(/*::wb, opts*/) {
    		return XML_HEADER + payload;
    	};
    })();
    var write_content_ods/*:{(wb:any, opts:any):string}*/ = /* @__PURE__ */(function() {
    	/* 6.1.2 White Space Characters */
    	var write_text_p = function(text/*:string*/)/*:string*/ {
    		return escapexml(text)
    			.replace(/  +/g, function($$){return '<text:s text:c="'+$$.length+'"/>';})
    			.replace(/\t/g, "<text:tab/>")
    			.replace(/\n/g, "</text:p><text:p>")
    			.replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
    	};

    	var null_cell_xml = '          <table:table-cell />\n';
    	var covered_cell_xml = '          <table:covered-table-cell/>\n';
    	var write_ws = function(ws, wb/*:Workbook*/, i/*:number*//*::, opts*/)/*:string*/ {
    		/* Section 9 Tables */
    		var o/*:Array<string>*/ = [];
    		o.push('      <table:table table:name="' + escapexml(wb.SheetNames[i]) + '" table:style-name="ta1">\n');
    		var R=0,C=0, range = decode_range(ws['!ref']||"A1");
    		var marr/*:Array<Range>*/ = ws['!merges'] || [], mi = 0;
    		var dense = Array.isArray(ws);
    		if(ws["!cols"]) {
    			for(C = 0; C <= range.e.c; ++C) o.push('        <table:table-column' + (ws["!cols"][C] ? ' table:style-name="co' + ws["!cols"][C].ods + '"' : '') + '></table:table-column>\n');
    		}
    		var H = "", ROWS = ws["!rows"]||[];
    		for(R = 0; R < range.s.r; ++R) {
    			H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
    			o.push('        <table:table-row' + H + '></table:table-row>\n');
    		}
    		for(; R <= range.e.r; ++R) {
    			H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
    			o.push('        <table:table-row' + H + '>\n');
    			for(C=0; C < range.s.c; ++C) o.push(null_cell_xml);
    			for(; C <= range.e.c; ++C) {
    				var skip = false, ct = {}, textp = "";
    				for(mi = 0; mi != marr.length; ++mi) {
    					if(marr[mi].s.c > C) continue;
    					if(marr[mi].s.r > R) continue;
    					if(marr[mi].e.c < C) continue;
    					if(marr[mi].e.r < R) continue;
    					if(marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
    					ct['table:number-columns-spanned'] = (marr[mi].e.c - marr[mi].s.c + 1);
    					ct['table:number-rows-spanned'] =    (marr[mi].e.r - marr[mi].s.r + 1);
    					break;
    				}
    				if(skip) { o.push(covered_cell_xml); continue; }
    				var ref = encode_cell({r:R, c:C}), cell = dense ? (ws[R]||[])[C]: ws[ref];
    				if(cell && cell.f) {
    					ct['table:formula'] = escapexml(csf_to_ods_formula(cell.f));
    					if(cell.F) {
    						if(cell.F.slice(0, ref.length) == ref) {
    							var _Fref = decode_range(cell.F);
    							ct['table:number-matrix-columns-spanned'] = (_Fref.e.c - _Fref.s.c + 1);
    							ct['table:number-matrix-rows-spanned'] =    (_Fref.e.r - _Fref.s.r + 1);
    						}
    					}
    				}
    				if(!cell) { o.push(null_cell_xml); continue; }
    				switch(cell.t) {
    					case 'b':
    						textp = (cell.v ? 'TRUE' : 'FALSE');
    						ct['office:value-type'] = "boolean";
    						ct['office:boolean-value'] = (cell.v ? 'true' : 'false');
    						break;
    					case 'n':
    						textp = (cell.w||String(cell.v||0));
    						ct['office:value-type'] = "float";
    						ct['office:value'] = (cell.v||0);
    						break;
    					case 's': case 'str':
    						textp = cell.v == null ? "" : cell.v;
    						ct['office:value-type'] = "string";
    						break;
    					case 'd':
    						textp = (cell.w||(parseDate(cell.v).toISOString()));
    						ct['office:value-type'] = "date";
    						ct['office:date-value'] = (parseDate(cell.v).toISOString());
    						ct['table:style-name'] = "ce1";
    						break;
    					//case 'e':
    					default: o.push(null_cell_xml); continue;
    				}
    				var text_p = write_text_p(textp);
    				if(cell.l && cell.l.Target) {
    					var _tgt = cell.l.Target;
    					_tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
    					// TODO: choose correct parent path format based on link delimiters
    					if(_tgt.charAt(0) != "#" && !_tgt.match(/^\w+:/)) _tgt = '../' + _tgt;
    					text_p = writextag('text:a', text_p, {'xlink:href': _tgt.replace(/&/g, "&amp;")});
    				}
    				o.push('          ' + writextag('table:table-cell', writextag('text:p', text_p, {}), ct) + '\n');
    			}
    			o.push('        </table:table-row>\n');
    		}
    		o.push('      </table:table>\n');
    		return o.join("");
    	};

    	var write_automatic_styles_ods = function(o/*:Array<string>*/, wb) {
    		o.push(' <office:automatic-styles>\n');

    		o.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
    		o.push('   <number:month number:style="long"/>\n');
    		o.push('   <number:text>/</number:text>\n');
    		o.push('   <number:day number:style="long"/>\n');
    		o.push('   <number:text>/</number:text>\n');
    		o.push('   <number:year/>\n');
    		o.push('  </number:date-style>\n');

    		/* column styles */
    		var cidx = 0;
    		wb.SheetNames.map(function(n) { return wb.Sheets[n]; }).forEach(function(ws) {
    			if(!ws) return;
    			if(ws["!cols"]) {
    				for(var C = 0; C < ws["!cols"].length; ++C) if(ws["!cols"][C]) {
    					var colobj = ws["!cols"][C];
    					if(colobj.width == null && colobj.wpx == null && colobj.wch == null) continue;
    					process_col(colobj);
    					colobj.ods = cidx;
    					var w = ws["!cols"][C].wpx + "px";
    					o.push('  <style:style style:name="co' + cidx + '" style:family="table-column">\n');
    					o.push('   <style:table-column-properties fo:break-before="auto" style:column-width="' + w + '"/>\n');
    					o.push('  </style:style>\n');
    					++cidx;
    				}
    			}
    		});

    		/* row styles */
    		var ridx = 0;
    		wb.SheetNames.map(function(n) { return wb.Sheets[n]; }).forEach(function(ws) {
    			if(!ws) return;
    			if(ws["!rows"]) {
    				for(var R = 0; R < ws["!rows"].length; ++R) if(ws["!rows"][R]) {
    					ws["!rows"][R].ods = ridx;
    					var h = ws["!rows"][R].hpx + "px";
    					o.push('  <style:style style:name="ro' + ridx + '" style:family="table-row">\n');
    					o.push('   <style:table-row-properties fo:break-before="auto" style:row-height="' + h + '"/>\n');
    					o.push('  </style:style>\n');
    					++ridx;
    				}
    			}
    		});

    		/* table */
    		o.push('  <style:style style:name="ta1" style:family="table" style:master-page-name="mp1">\n');
    		o.push('   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>\n');
    		o.push('  </style:style>\n');

    		/* table cells, text */
    		o.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');

    		/* page-layout */

    		o.push(' </office:automatic-styles>\n');
    	};

    	return function wcx(wb, opts) {
    		var o = [XML_HEADER];
    		/* 3.1.3.2 */
    		var attr = wxt_helper({
    			'xmlns:office':       "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
    			'xmlns:table':        "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
    			'xmlns:style':        "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
    			'xmlns:text':         "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
    			'xmlns:draw':         "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
    			'xmlns:fo':           "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
    			'xmlns:xlink':        "http://www.w3.org/1999/xlink",
    			'xmlns:dc':           "http://purl.org/dc/elements/1.1/",
    			'xmlns:meta':         "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
    			'xmlns:number':       "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
    			'xmlns:presentation': "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
    			'xmlns:svg':          "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
    			'xmlns:chart':        "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
    			'xmlns:dr3d':         "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
    			'xmlns:math':         "http://www.w3.org/1998/Math/MathML",
    			'xmlns:form':         "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
    			'xmlns:script':       "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
    			'xmlns:ooo':          "http://openoffice.org/2004/office",
    			'xmlns:ooow':         "http://openoffice.org/2004/writer",
    			'xmlns:oooc':         "http://openoffice.org/2004/calc",
    			'xmlns:dom':          "http://www.w3.org/2001/xml-events",
    			'xmlns:xforms':       "http://www.w3.org/2002/xforms",
    			'xmlns:xsd':          "http://www.w3.org/2001/XMLSchema",
    			'xmlns:xsi':          "http://www.w3.org/2001/XMLSchema-instance",
    			'xmlns:sheet':        "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
    			'xmlns:rpt':          "http://openoffice.org/2005/report",
    			'xmlns:of':           "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
    			'xmlns:xhtml':        "http://www.w3.org/1999/xhtml",
    			'xmlns:grddl':        "http://www.w3.org/2003/g/data-view#",
    			'xmlns:tableooo':     "http://openoffice.org/2009/table",
    			'xmlns:drawooo':      "http://openoffice.org/2010/draw",
    			'xmlns:calcext':      "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
    			'xmlns:loext':        "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
    			'xmlns:field':        "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
    			'xmlns:formx':        "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
    			'xmlns:css3t':        "http://www.w3.org/TR/css3-text/",
    			'office:version':     "1.2"
    		});

    		var fods = wxt_helper({
    			'xmlns:config':    "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
    			'office:mimetype': "application/vnd.oasis.opendocument.spreadsheet"
    		});

    		if(opts.bookType == "fods") {
    			o.push('<office:document' + attr + fods + '>\n');
    			o.push(write_meta_ods().replace(/office:document-meta/g, "office:meta"));
    			// TODO: settings (equiv of settings.xml for ODS)
    		} else o.push('<office:document-content' + attr  + '>\n');
    		// o.push('  <office:scripts/>\n');
    		write_automatic_styles_ods(o, wb);
    		o.push('  <office:body>\n');
    		o.push('    <office:spreadsheet>\n');
    		for(var i = 0; i != wb.SheetNames.length; ++i) o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i));
    		o.push('    </office:spreadsheet>\n');
    		o.push('  </office:body>\n');
    		if(opts.bookType == "fods") o.push('</office:document>');
    		else o.push('</office:document-content>');
    		return o.join("");
    	};
    })();

    function write_ods(wb/*:any*/, opts/*:any*/) {
    	if(opts.bookType == "fods") return write_content_ods(wb, opts);

    	var zip = zip_new();
    	var f = "";

    	var manifest/*:Array<Array<string> >*/ = [];
    	var rdf/*:Array<[string, string]>*/ = [];

    	/* Part 3 Section 3.3 MIME Media Type */
    	f = "mimetype";
    	zip_add_file(zip, f, "application/vnd.oasis.opendocument.spreadsheet");

    	/* Part 1 Section 2.2 Documents */
    	f = "content.xml";
    	zip_add_file(zip, f, write_content_ods(wb, opts));
    	manifest.push([f, "text/xml"]);
    	rdf.push([f, "ContentFile"]);

    	/* TODO: these are hard-coded styles to satiate excel */
    	f = "styles.xml";
    	zip_add_file(zip, f, write_styles_ods(wb, opts));
    	manifest.push([f, "text/xml"]);
    	rdf.push([f, "StylesFile"]);

    	/* TODO: this is hard-coded to satiate excel */
    	f = "meta.xml";
    	zip_add_file(zip, f, XML_HEADER + write_meta_ods(/*::wb, opts*/));
    	manifest.push([f, "text/xml"]);
    	rdf.push([f, "MetadataFile"]);

    	/* Part 3 Section 6 Metadata Manifest File */
    	f = "manifest.rdf";
    	zip_add_file(zip, f, write_rdf(rdf/*, opts*/));
    	manifest.push([f, "application/rdf+xml"]);

    	/* Part 3 Section 4 Manifest File */
    	f = "META-INF/manifest.xml";
    	zip_add_file(zip, f, write_manifest(manifest/*, opts*/));

    	return zip;
    }

    /*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */
    function u8_to_dataview(array) {
      return new DataView(array.buffer, array.byteOffset, array.byteLength);
    }
    function u8str(u8) {
      return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
    }
    function stru8(str) {
      return typeof TextEncoder != "undefined" ? new TextEncoder().encode(str) : s2a(utf8write(str));
    }
    function u8contains(body, search) {
      outer:
        for (var L = 0; L <= body.length - search.length; ++L) {
          for (var j = 0; j < search.length; ++j)
            if (body[L + j] != search[j])
              continue outer;
          return true;
        }
      return false;
    }
    function u8concat(u8a) {
      var len = u8a.reduce(function(acc, x) {
        return acc + x.length;
      }, 0);
      var out = new Uint8Array(len);
      var off = 0;
      u8a.forEach(function(u8) {
        out.set(u8, off);
        off += u8.length;
      });
      return out;
    }
    function popcnt(x) {
      x -= x >> 1 & 1431655765;
      x = (x & 858993459) + (x >> 2 & 858993459);
      return (x + (x >> 4) & 252645135) * 16843009 >>> 24;
    }
    function readDecimal128LE(buf, offset) {
      var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
      var mantissa = buf[offset + 14] & 1;
      for (var j = offset + 13; j >= offset; --j)
        mantissa = mantissa * 256 + buf[j];
      return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
    }
    function writeDecimal128LE(buf, offset, value) {
      var exp = Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) + 6176 - 20;
      var mantissa = value / Math.pow(10, exp - 6176);
      buf[offset + 15] |= exp >> 7;
      buf[offset + 14] |= (exp & 127) << 1;
      for (var i = 0; mantissa >= 1; ++i, mantissa /= 256)
        buf[offset + i] = mantissa & 255;
      buf[offset + 15] |= value >= 0 ? 0 : 128;
    }
    function parse_varint49(buf, ptr) {
      var l = ptr ? ptr[0] : 0;
      var usz = buf[l] & 127;
      varint:
        if (buf[l++] >= 128) {
          usz |= (buf[l] & 127) << 7;
          if (buf[l++] < 128)
            break varint;
          usz |= (buf[l] & 127) << 14;
          if (buf[l++] < 128)
            break varint;
          usz |= (buf[l] & 127) << 21;
          if (buf[l++] < 128)
            break varint;
          usz += (buf[l] & 127) * Math.pow(2, 28);
          ++l;
          if (buf[l++] < 128)
            break varint;
          usz += (buf[l] & 127) * Math.pow(2, 35);
          ++l;
          if (buf[l++] < 128)
            break varint;
          usz += (buf[l] & 127) * Math.pow(2, 42);
          ++l;
          if (buf[l++] < 128)
            break varint;
        }
      if (ptr)
        ptr[0] = l;
      return usz;
    }
    function write_varint49(v) {
      var usz = new Uint8Array(7);
      usz[0] = v & 127;
      var L = 1;
      sz:
        if (v > 127) {
          usz[L - 1] |= 128;
          usz[L] = v >> 7 & 127;
          ++L;
          if (v <= 16383)
            break sz;
          usz[L - 1] |= 128;
          usz[L] = v >> 14 & 127;
          ++L;
          if (v <= 2097151)
            break sz;
          usz[L - 1] |= 128;
          usz[L] = v >> 21 & 127;
          ++L;
          if (v <= 268435455)
            break sz;
          usz[L - 1] |= 128;
          usz[L] = v / 256 >>> 21 & 127;
          ++L;
          if (v <= 34359738367)
            break sz;
          usz[L - 1] |= 128;
          usz[L] = v / 65536 >>> 21 & 127;
          ++L;
          if (v <= 4398046511103)
            break sz;
          usz[L - 1] |= 128;
          usz[L] = v / 16777216 >>> 21 & 127;
          ++L;
        }
      return usz.slice(0, L);
    }
    function varint_to_i32(buf) {
      var l = 0, i32 = buf[l] & 127;
      varint:
        if (buf[l++] >= 128) {
          i32 |= (buf[l] & 127) << 7;
          if (buf[l++] < 128)
            break varint;
          i32 |= (buf[l] & 127) << 14;
          if (buf[l++] < 128)
            break varint;
          i32 |= (buf[l] & 127) << 21;
          if (buf[l++] < 128)
            break varint;
          i32 |= (buf[l] & 127) << 28;
        }
      return i32;
    }
    function parse_shallow(buf) {
      var out = [], ptr = [0];
      while (ptr[0] < buf.length) {
        var off = ptr[0];
        var num = parse_varint49(buf, ptr);
        var type = num & 7;
        num = Math.floor(num / 8);
        var len = 0;
        var res;
        if (num == 0)
          break;
        switch (type) {
          case 0:
            {
              var l = ptr[0];
              while (buf[ptr[0]++] >= 128)
                ;
              res = buf.slice(l, ptr[0]);
            }
            break;
          case 5:
            len = 4;
            res = buf.slice(ptr[0], ptr[0] + len);
            ptr[0] += len;
            break;
          case 1:
            len = 8;
            res = buf.slice(ptr[0], ptr[0] + len);
            ptr[0] += len;
            break;
          case 2:
            len = parse_varint49(buf, ptr);
            res = buf.slice(ptr[0], ptr[0] + len);
            ptr[0] += len;
            break;
          case 3:
          case 4:
          default:
            throw new Error("PB Type ".concat(type, " for Field ").concat(num, " at offset ").concat(off));
        }
        var v = { data: res, type: type };
        if (out[num] == null)
          out[num] = [v];
        else
          out[num].push(v);
      }
      return out;
    }
    function write_shallow(proto) {
      var out = [];
      proto.forEach(function(field, idx) {
        field.forEach(function(item) {
          if (!item.data)
            return;
          out.push(write_varint49(idx * 8 + item.type));
          if (item.type == 2)
            out.push(write_varint49(item.data.length));
          out.push(item.data);
        });
      });
      return u8concat(out);
    }
    function mappa(data, cb) {
      return (data == null ? void 0 : data.map(function(d) {
        return cb(d.data);
      })) || [];
    }
    function parse_iwa_file(buf) {
      var _a;
      var out = [], ptr = [0];
      while (ptr[0] < buf.length) {
        var len = parse_varint49(buf, ptr);
        var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
        ptr[0] += len;
        var res = {
          id: varint_to_i32(ai[1][0].data),
          messages: []
        };
        ai[2].forEach(function(b) {
          var mi = parse_shallow(b.data);
          var fl = varint_to_i32(mi[3][0].data);
          res.messages.push({
            meta: mi,
            data: buf.slice(ptr[0], ptr[0] + fl)
          });
          ptr[0] += fl;
        });
        if ((_a = ai[3]) == null ? void 0 : _a[0])
          res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
        out.push(res);
      }
      return out;
    }
    function write_iwa_file(ias) {
      var bufs = [];
      ias.forEach(function(ia) {
        var ai = [];
        ai[1] = [{ data: write_varint49(ia.id), type: 0 }];
        ai[2] = [];
        if (ia.merge != null)
          ai[3] = [{ data: write_varint49(+!!ia.merge), type: 0 }];
        var midata = [];
        ia.messages.forEach(function(mi) {
          midata.push(mi.data);
          mi.meta[3] = [{ type: 0, data: write_varint49(mi.data.length) }];
          ai[2].push({ data: write_shallow(mi.meta), type: 2 });
        });
        var aipayload = write_shallow(ai);
        bufs.push(write_varint49(aipayload.length));
        bufs.push(aipayload);
        midata.forEach(function(mid) {
          return bufs.push(mid);
        });
      });
      return u8concat(bufs);
    }
    function parse_snappy_chunk(type, buf) {
      if (type != 0)
        throw new Error("Unexpected Snappy chunk type ".concat(type));
      var ptr = [0];
      var usz = parse_varint49(buf, ptr);
      var chunks = [];
      while (ptr[0] < buf.length) {
        var tag = buf[ptr[0]] & 3;
        if (tag == 0) {
          var len = buf[ptr[0]++] >> 2;
          if (len < 60)
            ++len;
          else {
            var c = len - 59;
            len = buf[ptr[0]];
            if (c > 1)
              len |= buf[ptr[0] + 1] << 8;
            if (c > 2)
              len |= buf[ptr[0] + 2] << 16;
            if (c > 3)
              len |= buf[ptr[0] + 3] << 24;
            len >>>= 0;
            len++;
            ptr[0] += c;
          }
          chunks.push(buf.slice(ptr[0], ptr[0] + len));
          ptr[0] += len;
          continue;
        } else {
          var offset = 0, length = 0;
          if (tag == 1) {
            length = (buf[ptr[0]] >> 2 & 7) + 4;
            offset = (buf[ptr[0]++] & 224) << 3;
            offset |= buf[ptr[0]++];
          } else {
            length = (buf[ptr[0]++] >> 2) + 1;
            if (tag == 2) {
              offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;
              ptr[0] += 2;
            } else {
              offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;
              ptr[0] += 4;
            }
          }
          chunks = [u8concat(chunks)];
          if (offset == 0)
            throw new Error("Invalid offset 0");
          if (offset > chunks[0].length)
            throw new Error("Invalid offset beyond length");
          if (length >= offset) {
            chunks.push(chunks[0].slice(-offset));
            length -= offset;
            while (length >= chunks[chunks.length - 1].length) {
              chunks.push(chunks[chunks.length - 1]);
              length -= chunks[chunks.length - 1].length;
            }
          }
          chunks.push(chunks[0].slice(-offset, -offset + length));
        }
      }
      var o = u8concat(chunks);
      if (o.length != usz)
        throw new Error("Unexpected length: ".concat(o.length, " != ").concat(usz));
      return o;
    }
    function decompress_iwa_file(buf) {
      var out = [];
      var l = 0;
      while (l < buf.length) {
        var t = buf[l++];
        var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;
        l += 3;
        out.push(parse_snappy_chunk(t, buf.slice(l, l + len)));
        l += len;
      }
      if (l !== buf.length)
        throw new Error("data is not a valid framed stream!");
      return u8concat(out);
    }
    function compress_iwa_file(buf) {
      var out = [];
      var l = 0;
      while (l < buf.length) {
        var c = Math.min(buf.length - l, 268435455);
        var frame = new Uint8Array(4);
        out.push(frame);
        var usz = write_varint49(c);
        var L = usz.length;
        out.push(usz);
        if (c <= 60) {
          L++;
          out.push(new Uint8Array([c - 1 << 2]));
        } else if (c <= 256) {
          L += 2;
          out.push(new Uint8Array([240, c - 1 & 255]));
        } else if (c <= 65536) {
          L += 3;
          out.push(new Uint8Array([244, c - 1 & 255, c - 1 >> 8 & 255]));
        } else if (c <= 16777216) {
          L += 4;
          out.push(new Uint8Array([248, c - 1 & 255, c - 1 >> 8 & 255, c - 1 >> 16 & 255]));
        } else if (c <= 4294967296) {
          L += 5;
          out.push(new Uint8Array([252, c - 1 & 255, c - 1 >> 8 & 255, c - 1 >> 16 & 255, c - 1 >>> 24 & 255]));
        }
        out.push(buf.slice(l, l + c));
        L += c;
        frame[0] = 0;
        frame[1] = L & 255;
        frame[2] = L >> 8 & 255;
        frame[3] = L >> 16 & 255;
        l += c;
      }
      return u8concat(out);
    }
    function parse_old_storage(buf, sst, rsst, v) {
      var dv = u8_to_dataview(buf);
      var flags = dv.getUint32(4, true);
      var data_offset = (v > 1 ? 12 : 8) + popcnt(flags & (v > 1 ? 3470 : 398)) * 4;
      var ridx = -1, sidx = -1, ieee = NaN, dt = new Date(2001, 0, 1);
      if (flags & 512) {
        ridx = dv.getUint32(data_offset, true);
        data_offset += 4;
      }
      data_offset += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;
      if (flags & 16) {
        sidx = dv.getUint32(data_offset, true);
        data_offset += 4;
      }
      if (flags & 32) {
        ieee = dv.getFloat64(data_offset, true);
        data_offset += 8;
      }
      if (flags & 64) {
        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
        data_offset += 8;
      }
      var ret;
      switch (buf[2]) {
        case 0:
          break;
        case 2:
          ret = { t: "n", v: ieee };
          break;
        case 3:
          ret = { t: "s", v: sst[sidx] };
          break;
        case 5:
          ret = { t: "d", v: dt };
          break;
        case 6:
          ret = { t: "b", v: ieee > 0 };
          break;
        case 7:
          ret = { t: "n", v: ieee / 86400 };
          break;
        case 8:
          ret = { t: "e", v: 0 };
          break;
        case 9:
          {
            if (ridx > -1)
              ret = { t: "s", v: rsst[ridx] };
            else if (sidx > -1)
              ret = { t: "s", v: sst[sidx] };
            else if (!isNaN(ieee))
              ret = { t: "n", v: ieee };
            else
              throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
          }
          break;
        default:
          throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
      }
      return ret;
    }
    function parse_new_storage(buf, sst, rsst) {
      var dv = u8_to_dataview(buf);
      var flags = dv.getUint32(8, true);
      var data_offset = 12;
      var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt = new Date(2001, 0, 1);
      if (flags & 1) {
        d128 = readDecimal128LE(buf, data_offset);
        data_offset += 16;
      }
      if (flags & 2) {
        ieee = dv.getFloat64(data_offset, true);
        data_offset += 8;
      }
      if (flags & 4) {
        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
        data_offset += 8;
      }
      if (flags & 8) {
        sidx = dv.getUint32(data_offset, true);
        data_offset += 4;
      }
      if (flags & 16) {
        ridx = dv.getUint32(data_offset, true);
        data_offset += 4;
      }
      var ret;
      switch (buf[1]) {
        case 0:
          break;
        case 2:
          ret = { t: "n", v: d128 };
          break;
        case 3:
          ret = { t: "s", v: sst[sidx] };
          break;
        case 5:
          ret = { t: "d", v: dt };
          break;
        case 6:
          ret = { t: "b", v: ieee > 0 };
          break;
        case 7:
          ret = { t: "n", v: ieee / 86400 };
          break;
        case 8:
          ret = { t: "e", v: 0 };
          break;
        case 9:
          {
            if (ridx > -1)
              ret = { t: "s", v: rsst[ridx] };
            else
              throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
          }
          break;
        case 10:
          ret = { t: "n", v: d128 };
          break;
        default:
          throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
      }
      return ret;
    }
    function write_new_storage(cell, sst) {
      var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;
      out[0] = 5;
      switch (cell.t) {
        case "n":
          out[1] = 2;
          writeDecimal128LE(out, l, cell.v);
          flags |= 1;
          l += 16;
          break;
        case "b":
          out[1] = 6;
          dv.setFloat64(l, cell.v ? 1 : 0, true);
          flags |= 2;
          l += 8;
          break;
        case "s":
          if (sst.indexOf(cell.v) == -1)
            throw new Error("Value ".concat(cell.v, " missing from SST!"));
          out[1] = 3;
          dv.setUint32(l, sst.indexOf(cell.v), true);
          flags |= 8;
          l += 4;
          break;
        default:
          throw "unsupported cell type " + cell.t;
      }
      dv.setUint32(8, flags, true);
      return out.slice(0, l);
    }
    function write_old_storage(cell, sst) {
      var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;
      out[0] = 3;
      switch (cell.t) {
        case "n":
          out[2] = 2;
          dv.setFloat64(l, cell.v, true);
          flags |= 32;
          l += 8;
          break;
        case "b":
          out[2] = 6;
          dv.setFloat64(l, cell.v ? 1 : 0, true);
          flags |= 32;
          l += 8;
          break;
        case "s":
          if (sst.indexOf(cell.v) == -1)
            throw new Error("Value ".concat(cell.v, " missing from SST!"));
          out[2] = 3;
          dv.setUint32(l, sst.indexOf(cell.v), true);
          flags |= 16;
          l += 4;
          break;
        default:
          throw "unsupported cell type " + cell.t;
      }
      dv.setUint32(4, flags, true);
      return out.slice(0, l);
    }
    function parse_cell_storage(buf, sst, rsst) {
      switch (buf[0]) {
        case 0:
        case 1:
        case 2:
        case 3:
          return parse_old_storage(buf, sst, rsst, buf[0]);
        case 5:
          return parse_new_storage(buf, sst, rsst);
        default:
          throw new Error("Unsupported payload version ".concat(buf[0]));
      }
    }
    function parse_TSP_Reference(buf) {
      var pb = parse_shallow(buf);
      return parse_varint49(pb[1][0].data);
    }
    function parse_TST_TableDataList(M, root) {
      var pb = parse_shallow(root.data);
      var type = varint_to_i32(pb[1][0].data);
      var entries = pb[3];
      var data = [];
      (entries || []).forEach(function(entry) {
        var le = parse_shallow(entry.data);
        var key = varint_to_i32(le[1][0].data) >>> 0;
        switch (type) {
          case 1:
            data[key] = u8str(le[3][0].data);
            break;
          case 8:
            {
              var rt = M[parse_TSP_Reference(le[9][0].data)][0];
              var rtp = parse_shallow(rt.data);
              var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];
              var mtype = varint_to_i32(rtpref.meta[1][0].data);
              if (mtype != 2001)
                throw new Error("2000 unexpected reference to ".concat(mtype));
              var tswpsa = parse_shallow(rtpref.data);
              data[key] = tswpsa[3].map(function(x) {
                return u8str(x.data);
              }).join("");
            }
            break;
        }
      });
      return data;
    }
    function parse_TST_TileRowInfo(u8, type) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
      var pb = parse_shallow(u8);
      var R = varint_to_i32(pb[1][0].data) >>> 0;
      var cnt = varint_to_i32(pb[2][0].data) >>> 0;
      var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
      var used_storage_u8, used_storage;
      if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {
        used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;
        used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
      } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {
        used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
        used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;
      } else
        throw "NUMBERS Tile missing ".concat(type, " cell storage");
      var width = wide_offsets ? 4 : 1;
      var used_storage_offsets = u8_to_dataview(used_storage_u8);
      var offsets = [];
      for (var C = 0; C < used_storage_u8.length / 2; ++C) {
        var off = used_storage_offsets.getUint16(C * 2, true);
        if (off < 65535)
          offsets.push([C, off]);
      }
      if (offsets.length != cnt)
        throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
      var cells = [];
      for (C = 0; C < offsets.length - 1; ++C)
        cells[offsets[C][0]] = used_storage.subarray(offsets[C][1] * width, offsets[C + 1][1] * width);
      if (offsets.length >= 1)
        cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);
      return { R: R, cells: cells };
    }
    function parse_TST_Tile(M, root) {
      var _a;
      var pb = parse_shallow(root.data);
      var storage = ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;
      var ri = mappa(pb[5], function(u8) {
        return parse_TST_TileRowInfo(u8, storage);
      });
      return {
        nrows: varint_to_i32(pb[4][0].data) >>> 0,
        data: ri.reduce(function(acc, x) {
          if (!acc[x.R])
            acc[x.R] = [];
          x.cells.forEach(function(cell, C) {
            if (acc[x.R][C])
              throw new Error("Duplicate cell r=".concat(x.R, " c=").concat(C));
            acc[x.R][C] = cell;
          });
          return acc;
        }, [])
      };
    }
    function parse_TST_TableModelArchive(M, root, ws) {
      var _a;
      var pb = parse_shallow(root.data);
      var range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
      range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
      if (range.e.r < 0)
        throw new Error("Invalid row varint ".concat(pb[6][0].data));
      range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
      if (range.e.c < 0)
        throw new Error("Invalid col varint ".concat(pb[7][0].data));
      ws["!ref"] = encode_range(range);
      var store = parse_shallow(pb[4][0].data);
      var sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);
      var rsst = ((_a = store[17]) == null ? void 0 : _a[0]) ? parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]) : [];
      var tile = parse_shallow(store[3][0].data);
      var _R = 0;
      tile[1].forEach(function(t) {
        var tl = parse_shallow(t.data);
        var ref = M[parse_TSP_Reference(tl[2][0].data)][0];
        var mtype = varint_to_i32(ref.meta[1][0].data);
        if (mtype != 6002)
          throw new Error("6001 unexpected reference to ".concat(mtype));
        var _tile = parse_TST_Tile(M, ref);
        _tile.data.forEach(function(row, R) {
          row.forEach(function(buf, C) {
            var addr = encode_cell({ r: _R + R, c: C });
            var res = parse_cell_storage(buf, sst, rsst);
            if (res)
              ws[addr] = res;
          });
        });
        _R += _tile.nrows;
      });
    }
    function parse_TST_TableInfoArchive(M, root) {
      var pb = parse_shallow(root.data);
      var out = { "!ref": "A1" };
      var tableref = M[parse_TSP_Reference(pb[2][0].data)];
      var mtype = varint_to_i32(tableref[0].meta[1][0].data);
      if (mtype != 6001)
        throw new Error("6000 unexpected reference to ".concat(mtype));
      parse_TST_TableModelArchive(M, tableref[0], out);
      return out;
    }
    function parse_TN_SheetArchive(M, root) {
      var _a;
      var pb = parse_shallow(root.data);
      var out = {
        name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : "",
        sheets: []
      };
      var shapeoffs = mappa(pb[2], parse_TSP_Reference);
      shapeoffs.forEach(function(off) {
        M[off].forEach(function(m) {
          var mtype = varint_to_i32(m.meta[1][0].data);
          if (mtype == 6e3)
            out.sheets.push(parse_TST_TableInfoArchive(M, m));
        });
      });
      return out;
    }
    function parse_TN_DocumentArchive(M, root) {
      var out = book_new();
      var pb = parse_shallow(root.data);
      var sheetoffs = mappa(pb[1], parse_TSP_Reference);
      sheetoffs.forEach(function(off) {
        M[off].forEach(function(m) {
          var mtype = varint_to_i32(m.meta[1][0].data);
          if (mtype == 2) {
            var root2 = parse_TN_SheetArchive(M, m);
            root2.sheets.forEach(function(sheet, idx) {
              book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
            });
          }
        });
      });
      if (out.SheetNames.length == 0)
        throw new Error("Empty NUMBERS file");
      return out;
    }
    function parse_numbers_iwa(cfb) {
      var _a, _b, _c, _d;
      var M = {}, indices = [];
      cfb.FullPaths.forEach(function(p) {
        if (p.match(/\.iwpv2/))
          throw new Error("Unsupported password protection");
      });
      cfb.FileIndex.forEach(function(s) {
        if (!s.name.match(/\.iwa$/))
          return;
        var o;
        try {
          o = decompress_iwa_file(s.content);
        } catch (e) {
          return console.log("?? " + s.content.length + " " + (e.message || e));
        }
        var packets;
        try {
          packets = parse_iwa_file(o);
        } catch (e) {
          return console.log("## " + (e.message || e));
        }
        packets.forEach(function(packet) {
          M[packet.id] = packet.messages;
          indices.push(packet.id);
        });
      });
      if (!indices.length)
        throw new Error("File has no messages");
      var docroot = ((_d = (_c = (_b = (_a = M == null ? void 0 : M[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];
      if (!docroot)
        indices.forEach(function(idx) {
          M[idx].forEach(function(iwam) {
            var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
            if (mtype == 1) {
              if (!docroot)
                docroot = iwam;
              else
                throw new Error("Document has multiple roots");
            }
          });
        });
      if (!docroot)
        throw new Error("Cannot find Document root");
      return parse_TN_DocumentArchive(M, docroot);
    }
    function write_tile_row(tri, data, SST) {
      var _a, _b, _c, _d;
      if (!((_a = tri[6]) == null ? void 0 : _a[0]) || !((_b = tri[7]) == null ? void 0 : _b[0]))
        throw "Mutation only works on post-BNC storages!";
      var wide_offsets = ((_d = (_c = tri[8]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && varint_to_i32(tri[8][0].data) > 0 || false;
      if (wide_offsets)
        throw "Math only works with normal offsets";
      var cnt = 0;
      var dv = u8_to_dataview(tri[7][0].data), last_offset = 0, cell_storage = [];
      var _dv = u8_to_dataview(tri[4][0].data), _last_offset = 0, _cell_storage = [];
      for (var C = 0; C < data.length; ++C) {
        if (data[C] == null) {
          dv.setUint16(C * 2, 65535, true);
          _dv.setUint16(C * 2, 65535);
          continue;
        }
        dv.setUint16(C * 2, last_offset, true);
        _dv.setUint16(C * 2, _last_offset, true);
        var celload, _celload;
        switch (typeof data[C]) {
          case "string":
            celload = write_new_storage({ t: "s", v: data[C] }, SST);
            _celload = write_old_storage({ t: "s", v: data[C] }, SST);
            break;
          case "number":
            celload = write_new_storage({ t: "n", v: data[C] }, SST);
            _celload = write_old_storage({ t: "n", v: data[C] }, SST);
            break;
          case "boolean":
            celload = write_new_storage({ t: "b", v: data[C] }, SST);
            _celload = write_old_storage({ t: "b", v: data[C] }, SST);
            break;
          default:
            throw new Error("Unsupported value " + data[C]);
        }
        cell_storage.push(celload);
        last_offset += celload.length;
        _cell_storage.push(_celload);
        _last_offset += _celload.length;
        ++cnt;
      }
      tri[2][0].data = write_varint49(cnt);
      for (; C < tri[7][0].data.length / 2; ++C) {
        dv.setUint16(C * 2, 65535, true);
        _dv.setUint16(C * 2, 65535, true);
      }
      tri[6][0].data = u8concat(cell_storage);
      tri[3][0].data = u8concat(_cell_storage);
      return cnt;
    }
    function write_numbers_iwa(wb, opts) {
      if (!opts || !opts.numbers)
        throw new Error("Must pass a `numbers` option -- check the README");
      var ws = wb.Sheets[wb.SheetNames[0]];
      if (wb.SheetNames.length > 1)
        console.error("The Numbers writer currently writes only the first table");
      var range = decode_range(ws["!ref"]);
      range.s.r = range.s.c = 0;
      var trunc = false;
      if (range.e.c > 9) {
        trunc = true;
        range.e.c = 9;
      }
      if (range.e.r > 49) {
        trunc = true;
        range.e.r = 49;
      }
      if (trunc)
        console.error("The Numbers writer is currently limited to ".concat(encode_range(range)));
      var data = sheet_to_json(ws, { range: range, header: 1 });
      var SST = ["~Sh33tJ5~"];
      data.forEach(function(row) {
        return row.forEach(function(cell) {
          if (typeof cell == "string")
            SST.push(cell);
        });
      });
      var dependents = {};
      var indices = [];
      var cfb = CFB.read(opts.numbers, { type: "base64" });
      cfb.FileIndex.map(function(fi, idx) {
        return [fi, cfb.FullPaths[idx]];
      }).forEach(function(row) {
        var fi = row[0], fp = row[1];
        if (fi.type != 2)
          return;
        if (!fi.name.match(/\.iwa/))
          return;
        var old_content = fi.content;
        var raw1 = decompress_iwa_file(old_content);
        var x2 = parse_iwa_file(raw1);
        x2.forEach(function(packet2) {
          indices.push(packet2.id);
          dependents[packet2.id] = { deps: [], location: fp, type: varint_to_i32(packet2.messages[0].meta[1][0].data) };
        });
      });
      indices.sort(function(x2, y2) {
        return x2 - y2;
      });
      var indices_varint = indices.filter(function(x2) {
        return x2 > 1;
      }).map(function(x2) {
        return [x2, write_varint49(x2)];
      });
      cfb.FileIndex.map(function(fi, idx) {
        return [fi, cfb.FullPaths[idx]];
      }).forEach(function(row) {
        var fi = row[0]; row[1];
        if (!fi.name.match(/\.iwa/))
          return;
        var x2 = parse_iwa_file(decompress_iwa_file(fi.content));
        x2.forEach(function(ia) {
          ia.messages.forEach(function(m) {
            indices_varint.forEach(function(ivi) {
              if (ia.messages.some(function(mess) {
                return varint_to_i32(mess.meta[1][0].data) != 11006 && u8contains(mess.data, ivi[1]);
              })) {
                dependents[ivi[0]].deps.push(ia.id);
              }
            });
          });
        });
      });
      var entry = CFB.find(cfb, dependents[1].location);
      var x = parse_iwa_file(decompress_iwa_file(entry.content));
      var docroot;
      for (var xi = 0; xi < x.length; ++xi) {
        var packet = x[xi];
        if (packet.id == 1)
          docroot = packet;
      }
      var sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[1][0].data);
      entry = CFB.find(cfb, dependents[sheetrootref].location);
      x = parse_iwa_file(decompress_iwa_file(entry.content));
      for (xi = 0; xi < x.length; ++xi) {
        packet = x[xi];
        if (packet.id == sheetrootref)
          docroot = packet;
      }
      sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
      entry = CFB.find(cfb, dependents[sheetrootref].location);
      x = parse_iwa_file(decompress_iwa_file(entry.content));
      for (xi = 0; xi < x.length; ++xi) {
        packet = x[xi];
        if (packet.id == sheetrootref)
          docroot = packet;
      }
      sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
      entry = CFB.find(cfb, dependents[sheetrootref].location);
      x = parse_iwa_file(decompress_iwa_file(entry.content));
      for (xi = 0; xi < x.length; ++xi) {
        packet = x[xi];
        if (packet.id == sheetrootref)
          docroot = packet;
      }
      var pb = parse_shallow(docroot.messages[0].data);
      {
        pb[6][0].data = write_varint49(range.e.r + 1);
        pb[7][0].data = write_varint49(range.e.c + 1);
        var cruidsref = parse_TSP_Reference(pb[46][0].data);
        var oldbucket = CFB.find(cfb, dependents[cruidsref].location);
        var _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
        {
          for (var j = 0; j < _x.length; ++j) {
            if (_x[j].id == cruidsref)
              break;
          }
          if (_x[j].id != cruidsref)
            throw "Bad ColumnRowUIDMapArchive";
          var cruids = parse_shallow(_x[j].messages[0].data);
          cruids[1] = [];
          cruids[2] = [], cruids[3] = [];
          for (var C = 0; C <= range.e.c; ++C) {
            var uuid = [];
            uuid[1] = uuid[2] = [{ type: 0, data: write_varint49(C + 420690) }];
            cruids[1].push({ type: 2, data: write_shallow(uuid) });
            cruids[2].push({ type: 0, data: write_varint49(C) });
            cruids[3].push({ type: 0, data: write_varint49(C) });
          }
          cruids[4] = [];
          cruids[5] = [], cruids[6] = [];
          for (var R = 0; R <= range.e.r; ++R) {
            uuid = [];
            uuid[1] = uuid[2] = [{ type: 0, data: write_varint49(R + 726270) }];
            cruids[4].push({ type: 2, data: write_shallow(uuid) });
            cruids[5].push({ type: 0, data: write_varint49(R) });
            cruids[6].push({ type: 0, data: write_varint49(R) });
          }
          _x[j].messages[0].data = write_shallow(cruids);
        }
        oldbucket.content = compress_iwa_file(write_iwa_file(_x));
        oldbucket.size = oldbucket.content.length;
        delete pb[46];
        var store = parse_shallow(pb[4][0].data);
        {
          store[7][0].data = write_varint49(range.e.r + 1);
          var row_headers = parse_shallow(store[1][0].data);
          var row_header_ref = parse_TSP_Reference(row_headers[2][0].data);
          oldbucket = CFB.find(cfb, dependents[row_header_ref].location);
          _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
          {
            if (_x[0].id != row_header_ref)
              throw "Bad HeaderStorageBucket";
            var base_bucket = parse_shallow(_x[0].messages[0].data);
            for (R = 0; R < data.length; ++R) {
              var _bucket = parse_shallow(base_bucket[2][0].data);
              _bucket[1][0].data = write_varint49(R);
              _bucket[4][0].data = write_varint49(data[R].length);
              base_bucket[2][R] = { type: base_bucket[2][0].type, data: write_shallow(_bucket) };
            }
            _x[0].messages[0].data = write_shallow(base_bucket);
          }
          oldbucket.content = compress_iwa_file(write_iwa_file(_x));
          oldbucket.size = oldbucket.content.length;
          var col_header_ref = parse_TSP_Reference(store[2][0].data);
          oldbucket = CFB.find(cfb, dependents[col_header_ref].location);
          _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
          {
            if (_x[0].id != col_header_ref)
              throw "Bad HeaderStorageBucket";
            base_bucket = parse_shallow(_x[0].messages[0].data);
            for (C = 0; C <= range.e.c; ++C) {
              _bucket = parse_shallow(base_bucket[2][0].data);
              _bucket[1][0].data = write_varint49(C);
              _bucket[4][0].data = write_varint49(range.e.r + 1);
              base_bucket[2][C] = { type: base_bucket[2][0].type, data: write_shallow(_bucket) };
            }
            _x[0].messages[0].data = write_shallow(base_bucket);
          }
          oldbucket.content = compress_iwa_file(write_iwa_file(_x));
          oldbucket.size = oldbucket.content.length;
          var sstref = parse_TSP_Reference(store[4][0].data);
          (function() {
            var sentry = CFB.find(cfb, dependents[sstref].location);
            var sx = parse_iwa_file(decompress_iwa_file(sentry.content));
            var sstroot;
            for (var sxi = 0; sxi < sx.length; ++sxi) {
              var packet2 = sx[sxi];
              if (packet2.id == sstref)
                sstroot = packet2;
            }
            var sstdata = parse_shallow(sstroot.messages[0].data);
            {
              sstdata[3] = [];
              var newsst = [];
              SST.forEach(function(str, i) {
                newsst[1] = [{ type: 0, data: write_varint49(i) }];
                newsst[2] = [{ type: 0, data: write_varint49(1) }];
                newsst[3] = [{ type: 2, data: stru8(str) }];
                sstdata[3].push({ type: 2, data: write_shallow(newsst) });
              });
            }
            sstroot.messages[0].data = write_shallow(sstdata);
            var sy = write_iwa_file(sx);
            var raw32 = compress_iwa_file(sy);
            sentry.content = raw32;
            sentry.size = sentry.content.length;
          })();
          var tile = parse_shallow(store[3][0].data);
          {
            var t = tile[1][0];
            delete tile[2];
            var tl = parse_shallow(t.data);
            {
              var tileref = parse_TSP_Reference(tl[2][0].data);
              (function() {
                var tentry = CFB.find(cfb, dependents[tileref].location);
                var tx = parse_iwa_file(decompress_iwa_file(tentry.content));
                var tileroot;
                for (var sxi = 0; sxi < tx.length; ++sxi) {
                  var packet2 = tx[sxi];
                  if (packet2.id == tileref)
                    tileroot = packet2;
                }
                var tiledata = parse_shallow(tileroot.messages[0].data);
                {
                  delete tiledata[6];
                  delete tile[7];
                  var rowload = new Uint8Array(tiledata[5][0].data);
                  tiledata[5] = [];
                  var cnt = 0;
                  for (var R2 = 0; R2 <= range.e.r; ++R2) {
                    var tilerow = parse_shallow(rowload);
                    cnt += write_tile_row(tilerow, data[R2], SST);
                    tilerow[1][0].data = write_varint49(R2);
                    tiledata[5].push({ data: write_shallow(tilerow), type: 2 });
                  }
                  tiledata[1] = [{ type: 0, data: write_varint49(range.e.c + 1) }];
                  tiledata[2] = [{ type: 0, data: write_varint49(range.e.r + 1) }];
                  tiledata[3] = [{ type: 0, data: write_varint49(cnt) }];
                  tiledata[4] = [{ type: 0, data: write_varint49(range.e.r + 1) }];
                }
                tileroot.messages[0].data = write_shallow(tiledata);
                var ty = write_iwa_file(tx);
                var raw32 = compress_iwa_file(ty);
                tentry.content = raw32;
                tentry.size = tentry.content.length;
              })();
            }
            t.data = write_shallow(tl);
          }
          store[3][0].data = write_shallow(tile);
        }
        pb[4][0].data = write_shallow(store);
      }
      docroot.messages[0].data = write_shallow(pb);
      var y = write_iwa_file(x);
      var raw3 = compress_iwa_file(y);
      entry.content = raw3;
      entry.size = entry.content.length;
      return cfb;
    }
    function fix_opts_func(defaults/*:Array<Array<any> >*/)/*:{(o:any):void}*/ {
    	return function fix_opts(opts) {
    		for(var i = 0; i != defaults.length; ++i) {
    			var d = defaults[i];
    			if(opts[d[0]] === undefined) opts[d[0]] = d[1];
    			if(d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);
    		}
    	};
    }

    function fix_read_opts(opts) {
    fix_opts_func([
    	['cellNF', false], /* emit cell number format string as .z */
    	['cellHTML', true], /* emit html string as .h */
    	['cellFormula', true], /* emit formulae as .f */
    	['cellStyles', false], /* emits style/theme as .s */
    	['cellText', true], /* emit formatted text as .w */
    	['cellDates', false], /* emit date cells with type `d` */

    	['sheetStubs', false], /* emit empty cells */
    	['sheetRows', 0, 'n'], /* read n rows (0 = read all rows) */

    	['bookDeps', false], /* parse calculation chains */
    	['bookSheets', false], /* only try to get sheet names (no Sheets) */
    	['bookProps', false], /* only try to get properties (no Sheets) */
    	['bookFiles', false], /* include raw file structure (keys, files, cfb) */
    	['bookVBA', false], /* include vba raw data (vbaraw) */

    	['password',''], /* password */
    	['WTF', false] /* WTF mode (throws errors) */
    ])(opts);
    }

    function fix_write_opts(opts) {
    fix_opts_func([
    	['cellDates', false], /* write date cells with type `d` */

    	['bookSST', false], /* Generate Shared String Table */

    	['bookType', 'xlsx'], /* Type of workbook (xlsx/m/b) */

    	['compression', false], /* Use file compression */

    	['WTF', false] /* WTF mode (throws errors) */
    ])(opts);
    }
    function get_sheet_type(n/*:string*/)/*:string*/ {
    	if(RELS.WS.indexOf(n) > -1) return "sheet";
    	if(n == RELS.CS) return "chart";
    	if(n == RELS.DS) return "dialog";
    	if(n == RELS.MS) return "macro";
    	return (n && n.length) ? n : "sheet";
    }
    function safe_parse_wbrels(wbrels, sheets) {
    	if(!wbrels) return 0;
    	try {
    		wbrels = sheets.map(function pwbr(w) { if(!w.id) w.id = w.strRelID; return [w.name, wbrels['!id'][w.id].Target, get_sheet_type(wbrels['!id'][w.id].Type)]; });
    	} catch(e) { return null; }
    	return !wbrels || wbrels.length === 0 ? null : wbrels;
    }

    function safe_parse_sheet(zip, path/*:string*/, relsPath/*:string*/, sheet, idx/*:number*/, sheetRels, sheets, stype/*:string*/, opts, wb, themes, styles) {
    	try {
    		sheetRels[sheet]=parse_rels(getzipstr(zip, relsPath, true), path);
    		var data = getzipdata(zip, path);
    		var _ws;
    		switch(stype) {
    			case 'sheet':  _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
    			case 'chart':  _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
    				if(!_ws || !_ws['!drawel']) break;
    				var dfile = resolve_path(_ws['!drawel'].Target, path);
    				var drelsp = get_rels_path(dfile);
    				var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
    				var chartp = resolve_path(draw, dfile);
    				var crelsp = get_rels_path(chartp);
    				_ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
    				break;
    			case 'macro':  _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
    			case 'dialog': _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
    			default: throw new Error("Unrecognized sheet type " + stype);
    		}
    		sheets[sheet] = _ws;

    		/* scan rels for comments and threaded comments */
    		var tcomments = [];
    		if(sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function(n) {
    			var dfile = "";
    			if(sheetRels[sheet][n].Type == RELS.CMNT) {
    				dfile = resolve_path(sheetRels[sheet][n].Target, path);
    				var comments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);
    				if(!comments || !comments.length) return;
    				sheet_insert_comments(_ws, comments, false);
    			}
    			if(sheetRels[sheet][n].Type == RELS.TCMNT) {
    				dfile = resolve_path(sheetRels[sheet][n].Target, path);
    				tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile, true), opts));
    			}
    		});
    		if(tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);
    	} catch(e) { if(opts.WTF) throw e; }
    }

    function strip_front_slash(x/*:string*/)/*:string*/ { return x.charAt(0) == '/' ? x.slice(1) : x; }

    function parse_zip(zip/*:ZIP*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	make_ssf();
    	opts = opts || {};
    	fix_read_opts(opts);

    	/* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */
    	if(safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);
    	/* UOC */
    	if(safegetzipfile(zip, 'objectdata.xml')) return parse_ods(zip, opts);
    	/* Numbers */
    	if(safegetzipfile(zip, 'Index/Document.iwa')) {
    		if(typeof Uint8Array == "undefined") throw new Error('NUMBERS file parsing requires Uint8Array support');
    		if(typeof parse_numbers_iwa != "undefined") {
    			if(zip.FileIndex) return parse_numbers_iwa(zip);
    			var _zip = CFB.utils.cfb_new();
    			zipentries(zip).forEach(function(e) { zip_add_file(_zip, e, getzipbin(zip, e)); });
    			return parse_numbers_iwa(_zip);
    		}
    		throw new Error('Unsupported NUMBERS file');
    	}
    	if(!safegetzipfile(zip, '[Content_Types].xml')) {
    		if(safegetzipfile(zip, 'index.xml.gz')) throw new Error('Unsupported NUMBERS 08 file');
    		if(safegetzipfile(zip, 'index.xml')) throw new Error('Unsupported NUMBERS 09 file');
    		throw new Error('Unsupported ZIP file');
    	}

    	var entries = zipentries(zip);
    	var dir = parse_ct((getzipstr(zip, '[Content_Types].xml')/*:?any*/));
    	var xlsb = false;
    	var sheets, binname;
    	if(dir.workbooks.length === 0) {
    		binname = "xl/workbook.xml";
    		if(getzipdata(zip,binname, true)) dir.workbooks.push(binname);
    	}
    	if(dir.workbooks.length === 0) {
    		binname = "xl/workbook.bin";
    		if(!getzipdata(zip,binname,true)) throw new Error("Could not find workbook");
    		dir.workbooks.push(binname);
    		xlsb = true;
    	}
    	if(dir.workbooks[0].slice(-3) == "bin") xlsb = true;

    	var themes = ({}/*:any*/);
    	var styles = ({}/*:any*/);
    	if(!opts.bookSheets && !opts.bookProps) {
    		strs = [];
    		if(dir.sst) try { strs=parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts); } catch(e) { if(opts.WTF) throw e; }

    		if(opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//,''), true)||"",dir.themes[0], opts);

    		if(dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
    	}

    	/*var externbooks = */dir.links.map(function(link) {
    		try {
    			var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
    			return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
    		} catch(e) {}
    	});

    	var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);

    	var props = {}, propdata = "";

    	if(dir.coreprops.length) {
    		propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
    		if(propdata) props = parse_core_props(propdata);
    		if(dir.extprops.length !== 0) {
    			propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
    			if(propdata) parse_ext_props(propdata, props, opts);
    		}
    	}

    	var custprops = {};
    	if(!opts.bookSheets || opts.bookProps) {
    		if (dir.custprops.length !== 0) {
    			propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
    			if(propdata) custprops = parse_cust_props(propdata, opts);
    		}
    	}

    	var out = ({}/*:any*/);
    	if(opts.bookSheets || opts.bookProps) {
    		if(wb.Sheets) sheets = wb.Sheets.map(function pluck(x){ return x.name; });
    		else if(props.Worksheets && props.SheetNames.length > 0) sheets=props.SheetNames;
    		if(opts.bookProps) { out.Props = props; out.Custprops = custprops; }
    		if(opts.bookSheets && typeof sheets !== 'undefined') out.SheetNames = sheets;
    		if(opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
    	}
    	sheets = {};

    	var deps = {};
    	if(opts.bookDeps && dir.calcchain) deps=parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)),dir.calcchain);

    	var i=0;
    	var sheetRels = ({}/*:any*/);
    	var path, relsPath;

    	{
    		var wbsheets = wb.Sheets;
    		props.Worksheets = wbsheets.length;
    		props.SheetNames = [];
    		for(var j = 0; j != wbsheets.length; ++j) {
    			props.SheetNames[j] = wbsheets[j].name;
    		}
    	}

    	var wbext = xlsb ? "bin" : "xml";
    	var wbrelsi = dir.workbooks[0].lastIndexOf("/");
    	var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi+1) + "_rels/" + dir.workbooks[0].slice(wbrelsi+1) + ".rels").replace(/^\//,"");
    	if(!safegetzipfile(zip, wbrelsfile)) wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';
    	var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));

    	if((dir.metadata || []).length >= 1) {
    		/* TODO: MDX and other types of metadata */
    		opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])),dir.metadata[0],opts);
    	}

    	if((dir.people || []).length >= 1) {
    		opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])),opts);
    	}

    	if(wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);

    	/* Numbers iOS hack */
    	var nmode = (getzipdata(zip,"xl/worksheets/sheet.xml",true))?1:0;
    	wsloop: for(i = 0; i != props.Worksheets; ++i) {
    		var stype = "sheet";
    		if(wbrels && wbrels[i]) {
    			path = 'xl/' + (wbrels[i][1]).replace(/[\/]?xl\//, "");
    			if(!safegetzipfile(zip, path)) path = wbrels[i][1];
    			if(!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\/.*$/,"") + wbrels[i][1];
    			stype = wbrels[i][2];
    		} else {
    			path = 'xl/worksheets/sheet'+(i+1-nmode)+"." + wbext;
    			path = path.replace(/sheet0\./,"sheet.");
    		}
    		relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
    		if(opts && opts.sheets != null) switch(typeof opts.sheets) {
    			case "number": if(i != opts.sheets) continue wsloop; break;
    			case "string": if(props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop; break;
    			default: if(Array.isArray && Array.isArray(opts.sheets)) {
    				var snjseen = false;
    				for(var snj = 0; snj != opts.sheets.length; ++snj) {
    					if(typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i) snjseen=1;
    					if(typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;
    				}
    				if(!snjseen) continue wsloop;
    			}
    		}
    		safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
    	}

    	out = ({
    		Directory: dir,
    		Workbook: wb,
    		Props: props,
    		Custprops: custprops,
    		Deps: deps,
    		Sheets: sheets,
    		SheetNames: props.SheetNames,
    		Strings: strs,
    		Styles: styles,
    		Themes: themes,
    		SSF: dup(table_fmt)
    	}/*:any*/);
    	if(opts && opts.bookFiles) {
    		if(zip.files) {
    			out.keys = entries;
    			out.files = zip.files;
    		} else {
    			out.keys = [];
    			out.files = {};
    			zip.FullPaths.forEach(function(p, idx) {
    				p = p.replace(/^Root Entry[\/]/, "");
    				out.keys.push(p);
    				out.files[p] = zip.FileIndex[idx];
    			});
    		}
    	}
    	if(opts && opts.bookVBA) {
    		if(dir.vba.length > 0) out.vbaraw = getzipdata(zip,strip_front_slash(dir.vba[0]),true);
    		else if(dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, 'xl/vbaProject.bin',true);
    	}
    	return out;
    }

    /* [MS-OFFCRYPTO] 2.1.1 */
    function parse_xlsxcfb(cfb, _opts/*:?ParseOpts*/)/*:Workbook*/ {
    	var opts = _opts || {};
    	var f = 'Workbook', data = CFB.find(cfb, f);
    	try {
    	f = '/!DataSpaces/Version';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	/*var version = */parse_DataSpaceVersionInfo(data.content);

    	/* 2.3.4.1 */
    	f = '/!DataSpaces/DataSpaceMap';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	var dsm = parse_DataSpaceMap(data.content);
    	if(dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
    		throw new Error("ECMA-376 Encrypted file bad " + f);

    	/* 2.3.4.2 */
    	f = '/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	var seds = parse_DataSpaceDefinition(data.content);
    	if(seds.length != 1 || seds[0] != "StrongEncryptionTransform")
    		throw new Error("ECMA-376 Encrypted file bad " + f);

    	/* 2.3.4.3 */
    	f = '/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	/*var hdr = */parse_Primary(data.content);
    	} catch(e) {}

    	f = '/EncryptionInfo';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	var einfo = parse_EncryptionInfo(data.content);

    	/* 2.3.4.4 */
    	f = '/EncryptedPackage';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);

    /*global decrypt_agile */
    /*:: declare var decrypt_agile:any; */
    	if(einfo[0] == 0x04 && typeof decrypt_agile !== 'undefined') return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
    /*global decrypt_std76 */
    /*:: declare var decrypt_std76:any; */
    	if(einfo[0] == 0x02 && typeof decrypt_std76 !== 'undefined') return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
    	throw new Error("File is password-protected");
    }

    function write_zip(wb/*:Workbook*/, opts/*:WriteOpts*/)/*:ZIP*/ {
    	if(opts.bookType == "ods") return write_ods(wb, opts);
    	if(opts.bookType == "numbers") return write_numbers_iwa(wb, opts);
    	if(opts.bookType == "xlsb") return write_zip_xlsxb(wb, opts);
    	return write_zip_xlsx(wb, opts);
    }

    /* XLSX and XLSB writing are very similar.  Originally they were unified in one
       export function.  This is horrible for tree shaking in the common case (most
       applications need to export files in one format) so this function supports
       both formats while write_zip_xlsx only handles XLSX */
    function write_zip_xlsxb(wb/*:Workbook*/, opts/*:WriteOpts*/)/*:ZIP*/ {
    	_shapeid = 1024;
    	if(wb && !wb.SSF) {
    		wb.SSF = dup(table_fmt);
    	}
    	if(wb && wb.SSF) {
    		make_ssf(); SSF_load_table(wb.SSF);
    		// $FlowIgnore
    		opts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;
    		opts.ssf = wb.SSF;
    	}
    	opts.rels = {}; opts.wbrels = {};
    	opts.Strings = /*::((*/[]/*:: :any):SST)*/; opts.Strings.Count = 0; opts.Strings.Unique = 0;
    	if(browser_has_Map) opts.revStrings = new Map();
    	else { opts.revStrings = {}; opts.revStrings.foo = []; delete opts.revStrings.foo; }
    	var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
    	var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
    	var ct = new_ct();
    	fix_write_opts(opts = opts || {});
    	var zip = zip_new();
    	var f = "", rId = 0;

    	opts.cellXfs = [];
    	get_cell_style(opts.cellXfs, {}, {revssf:{"General":0}});

    	if(!wb.Props) wb.Props = {};

    	f = "docProps/core.xml";
    	zip_add_file(zip, f, write_core_props(wb.Props, opts));
    	ct.coreprops.push(f);
    	add_rels(opts.rels, 2, f, RELS.CORE_PROPS);

    	/*::if(!wb.Props) throw "unreachable"; */
    	f = "docProps/app.xml";
    	if(wb.Props && wb.Props.SheetNames);
    	else if(!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
    	else {
    		var _sn = [];
    		for(var _i = 0; _i < wb.SheetNames.length; ++_i)
    			if((wb.Workbook.Sheets[_i]||{}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
    		wb.Props.SheetNames = _sn;
    	}
    	wb.Props.Worksheets = wb.Props.SheetNames.length;
    	zip_add_file(zip, f, write_ext_props(wb.Props));
    	ct.extprops.push(f);
    	add_rels(opts.rels, 3, f, RELS.EXT_PROPS);

    	if(wb.Custprops !== wb.Props && keys(wb.Custprops||{}).length > 0) {
    		f = "docProps/custom.xml";
    		zip_add_file(zip, f, write_cust_props(wb.Custprops));
    		ct.custprops.push(f);
    		add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
    	}

    	for(rId=1;rId <= wb.SheetNames.length; ++rId) {
    		var wsrels = {'!id':{}};
    		var ws = wb.Sheets[wb.SheetNames[rId-1]];
    		var _type = (ws || {})["!type"] || "sheet";
    		switch(_type) {
    		case "chart":
    			/* falls through */
    		default:
    			f = "xl/worksheets/sheet" + rId + "." + wbext;
    			zip_add_file(zip, f, write_ws(rId-1, f, opts, wb, wsrels));
    			ct.sheets.push(f);
    			add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
    		}

    		if(ws) {
    			var comments = ws['!comments'];
    			var need_vml = false;
    			var cf = "";
    			if(comments && comments.length > 0) {
    				cf = "xl/comments" + rId + "." + wbext;
    				zip_add_file(zip, cf, write_cmnt(comments, cf));
    				ct.comments.push(cf);
    				add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
    				need_vml = true;
    			}
    			if(ws['!legacy']) {
    				if(need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + (rId) + ".vml", write_comments_vml(rId, ws['!comments']));
    			}
    			delete ws['!comments'];
    			delete ws['!legacy'];
    		}

    		if(wsrels['!id'].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
    	}

    	if(opts.Strings != null && opts.Strings.length > 0) {
    		f = "xl/sharedStrings." + wbext;
    		zip_add_file(zip, f, write_sst(opts.Strings, f, opts));
    		ct.strs.push(f);
    		add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
    	}

    	f = "xl/workbook." + wbext;
    	zip_add_file(zip, f, write_wb(wb, f));
    	ct.workbooks.push(f);
    	add_rels(opts.rels, 1, f, RELS.WB);

    	/* TODO: something more intelligent with themes */

    	f = "xl/theme/theme1.xml";
    	zip_add_file(zip, f, write_theme(wb.Themes, opts));
    	ct.themes.push(f);
    	add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);

    	/* TODO: something more intelligent with styles */

    	f = "xl/styles." + wbext;
    	zip_add_file(zip, f, write_sty(wb, f, opts));
    	ct.styles.push(f);
    	add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);

    	if(wb.vbaraw && vbafmt) {
    		f = "xl/vbaProject.bin";
    		zip_add_file(zip, f, wb.vbaraw);
    		ct.vba.push(f);
    		add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
    	}

    	f = "xl/metadata." + wbext;
    	zip_add_file(zip, f, write_xlmeta(f));
    	ct.metadata.push(f);
    	add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);

    	zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
    	zip_add_file(zip, '_rels/.rels', write_rels(opts.rels));
    	zip_add_file(zip, 'xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));

    	delete opts.revssf; delete opts.ssf;
    	return zip;
    }

    function write_zip_xlsx(wb/*:Workbook*/, opts/*:WriteOpts*/)/*:ZIP*/ {
    	_shapeid = 1024;
    	if(wb && !wb.SSF) {
    		wb.SSF = dup(table_fmt);
    	}
    	if(wb && wb.SSF) {
    		make_ssf(); SSF_load_table(wb.SSF);
    		// $FlowIgnore
    		opts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;
    		opts.ssf = wb.SSF;
    	}
    	opts.rels = {}; opts.wbrels = {};
    	opts.Strings = /*::((*/[]/*:: :any):SST)*/; opts.Strings.Count = 0; opts.Strings.Unique = 0;
    	if(browser_has_Map) opts.revStrings = new Map();
    	else { opts.revStrings = {}; opts.revStrings.foo = []; delete opts.revStrings.foo; }
    	var wbext = "xml";
    	var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
    	var ct = new_ct();
    	fix_write_opts(opts = opts || {});
    	var zip = zip_new();
    	var f = "", rId = 0;

    	opts.cellXfs = [];
    	get_cell_style(opts.cellXfs, {}, {revssf:{"General":0}});

    	if(!wb.Props) wb.Props = {};

    	f = "docProps/core.xml";
    	zip_add_file(zip, f, write_core_props(wb.Props, opts));
    	ct.coreprops.push(f);
    	add_rels(opts.rels, 2, f, RELS.CORE_PROPS);

    	/*::if(!wb.Props) throw "unreachable"; */
    	f = "docProps/app.xml";
    	if(wb.Props && wb.Props.SheetNames);
    	else if(!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
    	else {
    		var _sn = [];
    		for(var _i = 0; _i < wb.SheetNames.length; ++_i)
    			if((wb.Workbook.Sheets[_i]||{}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
    		wb.Props.SheetNames = _sn;
    	}
    	wb.Props.Worksheets = wb.Props.SheetNames.length;
    	zip_add_file(zip, f, write_ext_props(wb.Props));
    	ct.extprops.push(f);
    	add_rels(opts.rels, 3, f, RELS.EXT_PROPS);

    	if(wb.Custprops !== wb.Props && keys(wb.Custprops||{}).length > 0) {
    		f = "docProps/custom.xml";
    		zip_add_file(zip, f, write_cust_props(wb.Custprops));
    		ct.custprops.push(f);
    		add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
    	}

    	var people = ["SheetJ5"];
    	opts.tcid = 0;

    	for(rId=1;rId <= wb.SheetNames.length; ++rId) {
    		var wsrels = {'!id':{}};
    		var ws = wb.Sheets[wb.SheetNames[rId-1]];
    		var _type = (ws || {})["!type"] || "sheet";
    		switch(_type) {
    		case "chart":
    			/* falls through */
    		default:
    			f = "xl/worksheets/sheet" + rId + "." + wbext;
    			zip_add_file(zip, f, write_ws_xml(rId-1, opts, wb, wsrels));
    			ct.sheets.push(f);
    			add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
    		}

    		if(ws) {
    			var comments = ws['!comments'];
    			var need_vml = false;
    			var cf = "";
    			if(comments && comments.length > 0) {
    				var needtc = false;
    				comments.forEach(function(carr) {
    					carr[1].forEach(function(c) { if(c.T == true) needtc = true; });
    				});
    				if(needtc) {
    					cf = "xl/threadedComments/threadedComment" + rId + "." + wbext;
    					zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
    					ct.threadedcomments.push(cf);
    					add_rels(wsrels, -1, "../threadedComments/threadedComment" + rId + "." + wbext, RELS.TCMNT);
    				}

    				cf = "xl/comments" + rId + "." + wbext;
    				zip_add_file(zip, cf, write_comments_xml(comments));
    				ct.comments.push(cf);
    				add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
    				need_vml = true;
    			}
    			if(ws['!legacy']) {
    				if(need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + (rId) + ".vml", write_comments_vml(rId, ws['!comments']));
    			}
    			delete ws['!comments'];
    			delete ws['!legacy'];
    		}

    		if(wsrels['!id'].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
    	}

    	if(opts.Strings != null && opts.Strings.length > 0) {
    		f = "xl/sharedStrings." + wbext;
    		zip_add_file(zip, f, write_sst_xml(opts.Strings, opts));
    		ct.strs.push(f);
    		add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
    	}

    	f = "xl/workbook." + wbext;
    	zip_add_file(zip, f, write_wb_xml(wb));
    	ct.workbooks.push(f);
    	add_rels(opts.rels, 1, f, RELS.WB);

    	/* TODO: something more intelligent with themes */

    	f = "xl/theme/theme1.xml";
    	zip_add_file(zip, f, write_theme(wb.Themes, opts));
    	ct.themes.push(f);
    	add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);

    	/* TODO: something more intelligent with styles */

    	f = "xl/styles." + wbext;
    	zip_add_file(zip, f, write_sty_xml(wb, opts));
    	ct.styles.push(f);
    	add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);

    	if(wb.vbaraw && vbafmt) {
    		f = "xl/vbaProject.bin";
    		zip_add_file(zip, f, wb.vbaraw);
    		ct.vba.push(f);
    		add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
    	}

    	f = "xl/metadata." + wbext;
    	zip_add_file(zip, f, write_xlmeta_xml());
    	ct.metadata.push(f);
    	add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);

    	if(people.length > 1) {
    		f = "xl/persons/person.xml";
    		zip_add_file(zip, f, write_people_xml(people));
    		ct.people.push(f);
    		add_rels(opts.wbrels, -1, "persons/person.xml", RELS.PEOPLE);
    	}

    	zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
    	zip_add_file(zip, '_rels/.rels', write_rels(opts.rels));
    	zip_add_file(zip, 'xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));

    	delete opts.revssf; delete opts.ssf;
    	return zip;
    }

    function firstbyte(f/*:RawData*/,o/*:?TypeOpts*/)/*:Array<number>*/ {
    	var x = "";
    	switch((o||{}).type || "base64") {
    		case 'buffer': return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
    		case 'base64': x = Base64_decode(f.slice(0,12)); break;
    		case 'binary': x = f; break;
    		case 'array':  return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
    		default: throw new Error("Unrecognized type " + (o && o.type || "undefined"));
    	}
    	return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];
    }

    function read_cfb(cfb/*:CFBContainer*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	if(CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
    	return parse_xlscfb(cfb, opts);
    }

    function read_zip(data/*:RawData*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	var zip, d = data;
    	var o = opts||{};
    	if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
    	zip = zip_read(d, o);
    	return parse_zip(zip, o);
    }

    function read_plaintext(data/*:string*/, o/*:ParseOpts*/)/*:Workbook*/ {
    	var i = 0;
    	main: while(i < data.length) switch(data.charCodeAt(i)) {
    		case 0x0A: case 0x0D: case 0x20: ++i; break;
    		case 0x3C: return parse_xlml(data.slice(i),o);
    		default: break main;
    	}
    	return PRN.to_workbook(data, o);
    }

    function read_plaintext_raw(data/*:RawData*/, o/*:ParseOpts*/)/*:Workbook*/ {
    	var str = "", bytes = firstbyte(data, o);
    	switch(o.type) {
    		case 'base64': str = Base64_decode(data); break;
    		case 'binary': str = data; break;
    		case 'buffer': str = data.toString('binary'); break;
    		case 'array': str = cc2str(data); break;
    		default: throw new Error("Unrecognized type " + o.type);
    	}
    	if(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);
    	o.type = "binary";
    	return read_plaintext(str, o);
    }

    function read_utf16(data/*:RawData*/, o/*:ParseOpts*/)/*:Workbook*/ {
    	var d = data;
    	if(o.type == 'base64') d = Base64_decode(d);
    	d = $cptable.utils.decode(1200, d.slice(2), 'str');
    	o.type = "binary";
    	return read_plaintext(d, o);
    }

    function bstrify(data/*:string*/)/*:string*/ {
    	return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
    }

    function read_prn(data, d, o, str) {
    	if(str) { o.type = "string"; return PRN.to_workbook(data, o); }
    	return PRN.to_workbook(d, o);
    }

    function readSync(data/*:RawData*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	reset_cp();
    	var o = opts||{};
    	if(typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = "array", o));
    	if(typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && !o.type) o.type = typeof Deno !== "undefined" ? "buffer" : "array";
    	var d = data, n = [0,0,0,0], str = false;
    	if(o.cellStyles) { o.cellNF = true; o.sheetStubs = true; }
    	_ssfopts = {};
    	if(o.dateNF) _ssfopts.dateNF = o.dateNF;
    	if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
    	if(o.type == "file") { o.type = has_buf ? "buffer" : "binary"; d = read_binary(data); if(typeof Uint8Array !== 'undefined' && !has_buf) o.type = "array"; }
    	if(o.type == "string") { str = true; o.type = "binary"; o.codepage = 65001; d = bstrify(data); }
    	if(o.type == 'array' && typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && typeof ArrayBuffer !== 'undefined') {
    		// $FlowIgnore
    		var ab=new ArrayBuffer(3), vu=new Uint8Array(ab); vu.foo="bar";
    		// $FlowIgnore
    		if(!vu.foo) {o=dup(o); o.type='array'; return readSync(ab2a(d), o);}
    	}
    	switch((n = firstbyte(d, o))[0]) {
    		case 0xD0: if(n[1] === 0xCF && n[2] === 0x11 && n[3] === 0xE0 && n[4] === 0xA1 && n[5] === 0xB1 && n[6] === 0x1A && n[7] === 0xE1) return read_cfb(CFB.read(d, o), o); break;
    		case 0x09: if(n[1] <= 0x08) return parse_xlscfb(d, o); break;
    		case 0x3C: return parse_xlml(d, o);
    		case 0x49:
    			if(n[1] === 0x49 && n[2] === 0x2a && n[3] === 0x00) throw new Error("TIFF Image File is not a spreadsheet");
    			if(n[1] === 0x44) return read_wb_ID(d, o);
    			break;
    		case 0x54: if(n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o); break;
    		case 0x50: return (n[1] === 0x4B && n[2] < 0x09 && n[3] < 0x09) ? read_zip(d, o) : read_prn(data, d, o, str);
    		case 0xEF: return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);
    		case 0xFF:
    			if(n[1] === 0xFE) { return read_utf16(d, o); }
    			else if(n[1] === 0x00 && n[2] === 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
    			break;
    		case 0x00:
    			if(n[1] === 0x00) {
    				if(n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
    				if(n[2] === 0x00 && (n[3] === 0x08 || n[3] === 0x09)) return WK_.to_workbook(d, o);
    			}
    			break;
    		case 0x03: case 0x83: case 0x8B: case 0x8C: return DBF.to_workbook(d, o);
    		case 0x7B: if(n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return RTF.to_workbook(d, o); break;
    		case 0x0A: case 0x0D: case 0x20: return read_plaintext_raw(d, o);
    		case 0x89: if(n[1] === 0x50 && n[2] === 0x4E && n[3] === 0x47) throw new Error("PNG Image File is not a spreadsheet"); break;
    	}
    	if(DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
    	return read_prn(data, d, o, str);
    }

    function readFileSync(filename/*:string*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	var o = opts||{}; o.type = 'file';
    	return readSync(filename, o);
    }
    function write_cfb_ctr(cfb/*:CFBContainer*/, o/*:WriteOpts*/)/*:any*/ {
    	switch(o.type) {
    		case "base64": case "binary": break;
    		case "buffer": case "array": o.type = ""; break;
    		case "file": return write_dl(o.file, CFB.write(cfb, {type:has_buf ? 'buffer' : ""}));
    		case "string": throw new Error("'string' output type invalid for '" + o.bookType + "' files");
    		default: throw new Error("Unrecognized type " + o.type);
    	}
    	return CFB.write(cfb, o);
    }

    /*:: declare var encrypt_agile:any; */
    function write_zip_type(wb/*:Workbook*/, opts/*:?WriteOpts*/)/*:any*/ {
    	var o = dup(opts||{});
    	var z = write_zip(wb, o);
    	return write_zip_denouement(z, o);
    }
    function write_zip_typeXLSX(wb/*:Workbook*/, opts/*:?WriteOpts*/)/*:any*/ {
    	var o = dup(opts||{});
    	var z = write_zip_xlsx(wb, o);
    	return write_zip_denouement(z, o);
    }
    function write_zip_denouement(z/*:any*/, o/*:?WriteOpts*/)/*:any*/ {
    	var oopts = {};
    	var ftype = has_buf ? "nodebuffer" : (typeof Uint8Array !== "undefined" ? "array" : "string");
    	if(o.compression) oopts.compression = 'DEFLATE';
    	if(o.password) oopts.type = ftype;
    	else switch(o.type) {
    		case "base64": oopts.type = "base64"; break;
    		case "binary": oopts.type = "string"; break;
    		case "string": throw new Error("'string' output type invalid for '" + o.bookType + "' files");
    		case "buffer":
    		case "file": oopts.type = ftype; break;
    		default: throw new Error("Unrecognized type " + o.type);
    	}
    	var out = z.FullPaths ? CFB.write(z, {fileType:"zip", type: /*::(*/{"nodebuffer": "buffer", "string": "binary"}/*:: :any)*/[oopts.type] || oopts.type, compression: !!o.compression}) : z.generate(oopts);
    	if(typeof Deno !== "undefined") {
    		if(typeof out == "string") {
    			if(o.type == "binary" || o.type == "base64") return out;
    			out = new Uint8Array(s2ab(out));
    		}
    	}
    /*jshint -W083 */
    	if(o.password && typeof encrypt_agile !== 'undefined') return write_cfb_ctr(encrypt_agile(out, o.password), o); // eslint-disable-line no-undef
    /*jshint +W083 */
    	if(o.type === "file") return write_dl(o.file, out);
    	return o.type == "string" ? utf8read(/*::(*/out/*:: :any)*/) : out;
    }

    function write_cfb_type(wb/*:Workbook*/, opts/*:?WriteOpts*/)/*:any*/ {
    	var o = opts||{};
    	var cfb/*:CFBContainer*/ = write_xlscfb(wb, o);
    	return write_cfb_ctr(cfb, o);
    }

    function write_string_type(out/*:string*/, opts/*:WriteOpts*/, bom/*:?string*/)/*:any*/ {
    	if(!bom) bom = "";
    	var o = bom + out;
    	switch(opts.type) {
    		case "base64": return Base64_encode(utf8write(o));
    		case "binary": return utf8write(o);
    		case "string": return out;
    		case "file": return write_dl(opts.file, o, 'utf8');
    		case "buffer": {
    			if(has_buf) return Buffer_from(o, 'utf8');
    			else if(typeof TextEncoder !== "undefined") return new TextEncoder().encode(o);
    			else return write_string_type(o, {type:'binary'}).split("").map(function(c) { return c.charCodeAt(0); });
    		}
    	}
    	throw new Error("Unrecognized type " + opts.type);
    }

    function write_stxt_type(out/*:string*/, opts/*:WriteOpts*/)/*:any*/ {
    	switch(opts.type) {
    		case "base64": return Base64_encode(out);
    		case "binary": return out;
    		case "string": return out; /* override in sheet_to_txt */
    		case "file": return write_dl(opts.file, out, 'binary');
    		case "buffer": {
    			if(has_buf) return Buffer_from(out, 'binary');
    			else return out.split("").map(function(c) { return c.charCodeAt(0); });
    		}
    	}
    	throw new Error("Unrecognized type " + opts.type);
    }

    /* TODO: test consistency */
    function write_binary_type(out, opts/*:WriteOpts*/)/*:any*/ {
    	switch(opts.type) {
    		case "string":
    		case "base64":
    		case "binary":
    			var bstr = "";
    			// $FlowIgnore
    			for(var i = 0; i < out.length; ++i) bstr += String.fromCharCode(out[i]);
    			return opts.type == 'base64' ? Base64_encode(bstr) : opts.type == 'string' ? utf8read(bstr) : bstr;
    		case "file": return write_dl(opts.file, out);
    		case "buffer": return out;
    		default: throw new Error("Unrecognized type " + opts.type);
    	}
    }

    function writeSyncXLSX(wb/*:Workbook*/, opts/*:?WriteOpts*/) {
    	reset_cp();
    	check_wb(wb);
    	var o = dup(opts||{});
    	if(o.cellStyles) { o.cellNF = true; o.sheetStubs = true; }
    	if(o.type == "array") { o.type = "binary"; var out/*:string*/ = (writeSyncXLSX(wb, o)/*:any*/); o.type = "array"; return s2ab(out); }
    	return write_zip_typeXLSX(wb, o);
    }

    function writeSync(wb/*:Workbook*/, opts/*:?WriteOpts*/) {
    	reset_cp();
    	check_wb(wb);
    	var o = dup(opts||{});
    	if(o.cellStyles) { o.cellNF = true; o.sheetStubs = true; }
    	if(o.type == "array") { o.type = "binary"; var out/*:string*/ = (writeSync(wb, o)/*:any*/); o.type = "array"; return s2ab(out); }
    	var idx = 0;
    	if(o.sheet) {
    		if(typeof o.sheet == "number") idx = o.sheet;
    		else idx = wb.SheetNames.indexOf(o.sheet);
    		if(!wb.SheetNames[idx]) throw new Error("Sheet not found: " + o.sheet + " : " + (typeof o.sheet));
    	}
    	switch(o.bookType || 'xlsb') {
    		case 'xml':
    		case 'xlml': return write_string_type(write_xlml(wb, o), o);
    		case 'slk':
    		case 'sylk': return write_string_type(SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
    		case 'htm':
    		case 'html': return write_string_type(sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o), o);
    		case 'txt': return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o), o);
    		case 'csv': return write_string_type(sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o), o, "\ufeff");
    		case 'dif': return write_string_type(DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
    		case 'dbf': return write_binary_type(DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
    		case 'prn': return write_string_type(PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
    		case 'rtf': return write_string_type(RTF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
    		case 'eth': return write_string_type(ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
    		case 'fods': return write_string_type(write_ods(wb, o), o);
    		case 'wk1': return write_binary_type(WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o), o);
    		case 'wk3': return write_binary_type(WK_.book_to_wk3(wb, o), o);
    		case 'biff2': if(!o.biff) o.biff = 2; /* falls through */
    		case 'biff3': if(!o.biff) o.biff = 3; /* falls through */
    		case 'biff4': if(!o.biff) o.biff = 4; return write_binary_type(write_biff_buf(wb, o), o);
    		case 'biff5': if(!o.biff) o.biff = 5; /* falls through */
    		case 'biff8':
    		case 'xla':
    		case 'xls': if(!o.biff) o.biff = 8; return write_cfb_type(wb, o);
    		case 'xlsx':
    		case 'xlsm':
    		case 'xlam':
    		case 'xlsb':
    		case 'numbers':
    		case 'ods': return write_zip_type(wb, o);
    		default: throw new Error ("Unrecognized bookType |" + o.bookType + "|");
    	}
    }

    function resolve_book_type(o/*:WriteFileOpts*/) {
    	if(o.bookType) return;
    	var _BT = {
    		"xls": "biff8",
    		"htm": "html",
    		"slk": "sylk",
    		"socialcalc": "eth",
    		"Sh33tJS": "WTF"
    	};
    	var ext = o.file.slice(o.file.lastIndexOf(".")).toLowerCase();
    	if(ext.match(/^\.[a-z]+$/)) o.bookType = ext.slice(1);
    	o.bookType = _BT[o.bookType] || o.bookType;
    }

    function writeFileSync(wb/*:Workbook*/, filename/*:string*/, opts/*:?WriteFileOpts*/) {
    	var o = opts||{}; o.type = 'file';
    	o.file = filename;
    	resolve_book_type(o);
    	return writeSync(wb, o);
    }

    function writeFileSyncXLSX(wb/*:Workbook*/, filename/*:string*/, opts/*:?WriteFileOpts*/) {
    	var o = opts||{}; o.type = 'file';
    	o.file = filename;
    	resolve_book_type(o);
    	return writeSyncXLSX(wb, o);
    }


    function writeFileAsync(filename/*:string*/, wb/*:Workbook*/, opts/*:?WriteFileOpts*/, cb/*:?(e?:ErrnoError)=>void*/) {
    	var o = opts||{}; o.type = 'file';
    	o.file = filename;
    	resolve_book_type(o);
    	o.type = 'buffer';
    	var _cb = cb; if(!(_cb instanceof Function)) _cb = (opts/*:any*/);
    	return _fs.writeFile(filename, writeSync(wb, o), _cb);
    }
    /*::
    type MJRObject = {
    	row: any;
    	isempty: boolean;
    };
    */
    function make_json_row(sheet/*:Worksheet*/, r/*:Range*/, R/*:number*/, cols/*:Array<string>*/, header/*:number*/, hdr/*:Array<any>*/, dense/*:boolean*/, o/*:Sheet2JSONOpts*/)/*:MJRObject*/ {
    	var rr = encode_row(R);
    	var defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
    	var isempty = true;
    	var row/*:any*/ = (header === 1) ? [] : {};
    	if(header !== 1) {
    		if(Object.defineProperty) try { Object.defineProperty(row, '__rowNum__', {value:R, enumerable:false}); } catch(e) { row.__rowNum__ = R; }
    		else row.__rowNum__ = R;
    	}
    	if(!dense || sheet[R]) for (var C = r.s.c; C <= r.e.c; ++C) {
    		var val = dense ? sheet[R][C] : sheet[cols[C] + rr];
    		if(val === undefined || val.t === undefined) {
    			if(defval === undefined) continue;
    			if(hdr[C] != null) { row[hdr[C]] = defval; }
    			continue;
    		}
    		var v = val.v;
    		switch(val.t){
    			case 'z': if(v == null) break; continue;
    			case 'e': v = (v == 0 ? null : void 0); break;
    			case 's': case 'd': case 'b': case 'n': break;
    			default: throw new Error('unrecognized type ' + val.t);
    		}
    		if(hdr[C] != null) {
    			if(v == null) {
    				if(val.t == "e" && v === null) row[hdr[C]] = null;
    				else if(defval !== undefined) row[hdr[C]] = defval;
    				else if(raw && v === null) row[hdr[C]] = null;
    				else continue;
    			} else {
    				row[hdr[C]] = raw && (val.t !== "n" || (val.t === "n" && o.rawNumbers !== false)) ? v : format_cell(val,v,o);
    			}
    			if(v != null) isempty = false;
    		}
    	}
    	return { row: row, isempty: isempty };
    }


    function sheet_to_json(sheet/*:Worksheet*/, opts/*:?Sheet2JSONOpts*/) {
    	if(sheet == null || sheet["!ref"] == null) return [];
    	var val = {t:'n',v:0}, header = 0, offset = 1, hdr/*:Array<any>*/ = [], v=0, vv="";
    	var r = {s:{r:0,c:0},e:{r:0,c:0}};
    	var o = opts || {};
    	var range = o.range != null ? o.range : sheet["!ref"];
    	if(o.header === 1) header = 1;
    	else if(o.header === "A") header = 2;
    	else if(Array.isArray(o.header)) header = 3;
    	else if(o.header == null) header = 0;
    	switch(typeof range) {
    		case 'string': r = safe_decode_range(range); break;
    		case 'number': r = safe_decode_range(sheet["!ref"]); r.s.r = range; break;
    		default: r = range;
    	}
    	if(header > 0) offset = 0;
    	var rr = encode_row(r.s.r);
    	var cols/*:Array<string>*/ = [];
    	var out/*:Array<any>*/ = [];
    	var outi = 0, counter = 0;
    	var dense = Array.isArray(sheet);
    	var R = r.s.r, C = 0;
    	var header_cnt = {};
    	if(dense && !sheet[R]) sheet[R] = [];
    	var colinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!cols"] || [];
    	var rowinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!rows"] || [];
    	for(C = r.s.c; C <= r.e.c; ++C) {
    		if(((colinfo[C]||{}).hidden)) continue;
    		cols[C] = encode_col(C);
    		val = dense ? sheet[R][C] : sheet[cols[C] + rr];
    		switch(header) {
    			case 1: hdr[C] = C - r.s.c; break;
    			case 2: hdr[C] = cols[C]; break;
    			case 3: hdr[C] = o.header[C - r.s.c]; break;
    			default:
    				if(val == null) val = {w: "__EMPTY", t: "s"};
    				vv = v = format_cell(val, null, o);
    				counter = header_cnt[v] || 0;
    				if(!counter) header_cnt[v] = 1;
    				else {
    					do { vv = v + "_" + (counter++); } while(header_cnt[vv]); header_cnt[v] = counter;
    					header_cnt[vv] = 1;
    				}
    				hdr[C] = vv;
    		}
    	}
    	for (R = r.s.r + offset; R <= r.e.r; ++R) {
    		if ((rowinfo[R]||{}).hidden) continue;
    		var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
    		if((row.isempty === false) || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;
    	}
    	out.length = outi;
    	return out;
    }

    var qreg = /"/g;
    function make_csv_row(sheet/*:Worksheet*/, r/*:Range*/, R/*:number*/, cols/*:Array<string>*/, fs/*:number*/, rs/*:number*/, FS/*:string*/, o/*:Sheet2CSVOpts*/)/*:?string*/ {
    	var isempty = true;
    	var row/*:Array<string>*/ = [], txt = "", rr = encode_row(R);
    	for(var C = r.s.c; C <= r.e.c; ++C) {
    		if (!cols[C]) continue;
    		var val = o.dense ? (sheet[R]||[])[C]: sheet[cols[C] + rr];
    		if(val == null) txt = "";
    		else if(val.v != null) {
    			isempty = false;
    			txt = ''+(o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));
    			for(var i = 0, cc = 0; i !== txt.length; ++i) if((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {txt = "\"" + txt.replace(qreg, '""') + "\""; break; }
    			if(txt == "ID") txt = '"ID"';
    		} else if(val.f != null && !val.F) {
    			isempty = false;
    			txt = '=' + val.f; if(txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
    		} else txt = "";
    		/* NOTE: Excel CSV does not support array formulae */
    		row.push(txt);
    	}
    	if(o.blankrows === false && isempty) return null;
    	return row.join(FS);
    }

    function sheet_to_csv(sheet/*:Worksheet*/, opts/*:?Sheet2CSVOpts*/)/*:string*/ {
    	var out/*:Array<string>*/ = [];
    	var o = opts == null ? {} : opts;
    	if(sheet == null || sheet["!ref"] == null) return "";
    	var r = safe_decode_range(sheet["!ref"]);
    	var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
    	var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
    	var endregex = new RegExp((FS=="|" ? "\\|" : FS)+"+$");
    	var row = "", cols/*:Array<string>*/ = [];
    	o.dense = Array.isArray(sheet);
    	var colinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!cols"] || [];
    	var rowinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!rows"] || [];
    	for(var C = r.s.c; C <= r.e.c; ++C) if (!((colinfo[C]||{}).hidden)) cols[C] = encode_col(C);
    	var w = 0;
    	for(var R = r.s.r; R <= r.e.r; ++R) {
    		if ((rowinfo[R]||{}).hidden) continue;
    		row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
    		if(row == null) { continue; }
    		if(o.strip) row = row.replace(endregex,"");
    		if(row || (o.blankrows !== false)) out.push((w++ ? RS : "") + row);
    	}
    	delete o.dense;
    	return out.join("");
    }

    function sheet_to_txt(sheet/*:Worksheet*/, opts/*:?Sheet2CSVOpts*/) {
    	if(!opts) opts = {}; opts.FS = "\t"; opts.RS = "\n";
    	var s = sheet_to_csv(sheet, opts);
    	if(typeof $cptable == 'undefined' || opts.type == 'string') return s;
    	var o = $cptable.utils.encode(1200, s, 'str');
    	return String.fromCharCode(255) + String.fromCharCode(254) + o;
    }

    function sheet_to_formulae(sheet/*:Worksheet*/)/*:Array<string>*/ {
    	var y = "", x, val="";
    	if(sheet == null || sheet["!ref"] == null) return [];
    	var r = safe_decode_range(sheet['!ref']), rr = "", cols/*:Array<string>*/ = [], C;
    	var cmds/*:Array<string>*/ = [];
    	var dense = Array.isArray(sheet);
    	for(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
    	for(var R = r.s.r; R <= r.e.r; ++R) {
    		rr = encode_row(R);
    		for(C = r.s.c; C <= r.e.c; ++C) {
    			y = cols[C] + rr;
    			x = dense ? (sheet[R]||[])[C] : sheet[y];
    			val = "";
    			if(x === undefined) continue;
    			else if(x.F != null) {
    				y = x.F;
    				if(!x.f) continue;
    				val = x.f;
    				if(y.indexOf(":") == -1) y = y + ":" + y;
    			}
    			if(x.f != null) val = x.f;
    			else if(x.t == 'z') continue;
    			else if(x.t == 'n' && x.v != null) val = "" + x.v;
    			else if(x.t == 'b') val = x.v ? "TRUE" : "FALSE";
    			else if(x.w !== undefined) val = "'" + x.w;
    			else if(x.v === undefined) continue;
    			else if(x.t == 's') val = "'" + x.v;
    			else val = ""+x.v;
    			cmds[cmds.length] = y + "=" + val;
    		}
    	}
    	return cmds;
    }

    function sheet_add_json(_ws/*:?Worksheet*/, js/*:Array<any>*/, opts)/*:Worksheet*/ {
    	var o = opts || {};
    	var offset = +!o.skipHeader;
    	var ws/*:Worksheet*/ = _ws || ({}/*:any*/);
    	var _R = 0, _C = 0;
    	if(ws && o.origin != null) {
    		if(typeof o.origin == 'number') _R = o.origin;
    		else {
    			var _origin/*:CellAddress*/ = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
    			_R = _origin.r; _C = _origin.c;
    		}
    	}
    	var cell/*:Cell*/;
    	var range/*:Range*/ = ({s: {c:0, r:0}, e: {c:_C, r:_R + js.length - 1 + offset}}/*:any*/);
    	if(ws['!ref']) {
    		var _range = safe_decode_range(ws['!ref']);
    		range.e.c = Math.max(range.e.c, _range.e.c);
    		range.e.r = Math.max(range.e.r, _range.e.r);
    		if(_R == -1) { _R = _range.e.r + 1; range.e.r = _R + js.length - 1 + offset; }
    	} else {
    		if(_R == -1) { _R = 0; range.e.r = js.length - 1 + offset; }
    	}
    	var hdr/*:Array<string>*/ = o.header || [], C = 0;

    	js.forEach(function (JS, R/*:number*/) {
    		keys(JS).forEach(function(k) {
    			if((C=hdr.indexOf(k)) == -1) hdr[C=hdr.length] = k;
    			var v = JS[k];
    			var t = 'z';
    			var z = "";
    			var ref = encode_cell({c:_C + C,r:_R + R + offset});
    			cell = ws_get_cell_stub(ws, ref);
    			if(v && typeof v === 'object' && !(v instanceof Date)){
    				ws[ref] = v;
    			} else {
    				if(typeof v == 'number') t = 'n';
    				else if(typeof v == 'boolean') t = 'b';
    				else if(typeof v == 'string') t = 's';
    				else if(v instanceof Date) {
    					t = 'd';
    					if(!o.cellDates) { t = 'n'; v = datenum(v); }
    					z = (o.dateNF || table_fmt[14]);
    				}
    				else if(v === null && o.nullError) { t = 'e'; v = 0; }
    				if(!cell) ws[ref] = cell = ({t:t, v:v}/*:any*/);
    				else {
    					cell.t = t; cell.v = v;
    					delete cell.w; delete cell.R;
    					if(z) cell.z = z;
    				}
    				if(z) cell.z = z;
    			}
    		});
    	});
    	range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
    	var __R = encode_row(_R);
    	if(offset) for(C = 0; C < hdr.length; ++C) ws[encode_col(C + _C) + __R] = {t:'s', v:hdr[C]};
    	ws['!ref'] = encode_range(range);
    	return ws;
    }
    function json_to_sheet(js/*:Array<any>*/, opts)/*:Worksheet*/ { return sheet_add_json(null, js, opts); }

    /* get cell, creating a stub if necessary */
    function ws_get_cell_stub(ws/*:Worksheet*/, R, C/*:?number*/)/*:Cell*/ {
    	/* A1 cell address */
    	if(typeof R == "string") {
    		/* dense */
    		if(Array.isArray(ws)) {
    			var RC = decode_cell(R);
    			if(!ws[RC.r]) ws[RC.r] = [];
    			return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = {t:'z'});
    		}
    		return ws[R] || (ws[R] = {t:'z'});
    	}
    	/* cell address object */
    	if(typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
    	/* R and C are 0-based indices */
    	return ws_get_cell_stub(ws, encode_cell({r:R,c:C||0}));
    }

    /* find sheet index for given name / validate index */
    function wb_sheet_idx(wb/*:Workbook*/, sh/*:number|string*/) {
    	if(typeof sh == "number") {
    		if(sh >= 0 && wb.SheetNames.length > sh) return sh;
    		throw new Error("Cannot find sheet # " + sh);
    	} else if(typeof sh == "string") {
    		var idx = wb.SheetNames.indexOf(sh);
    		if(idx > -1) return idx;
    		throw new Error("Cannot find sheet name |" + sh + "|");
    	} else throw new Error("Cannot find sheet |" + sh + "|");
    }

    /* simple blank workbook object */
    function book_new()/*:Workbook*/ {
    	return { SheetNames: [], Sheets: {} };
    }

    /* add a worksheet to the end of a given workbook */
    function book_append_sheet(wb/*:Workbook*/, ws/*:Worksheet*/, name/*:?string*/, roll/*:?boolean*/)/*:string*/ {
    	var i = 1;
    	if(!name) for(; i <= 0xFFFF; ++i, name = undefined) if(wb.SheetNames.indexOf(name = "Sheet" + i) == -1) break;
    	if(!name || wb.SheetNames.length >= 0xFFFF) throw new Error("Too many worksheets");
    	if(roll && wb.SheetNames.indexOf(name) >= 0) {
    		var m = name.match(/(^.*?)(\d+)$/);
    		i = m && +m[2] || 0;
    		var root = m && m[1] || name;
    		for(++i; i <= 0xFFFF; ++i) if(wb.SheetNames.indexOf(name = root + i) == -1) break;
    	}
    	check_ws_name(name);
    	if(wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");

    	wb.SheetNames.push(name);
    	wb.Sheets[name] = ws;
    	return name;
    }

    /* set sheet visibility (visible/hidden/very hidden) */
    function book_set_sheet_visibility(wb/*:Workbook*/, sh/*:number|string*/, vis/*:number*/) {
    	if(!wb.Workbook) wb.Workbook = {};
    	if(!wb.Workbook.Sheets) wb.Workbook.Sheets = [];

    	var idx = wb_sheet_idx(wb, sh);
    	// $FlowIgnore
    	if(!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};

    	switch(vis) {
    		case 0: case 1: case 2: break;
    		default: throw new Error("Bad sheet visibility setting " + vis);
    	}
    	// $FlowIgnore
    	wb.Workbook.Sheets[idx].Hidden = vis;
    }

    /* set number format */
    function cell_set_number_format(cell/*:Cell*/, fmt/*:string|number*/) {
    	cell.z = fmt;
    	return cell;
    }

    /* set cell hyperlink */
    function cell_set_hyperlink(cell/*:Cell*/, target/*:string*/, tooltip/*:?string*/) {
    	if(!target) {
    		delete cell.l;
    	} else {
    		cell.l = ({ Target: target }/*:Hyperlink*/);
    		if(tooltip) cell.l.Tooltip = tooltip;
    	}
    	return cell;
    }
    function cell_set_internal_link(cell/*:Cell*/, range/*:string*/, tooltip/*:?string*/) { return cell_set_hyperlink(cell, "#" + range, tooltip); }

    /* add to cell comments */
    function cell_add_comment(cell/*:Cell*/, text/*:string*/, author/*:?string*/) {
    	if(!cell.c) cell.c = [];
    	cell.c.push({t:text, a:author||"SheetJS"});
    }

    /* set array formula and flush related cells */
    function sheet_set_array_formula(ws/*:Worksheet*/, range, formula/*:string*/, dynamic/*:boolean*/) {
    	var rng = typeof range != "string" ? range : safe_decode_range(range);
    	var rngstr = typeof range == "string" ? range : encode_range(range);
    	for(var R = rng.s.r; R <= rng.e.r; ++R) for(var C = rng.s.c; C <= rng.e.c; ++C) {
    		var cell = ws_get_cell_stub(ws, R, C);
    		cell.t = 'n';
    		cell.F = rngstr;
    		delete cell.v;
    		if(R == rng.s.r && C == rng.s.c) {
    			cell.f = formula;
    			if(dynamic) cell.D = true;
    		}
    	}
    	return ws;
    }

    var utils/*:any*/ = {
    	encode_col: encode_col,
    	encode_row: encode_row,
    	encode_cell: encode_cell,
    	encode_range: encode_range,
    	decode_col: decode_col,
    	decode_row: decode_row,
    	split_cell: split_cell,
    	decode_cell: decode_cell,
    	decode_range: decode_range,
    	format_cell: format_cell,
    	sheet_add_aoa: sheet_add_aoa,
    	sheet_add_json: sheet_add_json,
    	sheet_add_dom: sheet_add_dom,
    	aoa_to_sheet: aoa_to_sheet,
    	json_to_sheet: json_to_sheet,
    	table_to_sheet: parse_dom_table,
    	table_to_book: table_to_book,
    	sheet_to_csv: sheet_to_csv,
    	sheet_to_txt: sheet_to_txt,
    	sheet_to_json: sheet_to_json,
    	sheet_to_html: sheet_to_html,
    	sheet_to_formulae: sheet_to_formulae,
    	sheet_to_row_object_array: sheet_to_json,
    	sheet_get_cell: ws_get_cell_stub,
    	book_new: book_new,
    	book_append_sheet: book_append_sheet,
    	book_set_sheet_visibility: book_set_sheet_visibility,
    	cell_set_number_format: cell_set_number_format,
    	cell_set_hyperlink: cell_set_hyperlink,
    	cell_set_internal_link: cell_set_internal_link,
    	cell_add_comment: cell_add_comment,
    	sheet_set_array_formula: sheet_set_array_formula,
    	consts: {
    		SHEET_VISIBLE: 0,
    		SHEET_HIDDEN: 1,
    		SHEET_VERY_HIDDEN: 2
    	}
    };

    var _Readable;
    function set_readable(R) { _Readable = R; }

    function write_csv_stream(sheet/*:Worksheet*/, opts/*:?Sheet2CSVOpts*/) {
    	var stream = _Readable();
    	var o = opts == null ? {} : opts;
    	if(sheet == null || sheet["!ref"] == null) { stream.push(null); return stream; }
    	var r = safe_decode_range(sheet["!ref"]);
    	var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
    	var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
    	var endregex = new RegExp((FS=="|" ? "\\|" : FS)+"+$");
    	var row/*:?string*/ = "", cols/*:Array<string>*/ = [];
    	o.dense = Array.isArray(sheet);
    	var colinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!cols"] || [];
    	var rowinfo/*:Array<RowInfo>*/ = o.skipHidden && sheet["!rows"] || [];
    	for(var C = r.s.c; C <= r.e.c; ++C) if (!((colinfo[C]||{}).hidden)) cols[C] = encode_col(C);
    	var R = r.s.r;
    	var BOM = false, w = 0;
    	stream._read = function() {
    		if(!BOM) { BOM = true; return stream.push("\uFEFF"); }
    		while(R <= r.e.r) {
    			++R;
    			if ((rowinfo[R-1]||{}).hidden) continue;
    			row = make_csv_row(sheet, r, R-1, cols, fs, rs, FS, o);
    			if(row != null) {
    				if(o.strip) row = row.replace(endregex,"");
    				if(row || (o.blankrows !== false)) return stream.push((w++ ? RS : "") + row);
    			}
    		}
    		return stream.push(null);
    	};
    	return stream;
    }

    function write_html_stream(ws/*:Worksheet*/, opts/*:?Sheet2HTMLOpts*/) {
    	var stream = _Readable();

    	var o = opts || {};
    	var header = o.header != null ? o.header : HTML_BEGIN;
    	var footer = o.footer != null ? o.footer : HTML_END;
    	stream.push(header);
    	var r = decode_range(ws['!ref']);
    	o.dense = Array.isArray(ws);
    	stream.push(make_html_preamble(ws, r, o));
    	var R = r.s.r;
    	var end = false;
    	stream._read = function() {
    		if(R > r.e.r) {
    			if(!end) { end = true; stream.push("</table>" + footer); }
    			return stream.push(null);
    		}
    		while(R <= r.e.r) {
    			stream.push(make_html_row(ws, r, R, o));
    			++R;
    			break;
    		}
    	};
    	return stream;
    }

    function write_json_stream(sheet/*:Worksheet*/, opts/*:?Sheet2CSVOpts*/) {
    	var stream = _Readable({objectMode:true});

    	if(sheet == null || sheet["!ref"] == null) { stream.push(null); return stream; }
    	var val = {t:'n',v:0}, header = 0, offset = 1, hdr/*:Array<any>*/ = [], v=0, vv="";
    	var r = {s:{r:0,c:0},e:{r:0,c:0}};
    	var o = opts || {};
    	var range = o.range != null ? o.range : sheet["!ref"];
    	if(o.header === 1) header = 1;
    	else if(o.header === "A") header = 2;
    	else if(Array.isArray(o.header)) header = 3;
    	switch(typeof range) {
    		case 'string': r = safe_decode_range(range); break;
    		case 'number': r = safe_decode_range(sheet["!ref"]); r.s.r = range; break;
    		default: r = range;
    	}
    	if(header > 0) offset = 0;
    	var rr = encode_row(r.s.r);
    	var cols/*:Array<string>*/ = [];
    	var counter = 0;
    	var dense = Array.isArray(sheet);
    	var R = r.s.r, C = 0;
    	var header_cnt = {};
    	if(dense && !sheet[R]) sheet[R] = [];
    	var colinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!cols"] || [];
    	var rowinfo/*:Array<RowInfo>*/ = o.skipHidden && sheet["!rows"] || [];
    	for(C = r.s.c; C <= r.e.c; ++C) {
    		if(((colinfo[C]||{}).hidden)) continue;
    		cols[C] = encode_col(C);
    		val = dense ? sheet[R][C] : sheet[cols[C] + rr];
    		switch(header) {
    			case 1: hdr[C] = C - r.s.c; break;
    			case 2: hdr[C] = cols[C]; break;
    			case 3: hdr[C] = o.header[C - r.s.c]; break;
    			default:
    				if(val == null) val = {w: "__EMPTY", t: "s"};
    				vv = v = format_cell(val, null, o);
    				counter = header_cnt[v] || 0;
    				if(!counter) header_cnt[v] = 1;
    				else {
    					do { vv = v + "_" + (counter++); } while(header_cnt[vv]); header_cnt[v] = counter;
    					header_cnt[vv] = 1;
    				}
    				hdr[C] = vv;
    		}
    	}
    	R = r.s.r + offset;
    	stream._read = function() {
    		while(R <= r.e.r) {
    			if ((rowinfo[R-1]||{}).hidden) continue;
    			var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
    			++R;
    			if((row.isempty === false) || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {
    				stream.push(row.row);
    				return;
    			}
    		}
    		return stream.push(null);
    	};
    	return stream;
    }

    var __stream = {
    	to_json: write_json_stream,
    	to_html: write_html_stream,
    	to_csv: write_csv_stream,
      set_readable: set_readable
    };
    const version = XLSX.version;

    var XLSX$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CFB: CFB,
        SSF: SSF,
        parse_xlscfb: parse_xlscfb,
        parse_zip: parse_zip,
        read: readSync,
        readFile: readFileSync,
        readFileSync: readFileSync,
        set_cptable: set_cptable,
        set_fs: set_fs,
        stream: __stream,
        utils: utils,
        version: version,
        write: writeSync,
        writeFile: writeFileSync,
        writeFileAsync: writeFileAsync,
        writeFileSync: writeFileSync,
        writeFileXLSX: writeFileSyncXLSX,
        writeXLSX: writeSyncXLSX
    });

    function ascending$3(a, b) {
      return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function descending$2(a, b) {
      return a == null || b == null ? NaN
        : b < a ? -1
        : b > a ? 1
        : b >= a ? 0
        : NaN;
    }

    function bisector(f) {
      let compare1, compare2, delta;

      // If an accessor is specified, promote it to a comparator. In this case we
      // can test whether the search value is (self-) comparable. We can’t do this
      // for a comparator (except for specific, known comparators) because we can’t
      // tell if the comparator is symmetric, and an asymmetric comparator can’t be
      // used to test whether a single value is comparable.
      if (f.length !== 2) {
        compare1 = ascending$3;
        compare2 = (d, x) => ascending$3(f(d), x);
        delta = (d, x) => f(d) - x;
      } else {
        compare1 = f === ascending$3 || f === descending$2 ? f : zero$1;
        compare2 = f;
        delta = f;
      }

      function left(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
          if (compare1(x, x) !== 0) return hi;
          do {
            const mid = (lo + hi) >>> 1;
            if (compare2(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
          } while (lo < hi);
        }
        return lo;
      }

      function right(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
          if (compare1(x, x) !== 0) return hi;
          do {
            const mid = (lo + hi) >>> 1;
            if (compare2(a[mid], x) <= 0) lo = mid + 1;
            else hi = mid;
          } while (lo < hi);
        }
        return lo;
      }

      function center(a, x, lo = 0, hi = a.length) {
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
      }

      return {left, center, right};
    }

    function zero$1() {
      return 0;
    }

    function number$3(x) {
      return x === null ? NaN : +x;
    }

    function* numbers(values, valueof) {
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            yield value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            yield value;
          }
        }
      }
    }

    const ascendingBisect = bisector(ascending$3);
    const bisectRight = ascendingBisect.right;
    const bisectLeft = ascendingBisect.left;
    const bisectCenter = bisector(number$3).center;
    var bisect = bisectRight;

    function blur(values, r) {
      if (!((r = +r) >= 0)) throw new RangeError("invalid r");
      let length = values.length;
      if (!((length = Math.floor(length)) >= 0)) throw new RangeError("invalid length");
      if (!length || !r) return values;
      const blur = blurf(r);
      const temp = values.slice();
      blur(values, temp, 0, length, 1);
      blur(temp, values, 0, length, 1);
      blur(values, temp, 0, length, 1);
      return values;
    }

    const blur2 = Blur2(blurf);

    const blurImage = Blur2(blurfImage);

    function Blur2(blur) {
      return function(data, rx, ry = rx) {
        if (!((rx = +rx) >= 0)) throw new RangeError("invalid rx");
        if (!((ry = +ry) >= 0)) throw new RangeError("invalid ry");
        let {data: values, width, height} = data;
        if (!((width = Math.floor(width)) >= 0)) throw new RangeError("invalid width");
        if (!((height = Math.floor(height !== undefined ? height : values.length / width)) >= 0)) throw new RangeError("invalid height");
        if (!width || !height || (!rx && !ry)) return data;
        const blurx = rx && blur(rx);
        const blury = ry && blur(ry);
        const temp = values.slice();
        if (blurx && blury) {
          blurh(blurx, temp, values, width, height);
          blurh(blurx, values, temp, width, height);
          blurh(blurx, temp, values, width, height);
          blurv(blury, values, temp, width, height);
          blurv(blury, temp, values, width, height);
          blurv(blury, values, temp, width, height);
        } else if (blurx) {
          blurh(blurx, values, temp, width, height);
          blurh(blurx, temp, values, width, height);
          blurh(blurx, values, temp, width, height);
        } else if (blury) {
          blurv(blury, values, temp, width, height);
          blurv(blury, temp, values, width, height);
          blurv(blury, values, temp, width, height);
        }
        return data;
      };
    }

    function blurh(blur, T, S, w, h) {
      for (let y = 0, n = w * h; y < n;) {
        blur(T, S, y, y += w, 1);
      }
    }

    function blurv(blur, T, S, w, h) {
      for (let x = 0, n = w * h; x < w; ++x) {
        blur(T, S, x, x + n, w);
      }
    }

    function blurfImage(radius) {
      const blur = blurf(radius);
      return (T, S, start, stop, step) => {
        start <<= 2, stop <<= 2, step <<= 2;
        blur(T, S, start + 0, stop + 0, step);
        blur(T, S, start + 1, stop + 1, step);
        blur(T, S, start + 2, stop + 2, step);
        blur(T, S, start + 3, stop + 3, step);
      };
    }

    // Given a target array T, a source array S, sets each value T[i] to the average
    // of {S[i - r], …, S[i], …, S[i + r]}, where r = ⌊radius⌋, start <= i < stop,
    // for each i, i + step, i + 2 * step, etc., and where S[j] is clamped between
    // S[start] (inclusive) and S[stop] (exclusive). If the given radius is not an
    // integer, S[i - r - 1] and S[i + r + 1] are added to the sum, each weighted
    // according to r - ⌊radius⌋.
    function blurf(radius) {
      const radius0 = Math.floor(radius);
      if (radius0 === radius) return bluri(radius);
      const t = radius - radius0;
      const w = 2 * radius + 1;
      return (T, S, start, stop, step) => { // stop must be aligned!
        if (!((stop -= step) >= start)) return; // inclusive stop
        let sum = radius0 * S[start];
        const s0 = step * radius0;
        const s1 = s0 + step;
        for (let i = start, j = start + s0; i < j; i += step) {
          sum += S[Math.min(stop, i)];
        }
        for (let i = start, j = stop; i <= j; i += step) {
          sum += S[Math.min(stop, i + s0)];
          T[i] = (sum + t * (S[Math.max(start, i - s1)] + S[Math.min(stop, i + s1)])) / w;
          sum -= S[Math.max(start, i - s0)];
        }
      };
    }

    // Like blurf, but optimized for integer radius.
    function bluri(radius) {
      const w = 2 * radius + 1;
      return (T, S, start, stop, step) => { // stop must be aligned!
        if (!((stop -= step) >= start)) return; // inclusive stop
        let sum = radius * S[start];
        const s = step * radius;
        for (let i = start, j = start + s; i < j; i += step) {
          sum += S[Math.min(stop, i)];
        }
        for (let i = start, j = stop; i <= j; i += step) {
          sum += S[Math.min(stop, i + s)];
          T[i] = sum / w;
          sum -= S[Math.max(start, i - s)];
        }
      };
    }

    function count$1(values, valueof) {
      let count = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count;
          }
        }
      }
      return count;
    }

    function length$3(array) {
      return array.length | 0;
    }

    function empty$2(length) {
      return !(length > 0);
    }

    function arrayify(values) {
      return typeof values !== "object" || "length" in values ? values : Array.from(values);
    }

    function reducer(reduce) {
      return values => reduce(...values);
    }

    function cross$2(...values) {
      const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
      values = values.map(arrayify);
      const lengths = values.map(length$3);
      const j = values.length - 1;
      const index = new Array(j + 1).fill(0);
      const product = [];
      if (j < 0 || lengths.some(empty$2)) return product;
      while (true) {
        product.push(index.map((j, i) => values[i][j]));
        let i = j;
        while (++index[i] === lengths[i]) {
          if (i === 0) return reduce ? product.map(reduce) : product;
          index[i--] = 0;
        }
      }
    }

    function cumsum(values, valueof) {
      var sum = 0, index = 0;
      return Float64Array.from(values, valueof === undefined
        ? v => (sum += +v || 0)
        : v => (sum += +valueof(v, index++, values) || 0));
    }

    function variance(values, valueof) {
      let count = 0;
      let delta;
      let mean = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      }
      if (count > 1) return sum / (count - 1);
    }

    function deviation(values, valueof) {
      const v = variance(values, valueof);
      return v ? Math.sqrt(v) : v;
    }

    function extent$1(values, valueof) {
      let min;
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
      return [min, max];
    }

    // https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
    class Adder {
      constructor() {
        this._partials = new Float64Array(32);
        this._n = 0;
      }
      add(x) {
        const p = this._partials;
        let i = 0;
        for (let j = 0; j < this._n && j < 32; j++) {
          const y = p[j],
            hi = x + y,
            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
          if (lo) p[i++] = lo;
          x = hi;
        }
        p[i] = x;
        this._n = i + 1;
        return this;
      }
      valueOf() {
        const p = this._partials;
        let n = this._n, x, y, lo, hi = 0;
        if (n > 0) {
          hi = p[--n];
          while (n > 0) {
            x = hi;
            y = p[--n];
            hi = x + y;
            lo = y - (hi - x);
            if (lo) break;
          }
          if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {
            y = lo * 2;
            x = hi + y;
            if (y == x - hi) hi = x;
          }
        }
        return hi;
      }
    }

    function fsum(values, valueof) {
      const adder = new Adder();
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            adder.add(value);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            adder.add(value);
          }
        }
      }
      return +adder;
    }

    function fcumsum(values, valueof) {
      const adder = new Adder();
      let index = -1;
      return Float64Array.from(values, valueof === undefined
          ? v => adder.add(+v || 0)
          : v => adder.add(+valueof(v, ++index, values) || 0)
      );
    }

    class InternMap extends Map {
      constructor(entries, key = keyof) {
        super();
        Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
        if (entries != null) for (const [key, value] of entries) this.set(key, value);
      }
      get(key) {
        return super.get(intern_get(this, key));
      }
      has(key) {
        return super.has(intern_get(this, key));
      }
      set(key, value) {
        return super.set(intern_set(this, key), value);
      }
      delete(key) {
        return super.delete(intern_delete(this, key));
      }
    }

    class InternSet extends Set {
      constructor(values, key = keyof) {
        super();
        Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
        if (values != null) for (const value of values) this.add(value);
      }
      has(value) {
        return super.has(intern_get(this, value));
      }
      add(value) {
        return super.add(intern_set(this, value));
      }
      delete(value) {
        return super.delete(intern_delete(this, value));
      }
    }

    function intern_get({_intern, _key}, value) {
      const key = _key(value);
      return _intern.has(key) ? _intern.get(key) : value;
    }

    function intern_set({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) return _intern.get(key);
      _intern.set(key, value);
      return value;
    }

    function intern_delete({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) {
        value = _intern.get(key);
        _intern.delete(key);
      }
      return value;
    }

    function keyof(value) {
      return value !== null && typeof value === "object" ? value.valueOf() : value;
    }

    function identity$9(x) {
      return x;
    }

    function group(values, ...keys) {
      return nest(values, identity$9, identity$9, keys);
    }

    function groups(values, ...keys) {
      return nest(values, Array.from, identity$9, keys);
    }

    function flatten$1(groups, keys) {
      for (let i = 1, n = keys.length; i < n; ++i) {
        groups = groups.flatMap(g => g.pop().map(([key, value]) => [...g, key, value]));
      }
      return groups;
    }

    function flatGroup(values, ...keys) {
      return flatten$1(groups(values, ...keys), keys);
    }

    function flatRollup(values, reduce, ...keys) {
      return flatten$1(rollups(values, reduce, ...keys), keys);
    }

    function rollup(values, reduce, ...keys) {
      return nest(values, identity$9, reduce, keys);
    }

    function rollups(values, reduce, ...keys) {
      return nest(values, Array.from, reduce, keys);
    }

    function index$4(values, ...keys) {
      return nest(values, identity$9, unique, keys);
    }

    function indexes(values, ...keys) {
      return nest(values, Array.from, unique, keys);
    }

    function unique(values) {
      if (values.length !== 1) throw new Error("duplicate key");
      return values[0];
    }

    function nest(values, map, reduce, keys) {
      return (function regroup(values, i) {
        if (i >= keys.length) return reduce(values);
        const groups = new InternMap();
        const keyof = keys[i++];
        let index = -1;
        for (const value of values) {
          const key = keyof(value, ++index, values);
          const group = groups.get(key);
          if (group) group.push(value);
          else groups.set(key, [value]);
        }
        for (const [key, values] of groups) {
          groups.set(key, regroup(values, i));
        }
        return map(groups);
      })(values, 0);
    }

    function permute(source, keys) {
      return Array.from(keys, key => source[key]);
    }

    function sort(values, ...F) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      values = Array.from(values);
      let [f] = F;
      if ((f && f.length !== 2) || F.length > 1) {
        const index = Uint32Array.from(values, (d, i) => i);
        if (F.length > 1) {
          F = F.map(f => values.map(f));
          index.sort((i, j) => {
            for (const f of F) {
              const c = ascendingDefined(f[i], f[j]);
              if (c) return c;
            }
          });
        } else {
          f = values.map(f);
          index.sort((i, j) => ascendingDefined(f[i], f[j]));
        }
        return permute(values, index);
      }
      return values.sort(compareDefined(f));
    }

    function compareDefined(compare = ascending$3) {
      if (compare === ascending$3) return ascendingDefined;
      if (typeof compare !== "function") throw new TypeError("compare is not a function");
      return (a, b) => {
        const x = compare(a, b);
        if (x || x === 0) return x;
        return (compare(b, b) === 0) - (compare(a, a) === 0);
      };
    }

    function ascendingDefined(a, b) {
      return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);
    }

    function groupSort(values, reduce, key) {
      return (reduce.length !== 2
        ? sort(rollup(values, reduce, key), (([ak, av], [bk, bv]) => ascending$3(av, bv) || ascending$3(ak, bk)))
        : sort(group(values, key), (([ak, av], [bk, bv]) => reduce(av, bv) || ascending$3(ak, bk))))
        .map(([key]) => key);
    }

    var array$5 = Array.prototype;

    var slice$3 = array$5.slice;

    function constant$b(x) {
      return () => x;
    }

    const e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function tickSpec(start, stop, count) {
      const step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log10(step)),
          error = step / Math.pow(10, power),
          factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
      let i1, i2, inc;
      if (power < 0) {
        inc = Math.pow(10, -power) / factor;
        i1 = Math.round(start * inc);
        i2 = Math.round(stop * inc);
        if (i1 / inc < start) ++i1;
        if (i2 / inc > stop) --i2;
        inc = -inc;
      } else {
        inc = Math.pow(10, power) * factor;
        i1 = Math.round(start / inc);
        i2 = Math.round(stop / inc);
        if (i1 * inc < start) ++i1;
        if (i2 * inc > stop) --i2;
      }
      if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
      return [i1, i2, inc];
    }

    function ticks(start, stop, count) {
      stop = +stop, start = +start, count = +count;
      if (!(count > 0)) return [];
      if (start === stop) return [start];
      const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
      if (!(i2 >= i1)) return [];
      const n = i2 - i1 + 1, ticks = new Array(n);
      if (reverse) {
        if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;
        else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;
      } else {
        if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;
        else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;
      }
      return ticks;
    }

    function tickIncrement(start, stop, count) {
      stop = +stop, start = +start, count = +count;
      return tickSpec(start, stop, count)[2];
    }

    function tickStep(start, stop, count) {
      stop = +stop, start = +start, count = +count;
      const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
      return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
    }

    function nice$1(start, stop, count) {
      let prestep;
      while (true) {
        const step = tickIncrement(start, stop, count);
        if (step === prestep || step === 0 || !isFinite(step)) {
          return [start, stop];
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        }
        prestep = step;
      }
    }

    function thresholdSturges(values) {
      return Math.max(1, Math.ceil(Math.log(count$1(values)) / Math.LN2) + 1);
    }

    function bin() {
      var value = identity$9,
          domain = extent$1,
          threshold = thresholdSturges;

      function histogram(data) {
        if (!Array.isArray(data)) data = Array.from(data);

        var i,
            n = data.length,
            x,
            step,
            values = new Array(n);

        for (i = 0; i < n; ++i) {
          values[i] = value(data[i], i, data);
        }

        var xz = domain(values),
            x0 = xz[0],
            x1 = xz[1],
            tz = threshold(values, x0, x1);

        // Convert number of thresholds into uniform thresholds, and nice the
        // default domain accordingly.
        if (!Array.isArray(tz)) {
          const max = x1, tn = +tz;
          if (domain === extent$1) [x0, x1] = nice$1(x0, x1, tn);
          tz = ticks(x0, x1, tn);

          // If the domain is aligned with the first tick (which it will by
          // default), then we can use quantization rather than bisection to bin
          // values, which is substantially faster.
          if (tz[0] <= x0) step = tickIncrement(x0, x1, tn);

          // If the last threshold is coincident with the domain’s upper bound, the
          // last bin will be zero-width. If the default domain is used, and this
          // last threshold is coincident with the maximum input value, we can
          // extend the niced upper bound by one tick to ensure uniform bin widths;
          // otherwise, we simply remove the last threshold. Note that we don’t
          // coerce values or the domain to numbers, and thus must be careful to
          // compare order (>=) rather than strict equality (===)!
          if (tz[tz.length - 1] >= x1) {
            if (max >= x1 && domain === extent$1) {
              const step = tickIncrement(x0, x1, tn);
              if (isFinite(step)) {
                if (step > 0) {
                  x1 = (Math.floor(x1 / step) + 1) * step;
                } else if (step < 0) {
                  x1 = (Math.ceil(x1 * -step) + 1) / -step;
                }
              }
            } else {
              tz.pop();
            }
          }
        }

        // Remove any thresholds outside the domain.
        // Be careful not to mutate an array owned by the user!
        var m = tz.length, a = 0, b = m;
        while (tz[a] <= x0) ++a;
        while (tz[b - 1] > x1) --b;
        if (a || b < m) tz = tz.slice(a, b), m = b - a;

        var bins = new Array(m + 1),
            bin;

        // Initialize bins.
        for (i = 0; i <= m; ++i) {
          bin = bins[i] = [];
          bin.x0 = i > 0 ? tz[i - 1] : x0;
          bin.x1 = i < m ? tz[i] : x1;
        }

        // Assign data to bins by value, ignoring any outside the domain.
        if (isFinite(step)) {
          if (step > 0) {
            for (i = 0; i < n; ++i) {
              if ((x = values[i]) != null && x0 <= x && x <= x1) {
                bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);
              }
            }
          } else if (step < 0) {
            for (i = 0; i < n; ++i) {
              if ((x = values[i]) != null && x0 <= x && x <= x1) {
                const j = Math.floor((x0 - x) * step);
                bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding
              }
            }
          }
        } else {
          for (i = 0; i < n; ++i) {
            if ((x = values[i]) != null && x0 <= x && x <= x1) {
              bins[bisect(tz, x, 0, m)].push(data[i]);
            }
          }
        }

        return bins;
      }

      histogram.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant$b(_), histogram) : value;
      };

      histogram.domain = function(_) {
        return arguments.length ? (domain = typeof _ === "function" ? _ : constant$b([_[0], _[1]]), histogram) : domain;
      };

      histogram.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : constant$b(Array.isArray(_) ? slice$3.call(_) : _), histogram) : threshold;
      };

      return histogram;
    }

    function max$3(values, valueof) {
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      }
      return max;
    }

    function maxIndex(values, valueof) {
      let max;
      let maxIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      }
      return maxIndex;
    }

    function min$2(values, valueof) {
      let min;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      }
      return min;
    }

    function minIndex(values, valueof) {
      let min;
      let minIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      }
      return minIndex;
    }

    // Based on https://github.com/mourner/quickselect
    // ISC license, Copyright 2018 Vladimir Agafonkin.
    function quickselect(array, k, left = 0, right = Infinity, compare) {
      k = Math.floor(k);
      left = Math.floor(Math.max(0, left));
      right = Math.floor(Math.min(array.length - 1, right));

      if (!(left <= k && k <= right)) return array;

      compare = compare === undefined ? ascendingDefined : compareDefined(compare);

      while (right > left) {
        if (right - left > 600) {
          const n = right - left + 1;
          const m = k - left + 1;
          const z = Math.log(n);
          const s = 0.5 * Math.exp(2 * z / 3);
          const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
          const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
          const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
          quickselect(array, k, newLeft, newRight, compare);
        }

        const t = array[k];
        let i = left;
        let j = right;

        swap$1(array, left, k);
        if (compare(array[right], t) > 0) swap$1(array, left, right);

        while (i < j) {
          swap$1(array, i, j), ++i, --j;
          while (compare(array[i], t) < 0) ++i;
          while (compare(array[j], t) > 0) --j;
        }

        if (compare(array[left], t) === 0) swap$1(array, left, j);
        else ++j, swap$1(array, j, right);

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
      }

      return array;
    }

    function swap$1(array, i, j) {
      const t = array[i];
      array[i] = array[j];
      array[j] = t;
    }

    function greatest(values, compare = ascending$3) {
      let max;
      let defined = false;
      if (compare.length === 1) {
        let maxValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending$3(value, maxValue) > 0
              : ascending$3(value, value) === 0) {
            max = element;
            maxValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, max) > 0
              : compare(value, value) === 0) {
            max = value;
            defined = true;
          }
        }
      }
      return max;
    }

    function quantile$1(values, p, valueof) {
      values = Float64Array.from(numbers(values, valueof));
      if (!(n = values.length) || isNaN(p = +p)) return;
      if (p <= 0 || n < 2) return min$2(values);
      if (p >= 1) return max$3(values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = max$3(quickselect(values, i0).subarray(0, i0 + 1)),
          value1 = min$2(values.subarray(i0 + 1));
      return value0 + (value1 - value0) * (i - i0);
    }

    function quantileSorted(values, p, valueof = number$3) {
      if (!(n = values.length) || isNaN(p = +p)) return;
      if (p <= 0 || n < 2) return +valueof(values[0], 0, values);
      if (p >= 1) return +valueof(values[n - 1], n - 1, values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = +valueof(values[i0], i0, values),
          value1 = +valueof(values[i0 + 1], i0 + 1, values);
      return value0 + (value1 - value0) * (i - i0);
    }

    function quantileIndex(values, p, valueof = number$3) {
      if (isNaN(p = +p)) return;
      numbers = Float64Array.from(values, (_, i) => number$3(valueof(values[i], i, values)));
      if (p <= 0) return minIndex(numbers);
      if (p >= 1) return maxIndex(numbers);
      var numbers,
          index = Uint32Array.from(values, (_, i) => i),
          j = numbers.length - 1,
          i = Math.floor(j * p);
      quickselect(index, i, 0, j, (i, j) => ascendingDefined(numbers[i], numbers[j]));
      i = greatest(index.subarray(0, i + 1), (i) => numbers[i]);
      return i >= 0 ? i : -1;
    }

    function thresholdFreedmanDiaconis(values, min, max) {
      const c = count$1(values), d = quantile$1(values, 0.75) - quantile$1(values, 0.25);
      return c && d ? Math.ceil((max - min) / (2 * d * Math.pow(c, -1 / 3))) : 1;
    }

    function thresholdScott(values, min, max) {
      const c = count$1(values), d = deviation(values);
      return c && d ? Math.ceil((max - min) * Math.cbrt(c) / (3.49 * d)) : 1;
    }

    function mean(values, valueof) {
      let count = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      }
      if (count) return sum / count;
    }

    function median(values, valueof) {
      return quantile$1(values, 0.5, valueof);
    }

    function medianIndex(values, valueof) {
      return quantileIndex(values, 0.5, valueof);
    }

    function* flatten(arrays) {
      for (const array of arrays) {
        yield* array;
      }
    }

    function merge(arrays) {
      return Array.from(flatten(arrays));
    }

    function mode(values, valueof) {
      const counts = new InternMap();
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && value >= value) {
            counts.set(value, (counts.get(value) || 0) + 1);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && value >= value) {
            counts.set(value, (counts.get(value) || 0) + 1);
          }
        }
      }
      let modeValue;
      let modeCount = 0;
      for (const [value, count] of counts) {
        if (count > modeCount) {
          modeCount = count;
          modeValue = value;
        }
      }
      return modeValue;
    }

    function pairs(values, pairof = pair) {
      const pairs = [];
      let previous;
      let first = false;
      for (const value of values) {
        if (first) pairs.push(pairof(previous, value));
        previous = value;
        first = true;
      }
      return pairs;
    }

    function pair(a, b) {
      return [a, b];
    }

    function range$2(start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

      var i = -1,
          n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
          range = new Array(n);

      while (++i < n) {
        range[i] = start + i * step;
      }

      return range;
    }

    function rank(values, valueof = ascending$3) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      let V = Array.from(values);
      const R = new Float64Array(V.length);
      if (valueof.length !== 2) V = V.map(valueof), valueof = ascending$3;
      const compareIndex = (i, j) => valueof(V[i], V[j]);
      let k, r;
      values = Uint32Array.from(V, (_, i) => i);
      // Risky chaining due to Safari 14 https://github.com/d3/d3-array/issues/123
      values.sort(valueof === ascending$3 ? (i, j) => ascendingDefined(V[i], V[j]) : compareDefined(compareIndex));
      values.forEach((j, i) => {
          const c = compareIndex(j, k === undefined ? j : k);
          if (c >= 0) {
            if (k === undefined || c > 0) k = j, r = i;
            R[j] = r;
          } else {
            R[j] = NaN;
          }
        });
      return R;
    }

    function least(values, compare = ascending$3) {
      let min;
      let defined = false;
      if (compare.length === 1) {
        let minValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending$3(value, minValue) < 0
              : ascending$3(value, value) === 0) {
            min = element;
            minValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, min) < 0
              : compare(value, value) === 0) {
            min = value;
            defined = true;
          }
        }
      }
      return min;
    }

    function leastIndex(values, compare = ascending$3) {
      if (compare.length === 1) return minIndex(values, compare);
      let minValue;
      let min = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (min < 0
            ? compare(value, value) === 0
            : compare(value, minValue) < 0) {
          minValue = value;
          min = index;
        }
      }
      return min;
    }

    function greatestIndex(values, compare = ascending$3) {
      if (compare.length === 1) return maxIndex(values, compare);
      let maxValue;
      let max = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (max < 0
            ? compare(value, value) === 0
            : compare(value, maxValue) > 0) {
          maxValue = value;
          max = index;
        }
      }
      return max;
    }

    function scan(values, compare) {
      const index = leastIndex(values, compare);
      return index < 0 ? undefined : index;
    }

    var shuffle$1 = shuffler(Math.random);

    function shuffler(random) {
      return function shuffle(array, i0 = 0, i1 = array.length) {
        let m = i1 - (i0 = +i0);
        while (m) {
          const i = random() * m-- | 0, t = array[m + i0];
          array[m + i0] = array[i + i0];
          array[i + i0] = t;
        }
        return array;
      };
    }

    function sum$2(values, valueof) {
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            sum += value;
          }
        }
      }
      return sum;
    }

    function transpose(matrix) {
      if (!(n = matrix.length)) return [];
      for (var i = -1, m = min$2(matrix, length$2), transpose = new Array(m); ++i < m;) {
        for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
          row[j] = matrix[j][i];
        }
      }
      return transpose;
    }

    function length$2(d) {
      return d.length;
    }

    function zip() {
      return transpose(arguments);
    }

    function every(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (!test(value, ++index, values)) {
          return false;
        }
      }
      return true;
    }

    function some(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          return true;
        }
      }
      return false;
    }

    function filter$1(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      const array = [];
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          array.push(value);
        }
      }
      return array;
    }

    function map$1(values, mapper) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
      return Array.from(values, (value, index) => mapper(value, index, values));
    }

    function reduce(values, reducer, value) {
      if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
      const iterator = values[Symbol.iterator]();
      let done, next, index = -1;
      if (arguments.length < 3) {
        ({done, value} = iterator.next());
        if (done) return;
        ++index;
      }
      while (({done, value: next} = iterator.next()), !done) {
        value = reducer(value, next, ++index, values);
      }
      return value;
    }

    function reverse$1(values) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      return Array.from(values).reverse();
    }

    function difference(values, ...others) {
      values = new InternSet(values);
      for (const other of others) {
        for (const value of other) {
          values.delete(value);
        }
      }
      return values;
    }

    function disjoint(values, other) {
      const iterator = other[Symbol.iterator](), set = new InternSet();
      for (const v of values) {
        if (set.has(v)) return false;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) break;
          if (Object.is(v, value)) return false;
          set.add(value);
        }
      }
      return true;
    }

    function intersection(values, ...others) {
      values = new InternSet(values);
      others = others.map(set$2);
      out: for (const value of values) {
        for (const other of others) {
          if (!other.has(value)) {
            values.delete(value);
            continue out;
          }
        }
      }
      return values;
    }

    function set$2(values) {
      return values instanceof InternSet ? values : new InternSet(values);
    }

    function superset(values, other) {
      const iterator = values[Symbol.iterator](), set = new Set();
      for (const o of other) {
        const io = intern(o);
        if (set.has(io)) continue;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) return false;
          const ivalue = intern(value);
          set.add(ivalue);
          if (Object.is(io, ivalue)) break;
        }
      }
      return true;
    }

    function intern(value) {
      return value !== null && typeof value === "object" ? value.valueOf() : value;
    }

    function subset(values, other) {
      return superset(other, values);
    }

    function union(...others) {
      const set = new InternSet();
      for (const other of others) {
        for (const o of other) {
          set.add(o);
        }
      }
      return set;
    }

    function identity$8(x) {
      return x;
    }

    var top = 1,
        right = 2,
        bottom = 3,
        left = 4,
        epsilon$6 = 1e-6;

    function translateX(x) {
      return "translate(" + x + ",0)";
    }

    function translateY(y) {
      return "translate(0," + y + ")";
    }

    function number$2(scale) {
      return d => +scale(d);
    }

    function center$1(scale, offset) {
      offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
      if (scale.round()) offset = Math.round(offset);
      return d => +scale(d) + offset;
    }

    function entering() {
      return !this.__axis;
    }

    function axis(orient, scale) {
      var tickArguments = [],
          tickValues = null,
          tickFormat = null,
          tickSizeInner = 6,
          tickSizeOuter = 6,
          tickPadding = 3,
          offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5,
          k = orient === top || orient === left ? -1 : 1,
          x = orient === left || orient === right ? "x" : "y",
          transform = orient === top || orient === bottom ? translateX : translateY;

      function axis(context) {
        var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
            format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$8) : tickFormat,
            spacing = Math.max(tickSizeInner, 0) + tickPadding,
            range = scale.range(),
            range0 = +range[0] + offset,
            range1 = +range[range.length - 1] + offset,
            position = (scale.bandwidth ? center$1 : number$2)(scale.copy(), offset),
            selection = context.selection ? context.selection() : context,
            path = selection.selectAll(".domain").data([null]),
            tick = selection.selectAll(".tick").data(values, scale).order(),
            tickExit = tick.exit(),
            tickEnter = tick.enter().append("g").attr("class", "tick"),
            line = tick.select("line"),
            text = tick.select("text");

        path = path.merge(path.enter().insert("path", ".tick")
            .attr("class", "domain")
            .attr("stroke", "currentColor"));

        tick = tick.merge(tickEnter);

        line = line.merge(tickEnter.append("line")
            .attr("stroke", "currentColor")
            .attr(x + "2", k * tickSizeInner));

        text = text.merge(tickEnter.append("text")
            .attr("fill", "currentColor")
            .attr(x, k * spacing)
            .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

        if (context !== selection) {
          path = path.transition(context);
          tick = tick.transition(context);
          line = line.transition(context);
          text = text.transition(context);

          tickExit = tickExit.transition(context)
              .attr("opacity", epsilon$6)
              .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform"); });

          tickEnter
              .attr("opacity", epsilon$6)
              .attr("transform", function(d) { var p = this.parentNode.__axis; return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset); });
        }

        tickExit.remove();

        path
            .attr("d", orient === left || orient === right
                ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1)
                : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1));

        tick
            .attr("opacity", 1)
            .attr("transform", function(d) { return transform(position(d) + offset); });

        line
            .attr(x + "2", k * tickSizeInner);

        text
            .attr(x, k * spacing)
            .text(format);

        selection.filter(entering)
            .attr("fill", "none")
            .attr("font-size", 10)
            .attr("font-family", "sans-serif")
            .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

        selection
            .each(function() { this.__axis = position; });
      }

      axis.scale = function(_) {
        return arguments.length ? (scale = _, axis) : scale;
      };

      axis.ticks = function() {
        return tickArguments = Array.from(arguments), axis;
      };

      axis.tickArguments = function(_) {
        return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();
      };

      axis.tickValues = function(_) {
        return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();
      };

      axis.tickFormat = function(_) {
        return arguments.length ? (tickFormat = _, axis) : tickFormat;
      };

      axis.tickSize = function(_) {
        return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
      };

      axis.tickSizeInner = function(_) {
        return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
      };

      axis.tickSizeOuter = function(_) {
        return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
      };

      axis.tickPadding = function(_) {
        return arguments.length ? (tickPadding = +_, axis) : tickPadding;
      };

      axis.offset = function(_) {
        return arguments.length ? (offset = +_, axis) : offset;
      };

      return axis;
    }

    function axisTop(scale) {
      return axis(top, scale);
    }

    function axisRight(scale) {
      return axis(right, scale);
    }

    function axisBottom(scale) {
      return axis(bottom, scale);
    }

    function axisLeft(scale) {
      return axis(left, scale);
    }

    var noop$3 = {value: () => {}};

    function dispatch() {
      for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
        if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
        _[t] = [];
      }
      return new Dispatch(_);
    }

    function Dispatch(_) {
      this._ = _;
    }

    function parseTypenames$1(typenames, types) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {type: t, name: name};
      });
    }

    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _ = this._,
            T = parseTypenames$1(typename + "", _),
            t,
            i = -1,
            n = T.length;

        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
          while (++i < n) if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) return t;
          return;
        }

        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while (++i < n) {
          if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);
          else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);
        }

        return this;
      },
      copy: function() {
        var copy = {}, _ = this._;
        for (var t in _) copy[t] = _[t].slice();
        return new Dispatch(copy);
      },
      call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      },
      apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      }
    };

    function get$1(type, name) {
      for (var i = 0, n = type.length, c; i < n; ++i) {
        if ((c = type[i]).name === name) {
          return c.value;
        }
      }
    }

    function set$1(type, name, callback) {
      for (var i = 0, n = type.length; i < n; ++i) {
        if (type[i].name === name) {
          type[i] = noop$3, type = type.slice(0, i).concat(type.slice(i + 1));
          break;
        }
      }
      if (callback != null) type.push({name: name, value: callback});
      return type;
    }

    var xhtml = "http://www.w3.org/1999/xhtml";

    var namespaces = {
      svg: "http://www.w3.org/2000/svg",
      xhtml: xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };

    function namespace(name) {
      var prefix = name += "", i = prefix.indexOf(":");
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
    }

    function creatorInherit(name) {
      return function() {
        var document = this.ownerDocument,
            uri = this.namespaceURI;
        return uri === xhtml && document.documentElement.namespaceURI === xhtml
            ? document.createElement(name)
            : document.createElementNS(uri, name);
      };
    }

    function creatorFixed(fullname) {
      return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
      };
    }

    function creator(name) {
      var fullname = namespace(name);
      return (fullname.local
          ? creatorFixed
          : creatorInherit)(fullname);
    }

    function none$2() {}

    function selector(selector) {
      return selector == null ? none$2 : function() {
        return this.querySelector(selector);
      };
    }

    function selection_select(select) {
      if (typeof select !== "function") select = selector(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
          }
        }
      }

      return new Selection$1(subgroups, this._parents);
    }

    // Given something array like (or null), returns something that is strictly an
    // array. This is used to ensure that array-like objects passed to d3.selectAll
    // or selection.selectAll are converted into proper arrays when creating a
    // selection; we don’t ever want to create a selection backed by a live
    // HTMLCollection or NodeList. However, note that selection.selectAll will use a
    // static NodeList as a group, since it safely derived from querySelectorAll.
    function array$4(x) {
      return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
    }

    function empty$1() {
      return [];
    }

    function selectorAll(selector) {
      return selector == null ? empty$1 : function() {
        return this.querySelectorAll(selector);
      };
    }

    function arrayAll(select) {
      return function() {
        return array$4(select.apply(this, arguments));
      };
    }

    function selection_selectAll(select) {
      if (typeof select === "function") select = arrayAll(select);
      else select = selectorAll(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
          }
        }
      }

      return new Selection$1(subgroups, parents);
    }

    function matcher(selector) {
      return function() {
        return this.matches(selector);
      };
    }

    function childMatcher(selector) {
      return function(node) {
        return node.matches(selector);
      };
    }

    var find$1 = Array.prototype.find;

    function childFind(match) {
      return function() {
        return find$1.call(this.children, match);
      };
    }

    function childFirst() {
      return this.firstElementChild;
    }

    function selection_selectChild(match) {
      return this.select(match == null ? childFirst
          : childFind(typeof match === "function" ? match : childMatcher(match)));
    }

    var filter = Array.prototype.filter;

    function children() {
      return Array.from(this.children);
    }

    function childrenFilter(match) {
      return function() {
        return filter.call(this.children, match);
      };
    }

    function selection_selectChildren(match) {
      return this.selectAll(match == null ? children
          : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
    }

    function selection_filter(match) {
      if (typeof match !== "function") match = matcher(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Selection$1(subgroups, this._parents);
    }

    function sparse(update) {
      return new Array(update.length);
    }

    function selection_enter() {
      return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
    }

    function EnterNode(parent, datum) {
      this.ownerDocument = parent.ownerDocument;
      this.namespaceURI = parent.namespaceURI;
      this._next = null;
      this._parent = parent;
      this.__data__ = datum;
    }

    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
      insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
      querySelector: function(selector) { return this._parent.querySelector(selector); },
      querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
    };

    function constant$a(x) {
      return function() {
        return x;
      };
    }

    function bindIndex(parent, group, enter, update, exit, data) {
      var i = 0,
          node,
          groupLength = group.length,
          dataLength = data.length;

      // Put any non-null nodes that fit into update.
      // Put any null nodes into enter.
      // Put any remaining data into enter.
      for (; i < dataLength; ++i) {
        if (node = group[i]) {
          node.__data__ = data[i];
          update[i] = node;
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Put any non-null nodes that don’t fit into exit.
      for (; i < groupLength; ++i) {
        if (node = group[i]) {
          exit[i] = node;
        }
      }
    }

    function bindKey(parent, group, enter, update, exit, data, key) {
      var i,
          node,
          nodeByKeyValue = new Map,
          groupLength = group.length,
          dataLength = data.length,
          keyValues = new Array(groupLength),
          keyValue;

      // Compute the key for each node.
      // If multiple nodes have the same key, the duplicates are added to exit.
      for (i = 0; i < groupLength; ++i) {
        if (node = group[i]) {
          keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
          if (nodeByKeyValue.has(keyValue)) {
            exit[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
        }
      }

      // Compute the key for each datum.
      // If there a node associated with this key, join and add it to update.
      // If there is not (or the key is a duplicate), add it to enter.
      for (i = 0; i < dataLength; ++i) {
        keyValue = key.call(parent, data[i], i, data) + "";
        if (node = nodeByKeyValue.get(keyValue)) {
          update[i] = node;
          node.__data__ = data[i];
          nodeByKeyValue.delete(keyValue);
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Add any remaining nodes that were not bound to data to exit.
      for (i = 0; i < groupLength; ++i) {
        if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
          exit[i] = node;
        }
      }
    }

    function datum(node) {
      return node.__data__;
    }

    function selection_data(value, key) {
      if (!arguments.length) return Array.from(this, datum);

      var bind = key ? bindKey : bindIndex,
          parents = this._parents,
          groups = this._groups;

      if (typeof value !== "function") value = constant$a(value);

      for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
        var parent = parents[j],
            group = groups[j],
            groupLength = group.length,
            data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
            dataLength = data.length,
            enterGroup = enter[j] = new Array(dataLength),
            updateGroup = update[j] = new Array(dataLength),
            exitGroup = exit[j] = new Array(groupLength);

        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
          if (previous = enterGroup[i0]) {
            if (i0 >= i1) i1 = i0 + 1;
            while (!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
          }
        }
      }

      update = new Selection$1(update, parents);
      update._enter = enter;
      update._exit = exit;
      return update;
    }

    // Given some data, this returns an array-like view of it: an object that
    // exposes a length property and allows numeric indexing. Note that unlike
    // selectAll, this isn’t worried about “live” collections because the resulting
    // array will only be used briefly while data is being bound. (It is possible to
    // cause the data to change while iterating by using a key function, but please
    // don’t; we’d rather avoid a gratuitous copy.)
    function arraylike(data) {
      return typeof data === "object" && "length" in data
        ? data // Array, TypedArray, NodeList, array-like
        : Array.from(data); // Map, Set, iterable, string, or anything else
    }

    function selection_exit() {
      return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
    }

    function selection_join(onenter, onupdate, onexit) {
      var enter = this.enter(), update = this, exit = this.exit();
      if (typeof onenter === "function") {
        enter = onenter(enter);
        if (enter) enter = enter.selection();
      } else {
        enter = enter.append(onenter + "");
      }
      if (onupdate != null) {
        update = onupdate(update);
        if (update) update = update.selection();
      }
      if (onexit == null) exit.remove(); else onexit(exit);
      return enter && update ? enter.merge(update).order() : update;
    }

    function selection_merge(context) {
      var selection = context.selection ? context.selection() : context;

      for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Selection$1(merges, this._parents);
    }

    function selection_order() {

      for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
        for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
            next = node;
          }
        }
      }

      return this;
    }

    function selection_sort(compare) {
      if (!compare) compare = ascending$2;

      function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
      }

      for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            sortgroup[i] = node;
          }
        }
        sortgroup.sort(compareNode);
      }

      return new Selection$1(sortgroups, this._parents).order();
    }

    function ascending$2(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function selection_call() {
      var callback = arguments[0];
      arguments[0] = this;
      callback.apply(null, arguments);
      return this;
    }

    function selection_nodes() {
      return Array.from(this);
    }

    function selection_node() {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
          var node = group[i];
          if (node) return node;
        }
      }

      return null;
    }

    function selection_size() {
      let size = 0;
      for (const node of this) ++size; // eslint-disable-line no-unused-vars
      return size;
    }

    function selection_empty() {
      return !this.node();
    }

    function selection_each(callback) {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) callback.call(node, node.__data__, i, group);
        }
      }

      return this;
    }

    function attrRemove$1(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS$1(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant$1(name, value) {
      return function() {
        this.setAttribute(name, value);
      };
    }

    function attrConstantNS$1(fullname, value) {
      return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
      };
    }

    function attrFunction$1(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
      };
    }

    function attrFunctionNS$1(fullname, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
      };
    }

    function selection_attr(name, value) {
      var fullname = namespace(name);

      if (arguments.length < 2) {
        var node = this.node();
        return fullname.local
            ? node.getAttributeNS(fullname.space, fullname.local)
            : node.getAttribute(fullname);
      }

      return this.each((value == null
          ? (fullname.local ? attrRemoveNS$1 : attrRemove$1) : (typeof value === "function"
          ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)
          : (fullname.local ? attrConstantNS$1 : attrConstant$1)))(fullname, value));
    }

    function defaultView(node) {
      return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
          || (node.document && node) // node is a Window
          || node.defaultView; // node is a Document
    }

    function styleRemove$1(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant$1(name, value, priority) {
      return function() {
        this.style.setProperty(name, value, priority);
      };
    }

    function styleFunction$1(name, value, priority) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
      };
    }

    function selection_style(name, value, priority) {
      return arguments.length > 1
          ? this.each((value == null
                ? styleRemove$1 : typeof value === "function"
                ? styleFunction$1
                : styleConstant$1)(name, value, priority == null ? "" : priority))
          : styleValue(this.node(), name);
    }

    function styleValue(node, name) {
      return node.style.getPropertyValue(name)
          || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
    }

    function propertyRemove(name) {
      return function() {
        delete this[name];
      };
    }

    function propertyConstant(name, value) {
      return function() {
        this[name] = value;
      };
    }

    function propertyFunction(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
      };
    }

    function selection_property(name, value) {
      return arguments.length > 1
          ? this.each((value == null
              ? propertyRemove : typeof value === "function"
              ? propertyFunction
              : propertyConstant)(name, value))
          : this.node()[name];
    }

    function classArray(string) {
      return string.trim().split(/^|\s+/);
    }

    function classList(node) {
      return node.classList || new ClassList(node);
    }

    function ClassList(node) {
      this._node = node;
      this._names = classArray(node.getAttribute("class") || "");
    }

    ClassList.prototype = {
      add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };

    function classedAdd(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.add(names[i]);
    }

    function classedRemove(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.remove(names[i]);
    }

    function classedTrue(names) {
      return function() {
        classedAdd(this, names);
      };
    }

    function classedFalse(names) {
      return function() {
        classedRemove(this, names);
      };
    }

    function classedFunction(names, value) {
      return function() {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
      };
    }

    function selection_classed(name, value) {
      var names = classArray(name + "");

      if (arguments.length < 2) {
        var list = classList(this.node()), i = -1, n = names.length;
        while (++i < n) if (!list.contains(names[i])) return false;
        return true;
      }

      return this.each((typeof value === "function"
          ? classedFunction : value
          ? classedTrue
          : classedFalse)(names, value));
    }

    function textRemove() {
      this.textContent = "";
    }

    function textConstant$1(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction$1(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
      };
    }

    function selection_text(value) {
      return arguments.length
          ? this.each(value == null
              ? textRemove : (typeof value === "function"
              ? textFunction$1
              : textConstant$1)(value))
          : this.node().textContent;
    }

    function htmlRemove() {
      this.innerHTML = "";
    }

    function htmlConstant(value) {
      return function() {
        this.innerHTML = value;
      };
    }

    function htmlFunction(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
      };
    }

    function selection_html(value) {
      return arguments.length
          ? this.each(value == null
              ? htmlRemove : (typeof value === "function"
              ? htmlFunction
              : htmlConstant)(value))
          : this.node().innerHTML;
    }

    function raise() {
      if (this.nextSibling) this.parentNode.appendChild(this);
    }

    function selection_raise() {
      return this.each(raise);
    }

    function lower() {
      if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }

    function selection_lower() {
      return this.each(lower);
    }

    function selection_append(name) {
      var create = typeof name === "function" ? name : creator(name);
      return this.select(function() {
        return this.appendChild(create.apply(this, arguments));
      });
    }

    function constantNull() {
      return null;
    }

    function selection_insert(name, before) {
      var create = typeof name === "function" ? name : creator(name),
          select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
      return this.select(function() {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
      });
    }

    function remove() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    }

    function selection_remove() {
      return this.each(remove);
    }

    function selection_cloneShallow() {
      var clone = this.cloneNode(false), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_cloneDeep() {
      var clone = this.cloneNode(true), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_clone(deep) {
      return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
    }

    function selection_datum(value) {
      return arguments.length
          ? this.property("__data__", value)
          : this.node().__data__;
    }

    function contextListener(listener) {
      return function(event) {
        listener.call(this, event, this.__data__);
      };
    }

    function parseTypenames(typenames) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {type: t, name: name};
      });
    }

    function onRemove(typename) {
      return function() {
        var on = this.__on;
        if (!on) return;
        for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
          if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
          } else {
            on[++i] = o;
          }
        }
        if (++i) on.length = i;
        else delete this.__on;
      };
    }

    function onAdd(typename, value, options) {
      return function() {
        var on = this.__on, o, listener = contextListener(value);
        if (on) for (var j = 0, m = on.length; j < m; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
        this.addEventListener(typename.type, listener, options);
        o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
        if (!on) this.__on = [o];
        else on.push(o);
      };
    }

    function selection_on(typename, value, options) {
      var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

      if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
        return;
      }

      on = value ? onAdd : onRemove;
      for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
      return this;
    }

    function dispatchEvent(node, type, params) {
      var window = defaultView(node),
          event = window.CustomEvent;

      if (typeof event === "function") {
        event = new event(type, params);
      } else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
      }

      node.dispatchEvent(event);
    }

    function dispatchConstant(type, params) {
      return function() {
        return dispatchEvent(this, type, params);
      };
    }

    function dispatchFunction(type, params) {
      return function() {
        return dispatchEvent(this, type, params.apply(this, arguments));
      };
    }

    function selection_dispatch(type, params) {
      return this.each((typeof params === "function"
          ? dispatchFunction
          : dispatchConstant)(type, params));
    }

    function* selection_iterator() {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) yield node;
        }
      }
    }

    var root$1 = [null];

    function Selection$1(groups, parents) {
      this._groups = groups;
      this._parents = parents;
    }

    function selection() {
      return new Selection$1([[document.documentElement]], root$1);
    }

    function selection_selection() {
      return this;
    }

    Selection$1.prototype = selection.prototype = {
      constructor: Selection$1,
      select: selection_select,
      selectAll: selection_selectAll,
      selectChild: selection_selectChild,
      selectChildren: selection_selectChildren,
      filter: selection_filter,
      data: selection_data,
      enter: selection_enter,
      exit: selection_exit,
      join: selection_join,
      merge: selection_merge,
      selection: selection_selection,
      order: selection_order,
      sort: selection_sort,
      call: selection_call,
      nodes: selection_nodes,
      node: selection_node,
      size: selection_size,
      empty: selection_empty,
      each: selection_each,
      attr: selection_attr,
      style: selection_style,
      property: selection_property,
      classed: selection_classed,
      text: selection_text,
      html: selection_html,
      raise: selection_raise,
      lower: selection_lower,
      append: selection_append,
      insert: selection_insert,
      remove: selection_remove,
      clone: selection_clone,
      datum: selection_datum,
      on: selection_on,
      dispatch: selection_dispatch,
      [Symbol.iterator]: selection_iterator
    };

    function select(selector) {
      return typeof selector === "string"
          ? new Selection$1([[document.querySelector(selector)]], [document.documentElement])
          : new Selection$1([[selector]], root$1);
    }

    function create$1(name) {
      return select(creator(name).call(document.documentElement));
    }

    var nextId = 0;

    function local$1() {
      return new Local;
    }

    function Local() {
      this._ = "@" + (++nextId).toString(36);
    }

    Local.prototype = local$1.prototype = {
      constructor: Local,
      get: function(node) {
        var id = this._;
        while (!(id in node)) if (!(node = node.parentNode)) return;
        return node[id];
      },
      set: function(node, value) {
        return node[this._] = value;
      },
      remove: function(node) {
        return this._ in node && delete node[this._];
      },
      toString: function() {
        return this._;
      }
    };

    function sourceEvent(event) {
      let sourceEvent;
      while (sourceEvent = event.sourceEvent) event = sourceEvent;
      return event;
    }

    function pointer(event, node) {
      event = sourceEvent(event);
      if (node === undefined) node = event.currentTarget;
      if (node) {
        var svg = node.ownerSVGElement || node;
        if (svg.createSVGPoint) {
          var point = svg.createSVGPoint();
          point.x = event.clientX, point.y = event.clientY;
          point = point.matrixTransform(node.getScreenCTM().inverse());
          return [point.x, point.y];
        }
        if (node.getBoundingClientRect) {
          var rect = node.getBoundingClientRect();
          return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
        }
      }
      return [event.pageX, event.pageY];
    }

    function pointers(events, node) {
      if (events.target) { // i.e., instanceof Event, not TouchList or iterable
        events = sourceEvent(events);
        if (node === undefined) node = events.currentTarget;
        events = events.touches || [events];
      }
      return Array.from(events, event => pointer(event, node));
    }

    function selectAll(selector) {
      return typeof selector === "string"
          ? new Selection$1([document.querySelectorAll(selector)], [document.documentElement])
          : new Selection$1([array$4(selector)], root$1);
    }

    // These are typically used in conjunction with noevent to ensure that we can
    // preventDefault on the event.
    const nonpassive = {passive: false};
    const nonpassivecapture = {capture: true, passive: false};

    function nopropagation$2(event) {
      event.stopImmediatePropagation();
    }

    function noevent$2(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    function dragDisable(view) {
      var root = view.document.documentElement,
          selection = select(view).on("dragstart.drag", noevent$2, nonpassivecapture);
      if ("onselectstart" in root) {
        selection.on("selectstart.drag", noevent$2, nonpassivecapture);
      } else {
        root.__noselect = root.style.MozUserSelect;
        root.style.MozUserSelect = "none";
      }
    }

    function yesdrag(view, noclick) {
      var root = view.document.documentElement,
          selection = select(view).on("dragstart.drag", null);
      if (noclick) {
        selection.on("click.drag", noevent$2, nonpassivecapture);
        setTimeout(function() { selection.on("click.drag", null); }, 0);
      }
      if ("onselectstart" in root) {
        selection.on("selectstart.drag", null);
      } else {
        root.style.MozUserSelect = root.__noselect;
        delete root.__noselect;
      }
    }

    var constant$9 = x => () => x;

    function DragEvent(type, {
      sourceEvent,
      subject,
      target,
      identifier,
      active,
      x, y, dx, dy,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        subject: {value: subject, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        identifier: {value: identifier, enumerable: true, configurable: true},
        active: {value: active, enumerable: true, configurable: true},
        x: {value: x, enumerable: true, configurable: true},
        y: {value: y, enumerable: true, configurable: true},
        dx: {value: dx, enumerable: true, configurable: true},
        dy: {value: dy, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    DragEvent.prototype.on = function() {
      var value = this._.on.apply(this._, arguments);
      return value === this._ ? this : value;
    };

    // Ignore right-click, since that should open the context menu.
    function defaultFilter$2(event) {
      return !event.ctrlKey && !event.button;
    }

    function defaultContainer() {
      return this.parentNode;
    }

    function defaultSubject(event, d) {
      return d == null ? {x: event.x, y: event.y} : d;
    }

    function defaultTouchable$2() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    function drag() {
      var filter = defaultFilter$2,
          container = defaultContainer,
          subject = defaultSubject,
          touchable = defaultTouchable$2,
          gestures = {},
          listeners = dispatch("start", "drag", "end"),
          active = 0,
          mousedownx,
          mousedowny,
          mousemoving,
          touchending,
          clickDistance2 = 0;

      function drag(selection) {
        selection
            .on("mousedown.drag", mousedowned)
          .filter(touchable)
            .on("touchstart.drag", touchstarted)
            .on("touchmove.drag", touchmoved, nonpassive)
            .on("touchend.drag touchcancel.drag", touchended)
            .style("touch-action", "none")
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      function mousedowned(event, d) {
        if (touchending || !filter.call(this, event, d)) return;
        var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
        if (!gesture) return;
        select(event.view)
          .on("mousemove.drag", mousemoved, nonpassivecapture)
          .on("mouseup.drag", mouseupped, nonpassivecapture);
        dragDisable(event.view);
        nopropagation$2(event);
        mousemoving = false;
        mousedownx = event.clientX;
        mousedowny = event.clientY;
        gesture("start", event);
      }

      function mousemoved(event) {
        noevent$2(event);
        if (!mousemoving) {
          var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
          mousemoving = dx * dx + dy * dy > clickDistance2;
        }
        gestures.mouse("drag", event);
      }

      function mouseupped(event) {
        select(event.view).on("mousemove.drag mouseup.drag", null);
        yesdrag(event.view, mousemoving);
        noevent$2(event);
        gestures.mouse("end", event);
      }

      function touchstarted(event, d) {
        if (!filter.call(this, event, d)) return;
        var touches = event.changedTouches,
            c = container.call(this, event, d),
            n = touches.length, i, gesture;

        for (i = 0; i < n; ++i) {
          if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {
            nopropagation$2(event);
            gesture("start", event, touches[i]);
          }
        }
      }

      function touchmoved(event) {
        var touches = event.changedTouches,
            n = touches.length, i, gesture;

        for (i = 0; i < n; ++i) {
          if (gesture = gestures[touches[i].identifier]) {
            noevent$2(event);
            gesture("drag", event, touches[i]);
          }
        }
      }

      function touchended(event) {
        var touches = event.changedTouches,
            n = touches.length, i, gesture;

        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
        for (i = 0; i < n; ++i) {
          if (gesture = gestures[touches[i].identifier]) {
            nopropagation$2(event);
            gesture("end", event, touches[i]);
          }
        }
      }

      function beforestart(that, container, event, d, identifier, touch) {
        var dispatch = listeners.copy(),
            p = pointer(touch || event, container), dx, dy,
            s;

        if ((s = subject.call(that, new DragEvent("beforestart", {
            sourceEvent: event,
            target: drag,
            identifier,
            active,
            x: p[0],
            y: p[1],
            dx: 0,
            dy: 0,
            dispatch
          }), d)) == null) return;

        dx = s.x - p[0] || 0;
        dy = s.y - p[1] || 0;

        return function gesture(type, event, touch) {
          var p0 = p, n;
          switch (type) {
            case "start": gestures[identifier] = gesture, n = active++; break;
            case "end": delete gestures[identifier], --active; // falls through
            case "drag": p = pointer(touch || event, container), n = active; break;
          }
          dispatch.call(
            type,
            that,
            new DragEvent(type, {
              sourceEvent: event,
              subject: s,
              target: drag,
              identifier,
              active: n,
              x: p[0] + dx,
              y: p[1] + dy,
              dx: p[0] - p0[0],
              dy: p[1] - p0[1],
              dispatch
            }),
            d
          );
        };
      }

      drag.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant$9(!!_), drag) : filter;
      };

      drag.container = function(_) {
        return arguments.length ? (container = typeof _ === "function" ? _ : constant$9(_), drag) : container;
      };

      drag.subject = function(_) {
        return arguments.length ? (subject = typeof _ === "function" ? _ : constant$9(_), drag) : subject;
      };

      drag.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$9(!!_), drag) : touchable;
      };

      drag.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? drag : value;
      };

      drag.clickDistance = function(_) {
        return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
      };

      return drag;
    }

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`),
        reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`),
        reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`),
        reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`),
        reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`),
        reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color, {
      copy(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHex8: color_formatHex8,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHex8() {
      return this.rgb().formatHex8();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb, extend(Color, {
      brighter(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb() {
        return this;
      },
      clamp() {
        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
      },
      displayable() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatHex8: rgb_formatHex8,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
    }

    function rgb_formatHex8() {
      return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
    }

    function rgb_formatRgb() {
      const a = clampa(this.opacity);
      return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
    }

    function clampa(opacity) {
      return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
    }

    function clampi(value) {
      return Math.max(0, Math.min(255, Math.round(value) || 0));
    }

    function hex(value) {
      value = clampi(value);
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl$2(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl$2, extend(Color, {
      brighter(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      clamp() {
        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
      },
      displayable() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl() {
        const a = clampa(this.opacity);
        return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
      }
    }));

    function clamph(value) {
      value = (value || 0) % 360;
      return value < 0 ? value + 360 : value;
    }

    function clampt(value) {
      return Math.max(0, Math.min(1, value || 0));
    }

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    const radians$1 = Math.PI / 180;
    const degrees$2 = 180 / Math.PI;

    // https://observablehq.com/@mbostock/lab-and-rgb
    const K = 18,
        Xn = 0.96422,
        Yn = 1,
        Zn = 0.82521,
        t0$1 = 4 / 29,
        t1$1 = 6 / 29,
        t2 = 3 * t1$1 * t1$1,
        t3 = t1$1 * t1$1 * t1$1;

    function labConvert(o) {
      if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
      if (o instanceof Hcl) return hcl2lab(o);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = rgb2lrgb(o.r),
          g = rgb2lrgb(o.g),
          b = rgb2lrgb(o.b),
          y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
      if (r === g && g === b) x = z = y; else {
        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
      }
      return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
    }

    function gray(l, opacity) {
      return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
    }

    function lab$1(l, a, b, opacity) {
      return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
    }

    function Lab(l, a, b, opacity) {
      this.l = +l;
      this.a = +a;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Lab, lab$1, extend(Color, {
      brighter(k) {
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      darker(k) {
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      rgb() {
        var y = (this.l + 16) / 116,
            x = isNaN(this.a) ? y : y + this.a / 500,
            z = isNaN(this.b) ? y : y - this.b / 200;
        x = Xn * lab2xyz(x);
        y = Yn * lab2xyz(y);
        z = Zn * lab2xyz(z);
        return new Rgb(
          lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
          lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
          lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
          this.opacity
        );
      }
    }));

    function xyz2lab(t) {
      return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0$1;
    }

    function lab2xyz(t) {
      return t > t1$1 ? t * t * t : t2 * (t - t0$1);
    }

    function lrgb2rgb(x) {
      return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
    }

    function rgb2lrgb(x) {
      return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
    }

    function hclConvert(o) {
      if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
      if (!(o instanceof Lab)) o = labConvert(o);
      if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
      var h = Math.atan2(o.b, o.a) * degrees$2;
      return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
    }

    function lch(l, c, h, opacity) {
      return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }

    function hcl$2(h, c, l, opacity) {
      return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }

    function Hcl(h, c, l, opacity) {
      this.h = +h;
      this.c = +c;
      this.l = +l;
      this.opacity = +opacity;
    }

    function hcl2lab(o) {
      if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
      var h = o.h * radians$1;
      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
    }

    define(Hcl, hcl$2, extend(Color, {
      brighter(k) {
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
      },
      darker(k) {
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
      },
      rgb() {
        return hcl2lab(this).rgb();
      }
    }));

    var A = -0.14861,
        B$1 = +1.78277,
        C = -0.29227,
        D$1 = -0.90649,
        E = +1.97294,
        ED = E * D$1,
        EB = E * B$1,
        BC_DA = B$1 * C - D$1 * A;

    function cubehelixConvert(o) {
      if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
          bl = b - l,
          k = (E * (g - l) - C * bl) / D$1,
          s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
          h = s ? Math.atan2(k, bl) * degrees$2 - 120 : NaN;
      return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
    }

    function cubehelix$3(h, s, l, opacity) {
      return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
    }

    function Cubehelix(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Cubehelix, cubehelix$3, extend(Color, {
      brighter(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      darker(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      rgb() {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * radians$1,
            l = +this.l,
            a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
            cosh = Math.cos(h),
            sinh = Math.sin(h);
        return new Rgb(
          255 * (l + a * (A * cosh + B$1 * sinh)),
          255 * (l + a * (C * cosh + D$1 * sinh)),
          255 * (l + a * (E * cosh)),
          this.opacity
        );
      }
    }));

    function basis$1(t1, v0, v1, v2, v3) {
      var t2 = t1 * t1, t3 = t2 * t1;
      return ((1 - 3 * t1 + 3 * t2 - t3) * v0
          + (4 - 6 * t2 + 3 * t3) * v1
          + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
          + t3 * v3) / 6;
    }

    function basis$2(values) {
      var n = values.length - 1;
      return function(t) {
        var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
            v1 = values[i],
            v2 = values[i + 1],
            v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
            v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return basis$1((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    function basisClosed$1(values) {
      var n = values.length;
      return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
            v0 = values[(i + n - 1) % n],
            v1 = values[i % n],
            v2 = values[(i + 1) % n],
            v3 = values[(i + 2) % n];
        return basis$1((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    var constant$8 = x => () => x;

    function linear$2(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential$1(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function hue$1(a, b) {
      var d = b - a;
      return d ? linear$2(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$8(isNaN(a) ? b : a);
    }

    function gamma$1(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential$1(a, b, y) : constant$8(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear$2(a, d) : constant$8(isNaN(a) ? b : a);
    }

    var interpolateRgb = (function rgbGamma(y) {
      var color = gamma$1(y);

      function rgb$1(start, end) {
        var r = color((start = rgb(start)).r, (end = rgb(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb$1.gamma = rgbGamma;

      return rgb$1;
    })(1);

    function rgbSpline(spline) {
      return function(colors) {
        var n = colors.length,
            r = new Array(n),
            g = new Array(n),
            b = new Array(n),
            i, color;
        for (i = 0; i < n; ++i) {
          color = rgb(colors[i]);
          r[i] = color.r || 0;
          g[i] = color.g || 0;
          b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
          color.r = r(t);
          color.g = g(t);
          color.b = b(t);
          return color + "";
        };
      };
    }

    var rgbBasis = rgbSpline(basis$2);
    var rgbBasisClosed = rgbSpline(basisClosed$1);

    function numberArray(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function array$3(a, b) {
      return (isNumberArray(b) ? numberArray : genericArray)(a, b);
    }

    function genericArray(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = interpolate$2(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date$1(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function interpolateNumber(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object$1(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = interpolate$2(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function interpolateString(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: interpolateNumber(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function interpolate$2(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant$8(b)
          : (t === "number" ? interpolateNumber
          : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
          : b instanceof color ? interpolateRgb
          : b instanceof Date ? date$1
          : isNumberArray(b) ? numberArray
          : Array.isArray(b) ? genericArray
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object$1
          : interpolateNumber)(a, b);
    }

    function discrete(range) {
      var n = range.length;
      return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
      };
    }

    function hue(a, b) {
      var i = hue$1(+a, +b);
      return function(t) {
        var x = i(t);
        return x - 360 * Math.floor(x / 360);
      };
    }

    function interpolateRound(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    var degrees$1 = 180 / Math.PI;

    var identity$7 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };

    function decompose(a, b, c, d, e, f) {
      var scaleX, scaleY, skewX;
      if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
      if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
      if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
      if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
      return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees$1,
        skewX: Math.atan(skewX) * degrees$1,
        scaleX: scaleX,
        scaleY: scaleY
      };
    }

    var svgNode;

    /* eslint-disable no-undef */
    function parseCss(value) {
      const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
      return m.isIdentity ? identity$7 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
    }

    function parseSvg(value) {
      if (value == null) return identity$7;
      if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
      svgNode.setAttribute("transform", value);
      if (!(value = svgNode.transform.baseVal.consolidate())) return identity$7;
      value = value.matrix;
      return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }

    function interpolateTransform(parse, pxComma, pxParen, degParen) {

      function pop(s) {
        return s.length ? s.pop() + " " : "";
      }

      function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push("translate(", null, pxComma, null, pxParen);
          q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
        } else if (xb || yb) {
          s.push("translate(" + xb + pxComma + yb + pxParen);
        }
      }

      function rotate(a, b, s, q) {
        if (a !== b) {
          if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
          q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b)});
        } else if (b) {
          s.push(pop(s) + "rotate(" + b + degParen);
        }
      }

      function skewX(a, b, s, q) {
        if (a !== b) {
          q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b)});
        } else if (b) {
          s.push(pop(s) + "skewX(" + b + degParen);
        }
      }

      function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push(pop(s) + "scale(", null, ",", null, ")");
          q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
        } else if (xb !== 1 || yb !== 1) {
          s.push(pop(s) + "scale(" + xb + "," + yb + ")");
        }
      }

      return function(a, b) {
        var s = [], // string constants and placeholders
            q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
          var i = -1, n = q.length, o;
          while (++i < n) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        };
      };
    }

    var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

    var epsilon2$1 = 1e-12;

    function cosh(x) {
      return ((x = Math.exp(x)) + 1 / x) / 2;
    }

    function sinh(x) {
      return ((x = Math.exp(x)) - 1 / x) / 2;
    }

    function tanh(x) {
      return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }

    var interpolateZoom = (function zoomRho(rho, rho2, rho4) {

      // p0 = [ux0, uy0, w0]
      // p1 = [ux1, uy1, w1]
      function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
            ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
            dx = ux1 - ux0,
            dy = uy1 - uy0,
            d2 = dx * dx + dy * dy,
            i,
            S;

        // Special case for u0 ≅ u1.
        if (d2 < epsilon2$1) {
          S = Math.log(w1 / w0) / rho;
          i = function(t) {
            return [
              ux0 + t * dx,
              uy0 + t * dy,
              w0 * Math.exp(rho * t * S)
            ];
          };
        }

        // General case.
        else {
          var d1 = Math.sqrt(d2),
              b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
              b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
              r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
              r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S = (r1 - r0) / rho;
          i = function(t) {
            var s = t * S,
                coshr0 = cosh(r0),
                u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
            return [
              ux0 + u * dx,
              uy0 + u * dy,
              w0 * coshr0 / cosh(rho * s + r0)
            ];
          };
        }

        i.duration = S * 1000 * rho / Math.SQRT2;

        return i;
      }

      zoom.rho = function(_) {
        var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
      };

      return zoom;
    })(Math.SQRT2, 2, 4);

    function hsl(hue) {
      return function(start, end) {
        var h = hue((start = hsl$2(start)).h, (end = hsl$2(end)).h),
            s = nogamma(start.s, end.s),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.s = s(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hsl$1 = hsl(hue$1);
    var hslLong = hsl(nogamma);

    function lab(start, end) {
      var l = nogamma((start = lab$1(start)).l, (end = lab$1(end)).l),
          a = nogamma(start.a, end.a),
          b = nogamma(start.b, end.b),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    function hcl(hue) {
      return function(start, end) {
        var h = hue((start = hcl$2(start)).h, (end = hcl$2(end)).h),
            c = nogamma(start.c, end.c),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.c = c(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hcl$1 = hcl(hue$1);
    var hclLong = hcl(nogamma);

    function cubehelix$1(hue) {
      return (function cubehelixGamma(y) {
        y = +y;

        function cubehelix(start, end) {
          var h = hue((start = cubehelix$3(start)).h, (end = cubehelix$3(end)).h),
              s = nogamma(start.s, end.s),
              l = nogamma(start.l, end.l),
              opacity = nogamma(start.opacity, end.opacity);
          return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(Math.pow(t, y));
            start.opacity = opacity(t);
            return start + "";
          };
        }

        cubehelix.gamma = cubehelixGamma;

        return cubehelix;
      })(1);
    }

    var cubehelix$2 = cubehelix$1(hue$1);
    var cubehelixLong = cubehelix$1(nogamma);

    function piecewise(interpolate, values) {
      if (values === undefined) values = interpolate, interpolate = interpolate$2;
      var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
      while (i < n) I[i] = interpolate(v, v = values[++i]);
      return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
      };
    }

    function quantize$1(interpolator, n) {
      var samples = new Array(n);
      for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
      return samples;
    }

    var frame = 0, // is an animation frame pending?
        timeout$1 = 0, // is a timeout pending?
        interval$1 = 0, // are any timers active?
        pokeDelay = 1000, // how frequently we check for clock skew
        taskHead,
        taskTail,
        clockLast = 0,
        clockNow = 0,
        clockSkew = 0,
        clock = typeof performance === "object" && performance.now ? performance : Date,
        setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

    function now() {
      return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
    }

    function clearNow() {
      clockNow = 0;
    }

    function Timer() {
      this._call =
      this._time =
      this._next = null;
    }

    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail) taskTail._next = this;
          else taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };

    function timer(callback, delay, time) {
      var t = new Timer;
      t.restart(callback, delay, time);
      return t;
    }

    function timerFlush() {
      now(); // Get the current time, if not already set.
      ++frame; // Pretend we’ve set an alarm, if we haven’t already.
      var t = taskHead, e;
      while (t) {
        if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
        t = t._next;
      }
      --frame;
    }

    function wake() {
      clockNow = (clockLast = clock.now()) + clockSkew;
      frame = timeout$1 = 0;
      try {
        timerFlush();
      } finally {
        frame = 0;
        nap();
        clockNow = 0;
      }
    }

    function poke() {
      var now = clock.now(), delay = now - clockLast;
      if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
    }

    function nap() {
      var t0, t1 = taskHead, t2, time = Infinity;
      while (t1) {
        if (t1._call) {
          if (time > t1._time) time = t1._time;
          t0 = t1, t1 = t1._next;
        } else {
          t2 = t1._next, t1._next = null;
          t1 = t0 ? t0._next = t2 : taskHead = t2;
        }
      }
      taskTail = t0;
      sleep(time);
    }

    function sleep(time) {
      if (frame) return; // Soonest alarm already set, or will be.
      if (timeout$1) timeout$1 = clearTimeout(timeout$1);
      var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
      if (delay > 24) {
        if (time < Infinity) timeout$1 = setTimeout(wake, time - clock.now() - clockSkew);
        if (interval$1) interval$1 = clearInterval(interval$1);
      } else {
        if (!interval$1) clockLast = clock.now(), interval$1 = setInterval(poke, pokeDelay);
        frame = 1, setFrame(wake);
      }
    }

    function timeout(callback, delay, time) {
      var t = new Timer;
      delay = delay == null ? 0 : +delay;
      t.restart(elapsed => {
        t.stop();
        callback(elapsed + delay);
      }, delay, time);
      return t;
    }

    function interval(callback, delay, time) {
      var t = new Timer, total = delay;
      if (delay == null) return t.restart(callback, delay, time), t;
      t._restart = t.restart;
      t.restart = function(callback, delay, time) {
        delay = +delay, time = time == null ? now() : +time;
        t._restart(function tick(elapsed) {
          elapsed += total;
          t._restart(tick, total += delay, time);
          callback(elapsed);
        }, delay, time);
      };
      t.restart(callback, delay, time);
      return t;
    }

    var emptyOn = dispatch("start", "end", "cancel", "interrupt");
    var emptyTween = [];

    var CREATED = 0;
    var SCHEDULED = 1;
    var STARTING = 2;
    var STARTED = 3;
    var RUNNING = 4;
    var ENDING = 5;
    var ENDED = 6;

    function schedule(node, name, id, index, group, timing) {
      var schedules = node.__transition;
      if (!schedules) node.__transition = {};
      else if (id in schedules) return;
      create(node, id, {
        name: name,
        index: index, // For context during callback.
        group: group, // For context during callback.
        on: emptyOn,
        tween: emptyTween,
        time: timing.time,
        delay: timing.delay,
        duration: timing.duration,
        ease: timing.ease,
        timer: null,
        state: CREATED
      });
    }

    function init(node, id) {
      var schedule = get(node, id);
      if (schedule.state > CREATED) throw new Error("too late; already scheduled");
      return schedule;
    }

    function set(node, id) {
      var schedule = get(node, id);
      if (schedule.state > STARTED) throw new Error("too late; already running");
      return schedule;
    }

    function get(node, id) {
      var schedule = node.__transition;
      if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
      return schedule;
    }

    function create(node, id, self) {
      var schedules = node.__transition,
          tween;

      // Initialize the self timer when the transition is created.
      // Note the actual delay is not known until the first callback!
      schedules[id] = self;
      self.timer = timer(schedule, 0, self.time);

      function schedule(elapsed) {
        self.state = SCHEDULED;
        self.timer.restart(start, self.delay, self.time);

        // If the elapsed delay is less than our first sleep, start immediately.
        if (self.delay <= elapsed) start(elapsed - self.delay);
      }

      function start(elapsed) {
        var i, j, n, o;

        // If the state is not SCHEDULED, then we previously errored on start.
        if (self.state !== SCHEDULED) return stop();

        for (i in schedules) {
          o = schedules[i];
          if (o.name !== self.name) continue;

          // While this element already has a starting transition during this frame,
          // defer starting an interrupting transition until that transition has a
          // chance to tick (and possibly end); see d3/d3-transition#54!
          if (o.state === STARTED) return timeout(start);

          // Interrupt the active transition, if any.
          if (o.state === RUNNING) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call("interrupt", node, node.__data__, o.index, o.group);
            delete schedules[i];
          }

          // Cancel any pre-empted transitions.
          else if (+i < id) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call("cancel", node, node.__data__, o.index, o.group);
            delete schedules[i];
          }
        }

        // Defer the first tick to end of the current frame; see d3/d3#1576.
        // Note the transition may be canceled after start and before the first tick!
        // Note this must be scheduled before the start event; see d3/d3-transition#16!
        // Assuming this is successful, subsequent callbacks go straight to tick.
        timeout(function() {
          if (self.state === STARTED) {
            self.state = RUNNING;
            self.timer.restart(tick, self.delay, self.time);
            tick(elapsed);
          }
        });

        // Dispatch the start event.
        // Note this must be done before the tween are initialized.
        self.state = STARTING;
        self.on.call("start", node, node.__data__, self.index, self.group);
        if (self.state !== STARTING) return; // interrupted
        self.state = STARTED;

        // Initialize the tween, deleting null tween.
        tween = new Array(n = self.tween.length);
        for (i = 0, j = -1; i < n; ++i) {
          if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
            tween[++j] = o;
          }
        }
        tween.length = j + 1;
      }

      function tick(elapsed) {
        var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
            i = -1,
            n = tween.length;

        while (++i < n) {
          tween[i].call(node, t);
        }

        // Dispatch the end event.
        if (self.state === ENDING) {
          self.on.call("end", node, node.__data__, self.index, self.group);
          stop();
        }
      }

      function stop() {
        self.state = ENDED;
        self.timer.stop();
        delete schedules[id];
        for (var i in schedules) return; // eslint-disable-line no-unused-vars
        delete node.__transition;
      }
    }

    function interrupt(node, name) {
      var schedules = node.__transition,
          schedule,
          active,
          empty = true,
          i;

      if (!schedules) return;

      name = name == null ? null : name + "";

      for (i in schedules) {
        if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
        active = schedule.state > STARTING && schedule.state < ENDING;
        schedule.state = ENDED;
        schedule.timer.stop();
        schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
        delete schedules[i];
      }

      if (empty) delete node.__transition;
    }

    function selection_interrupt(name) {
      return this.each(function() {
        interrupt(this, name);
      });
    }

    function tweenRemove(id, name) {
      var tween0, tween1;
      return function() {
        var schedule = set(this, id),
            tween = schedule.tween;

        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = tween0 = tween;
          for (var i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1 = tween1.slice();
              tween1.splice(i, 1);
              break;
            }
          }
        }

        schedule.tween = tween1;
      };
    }

    function tweenFunction(id, name, value) {
      var tween0, tween1;
      if (typeof value !== "function") throw new Error;
      return function() {
        var schedule = set(this, id),
            tween = schedule.tween;

        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = (tween0 = tween).slice();
          for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1[i] = t;
              break;
            }
          }
          if (i === n) tween1.push(t);
        }

        schedule.tween = tween1;
      };
    }

    function transition_tween(name, value) {
      var id = this._id;

      name += "";

      if (arguments.length < 2) {
        var tween = get(this.node(), id).tween;
        for (var i = 0, n = tween.length, t; i < n; ++i) {
          if ((t = tween[i]).name === name) {
            return t.value;
          }
        }
        return null;
      }

      return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
    }

    function tweenValue(transition, name, value) {
      var id = transition._id;

      transition.each(function() {
        var schedule = set(this, id);
        (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
      });

      return function(node) {
        return get(node, id).value[name];
      };
    }

    function interpolate$1(a, b) {
      var c;
      return (typeof b === "number" ? interpolateNumber
          : b instanceof color ? interpolateRgb
          : (c = color(b)) ? (b = c, interpolateRgb)
          : interpolateString)(a, b);
    }

    function attrRemove(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant(name, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = this.getAttribute(name);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function attrConstantNS(fullname, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = this.getAttributeNS(fullname.space, fullname.local);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function attrFunction(name, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttribute(name);
        string0 = this.getAttribute(name);
        string1 = value1 + "";
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function attrFunctionNS(fullname, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
        string0 = this.getAttributeNS(fullname.space, fullname.local);
        string1 = value1 + "";
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function transition_attr(name, value) {
      var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$1;
      return this.attrTween(name, typeof value === "function"
          ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))
          : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
          : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
    }

    function attrInterpolate(name, i) {
      return function(t) {
        this.setAttribute(name, i.call(this, t));
      };
    }

    function attrInterpolateNS(fullname, i) {
      return function(t) {
        this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
      };
    }

    function attrTweenNS(fullname, value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function attrTween(name, value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function transition_attrTween(name, value) {
      var key = "attr." + name;
      if (arguments.length < 2) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      var fullname = namespace(name);
      return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
    }

    function delayFunction(id, value) {
      return function() {
        init(this, id).delay = +value.apply(this, arguments);
      };
    }

    function delayConstant(id, value) {
      return value = +value, function() {
        init(this, id).delay = value;
      };
    }

    function transition_delay(value) {
      var id = this._id;

      return arguments.length
          ? this.each((typeof value === "function"
              ? delayFunction
              : delayConstant)(id, value))
          : get(this.node(), id).delay;
    }

    function durationFunction(id, value) {
      return function() {
        set(this, id).duration = +value.apply(this, arguments);
      };
    }

    function durationConstant(id, value) {
      return value = +value, function() {
        set(this, id).duration = value;
      };
    }

    function transition_duration(value) {
      var id = this._id;

      return arguments.length
          ? this.each((typeof value === "function"
              ? durationFunction
              : durationConstant)(id, value))
          : get(this.node(), id).duration;
    }

    function easeConstant(id, value) {
      if (typeof value !== "function") throw new Error;
      return function() {
        set(this, id).ease = value;
      };
    }

    function transition_ease(value) {
      var id = this._id;

      return arguments.length
          ? this.each(easeConstant(id, value))
          : get(this.node(), id).ease;
    }

    function easeVarying(id, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (typeof v !== "function") throw new Error;
        set(this, id).ease = v;
      };
    }

    function transition_easeVarying(value) {
      if (typeof value !== "function") throw new Error;
      return this.each(easeVarying(this._id, value));
    }

    function transition_filter(match) {
      if (typeof match !== "function") match = matcher(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Transition(subgroups, this._parents, this._name, this._id);
    }

    function transition_merge(transition) {
      if (transition._id !== this._id) throw new Error;

      for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Transition(merges, this._parents, this._name, this._id);
    }

    function start(name) {
      return (name + "").trim().split(/^|\s+/).every(function(t) {
        var i = t.indexOf(".");
        if (i >= 0) t = t.slice(0, i);
        return !t || t === "start";
      });
    }

    function onFunction(id, name, listener) {
      var on0, on1, sit = start(name) ? init : set;
      return function() {
        var schedule = sit(this, id),
            on = schedule.on;

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

        schedule.on = on1;
      };
    }

    function transition_on(name, listener) {
      var id = this._id;

      return arguments.length < 2
          ? get(this.node(), id).on.on(name)
          : this.each(onFunction(id, name, listener));
    }

    function removeFunction(id) {
      return function() {
        var parent = this.parentNode;
        for (var i in this.__transition) if (+i !== id) return;
        if (parent) parent.removeChild(this);
      };
    }

    function transition_remove() {
      return this.on("end.remove", removeFunction(this._id));
    }

    function transition_select(select) {
      var name = this._name,
          id = this._id;

      if (typeof select !== "function") select = selector(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
            schedule(subgroup[i], name, id, i, subgroup, get(node, id));
          }
        }
      }

      return new Transition(subgroups, this._parents, name, id);
    }

    function transition_selectAll(select) {
      var name = this._name,
          id = this._id;

      if (typeof select !== "function") select = selectorAll(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
              if (child = children[k]) {
                schedule(child, name, id, k, children, inherit);
              }
            }
            subgroups.push(children);
            parents.push(node);
          }
        }
      }

      return new Transition(subgroups, parents, name, id);
    }

    var Selection = selection.prototype.constructor;

    function transition_selection() {
      return new Selection(this._groups, this._parents);
    }

    function styleNull(name, interpolate) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0 = styleValue(this, name),
            string1 = (this.style.removeProperty(name), styleValue(this, name));
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, string10 = string1);
      };
    }

    function styleRemove(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant(name, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = styleValue(this, name);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function styleFunction(name, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0 = styleValue(this, name),
            value1 = value(this),
            string1 = value1 + "";
        if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function styleMaybeRemove(id, name) {
      var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
      return function() {
        var schedule = set(this, id),
            on = schedule.on,
            listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

        schedule.on = on1;
      };
    }

    function transition_style(name, value, priority) {
      var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$1;
      return value == null ? this
          .styleTween(name, styleNull(name, i))
          .on("end.style." + name, styleRemove(name))
        : typeof value === "function" ? this
          .styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value)))
          .each(styleMaybeRemove(this._id, name))
        : this
          .styleTween(name, styleConstant(name, i, value), priority)
          .on("end.style." + name, null);
    }

    function styleInterpolate(name, i, priority) {
      return function(t) {
        this.style.setProperty(name, i.call(this, t), priority);
      };
    }

    function styleTween(name, value, priority) {
      var t, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
        return t;
      }
      tween._value = value;
      return tween;
    }

    function transition_styleTween(name, value, priority) {
      var key = "style." + (name += "");
      if (arguments.length < 2) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
    }

    function textConstant(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction(value) {
      return function() {
        var value1 = value(this);
        this.textContent = value1 == null ? "" : value1;
      };
    }

    function transition_text(value) {
      return this.tween("text", typeof value === "function"
          ? textFunction(tweenValue(this, "text", value))
          : textConstant(value == null ? "" : value + ""));
    }

    function textInterpolate(i) {
      return function(t) {
        this.textContent = i.call(this, t);
      };
    }

    function textTween(value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function transition_textTween(value) {
      var key = "text";
      if (arguments.length < 1) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      return this.tween(key, textTween(value));
    }

    function transition_transition() {
      var name = this._name,
          id0 = this._id,
          id1 = newId();

      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            var inherit = get(node, id0);
            schedule(node, name, id1, i, group, {
              time: inherit.time + inherit.delay + inherit.duration,
              delay: 0,
              duration: inherit.duration,
              ease: inherit.ease
            });
          }
        }
      }

      return new Transition(groups, this._parents, name, id1);
    }

    function transition_end() {
      var on0, on1, that = this, id = that._id, size = that.size();
      return new Promise(function(resolve, reject) {
        var cancel = {value: reject},
            end = {value: function() { if (--size === 0) resolve(); }};

        that.each(function() {
          var schedule = set(this, id),
              on = schedule.on;

          // If this node shared a dispatch with the previous node,
          // just assign the updated shared dispatch and we’re done!
          // Otherwise, copy-on-write.
          if (on !== on0) {
            on1 = (on0 = on).copy();
            on1._.cancel.push(cancel);
            on1._.interrupt.push(cancel);
            on1._.end.push(end);
          }

          schedule.on = on1;
        });

        // The selection was empty, resolve end immediately
        if (size === 0) resolve();
      });
    }

    var id = 0;

    function Transition(groups, parents, name, id) {
      this._groups = groups;
      this._parents = parents;
      this._name = name;
      this._id = id;
    }

    function transition(name) {
      return selection().transition(name);
    }

    function newId() {
      return ++id;
    }

    var selection_prototype = selection.prototype;

    Transition.prototype = transition.prototype = {
      constructor: Transition,
      select: transition_select,
      selectAll: transition_selectAll,
      selectChild: selection_prototype.selectChild,
      selectChildren: selection_prototype.selectChildren,
      filter: transition_filter,
      merge: transition_merge,
      selection: transition_selection,
      transition: transition_transition,
      call: selection_prototype.call,
      nodes: selection_prototype.nodes,
      node: selection_prototype.node,
      size: selection_prototype.size,
      empty: selection_prototype.empty,
      each: selection_prototype.each,
      on: transition_on,
      attr: transition_attr,
      attrTween: transition_attrTween,
      style: transition_style,
      styleTween: transition_styleTween,
      text: transition_text,
      textTween: transition_textTween,
      remove: transition_remove,
      tween: transition_tween,
      delay: transition_delay,
      duration: transition_duration,
      ease: transition_ease,
      easeVarying: transition_easeVarying,
      end: transition_end,
      [Symbol.iterator]: selection_prototype[Symbol.iterator]
    };

    const linear$1 = t => +t;

    function quadIn(t) {
      return t * t;
    }

    function quadOut(t) {
      return t * (2 - t);
    }

    function quadInOut(t) {
      return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
    }

    function cubicIn(t) {
      return t * t * t;
    }

    function cubicOut(t) {
      return --t * t * t + 1;
    }

    function cubicInOut(t) {
      return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
    }

    var exponent$1 = 3;

    var polyIn = (function custom(e) {
      e = +e;

      function polyIn(t) {
        return Math.pow(t, e);
      }

      polyIn.exponent = custom;

      return polyIn;
    })(exponent$1);

    var polyOut = (function custom(e) {
      e = +e;

      function polyOut(t) {
        return 1 - Math.pow(1 - t, e);
      }

      polyOut.exponent = custom;

      return polyOut;
    })(exponent$1);

    var polyInOut = (function custom(e) {
      e = +e;

      function polyInOut(t) {
        return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
      }

      polyInOut.exponent = custom;

      return polyInOut;
    })(exponent$1);

    var pi$4 = Math.PI,
        halfPi$3 = pi$4 / 2;

    function sinIn(t) {
      return (+t === 1) ? 1 : 1 - Math.cos(t * halfPi$3);
    }

    function sinOut(t) {
      return Math.sin(t * halfPi$3);
    }

    function sinInOut(t) {
      return (1 - Math.cos(pi$4 * t)) / 2;
    }

    // tpmt is two power minus ten times t scaled to [0,1]
    function tpmt(x) {
      return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;
    }

    function expIn(t) {
      return tpmt(1 - +t);
    }

    function expOut(t) {
      return 1 - tpmt(t);
    }

    function expInOut(t) {
      return ((t *= 2) <= 1 ? tpmt(1 - t) : 2 - tpmt(t - 1)) / 2;
    }

    function circleIn(t) {
      return 1 - Math.sqrt(1 - t * t);
    }

    function circleOut(t) {
      return Math.sqrt(1 - --t * t);
    }

    function circleInOut(t) {
      return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
    }

    var b1 = 4 / 11,
        b2 = 6 / 11,
        b3 = 8 / 11,
        b4 = 3 / 4,
        b5 = 9 / 11,
        b6 = 10 / 11,
        b7 = 15 / 16,
        b8 = 21 / 22,
        b9 = 63 / 64,
        b0 = 1 / b1 / b1;

    function bounceIn(t) {
      return 1 - bounceOut(1 - t);
    }

    function bounceOut(t) {
      return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
    }

    function bounceInOut(t) {
      return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
    }

    var overshoot = 1.70158;

    var backIn = (function custom(s) {
      s = +s;

      function backIn(t) {
        return (t = +t) * t * (s * (t - 1) + t);
      }

      backIn.overshoot = custom;

      return backIn;
    })(overshoot);

    var backOut = (function custom(s) {
      s = +s;

      function backOut(t) {
        return --t * t * ((t + 1) * s + t) + 1;
      }

      backOut.overshoot = custom;

      return backOut;
    })(overshoot);

    var backInOut = (function custom(s) {
      s = +s;

      function backInOut(t) {
        return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
      }

      backInOut.overshoot = custom;

      return backInOut;
    })(overshoot);

    var tau$5 = 2 * Math.PI,
        amplitude = 1,
        period = 0.3;

    var elasticIn = (function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$5);

      function elasticIn(t) {
        return a * tpmt(-(--t)) * Math.sin((s - t) / p);
      }

      elasticIn.amplitude = function(a) { return custom(a, p * tau$5); };
      elasticIn.period = function(p) { return custom(a, p); };

      return elasticIn;
    })(amplitude, period);

    var elasticOut = (function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$5);

      function elasticOut(t) {
        return 1 - a * tpmt(t = +t) * Math.sin((t + s) / p);
      }

      elasticOut.amplitude = function(a) { return custom(a, p * tau$5); };
      elasticOut.period = function(p) { return custom(a, p); };

      return elasticOut;
    })(amplitude, period);

    var elasticInOut = (function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$5);

      function elasticInOut(t) {
        return ((t = t * 2 - 1) < 0
            ? a * tpmt(-t) * Math.sin((s - t) / p)
            : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2;
      }

      elasticInOut.amplitude = function(a) { return custom(a, p * tau$5); };
      elasticInOut.period = function(p) { return custom(a, p); };

      return elasticInOut;
    })(amplitude, period);

    var defaultTiming = {
      time: null, // Set on use.
      delay: 0,
      duration: 250,
      ease: cubicInOut
    };

    function inherit(node, id) {
      var timing;
      while (!(timing = node.__transition) || !(timing = timing[id])) {
        if (!(node = node.parentNode)) {
          throw new Error(`transition ${id} not found`);
        }
      }
      return timing;
    }

    function selection_transition(name) {
      var id,
          timing;

      if (name instanceof Transition) {
        id = name._id, name = name._name;
      } else {
        id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
      }

      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            schedule(node, name, id, i, group, timing || inherit(node, id));
          }
        }
      }

      return new Transition(groups, this._parents, name, id);
    }

    selection.prototype.interrupt = selection_interrupt;
    selection.prototype.transition = selection_transition;

    var root = [null];

    function active(node, name) {
      var schedules = node.__transition,
          schedule,
          i;

      if (schedules) {
        name = name == null ? null : name + "";
        for (i in schedules) {
          if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
            return new Transition([[node]], root, name, +i);
          }
        }
      }

      return null;
    }

    var constant$7 = x => () => x;

    function BrushEvent(type, {
      sourceEvent,
      target,
      selection,
      mode,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        selection: {value: selection, enumerable: true, configurable: true},
        mode: {value: mode, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    function nopropagation$1(event) {
      event.stopImmediatePropagation();
    }

    function noevent$1(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    var MODE_DRAG = {name: "drag"},
        MODE_SPACE = {name: "space"},
        MODE_HANDLE = {name: "handle"},
        MODE_CENTER = {name: "center"};

    const {abs: abs$3, max: max$2, min: min$1} = Math;

    function number1(e) {
      return [+e[0], +e[1]];
    }

    function number2(e) {
      return [number1(e[0]), number1(e[1])];
    }

    var X = {
      name: "x",
      handles: ["w", "e"].map(type),
      input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },
      output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
    };

    var Y = {
      name: "y",
      handles: ["n", "s"].map(type),
      input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },
      output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
    };

    var XY = {
      name: "xy",
      handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
      input: function(xy) { return xy == null ? null : number2(xy); },
      output: function(xy) { return xy; }
    };

    var cursors = {
      overlay: "crosshair",
      selection: "move",
      n: "ns-resize",
      e: "ew-resize",
      s: "ns-resize",
      w: "ew-resize",
      nw: "nwse-resize",
      ne: "nesw-resize",
      se: "nwse-resize",
      sw: "nesw-resize"
    };

    var flipX = {
      e: "w",
      w: "e",
      nw: "ne",
      ne: "nw",
      se: "sw",
      sw: "se"
    };

    var flipY = {
      n: "s",
      s: "n",
      nw: "sw",
      ne: "se",
      se: "ne",
      sw: "nw"
    };

    var signsX = {
      overlay: +1,
      selection: +1,
      n: null,
      e: +1,
      s: null,
      w: -1,
      nw: -1,
      ne: +1,
      se: +1,
      sw: -1
    };

    var signsY = {
      overlay: +1,
      selection: +1,
      n: -1,
      e: null,
      s: +1,
      w: null,
      nw: -1,
      ne: -1,
      se: +1,
      sw: +1
    };

    function type(t) {
      return {type: t};
    }

    // Ignore right-click, since that should open the context menu.
    function defaultFilter$1(event) {
      return !event.ctrlKey && !event.button;
    }

    function defaultExtent$1() {
      var svg = this.ownerSVGElement || this;
      if (svg.hasAttribute("viewBox")) {
        svg = svg.viewBox.baseVal;
        return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
      }
      return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
    }

    function defaultTouchable$1() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    // Like d3.local, but with the name “__brush” rather than auto-generated.
    function local(node) {
      while (!node.__brush) if (!(node = node.parentNode)) return;
      return node.__brush;
    }

    function empty(extent) {
      return extent[0][0] === extent[1][0]
          || extent[0][1] === extent[1][1];
    }

    function brushSelection(node) {
      var state = node.__brush;
      return state ? state.dim.output(state.selection) : null;
    }

    function brushX() {
      return brush$1(X);
    }

    function brushY() {
      return brush$1(Y);
    }

    function brush() {
      return brush$1(XY);
    }

    function brush$1(dim) {
      var extent = defaultExtent$1,
          filter = defaultFilter$1,
          touchable = defaultTouchable$1,
          keys = true,
          listeners = dispatch("start", "brush", "end"),
          handleSize = 6,
          touchending;

      function brush(group) {
        var overlay = group
            .property("__brush", initialize)
          .selectAll(".overlay")
          .data([type("overlay")]);

        overlay.enter().append("rect")
            .attr("class", "overlay")
            .attr("pointer-events", "all")
            .attr("cursor", cursors.overlay)
          .merge(overlay)
            .each(function() {
              var extent = local(this).extent;
              select(this)
                  .attr("x", extent[0][0])
                  .attr("y", extent[0][1])
                  .attr("width", extent[1][0] - extent[0][0])
                  .attr("height", extent[1][1] - extent[0][1]);
            });

        group.selectAll(".selection")
          .data([type("selection")])
          .enter().append("rect")
            .attr("class", "selection")
            .attr("cursor", cursors.selection)
            .attr("fill", "#777")
            .attr("fill-opacity", 0.3)
            .attr("stroke", "#fff")
            .attr("shape-rendering", "crispEdges");

        var handle = group.selectAll(".handle")
          .data(dim.handles, function(d) { return d.type; });

        handle.exit().remove();

        handle.enter().append("rect")
            .attr("class", function(d) { return "handle handle--" + d.type; })
            .attr("cursor", function(d) { return cursors[d.type]; });

        group
            .each(redraw)
            .attr("fill", "none")
            .attr("pointer-events", "all")
            .on("mousedown.brush", started)
          .filter(touchable)
            .on("touchstart.brush", started)
            .on("touchmove.brush", touchmoved)
            .on("touchend.brush touchcancel.brush", touchended)
            .style("touch-action", "none")
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      brush.move = function(group, selection, event) {
        if (group.tween) {
          group
              .on("start.brush", function(event) { emitter(this, arguments).beforestart().start(event); })
              .on("interrupt.brush end.brush", function(event) { emitter(this, arguments).end(event); })
              .tween("brush", function() {
                var that = this,
                    state = that.__brush,
                    emit = emitter(that, arguments),
                    selection0 = state.selection,
                    selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
                    i = interpolate$2(selection0, selection1);

                function tween(t) {
                  state.selection = t === 1 && selection1 === null ? null : i(t);
                  redraw.call(that);
                  emit.brush();
                }

                return selection0 !== null && selection1 !== null ? tween : tween(1);
              });
        } else {
          group
              .each(function() {
                var that = this,
                    args = arguments,
                    state = that.__brush,
                    selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
                    emit = emitter(that, args).beforestart();

                interrupt(that);
                state.selection = selection1 === null ? null : selection1;
                redraw.call(that);
                emit.start(event).brush(event).end(event);
              });
        }
      };

      brush.clear = function(group, event) {
        brush.move(group, null, event);
      };

      function redraw() {
        var group = select(this),
            selection = local(this).selection;

        if (selection) {
          group.selectAll(".selection")
              .style("display", null)
              .attr("x", selection[0][0])
              .attr("y", selection[0][1])
              .attr("width", selection[1][0] - selection[0][0])
              .attr("height", selection[1][1] - selection[0][1]);

          group.selectAll(".handle")
              .style("display", null)
              .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
              .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
              .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
              .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
        }

        else {
          group.selectAll(".selection,.handle")
              .style("display", "none")
              .attr("x", null)
              .attr("y", null)
              .attr("width", null)
              .attr("height", null);
        }
      }

      function emitter(that, args, clean) {
        var emit = that.__brush.emitter;
        return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
      }

      function Emitter(that, args, clean) {
        this.that = that;
        this.args = args;
        this.state = that.__brush;
        this.active = 0;
        this.clean = clean;
      }

      Emitter.prototype = {
        beforestart: function() {
          if (++this.active === 1) this.state.emitter = this, this.starting = true;
          return this;
        },
        start: function(event, mode) {
          if (this.starting) this.starting = false, this.emit("start", event, mode);
          else this.emit("brush", event);
          return this;
        },
        brush: function(event, mode) {
          this.emit("brush", event, mode);
          return this;
        },
        end: function(event, mode) {
          if (--this.active === 0) delete this.state.emitter, this.emit("end", event, mode);
          return this;
        },
        emit: function(type, event, mode) {
          var d = select(this.that).datum();
          listeners.call(
            type,
            this.that,
            new BrushEvent(type, {
              sourceEvent: event,
              target: brush,
              selection: dim.output(this.state.selection),
              mode,
              dispatch: listeners
            }),
            d
          );
        }
      };

      function started(event) {
        if (touchending && !event.touches) return;
        if (!filter.apply(this, arguments)) return;

        var that = this,
            type = event.target.__data__.type,
            mode = (keys && event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),
            signX = dim === Y ? null : signsX[type],
            signY = dim === X ? null : signsY[type],
            state = local(that),
            extent = state.extent,
            selection = state.selection,
            W = extent[0][0], w0, w1,
            N = extent[0][1], n0, n1,
            E = extent[1][0], e0, e1,
            S = extent[1][1], s0, s1,
            dx = 0,
            dy = 0,
            moving,
            shifting = signX && signY && keys && event.shiftKey,
            lockX,
            lockY,
            points = Array.from(event.touches || [event], t => {
              const i = t.identifier;
              t = pointer(t, that);
              t.point0 = t.slice();
              t.identifier = i;
              return t;
            });

        interrupt(that);
        var emit = emitter(that, arguments, true).beforestart();

        if (type === "overlay") {
          if (selection) moving = true;
          const pts = [points[0], points[1] || points[0]];
          state.selection = selection = [[
              w0 = dim === Y ? W : min$1(pts[0][0], pts[1][0]),
              n0 = dim === X ? N : min$1(pts[0][1], pts[1][1])
            ], [
              e0 = dim === Y ? E : max$2(pts[0][0], pts[1][0]),
              s0 = dim === X ? S : max$2(pts[0][1], pts[1][1])
            ]];
          if (points.length > 1) move(event);
        } else {
          w0 = selection[0][0];
          n0 = selection[0][1];
          e0 = selection[1][0];
          s0 = selection[1][1];
        }

        w1 = w0;
        n1 = n0;
        e1 = e0;
        s1 = s0;

        var group = select(that)
            .attr("pointer-events", "none");

        var overlay = group.selectAll(".overlay")
            .attr("cursor", cursors[type]);

        if (event.touches) {
          emit.moved = moved;
          emit.ended = ended;
        } else {
          var view = select(event.view)
              .on("mousemove.brush", moved, true)
              .on("mouseup.brush", ended, true);
          if (keys) view
              .on("keydown.brush", keydowned, true)
              .on("keyup.brush", keyupped, true);

          dragDisable(event.view);
        }

        redraw.call(that);
        emit.start(event, mode.name);

        function moved(event) {
          for (const p of event.changedTouches || [event]) {
            for (const d of points)
              if (d.identifier === p.identifier) d.cur = pointer(p, that);
          }
          if (shifting && !lockX && !lockY && points.length === 1) {
            const point = points[0];
            if (abs$3(point.cur[0] - point[0]) > abs$3(point.cur[1] - point[1]))
              lockY = true;
            else
              lockX = true;
          }
          for (const point of points)
            if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];
          moving = true;
          noevent$1(event);
          move(event);
        }

        function move(event) {
          const point = points[0], point0 = point.point0;
          var t;

          dx = point[0] - point0[0];
          dy = point[1] - point0[1];

          switch (mode) {
            case MODE_SPACE:
            case MODE_DRAG: {
              if (signX) dx = max$2(W - w0, min$1(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
              if (signY) dy = max$2(N - n0, min$1(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
              break;
            }
            case MODE_HANDLE: {
              if (points[1]) {
                if (signX) w1 = max$2(W, min$1(E, points[0][0])), e1 = max$2(W, min$1(E, points[1][0])), signX = 1;
                if (signY) n1 = max$2(N, min$1(S, points[0][1])), s1 = max$2(N, min$1(S, points[1][1])), signY = 1;
              } else {
                if (signX < 0) dx = max$2(W - w0, min$1(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                else if (signX > 0) dx = max$2(W - e0, min$1(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                if (signY < 0) dy = max$2(N - n0, min$1(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                else if (signY > 0) dy = max$2(N - s0, min$1(S - s0, dy)), n1 = n0, s1 = s0 + dy;
              }
              break;
            }
            case MODE_CENTER: {
              if (signX) w1 = max$2(W, min$1(E, w0 - dx * signX)), e1 = max$2(W, min$1(E, e0 + dx * signX));
              if (signY) n1 = max$2(N, min$1(S, n0 - dy * signY)), s1 = max$2(N, min$1(S, s0 + dy * signY));
              break;
            }
          }

          if (e1 < w1) {
            signX *= -1;
            t = w0, w0 = e0, e0 = t;
            t = w1, w1 = e1, e1 = t;
            if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
          }

          if (s1 < n1) {
            signY *= -1;
            t = n0, n0 = s0, s0 = t;
            t = n1, n1 = s1, s1 = t;
            if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
          }

          if (state.selection) selection = state.selection; // May be set by brush.move!
          if (lockX) w1 = selection[0][0], e1 = selection[1][0];
          if (lockY) n1 = selection[0][1], s1 = selection[1][1];

          if (selection[0][0] !== w1
              || selection[0][1] !== n1
              || selection[1][0] !== e1
              || selection[1][1] !== s1) {
            state.selection = [[w1, n1], [e1, s1]];
            redraw.call(that);
            emit.brush(event, mode.name);
          }
        }

        function ended(event) {
          nopropagation$1(event);
          if (event.touches) {
            if (event.touches.length) return;
            if (touchending) clearTimeout(touchending);
            touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
          } else {
            yesdrag(event.view, moving);
            view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
          }
          group.attr("pointer-events", "all");
          overlay.attr("cursor", cursors.overlay);
          if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
          if (empty(selection)) state.selection = null, redraw.call(that);
          emit.end(event, mode.name);
        }

        function keydowned(event) {
          switch (event.keyCode) {
            case 16: { // SHIFT
              shifting = signX && signY;
              break;
            }
            case 18: { // ALT
              if (mode === MODE_HANDLE) {
                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                mode = MODE_CENTER;
                move(event);
              }
              break;
            }
            case 32: { // SPACE; takes priority over ALT
              if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
                if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
                mode = MODE_SPACE;
                overlay.attr("cursor", cursors.selection);
                move(event);
              }
              break;
            }
            default: return;
          }
          noevent$1(event);
        }

        function keyupped(event) {
          switch (event.keyCode) {
            case 16: { // SHIFT
              if (shifting) {
                lockX = lockY = shifting = false;
                move(event);
              }
              break;
            }
            case 18: { // ALT
              if (mode === MODE_CENTER) {
                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
                mode = MODE_HANDLE;
                move(event);
              }
              break;
            }
            case 32: { // SPACE
              if (mode === MODE_SPACE) {
                if (event.altKey) {
                  if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                  if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                  mode = MODE_CENTER;
                } else {
                  if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
                  if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
                  mode = MODE_HANDLE;
                }
                overlay.attr("cursor", cursors[type]);
                move(event);
              }
              break;
            }
            default: return;
          }
          noevent$1(event);
        }
      }

      function touchmoved(event) {
        emitter(this, arguments).moved(event);
      }

      function touchended(event) {
        emitter(this, arguments).ended(event);
      }

      function initialize() {
        var state = this.__brush || {selection: null};
        state.extent = number2(extent.apply(this, arguments));
        state.dim = dim;
        return state;
      }

      brush.extent = function(_) {
        return arguments.length ? (extent = typeof _ === "function" ? _ : constant$7(number2(_)), brush) : extent;
      };

      brush.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant$7(!!_), brush) : filter;
      };

      brush.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$7(!!_), brush) : touchable;
      };

      brush.handleSize = function(_) {
        return arguments.length ? (handleSize = +_, brush) : handleSize;
      };

      brush.keyModifiers = function(_) {
        return arguments.length ? (keys = !!_, brush) : keys;
      };

      brush.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? brush : value;
      };

      return brush;
    }

    var abs$2 = Math.abs;
    var cos$2 = Math.cos;
    var sin$2 = Math.sin;
    var pi$3 = Math.PI;
    var halfPi$2 = pi$3 / 2;
    var tau$4 = pi$3 * 2;
    var max$1 = Math.max;
    var epsilon$5 = 1e-12;

    function range$1(i, j) {
      return Array.from({length: j - i}, (_, k) => i + k);
    }

    function compareValue(compare) {
      return function(a, b) {
        return compare(
          a.source.value + a.target.value,
          b.source.value + b.target.value
        );
      };
    }

    function chord() {
      return chord$1(false, false);
    }

    function chordTranspose() {
      return chord$1(false, true);
    }

    function chordDirected() {
      return chord$1(true, false);
    }

    function chord$1(directed, transpose) {
      var padAngle = 0,
          sortGroups = null,
          sortSubgroups = null,
          sortChords = null;

      function chord(matrix) {
        var n = matrix.length,
            groupSums = new Array(n),
            groupIndex = range$1(0, n),
            chords = new Array(n * n),
            groups = new Array(n),
            k = 0, dx;

        matrix = Float64Array.from({length: n * n}, transpose
            ? (_, i) => matrix[i % n][i / n | 0]
            : (_, i) => matrix[i / n | 0][i % n]);

        // Compute the scaling factor from value to angle in [0, 2pi].
        for (let i = 0; i < n; ++i) {
          let x = 0;
          for (let j = 0; j < n; ++j) x += matrix[i * n + j] + directed * matrix[j * n + i];
          k += groupSums[i] = x;
        }
        k = max$1(0, tau$4 - padAngle * n) / k;
        dx = k ? padAngle : tau$4 / n;

        // Compute the angles for each group and constituent chord.
        {
          let x = 0;
          if (sortGroups) groupIndex.sort((a, b) => sortGroups(groupSums[a], groupSums[b]));
          for (const i of groupIndex) {
            const x0 = x;
            if (directed) {
              const subgroupIndex = range$1(~n + 1, n).filter(j => j < 0 ? matrix[~j * n + i] : matrix[i * n + j]);
              if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(a < 0 ? -matrix[~a * n + i] : matrix[i * n + a], b < 0 ? -matrix[~b * n + i] : matrix[i * n + b]));
              for (const j of subgroupIndex) {
                if (j < 0) {
                  const chord = chords[~j * n + i] || (chords[~j * n + i] = {source: null, target: null});
                  chord.target = {index: i, startAngle: x, endAngle: x += matrix[~j * n + i] * k, value: matrix[~j * n + i]};
                } else {
                  const chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});
                  chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};
                }
              }
              groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};
            } else {
              const subgroupIndex = range$1(0, n).filter(j => matrix[i * n + j] || matrix[j * n + i]);
              if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(matrix[i * n + a], matrix[i * n + b]));
              for (const j of subgroupIndex) {
                let chord;
                if (i < j) {
                  chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});
                  chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};
                } else {
                  chord = chords[j * n + i] || (chords[j * n + i] = {source: null, target: null});
                  chord.target = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};
                  if (i === j) chord.source = chord.target;
                }
                if (chord.source && chord.target && chord.source.value < chord.target.value) {
                  const source = chord.source;
                  chord.source = chord.target;
                  chord.target = source;
                }
              }
              groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};
            }
            x += dx;
          }
        }

        // Remove empty chords.
        chords = Object.values(chords);
        chords.groups = groups;
        return sortChords ? chords.sort(sortChords) : chords;
      }

      chord.padAngle = function(_) {
        return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
      };

      chord.sortGroups = function(_) {
        return arguments.length ? (sortGroups = _, chord) : sortGroups;
      };

      chord.sortSubgroups = function(_) {
        return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
      };

      chord.sortChords = function(_) {
        return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
      };

      return chord;
    }

    const pi$2 = Math.PI,
        tau$3 = 2 * pi$2,
        epsilon$4 = 1e-6,
        tauEpsilon = tau$3 - epsilon$4;

    function append$1(strings) {
      this._ += strings[0];
      for (let i = 1, n = strings.length; i < n; ++i) {
        this._ += arguments[i] + strings[i];
      }
    }

    function appendRound$1(digits) {
      let d = Math.floor(digits);
      if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
      if (d > 15) return append$1;
      const k = 10 ** d;
      return function(strings) {
        this._ += strings[0];
        for (let i = 1, n = strings.length; i < n; ++i) {
          this._ += Math.round(arguments[i] * k) / k + strings[i];
        }
      };
    }

    let Path$1 = class Path {
      constructor(digits) {
        this._x0 = this._y0 = // start of current subpath
        this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
        this._append = digits == null ? append$1 : appendRound$1(digits);
      }
      moveTo(x, y) {
        this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
      }
      closePath() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._append`Z`;
        }
      }
      lineTo(x, y) {
        this._append`L${this._x1 = +x},${this._y1 = +y}`;
      }
      quadraticCurveTo(x1, y1, x, y) {
        this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;
      }
      bezierCurveTo(x1, y1, x2, y2, x, y) {
        this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;
      }
      arcTo(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;

        // Is the radius negative? Error.
        if (r < 0) throw new Error(`negative radius: ${r}`);

        let x0 = this._x1,
            y0 = this._y1,
            x21 = x2 - x1,
            y21 = y2 - y1,
            x01 = x0 - x1,
            y01 = y0 - y1,
            l01_2 = x01 * x01 + y01 * y01;

        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) {
          this._append`M${this._x1 = x1},${this._y1 = y1}`;
        }

        // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
        else if (!(l01_2 > epsilon$4));

        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$4) || !r) {
          this._append`L${this._x1 = x1},${this._y1 = y1}`;
        }

        // Otherwise, draw an arc!
        else {
          let x20 = x2 - x0,
              y20 = y2 - y0,
              l21_2 = x21 * x21 + y21 * y21,
              l20_2 = x20 * x20 + y20 * y20,
              l21 = Math.sqrt(l21_2),
              l01 = Math.sqrt(l01_2),
              l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
              t01 = l / l01,
              t21 = l / l21;

          // If the start tangent is not coincident with (x0,y0), line to.
          if (Math.abs(t01 - 1) > epsilon$4) {
            this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
          }

          this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
        }
      }
      arc(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;

        // Is the radius negative? Error.
        if (r < 0) throw new Error(`negative radius: ${r}`);

        let dx = r * Math.cos(a0),
            dy = r * Math.sin(a0),
            x0 = x + dx,
            y0 = y + dy,
            cw = 1 ^ ccw,
            da = ccw ? a0 - a1 : a1 - a0;

        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) {
          this._append`M${x0},${y0}`;
        }

        // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
        else if (Math.abs(this._x1 - x0) > epsilon$4 || Math.abs(this._y1 - y0) > epsilon$4) {
          this._append`L${x0},${y0}`;
        }

        // Is this arc empty? We’re done.
        if (!r) return;

        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau$3 + tau$3;

        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
          this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
        }

        // Is this arc non-empty? Draw an arc!
        else if (da > epsilon$4) {
          this._append`A${r},${r},0,${+(da >= pi$2)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;
        }
      }
      rect(x, y, w, h) {
        this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;
      }
      toString() {
        return this._;
      }
    };

    function path() {
      return new Path$1;
    }

    // Allow instanceof d3.path
    path.prototype = Path$1.prototype;

    function pathRound(digits = 3) {
      return new Path$1(+digits);
    }

    var slice$2 = Array.prototype.slice;

    function constant$6(x) {
      return function() {
        return x;
      };
    }

    function defaultSource$1(d) {
      return d.source;
    }

    function defaultTarget(d) {
      return d.target;
    }

    function defaultRadius$1(d) {
      return d.radius;
    }

    function defaultStartAngle(d) {
      return d.startAngle;
    }

    function defaultEndAngle(d) {
      return d.endAngle;
    }

    function defaultPadAngle() {
      return 0;
    }

    function defaultArrowheadRadius() {
      return 10;
    }

    function ribbon(headRadius) {
      var source = defaultSource$1,
          target = defaultTarget,
          sourceRadius = defaultRadius$1,
          targetRadius = defaultRadius$1,
          startAngle = defaultStartAngle,
          endAngle = defaultEndAngle,
          padAngle = defaultPadAngle,
          context = null;

      function ribbon() {
        var buffer,
            s = source.apply(this, arguments),
            t = target.apply(this, arguments),
            ap = padAngle.apply(this, arguments) / 2,
            argv = slice$2.call(arguments),
            sr = +sourceRadius.apply(this, (argv[0] = s, argv)),
            sa0 = startAngle.apply(this, argv) - halfPi$2,
            sa1 = endAngle.apply(this, argv) - halfPi$2,
            tr = +targetRadius.apply(this, (argv[0] = t, argv)),
            ta0 = startAngle.apply(this, argv) - halfPi$2,
            ta1 = endAngle.apply(this, argv) - halfPi$2;

        if (!context) context = buffer = path();

        if (ap > epsilon$5) {
          if (abs$2(sa1 - sa0) > ap * 2 + epsilon$5) sa1 > sa0 ? (sa0 += ap, sa1 -= ap) : (sa0 -= ap, sa1 += ap);
          else sa0 = sa1 = (sa0 + sa1) / 2;
          if (abs$2(ta1 - ta0) > ap * 2 + epsilon$5) ta1 > ta0 ? (ta0 += ap, ta1 -= ap) : (ta0 -= ap, ta1 += ap);
          else ta0 = ta1 = (ta0 + ta1) / 2;
        }

        context.moveTo(sr * cos$2(sa0), sr * sin$2(sa0));
        context.arc(0, 0, sr, sa0, sa1);
        if (sa0 !== ta0 || sa1 !== ta1) {
          if (headRadius) {
            var hr = +headRadius.apply(this, arguments), tr2 = tr - hr, ta2 = (ta0 + ta1) / 2;
            context.quadraticCurveTo(0, 0, tr2 * cos$2(ta0), tr2 * sin$2(ta0));
            context.lineTo(tr * cos$2(ta2), tr * sin$2(ta2));
            context.lineTo(tr2 * cos$2(ta1), tr2 * sin$2(ta1));
          } else {
            context.quadraticCurveTo(0, 0, tr * cos$2(ta0), tr * sin$2(ta0));
            context.arc(0, 0, tr, ta0, ta1);
          }
        }
        context.quadraticCurveTo(0, 0, sr * cos$2(sa0), sr * sin$2(sa0));
        context.closePath();

        if (buffer) return context = null, buffer + "" || null;
      }

      if (headRadius) ribbon.headRadius = function(_) {
        return arguments.length ? (headRadius = typeof _ === "function" ? _ : constant$6(+_), ribbon) : headRadius;
      };

      ribbon.radius = function(_) {
        return arguments.length ? (sourceRadius = targetRadius = typeof _ === "function" ? _ : constant$6(+_), ribbon) : sourceRadius;
      };

      ribbon.sourceRadius = function(_) {
        return arguments.length ? (sourceRadius = typeof _ === "function" ? _ : constant$6(+_), ribbon) : sourceRadius;
      };

      ribbon.targetRadius = function(_) {
        return arguments.length ? (targetRadius = typeof _ === "function" ? _ : constant$6(+_), ribbon) : targetRadius;
      };

      ribbon.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$6(+_), ribbon) : startAngle;
      };

      ribbon.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$6(+_), ribbon) : endAngle;
      };

      ribbon.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$6(+_), ribbon) : padAngle;
      };

      ribbon.source = function(_) {
        return arguments.length ? (source = _, ribbon) : source;
      };

      ribbon.target = function(_) {
        return arguments.length ? (target = _, ribbon) : target;
      };

      ribbon.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
      };

      return ribbon;
    }

    function ribbon$1() {
      return ribbon();
    }

    function ribbonArrow() {
      return ribbon(defaultArrowheadRadius);
    }

    var array$2 = Array.prototype;

    var slice$1 = array$2.slice;

    function ascending$1(a, b) {
      return a - b;
    }

    function area$3(ring) {
      var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
      while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
      return area;
    }

    var constant$5 = x => () => x;

    function contains$2(ring, hole) {
      var i = -1, n = hole.length, c;
      while (++i < n) if (c = ringContains(ring, hole[i])) return c;
      return 0;
    }

    function ringContains(ring, point) {
      var x = point[0], y = point[1], contains = -1;
      for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
        var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
        if (segmentContains(pi, pj, point)) return 0;
        if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
      }
      return contains;
    }

    function segmentContains(a, b, c) {
      var i; return collinear$1(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
    }

    function collinear$1(a, b, c) {
      return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
    }

    function within(p, q, r) {
      return p <= q && q <= r || r <= q && q <= p;
    }

    function noop$2() {}

    var cases = [
      [],
      [[[1.0, 1.5], [0.5, 1.0]]],
      [[[1.5, 1.0], [1.0, 1.5]]],
      [[[1.5, 1.0], [0.5, 1.0]]],
      [[[1.0, 0.5], [1.5, 1.0]]],
      [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
      [[[1.0, 0.5], [1.0, 1.5]]],
      [[[1.0, 0.5], [0.5, 1.0]]],
      [[[0.5, 1.0], [1.0, 0.5]]],
      [[[1.0, 1.5], [1.0, 0.5]]],
      [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
      [[[1.5, 1.0], [1.0, 0.5]]],
      [[[0.5, 1.0], [1.5, 1.0]]],
      [[[1.0, 1.5], [1.5, 1.0]]],
      [[[0.5, 1.0], [1.0, 1.5]]],
      []
    ];

    function Contours() {
      var dx = 1,
          dy = 1,
          threshold = thresholdSturges,
          smooth = smoothLinear;

      function contours(values) {
        var tz = threshold(values);

        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
          const e = extent$1(values, finite);
          tz = ticks(...nice$1(e[0], e[1], tz), tz);
          while (tz[tz.length - 1] >= e[1]) tz.pop();
          while (tz[1] < e[0]) tz.shift();
        } else {
          tz = tz.slice().sort(ascending$1);
        }

        return tz.map(value => contour(values, value));
      }

      // Accumulate, smooth contour rings, assign holes to exterior rings.
      // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
      function contour(values, value) {
        const v = value == null ? NaN : +value;
        if (isNaN(v)) throw new Error(`invalid value: ${value}`);

        var polygons = [],
            holes = [];

        isorings(values, v, function(ring) {
          smooth(ring, values, v);
          if (area$3(ring) > 0) polygons.push([ring]);
          else holes.push(ring);
        });

        holes.forEach(function(hole) {
          for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
            if (contains$2((polygon = polygons[i])[0], hole) !== -1) {
              polygon.push(hole);
              return;
            }
          }
        });

        return {
          type: "MultiPolygon",
          value: value,
          coordinates: polygons
        };
      }

      // Marching squares with isolines stitched into rings.
      // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
      function isorings(values, value, callback) {
        var fragmentByStart = new Array,
            fragmentByEnd = new Array,
            x, y, t0, t1, t2, t3;

        // Special case for the first row (y = -1, t2 = t3 = 0).
        x = y = -1;
        t1 = above(values[0], value);
        cases[t1 << 1].forEach(stitch);
        while (++x < dx - 1) {
          t0 = t1, t1 = above(values[x + 1], value);
          cases[t0 | t1 << 1].forEach(stitch);
        }
        cases[t1 << 0].forEach(stitch);

        // General case for the intermediate rows.
        while (++y < dy - 1) {
          x = -1;
          t1 = above(values[y * dx + dx], value);
          t2 = above(values[y * dx], value);
          cases[t1 << 1 | t2 << 2].forEach(stitch);
          while (++x < dx - 1) {
            t0 = t1, t1 = above(values[y * dx + dx + x + 1], value);
            t3 = t2, t2 = above(values[y * dx + x + 1], value);
            cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
          }
          cases[t1 | t2 << 3].forEach(stitch);
        }

        // Special case for the last row (y = dy - 1, t0 = t1 = 0).
        x = -1;
        t2 = values[y * dx] >= value;
        cases[t2 << 2].forEach(stitch);
        while (++x < dx - 1) {
          t3 = t2, t2 = above(values[y * dx + x + 1], value);
          cases[t2 << 2 | t3 << 3].forEach(stitch);
        }
        cases[t2 << 3].forEach(stitch);

        function stitch(line) {
          var start = [line[0][0] + x, line[0][1] + y],
              end = [line[1][0] + x, line[1][1] + y],
              startIndex = index(start),
              endIndex = index(end),
              f, g;
          if (f = fragmentByEnd[startIndex]) {
            if (g = fragmentByStart[endIndex]) {
              delete fragmentByEnd[f.end];
              delete fragmentByStart[g.start];
              if (f === g) {
                f.ring.push(end);
                callback(f.ring);
              } else {
                fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
              }
            } else {
              delete fragmentByEnd[f.end];
              f.ring.push(end);
              fragmentByEnd[f.end = endIndex] = f;
            }
          } else if (f = fragmentByStart[endIndex]) {
            if (g = fragmentByEnd[startIndex]) {
              delete fragmentByStart[f.start];
              delete fragmentByEnd[g.end];
              if (f === g) {
                f.ring.push(end);
                callback(f.ring);
              } else {
                fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
              }
            } else {
              delete fragmentByStart[f.start];
              f.ring.unshift(start);
              fragmentByStart[f.start = startIndex] = f;
            }
          } else {
            fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
          }
        }
      }

      function index(point) {
        return point[0] * 2 + point[1] * (dx + 1) * 4;
      }

      function smoothLinear(ring, values, value) {
        ring.forEach(function(point) {
          var x = point[0],
              y = point[1],
              xt = x | 0,
              yt = y | 0,
              v1 = valid(values[yt * dx + xt]);
          if (x > 0 && x < dx && xt === x) {
            point[0] = smooth1(x, valid(values[yt * dx + xt - 1]), v1, value);
          }
          if (y > 0 && y < dy && yt === y) {
            point[1] = smooth1(y, valid(values[(yt - 1) * dx + xt]), v1, value);
          }
        });
      }

      contours.contour = contour;

      contours.size = function(_) {
        if (!arguments.length) return [dx, dy];
        var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
        if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, contours;
      };

      contours.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$5(slice$1.call(_)) : constant$5(_), contours) : threshold;
      };

      contours.smooth = function(_) {
        return arguments.length ? (smooth = _ ? smoothLinear : noop$2, contours) : smooth === smoothLinear;
      };

      return contours;
    }

    // When computing the extent, ignore infinite values (as well as invalid ones).
    function finite(x) {
      return isFinite(x) ? x : NaN;
    }

    // Is the (possibly invalid) x greater than or equal to the (known valid) value?
    // Treat any invalid value as below negative infinity.
    function above(x, value) {
      return x == null ? false : +x >= value;
    }

    // During smoothing, treat any invalid value as negative infinity.
    function valid(v) {
      return v == null || isNaN(v = +v) ? -Infinity : v;
    }

    function smooth1(x, v0, v1, value) {
      const a = value - v0;
      const b = v1 - v0;
      const d = isFinite(a) || isFinite(b) ? a / b : Math.sign(a) / Math.sign(b);
      return isNaN(d) ? x : x + d - 0.5;
    }

    function defaultX$1(d) {
      return d[0];
    }

    function defaultY$1(d) {
      return d[1];
    }

    function defaultWeight() {
      return 1;
    }

    function density() {
      var x = defaultX$1,
          y = defaultY$1,
          weight = defaultWeight,
          dx = 960,
          dy = 500,
          r = 20, // blur radius
          k = 2, // log2(grid cell size)
          o = r * 3, // grid offset, to pad for blur
          n = (dx + o * 2) >> k, // grid width
          m = (dy + o * 2) >> k, // grid height
          threshold = constant$5(20);

      function grid(data) {
        var values = new Float32Array(n * m),
            pow2k = Math.pow(2, -k),
            i = -1;

        for (const d of data) {
          var xi = (x(d, ++i, data) + o) * pow2k,
              yi = (y(d, i, data) + o) * pow2k,
              wi = +weight(d, i, data);
          if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m) {
            var x0 = Math.floor(xi),
                y0 = Math.floor(yi),
                xt = xi - x0 - 0.5,
                yt = yi - y0 - 0.5;
            values[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;
            values[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;
            values[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;
            values[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;
          }
        }

        blur2({data: values, width: n, height: m}, r * pow2k);
        return values;
      }

      function density(data) {
        var values = grid(data),
            tz = threshold(values),
            pow4k = Math.pow(2, 2 * k);

        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
          tz = ticks(Number.MIN_VALUE, max$3(values) / pow4k, tz);
        }

        return Contours()
            .size([n, m])
            .thresholds(tz.map(d => d * pow4k))
          (values)
            .map((c, i) => (c.value = +tz[i], transform(c)));
      }

      density.contours = function(data) {
        var values = grid(data),
            contours = Contours().size([n, m]),
            pow4k = Math.pow(2, 2 * k),
            contour = value => {
              value = +value;
              var c = transform(contours.contour(values, value * pow4k));
              c.value = value; // preserve exact threshold value
              return c;
            };
        Object.defineProperty(contour, "max", {get: () => max$3(values) / pow4k});
        return contour;
      };

      function transform(geometry) {
        geometry.coordinates.forEach(transformPolygon);
        return geometry;
      }

      function transformPolygon(coordinates) {
        coordinates.forEach(transformRing);
      }

      function transformRing(coordinates) {
        coordinates.forEach(transformPoint);
      }

      // TODO Optimize.
      function transformPoint(coordinates) {
        coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
        coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
      }

      function resize() {
        o = r * 3;
        n = (dx + o * 2) >> k;
        m = (dy + o * 2) >> k;
        return density;
      }

      density.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$5(+_), density) : x;
      };

      density.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$5(+_), density) : y;
      };

      density.weight = function(_) {
        return arguments.length ? (weight = typeof _ === "function" ? _ : constant$5(+_), density) : weight;
      };

      density.size = function(_) {
        if (!arguments.length) return [dx, dy];
        var _0 = +_[0], _1 = +_[1];
        if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, resize();
      };

      density.cellSize = function(_) {
        if (!arguments.length) return 1 << k;
        if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
        return k = Math.floor(Math.log(_) / Math.LN2), resize();
      };

      density.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$5(slice$1.call(_)) : constant$5(_), density) : threshold;
      };

      density.bandwidth = function(_) {
        if (!arguments.length) return Math.sqrt(r * (r + 1));
        if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
        return r = (Math.sqrt(4 * _ * _ + 1) - 1) / 2, resize();
      };

      return density;
    }

    const epsilon$3 = 1.1102230246251565e-16;
    const splitter = 134217729;
    const resulterrbound = (3 + 8 * epsilon$3) * epsilon$3;

    // fast_expansion_sum_zeroelim routine from oritinal code
    function sum$1(elen, e, flen, f, h) {
        let Q, Qnew, hh, bvirt;
        let enow = e[0];
        let fnow = f[0];
        let eindex = 0;
        let findex = 0;
        if ((fnow > enow) === (fnow > -enow)) {
            Q = enow;
            enow = e[++eindex];
        } else {
            Q = fnow;
            fnow = f[++findex];
        }
        let hindex = 0;
        if (eindex < elen && findex < flen) {
            if ((fnow > enow) === (fnow > -enow)) {
                Qnew = enow + Q;
                hh = Q - (Qnew - enow);
                enow = e[++eindex];
            } else {
                Qnew = fnow + Q;
                hh = Q - (Qnew - fnow);
                fnow = f[++findex];
            }
            Q = Qnew;
            if (hh !== 0) {
                h[hindex++] = hh;
            }
            while (eindex < elen && findex < flen) {
                if ((fnow > enow) === (fnow > -enow)) {
                    Qnew = Q + enow;
                    bvirt = Qnew - Q;
                    hh = Q - (Qnew - bvirt) + (enow - bvirt);
                    enow = e[++eindex];
                } else {
                    Qnew = Q + fnow;
                    bvirt = Qnew - Q;
                    hh = Q - (Qnew - bvirt) + (fnow - bvirt);
                    fnow = f[++findex];
                }
                Q = Qnew;
                if (hh !== 0) {
                    h[hindex++] = hh;
                }
            }
        }
        while (eindex < elen) {
            Qnew = Q + enow;
            bvirt = Qnew - Q;
            hh = Q - (Qnew - bvirt) + (enow - bvirt);
            enow = e[++eindex];
            Q = Qnew;
            if (hh !== 0) {
                h[hindex++] = hh;
            }
        }
        while (findex < flen) {
            Qnew = Q + fnow;
            bvirt = Qnew - Q;
            hh = Q - (Qnew - bvirt) + (fnow - bvirt);
            fnow = f[++findex];
            Q = Qnew;
            if (hh !== 0) {
                h[hindex++] = hh;
            }
        }
        if (Q !== 0 || hindex === 0) {
            h[hindex++] = Q;
        }
        return hindex;
    }

    function estimate(elen, e) {
        let Q = e[0];
        for (let i = 1; i < elen; i++) Q += e[i];
        return Q;
    }

    function vec(n) {
        return new Float64Array(n);
    }

    const ccwerrboundA = (3 + 16 * epsilon$3) * epsilon$3;
    const ccwerrboundB = (2 + 12 * epsilon$3) * epsilon$3;
    const ccwerrboundC = (9 + 64 * epsilon$3) * epsilon$3 * epsilon$3;

    const B = vec(4);
    const C1 = vec(8);
    const C2 = vec(12);
    const D = vec(16);
    const u = vec(4);

    function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
        let acxtail, acytail, bcxtail, bcytail;
        let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;

        const acx = ax - cx;
        const bcx = bx - cx;
        const acy = ay - cy;
        const bcy = by - cy;

        s1 = acx * bcy;
        c = splitter * acx;
        ahi = c - (c - acx);
        alo = acx - ahi;
        c = splitter * bcy;
        bhi = c - (c - bcy);
        blo = bcy - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acy * bcx;
        c = splitter * acy;
        ahi = c - (c - acy);
        alo = acy - ahi;
        c = splitter * bcx;
        bhi = c - (c - bcx);
        blo = bcx - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        B[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        B[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        B[2] = _j - (u3 - bvirt) + (_i - bvirt);
        B[3] = u3;

        let det = estimate(4, B);
        let errbound = ccwerrboundB * detsum;
        if (det >= errbound || -det >= errbound) {
            return det;
        }

        bvirt = ax - acx;
        acxtail = ax - (acx + bvirt) + (bvirt - cx);
        bvirt = bx - bcx;
        bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
        bvirt = ay - acy;
        acytail = ay - (acy + bvirt) + (bvirt - cy);
        bvirt = by - bcy;
        bcytail = by - (bcy + bvirt) + (bvirt - cy);

        if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
            return det;
        }

        errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
        det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);
        if (det >= errbound || -det >= errbound) return det;

        s1 = acxtail * bcy;
        c = splitter * acxtail;
        ahi = c - (c - acxtail);
        alo = acxtail - ahi;
        c = splitter * bcy;
        bhi = c - (c - bcy);
        blo = bcy - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acytail * bcx;
        c = splitter * acytail;
        ahi = c - (c - acytail);
        alo = acytail - ahi;
        c = splitter * bcx;
        bhi = c - (c - bcx);
        blo = bcx - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        u[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        u[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        u[2] = _j - (u3 - bvirt) + (_i - bvirt);
        u[3] = u3;
        const C1len = sum$1(4, B, 4, u, C1);

        s1 = acx * bcytail;
        c = splitter * acx;
        ahi = c - (c - acx);
        alo = acx - ahi;
        c = splitter * bcytail;
        bhi = c - (c - bcytail);
        blo = bcytail - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acy * bcxtail;
        c = splitter * acy;
        ahi = c - (c - acy);
        alo = acy - ahi;
        c = splitter * bcxtail;
        bhi = c - (c - bcxtail);
        blo = bcxtail - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        u[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        u[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        u[2] = _j - (u3 - bvirt) + (_i - bvirt);
        u[3] = u3;
        const C2len = sum$1(C1len, C1, 4, u, C2);

        s1 = acxtail * bcytail;
        c = splitter * acxtail;
        ahi = c - (c - acxtail);
        alo = acxtail - ahi;
        c = splitter * bcytail;
        bhi = c - (c - bcytail);
        blo = bcytail - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = acytail * bcxtail;
        c = splitter * acytail;
        ahi = c - (c - acytail);
        alo = acytail - ahi;
        c = splitter * bcxtail;
        bhi = c - (c - bcxtail);
        blo = bcxtail - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        u[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        u[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        u[2] = _j - (u3 - bvirt) + (_i - bvirt);
        u[3] = u3;
        const Dlen = sum$1(C2len, C2, 4, u, D);

        return D[Dlen - 1];
    }

    function orient2d(ax, ay, bx, by, cx, cy) {
        const detleft = (ay - cy) * (bx - cx);
        const detright = (ax - cx) * (by - cy);
        const det = detleft - detright;

        const detsum = Math.abs(detleft + detright);
        if (Math.abs(det) >= ccwerrboundA * detsum) return det;

        return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
    }

    const EPSILON = Math.pow(2, -52);
    const EDGE_STACK = new Uint32Array(512);

    class Delaunator {

        static from(points, getX = defaultGetX, getY = defaultGetY) {
            const n = points.length;
            const coords = new Float64Array(n * 2);

            for (let i = 0; i < n; i++) {
                const p = points[i];
                coords[2 * i] = getX(p);
                coords[2 * i + 1] = getY(p);
            }

            return new Delaunator(coords);
        }

        constructor(coords) {
            const n = coords.length >> 1;
            if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');

            this.coords = coords;

            // arrays that will store the triangulation graph
            const maxTriangles = Math.max(2 * n - 5, 0);
            this._triangles = new Uint32Array(maxTriangles * 3);
            this._halfedges = new Int32Array(maxTriangles * 3);

            // temporary arrays for tracking the edges of the advancing convex hull
            this._hashSize = Math.ceil(Math.sqrt(n));
            this._hullPrev = new Uint32Array(n); // edge to prev edge
            this._hullNext = new Uint32Array(n); // edge to next edge
            this._hullTri = new Uint32Array(n); // edge to adjacent triangle
            this._hullHash = new Int32Array(this._hashSize); // angular edge hash

            // temporary arrays for sorting points
            this._ids = new Uint32Array(n);
            this._dists = new Float64Array(n);

            this.update();
        }

        update() {
            const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;
            const n = coords.length >> 1;

            // populate an array of point indices; calculate input data bbox
            let minX = Infinity;
            let minY = Infinity;
            let maxX = -Infinity;
            let maxY = -Infinity;

            for (let i = 0; i < n; i++) {
                const x = coords[2 * i];
                const y = coords[2 * i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
                this._ids[i] = i;
            }
            const cx = (minX + maxX) / 2;
            const cy = (minY + maxY) / 2;

            let i0, i1, i2;

            // pick a seed point close to the center
            for (let i = 0, minDist = Infinity; i < n; i++) {
                const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist) {
                    i0 = i;
                    minDist = d;
                }
            }
            const i0x = coords[2 * i0];
            const i0y = coords[2 * i0 + 1];

            // find the point closest to the seed
            for (let i = 0, minDist = Infinity; i < n; i++) {
                if (i === i0) continue;
                const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist && d > 0) {
                    i1 = i;
                    minDist = d;
                }
            }
            let i1x = coords[2 * i1];
            let i1y = coords[2 * i1 + 1];

            let minRadius = Infinity;

            // find the third point which forms the smallest circumcircle with the first two
            for (let i = 0; i < n; i++) {
                if (i === i0 || i === i1) continue;
                const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
                if (r < minRadius) {
                    i2 = i;
                    minRadius = r;
                }
            }
            let i2x = coords[2 * i2];
            let i2y = coords[2 * i2 + 1];

            if (minRadius === Infinity) {
                // order collinear points by dx (or dy if all x are identical)
                // and return the list as a hull
                for (let i = 0; i < n; i++) {
                    this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);
                }
                quicksort(this._ids, this._dists, 0, n - 1);
                const hull = new Uint32Array(n);
                let j = 0;
                for (let i = 0, d0 = -Infinity; i < n; i++) {
                    const id = this._ids[i];
                    const d = this._dists[id];
                    if (d > d0) {
                        hull[j++] = id;
                        d0 = d;
                    }
                }
                this.hull = hull.subarray(0, j);
                this.triangles = new Uint32Array(0);
                this.halfedges = new Uint32Array(0);
                return;
            }

            // swap the order of the seed points for counter-clockwise orientation
            if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
                const i = i1;
                const x = i1x;
                const y = i1y;
                i1 = i2;
                i1x = i2x;
                i1y = i2y;
                i2 = i;
                i2x = x;
                i2y = y;
            }

            const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
            this._cx = center.x;
            this._cy = center.y;

            for (let i = 0; i < n; i++) {
                this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
            }

            // sort the points by distance from the seed triangle circumcenter
            quicksort(this._ids, this._dists, 0, n - 1);

            // set up the seed triangle as the starting hull
            this._hullStart = i0;
            let hullSize = 3;

            hullNext[i0] = hullPrev[i2] = i1;
            hullNext[i1] = hullPrev[i0] = i2;
            hullNext[i2] = hullPrev[i1] = i0;

            hullTri[i0] = 0;
            hullTri[i1] = 1;
            hullTri[i2] = 2;

            hullHash.fill(-1);
            hullHash[this._hashKey(i0x, i0y)] = i0;
            hullHash[this._hashKey(i1x, i1y)] = i1;
            hullHash[this._hashKey(i2x, i2y)] = i2;

            this.trianglesLen = 0;
            this._addTriangle(i0, i1, i2, -1, -1, -1);

            for (let k = 0, xp, yp; k < this._ids.length; k++) {
                const i = this._ids[k];
                const x = coords[2 * i];
                const y = coords[2 * i + 1];

                // skip near-duplicate points
                if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
                xp = x;
                yp = y;

                // skip seed triangle points
                if (i === i0 || i === i1 || i === i2) continue;

                // find a visible edge on the convex hull using edge hash
                let start = 0;
                for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
                    start = hullHash[(key + j) % this._hashSize];
                    if (start !== -1 && start !== hullNext[start]) break;
                }

                start = hullPrev[start];
                let e = start, q;
                while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {
                    e = q;
                    if (e === start) {
                        e = -1;
                        break;
                    }
                }
                if (e === -1) continue; // likely a near-duplicate point; skip it

                // add the first triangle from the point
                let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);

                // recursively flip triangles from the point until they satisfy the Delaunay condition
                hullTri[i] = this._legalize(t + 2);
                hullTri[e] = t; // keep track of boundary triangles on the hull
                hullSize++;

                // walk forward through the hull, adding more triangles and flipping recursively
                let n = hullNext[e];
                while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {
                    t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
                    hullTri[i] = this._legalize(t + 2);
                    hullNext[n] = n; // mark as removed
                    hullSize--;
                    n = q;
                }

                // walk backward from the other side, adding more triangles and flipping
                if (e === start) {
                    while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {
                        t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
                        this._legalize(t + 2);
                        hullTri[q] = t;
                        hullNext[e] = e; // mark as removed
                        hullSize--;
                        e = q;
                    }
                }

                // update the hull indices
                this._hullStart = hullPrev[i] = e;
                hullNext[e] = hullPrev[n] = i;
                hullNext[i] = n;

                // save the two new edges in the hash table
                hullHash[this._hashKey(x, y)] = i;
                hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
            }

            this.hull = new Uint32Array(hullSize);
            for (let i = 0, e = this._hullStart; i < hullSize; i++) {
                this.hull[i] = e;
                e = hullNext[e];
            }

            // trim typed triangle mesh arrays
            this.triangles = this._triangles.subarray(0, this.trianglesLen);
            this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
        }

        _hashKey(x, y) {
            return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
        }

        _legalize(a) {
            const {_triangles: triangles, _halfedges: halfedges, coords} = this;

            let i = 0;
            let ar = 0;

            // recursion eliminated with a fixed-size stack
            while (true) {
                const b = halfedges[a];

                /* if the pair of triangles doesn't satisfy the Delaunay condition
                 * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
                 * then do the same check/flip recursively for the new pair of triangles
                 *
                 *           pl                    pl
                 *          /||\                  /  \
                 *       al/ || \bl            al/    \a
                 *        /  ||  \              /      \
                 *       /  a||b  \    flip    /___ar___\
                 *     p0\   ||   /p1   =>   p0\---bl---/p1
                 *        \  ||  /              \      /
                 *       ar\ || /br             b\    /br
                 *          \||/                  \  /
                 *           pr                    pr
                 */
                const a0 = a - a % 3;
                ar = a0 + (a + 2) % 3;

                if (b === -1) { // convex hull edge
                    if (i === 0) break;
                    a = EDGE_STACK[--i];
                    continue;
                }

                const b0 = b - b % 3;
                const al = a0 + (a + 1) % 3;
                const bl = b0 + (b + 2) % 3;

                const p0 = triangles[ar];
                const pr = triangles[a];
                const pl = triangles[al];
                const p1 = triangles[bl];

                const illegal = inCircle(
                    coords[2 * p0], coords[2 * p0 + 1],
                    coords[2 * pr], coords[2 * pr + 1],
                    coords[2 * pl], coords[2 * pl + 1],
                    coords[2 * p1], coords[2 * p1 + 1]);

                if (illegal) {
                    triangles[a] = p1;
                    triangles[b] = p0;

                    const hbl = halfedges[bl];

                    // edge swapped on the other side of the hull (rare); fix the halfedge reference
                    if (hbl === -1) {
                        let e = this._hullStart;
                        do {
                            if (this._hullTri[e] === bl) {
                                this._hullTri[e] = a;
                                break;
                            }
                            e = this._hullPrev[e];
                        } while (e !== this._hullStart);
                    }
                    this._link(a, hbl);
                    this._link(b, halfedges[ar]);
                    this._link(ar, bl);

                    const br = b0 + (b + 1) % 3;

                    // don't worry about hitting the cap: it can only happen on extremely degenerate input
                    if (i < EDGE_STACK.length) {
                        EDGE_STACK[i++] = br;
                    }
                } else {
                    if (i === 0) break;
                    a = EDGE_STACK[--i];
                }
            }

            return ar;
        }

        _link(a, b) {
            this._halfedges[a] = b;
            if (b !== -1) this._halfedges[b] = a;
        }

        // add a new triangle given vertex indices and adjacent half-edge ids
        _addTriangle(i0, i1, i2, a, b, c) {
            const t = this.trianglesLen;

            this._triangles[t] = i0;
            this._triangles[t + 1] = i1;
            this._triangles[t + 2] = i2;

            this._link(t, a);
            this._link(t + 1, b);
            this._link(t + 2, c);

            this.trianglesLen += 3;

            return t;
        }
    }

    // monotonically increases with real angle, but doesn't need expensive trigonometry
    function pseudoAngle(dx, dy) {
        const p = dx / (Math.abs(dx) + Math.abs(dy));
        return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
    }

    function dist(ax, ay, bx, by) {
        const dx = ax - bx;
        const dy = ay - by;
        return dx * dx + dy * dy;
    }

    function inCircle(ax, ay, bx, by, cx, cy, px, py) {
        const dx = ax - px;
        const dy = ay - py;
        const ex = bx - px;
        const ey = by - py;
        const fx = cx - px;
        const fy = cy - py;

        const ap = dx * dx + dy * dy;
        const bp = ex * ex + ey * ey;
        const cp = fx * fx + fy * fy;

        return dx * (ey * cp - bp * fy) -
               dy * (ex * cp - bp * fx) +
               ap * (ex * fy - ey * fx) < 0;
    }

    function circumradius(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);

        const x = (ey * bl - dy * cl) * d;
        const y = (dx * cl - ex * bl) * d;

        return x * x + y * y;
    }

    function circumcenter(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);

        const x = ax + (ey * bl - dy * cl) * d;
        const y = ay + (dx * cl - ex * bl) * d;

        return {x, y};
    }

    function quicksort(ids, dists, left, right) {
        if (right - left <= 20) {
            for (let i = left + 1; i <= right; i++) {
                const temp = ids[i];
                const tempDist = dists[temp];
                let j = i - 1;
                while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];
                ids[j + 1] = temp;
            }
        } else {
            const median = (left + right) >> 1;
            let i = left + 1;
            let j = right;
            swap(ids, median, i);
            if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
            if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
            if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);

            const temp = ids[i];
            const tempDist = dists[temp];
            while (true) {
                do i++; while (dists[ids[i]] < tempDist);
                do j--; while (dists[ids[j]] > tempDist);
                if (j < i) break;
                swap(ids, i, j);
            }
            ids[left + 1] = ids[j];
            ids[j] = temp;

            if (right - i + 1 >= j - left) {
                quicksort(ids, dists, i, right);
                quicksort(ids, dists, left, j - 1);
            } else {
                quicksort(ids, dists, left, j - 1);
                quicksort(ids, dists, i, right);
            }
        }
    }

    function swap(arr, i, j) {
        const tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    function defaultGetX(p) {
        return p[0];
    }
    function defaultGetY(p) {
        return p[1];
    }

    const epsilon$2 = 1e-6;

    class Path {
      constructor() {
        this._x0 = this._y0 = // start of current subpath
        this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
      }
      moveTo(x, y) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
      }
      closePath() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      }
      lineTo(x, y) {
        this._ += `L${this._x1 = +x},${this._y1 = +y}`;
      }
      arc(x, y, r) {
        x = +x, y = +y, r = +r;
        const x0 = x + r;
        const y0 = y;
        if (r < 0) throw new Error("negative radius");
        if (this._x1 === null) this._ += `M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > epsilon$2 || Math.abs(this._y1 - y0) > epsilon$2) this._ += "L" + x0 + "," + y0;
        if (!r) return;
        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
      }
      rect(x, y, w, h) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
      }
      value() {
        return this._ || null;
      }
    }

    class Polygon {
      constructor() {
        this._ = [];
      }
      moveTo(x, y) {
        this._.push([x, y]);
      }
      closePath() {
        this._.push(this._[0].slice());
      }
      lineTo(x, y) {
        this._.push([x, y]);
      }
      value() {
        return this._.length ? this._ : null;
      }
    }

    class Voronoi {
      constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
        this.delaunay = delaunay;
        this._circumcenters = new Float64Array(delaunay.points.length * 2);
        this.vectors = new Float64Array(delaunay.points.length * 2);
        this.xmax = xmax, this.xmin = xmin;
        this.ymax = ymax, this.ymin = ymin;
        this._init();
      }
      update() {
        this.delaunay.update();
        this._init();
        return this;
      }
      _init() {
        const {delaunay: {points, hull, triangles}, vectors} = this;
        let bx, by; // lazily computed barycenter of the hull

        // Compute circumcenters.
        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
        for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
          const t1 = triangles[i] * 2;
          const t2 = triangles[i + 1] * 2;
          const t3 = triangles[i + 2] * 2;
          const x1 = points[t1];
          const y1 = points[t1 + 1];
          const x2 = points[t2];
          const y2 = points[t2 + 1];
          const x3 = points[t3];
          const y3 = points[t3 + 1];

          const dx = x2 - x1;
          const dy = y2 - y1;
          const ex = x3 - x1;
          const ey = y3 - y1;
          const ab = (dx * ey - dy * ex) * 2;

          if (Math.abs(ab) < 1e-9) {
            // For a degenerate triangle, the circumcenter is at the infinity, in a
            // direction orthogonal to the halfedge and away from the “center” of
            // the diagram <bx, by>, defined as the hull’s barycenter.
            if (bx === undefined) {
              bx = by = 0;
              for (const i of hull) bx += points[i * 2], by += points[i * 2 + 1];
              bx /= hull.length, by /= hull.length;
            }
            const a = 1e9 * Math.sign((bx - x1) * ey - (by - y1) * ex);
            x = (x1 + x3) / 2 - a * ey;
            y = (y1 + y3) / 2 + a * ex;
          } else {
            const d = 1 / ab;
            const bl = dx * dx + dy * dy;
            const cl = ex * ex + ey * ey;
            x = x1 + (ey * bl - dy * cl) * d;
            y = y1 + (dx * cl - ex * bl) * d;
          }
          circumcenters[j] = x;
          circumcenters[j + 1] = y;
        }

        // Compute exterior cell rays.
        let h = hull[hull.length - 1];
        let p0, p1 = h * 4;
        let x0, x1 = points[2 * h];
        let y0, y1 = points[2 * h + 1];
        vectors.fill(0);
        for (let i = 0; i < hull.length; ++i) {
          h = hull[i];
          p0 = p1, x0 = x1, y0 = y1;
          p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
          vectors[p0 + 2] = vectors[p1] = y0 - y1;
          vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
        }
      }
      render(context) {
        const buffer = context == null ? context = new Path : undefined;
        const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;
        if (hull.length <= 1) return null;
        for (let i = 0, n = halfedges.length; i < n; ++i) {
          const j = halfedges[i];
          if (j < i) continue;
          const ti = Math.floor(i / 3) * 2;
          const tj = Math.floor(j / 3) * 2;
          const xi = circumcenters[ti];
          const yi = circumcenters[ti + 1];
          const xj = circumcenters[tj];
          const yj = circumcenters[tj + 1];
          this._renderSegment(xi, yi, xj, yj, context);
        }
        let h0, h1 = hull[hull.length - 1];
        for (let i = 0; i < hull.length; ++i) {
          h0 = h1, h1 = hull[i];
          const t = Math.floor(inedges[h1] / 3) * 2;
          const x = circumcenters[t];
          const y = circumcenters[t + 1];
          const v = h0 * 4;
          const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
          if (p) this._renderSegment(x, y, p[0], p[1], context);
        }
        return buffer && buffer.value();
      }
      renderBounds(context) {
        const buffer = context == null ? context = new Path : undefined;
        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
        return buffer && buffer.value();
      }
      renderCell(i, context) {
        const buffer = context == null ? context = new Path : undefined;
        const points = this._clip(i);
        if (points === null || !points.length) return;
        context.moveTo(points[0], points[1]);
        let n = points.length;
        while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;
        for (let i = 2; i < n; i += 2) {
          if (points[i] !== points[i-2] || points[i+1] !== points[i-1])
            context.lineTo(points[i], points[i + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
      }
      *cellPolygons() {
        const {delaunay: {points}} = this;
        for (let i = 0, n = points.length / 2; i < n; ++i) {
          const cell = this.cellPolygon(i);
          if (cell) cell.index = i, yield cell;
        }
      }
      cellPolygon(i) {
        const polygon = new Polygon;
        this.renderCell(i, polygon);
        return polygon.value();
      }
      _renderSegment(x0, y0, x1, y1, context) {
        let S;
        const c0 = this._regioncode(x0, y0);
        const c1 = this._regioncode(x1, y1);
        if (c0 === 0 && c1 === 0) {
          context.moveTo(x0, y0);
          context.lineTo(x1, y1);
        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
          context.moveTo(S[0], S[1]);
          context.lineTo(S[2], S[3]);
        }
      }
      contains(i, x, y) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
        return this.delaunay._step(i, x, y) === i;
      }
      *neighbors(i) {
        const ci = this._clip(i);
        if (ci) for (const j of this.delaunay.neighbors(i)) {
          const cj = this._clip(j);
          // find the common edge
          if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
            for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
              if (ci[ai] === cj[aj]
                  && ci[ai + 1] === cj[aj + 1]
                  && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj]
                  && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
                yield j;
                break loop;
              }
            }
          }
        }
      }
      _cell(i) {
        const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;
        const e0 = inedges[i];
        if (e0 === -1) return null; // coincident point
        const points = [];
        let e = e0;
        do {
          const t = Math.floor(e / 3);
          points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation
          e = halfedges[e];
        } while (e !== e0 && e !== -1);
        return points;
      }
      _clip(i) {
        // degenerate case (1 valid point: return the box)
        if (i === 0 && this.delaunay.hull.length === 1) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }
        const points = this._cell(i);
        if (points === null) return null;
        const {vectors: V} = this;
        const v = i * 4;
        return this._simplify(V[v] || V[v + 1]
            ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])
            : this._clipFinite(i, points));
      }
      _clipFinite(i, points) {
        const n = points.length;
        let P = null;
        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
        let c0, c1 = this._regioncode(x1, y1);
        let e0, e1 = 0;
        for (let j = 0; j < n; j += 2) {
          x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
          c0 = c1, c1 = this._regioncode(x1, y1);
          if (c0 === 0 && c1 === 0) {
            e0 = e1, e1 = 0;
            if (P) P.push(x1, y1);
            else P = [x1, y1];
          } else {
            let S, sx0, sy0, sx1, sy1;
            if (c0 === 0) {
              if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
              [sx0, sy0, sx1, sy1] = S;
            } else {
              if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
              [sx1, sy1, sx0, sy0] = S;
              e0 = e1, e1 = this._edgecode(sx0, sy0);
              if (e0 && e1) this._edge(i, e0, e1, P, P.length);
              if (P) P.push(sx0, sy0);
              else P = [sx0, sy0];
            }
            e0 = e1, e1 = this._edgecode(sx1, sy1);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
            if (P) P.push(sx1, sy1);
            else P = [sx1, sy1];
          }
        }
        if (P) {
          e0 = e1, e1 = this._edgecode(P[0], P[1]);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }
        return P;
      }
      _clipSegment(x0, y0, x1, y1, c0, c1) {
        // for more robustness, always consider the segment in the same order
        const flip = c0 < c1;
        if (flip) [x0, y0, x1, y1, c0, c1] = [x1, y1, x0, y0, c1, c0];
        while (true) {
          if (c0 === 0 && c1 === 0) return flip ? [x1, y1, x0, y0] : [x0, y0, x1, y1];
          if (c0 & c1) return null;
          let x, y, c = c0 || c1;
          if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
          else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
          else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
          else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
          if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
          else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
        }
      }
      _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
        let P = Array.from(points), p;
        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
        if (P = this._clipFinite(i, P)) {
          for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
          }
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
        }
        return P;
      }
      _edge(i, e0, e1, P, j) {
        while (e0 !== e1) {
          let x, y;
          switch (e0) {
            case 0b0101: e0 = 0b0100; continue; // top-left
            case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top
            case 0b0110: e0 = 0b0010; continue; // top-right
            case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right
            case 0b1010: e0 = 0b1000; continue; // bottom-right
            case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom
            case 0b1001: e0 = 0b0001; continue; // bottom-left
            case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left
          }
          // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are
          // undefined, the conditional statement will be executed.
          if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
            P.splice(j, 0, x, y), j += 2;
          }
        }
        return j;
      }
      _project(x0, y0, vx, vy) {
        let t = Infinity, c, x, y;
        if (vy < 0) { // top
          if (y0 <= this.ymin) return null;
          if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
        } else if (vy > 0) { // bottom
          if (y0 >= this.ymax) return null;
          if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
        }
        if (vx > 0) { // right
          if (x0 >= this.xmax) return null;
          if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
        } else if (vx < 0) { // left
          if (x0 <= this.xmin) return null;
          if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
        }
        return [x, y];
      }
      _edgecode(x, y) {
        return (x === this.xmin ? 0b0001
            : x === this.xmax ? 0b0010 : 0b0000)
            | (y === this.ymin ? 0b0100
            : y === this.ymax ? 0b1000 : 0b0000);
      }
      _regioncode(x, y) {
        return (x < this.xmin ? 0b0001
            : x > this.xmax ? 0b0010 : 0b0000)
            | (y < this.ymin ? 0b0100
            : y > this.ymax ? 0b1000 : 0b0000);
      }
      _simplify(P) {
        if (P && P.length > 4) {
          for (let i = 0; i < P.length; i+= 2) {
            const j = (i + 2) % P.length, k = (i + 4) % P.length;
            if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) {
              P.splice(j, 2), i -= 2;
            }
          }
          if (!P.length) P = null;
        }
        return P;
      }
    }

    const tau$2 = 2 * Math.PI, pow$2 = Math.pow;

    function pointX(p) {
      return p[0];
    }

    function pointY(p) {
      return p[1];
    }

    // A triangulation is collinear if all its triangles have a non-null area
    function collinear(d) {
      const {triangles, coords} = d;
      for (let i = 0; i < triangles.length; i += 3) {
        const a = 2 * triangles[i],
              b = 2 * triangles[i + 1],
              c = 2 * triangles[i + 2],
              cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])
                    - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
        if (cross > 1e-10) return false;
      }
      return true;
    }

    function jitter(x, y, r) {
      return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
    }

    class Delaunay {
      static from(points, fx = pointX, fy = pointY, that) {
        return new Delaunay("length" in points
            ? flatArray(points, fx, fy, that)
            : Float64Array.from(flatIterable(points, fx, fy, that)));
      }
      constructor(points) {
        this._delaunator = new Delaunator(points);
        this.inedges = new Int32Array(points.length / 2);
        this._hullIndex = new Int32Array(points.length / 2);
        this.points = this._delaunator.coords;
        this._init();
      }
      update() {
        this._delaunator.update();
        this._init();
        return this;
      }
      _init() {
        const d = this._delaunator, points = this.points;

        // check for collinear
        if (d.hull && d.hull.length > 2 && collinear(d)) {
          this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)
            .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors
          const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],
            bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],
            r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
          for (let i = 0, n = points.length / 2; i < n; ++i) {
            const p = jitter(points[2 * i], points[2 * i + 1], r);
            points[2 * i] = p[0];
            points[2 * i + 1] = p[1];
          }
          this._delaunator = new Delaunator(points);
        } else {
          delete this.collinear;
        }

        const halfedges = this.halfedges = this._delaunator.halfedges;
        const hull = this.hull = this._delaunator.hull;
        const triangles = this.triangles = this._delaunator.triangles;
        const inedges = this.inedges.fill(-1);
        const hullIndex = this._hullIndex.fill(-1);

        // Compute an index from each point to an (arbitrary) incoming halfedge
        // Used to give the first neighbor of each point; for this reason,
        // on the hull we give priority to exterior halfedges
        for (let e = 0, n = halfedges.length; e < n; ++e) {
          const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
          if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
        }
        for (let i = 0, n = hull.length; i < n; ++i) {
          hullIndex[hull[i]] = i;
        }

        // degenerate case: 1 or 2 (distinct) points
        if (hull.length <= 2 && hull.length > 0) {
          this.triangles = new Int32Array(3).fill(-1);
          this.halfedges = new Int32Array(3).fill(-1);
          this.triangles[0] = hull[0];
          inedges[hull[0]] = 1;
          if (hull.length === 2) {
            inedges[hull[1]] = 0;
            this.triangles[1] = hull[1];
            this.triangles[2] = hull[1];
          }
        }
      }
      voronoi(bounds) {
        return new Voronoi(this, bounds);
      }
      *neighbors(i) {
        const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;

        // degenerate case with several collinear points
        if (collinear) {
          const l = collinear.indexOf(i);
          if (l > 0) yield collinear[l - 1];
          if (l < collinear.length - 1) yield collinear[l + 1];
          return;
        }

        const e0 = inedges[i];
        if (e0 === -1) return; // coincident point
        let e = e0, p0 = -1;
        do {
          yield p0 = triangles[e];
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) return; // bad triangulation
          e = halfedges[e];
          if (e === -1) {
            const p = hull[(_hullIndex[i] + 1) % hull.length];
            if (p !== p0) yield p;
            return;
          }
        } while (e !== e0);
      }
      find(x, y, i = 0) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
        const i0 = i;
        let c;
        while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;
        return c;
      }
      _step(i, x, y) {
        const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;
        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
        let c = i;
        let dc = pow$2(x - points[i * 2], 2) + pow$2(y - points[i * 2 + 1], 2);
        const e0 = inedges[i];
        let e = e0;
        do {
          let t = triangles[e];
          const dt = pow$2(x - points[t * 2], 2) + pow$2(y - points[t * 2 + 1], 2);
          if (dt < dc) dc = dt, c = t;
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation
          e = halfedges[e];
          if (e === -1) {
            e = hull[(_hullIndex[i] + 1) % hull.length];
            if (e !== t) {
              if (pow$2(x - points[e * 2], 2) + pow$2(y - points[e * 2 + 1], 2) < dc) return e;
            }
            break;
          }
        } while (e !== e0);
        return c;
      }
      render(context) {
        const buffer = context == null ? context = new Path : undefined;
        const {points, halfedges, triangles} = this;
        for (let i = 0, n = halfedges.length; i < n; ++i) {
          const j = halfedges[i];
          if (j < i) continue;
          const ti = triangles[i] * 2;
          const tj = triangles[j] * 2;
          context.moveTo(points[ti], points[ti + 1]);
          context.lineTo(points[tj], points[tj + 1]);
        }
        this.renderHull(context);
        return buffer && buffer.value();
      }
      renderPoints(context, r) {
        if (r === undefined && (!context || typeof context.moveTo !== "function")) r = context, context = null;
        r = r == undefined ? 2 : +r;
        const buffer = context == null ? context = new Path : undefined;
        const {points} = this;
        for (let i = 0, n = points.length; i < n; i += 2) {
          const x = points[i], y = points[i + 1];
          context.moveTo(x + r, y);
          context.arc(x, y, r, 0, tau$2);
        }
        return buffer && buffer.value();
      }
      renderHull(context) {
        const buffer = context == null ? context = new Path : undefined;
        const {hull, points} = this;
        const h = hull[0] * 2, n = hull.length;
        context.moveTo(points[h], points[h + 1]);
        for (let i = 1; i < n; ++i) {
          const h = 2 * hull[i];
          context.lineTo(points[h], points[h + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
      }
      hullPolygon() {
        const polygon = new Polygon;
        this.renderHull(polygon);
        return polygon.value();
      }
      renderTriangle(i, context) {
        const buffer = context == null ? context = new Path : undefined;
        const {points, triangles} = this;
        const t0 = triangles[i *= 3] * 2;
        const t1 = triangles[i + 1] * 2;
        const t2 = triangles[i + 2] * 2;
        context.moveTo(points[t0], points[t0 + 1]);
        context.lineTo(points[t1], points[t1 + 1]);
        context.lineTo(points[t2], points[t2 + 1]);
        context.closePath();
        return buffer && buffer.value();
      }
      *trianglePolygons() {
        const {triangles} = this;
        for (let i = 0, n = triangles.length / 3; i < n; ++i) {
          yield this.trianglePolygon(i);
        }
      }
      trianglePolygon(i) {
        const polygon = new Polygon;
        this.renderTriangle(i, polygon);
        return polygon.value();
      }
    }

    function flatArray(points, fx, fy, that) {
      const n = points.length;
      const array = new Float64Array(n * 2);
      for (let i = 0; i < n; ++i) {
        const p = points[i];
        array[i * 2] = fx.call(that, p, i, points);
        array[i * 2 + 1] = fy.call(that, p, i, points);
      }
      return array;
    }

    function* flatIterable(points, fx, fy, that) {
      let i = 0;
      for (const p of points) {
        yield fx.call(that, p, i, points);
        yield fy.call(that, p, i, points);
        ++i;
      }
    }

    var EOL = {},
        EOF = {},
        QUOTE = 34,
        NEWLINE = 10,
        RETURN = 13;

    function objectConverter(columns) {
      return new Function("d", "return {" + columns.map(function(name, i) {
        return JSON.stringify(name) + ": d[" + i + "] || \"\"";
      }).join(",") + "}");
    }

    function customConverter(columns, f) {
      var object = objectConverter(columns);
      return function(row, i) {
        return f(object(row), i, columns);
      };
    }

    // Compute unique columns in order of discovery.
    function inferColumns(rows) {
      var columnSet = Object.create(null),
          columns = [];

      rows.forEach(function(row) {
        for (var column in row) {
          if (!(column in columnSet)) {
            columns.push(columnSet[column] = column);
          }
        }
      });

      return columns;
    }

    function pad$1(value, width) {
      var s = value + "", length = s.length;
      return length < width ? new Array(width - length + 1).join(0) + s : s;
    }

    function formatYear$1(year) {
      return year < 0 ? "-" + pad$1(-year, 6)
        : year > 9999 ? "+" + pad$1(year, 6)
        : pad$1(year, 4);
    }

    function formatDate(date) {
      var hours = date.getUTCHours(),
          minutes = date.getUTCMinutes(),
          seconds = date.getUTCSeconds(),
          milliseconds = date.getUTCMilliseconds();
      return isNaN(date) ? "Invalid Date"
          : formatYear$1(date.getUTCFullYear()) + "-" + pad$1(date.getUTCMonth() + 1, 2) + "-" + pad$1(date.getUTCDate(), 2)
          + (milliseconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "." + pad$1(milliseconds, 3) + "Z"
          : seconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "Z"
          : minutes || hours ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + "Z"
          : "");
    }

    function dsvFormat(delimiter) {
      var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
          DELIMITER = delimiter.charCodeAt(0);

      function parse(text, f) {
        var convert, columns, rows = parseRows(text, function(row, i) {
          if (convert) return convert(row, i - 1);
          columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
        });
        rows.columns = columns || [];
        return rows;
      }

      function parseRows(text, f) {
        var rows = [], // output rows
            N = text.length,
            I = 0, // current character index
            n = 0, // current line number
            t, // current token
            eof = N <= 0, // current token followed by EOF?
            eol = false; // current token followed by EOL?

        // Strip the trailing newline.
        if (text.charCodeAt(N - 1) === NEWLINE) --N;
        if (text.charCodeAt(N - 1) === RETURN) --N;

        function token() {
          if (eof) return EOF;
          if (eol) return eol = false, EOL;

          // Unescape quotes.
          var i, j = I, c;
          if (text.charCodeAt(j) === QUOTE) {
            while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
            if ((i = I) >= N) eof = true;
            else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            return text.slice(j + 1, i - 1).replace(/""/g, "\"");
          }

          // Find next delimiter or newline.
          while (I < N) {
            if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            else if (c !== DELIMITER) continue;
            return text.slice(j, i);
          }

          // Return last token before EOF.
          return eof = true, text.slice(j, N);
        }

        while ((t = token()) !== EOF) {
          var row = [];
          while (t !== EOL && t !== EOF) row.push(t), t = token();
          if (f && (row = f(row, n++)) == null) continue;
          rows.push(row);
        }

        return rows;
      }

      function preformatBody(rows, columns) {
        return rows.map(function(row) {
          return columns.map(function(column) {
            return formatValue(row[column]);
          }).join(delimiter);
        });
      }

      function format(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
      }

      function formatBody(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return preformatBody(rows, columns).join("\n");
      }

      function formatRows(rows) {
        return rows.map(formatRow).join("\n");
      }

      function formatRow(row) {
        return row.map(formatValue).join(delimiter);
      }

      function formatValue(value) {
        return value == null ? ""
            : value instanceof Date ? formatDate(value)
            : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
            : value;
      }

      return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatBody: formatBody,
        formatRows: formatRows,
        formatRow: formatRow,
        formatValue: formatValue
      };
    }

    var csv$1 = dsvFormat(",");

    var csvParse = csv$1.parse;
    var csvParseRows = csv$1.parseRows;
    var csvFormat = csv$1.format;
    var csvFormatBody = csv$1.formatBody;
    var csvFormatRows = csv$1.formatRows;
    var csvFormatRow = csv$1.formatRow;
    var csvFormatValue = csv$1.formatValue;

    var tsv$1 = dsvFormat("\t");

    var tsvParse = tsv$1.parse;
    var tsvParseRows = tsv$1.parseRows;
    var tsvFormat = tsv$1.format;
    var tsvFormatBody = tsv$1.formatBody;
    var tsvFormatRows = tsv$1.formatRows;
    var tsvFormatRow = tsv$1.formatRow;
    var tsvFormatValue = tsv$1.formatValue;

    function autoType(object) {
      for (var key in object) {
        var value = object[key].trim(), number, m;
        if (!value) value = null;
        else if (value === "true") value = true;
        else if (value === "false") value = false;
        else if (value === "NaN") value = NaN;
        else if (!isNaN(number = +value)) value = number;
        else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
          if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
          value = new Date(value);
        }
        else continue;
        object[key] = value;
      }
      return object;
    }

    // https://github.com/d3/d3-dsv/issues/45
    const fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();

    function responseBlob(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.blob();
    }

    function blob(input, init) {
      return fetch(input, init).then(responseBlob);
    }

    function responseArrayBuffer(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.arrayBuffer();
    }

    function buffer(input, init) {
      return fetch(input, init).then(responseArrayBuffer);
    }

    function responseText(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.text();
    }

    function text(input, init) {
      return fetch(input, init).then(responseText);
    }

    function dsvParse(parse) {
      return function(input, init, row) {
        if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
        return text(input, init).then(function(response) {
          return parse(response, row);
        });
      };
    }

    function dsv(delimiter, input, init, row) {
      if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
      var format = dsvFormat(delimiter);
      return text(input, init).then(function(response) {
        return format.parse(response, row);
      });
    }

    var csv = dsvParse(csvParse);
    var tsv = dsvParse(tsvParse);

    function image(input, init) {
      return new Promise(function(resolve, reject) {
        var image = new Image;
        for (var key in init) image[key] = init[key];
        image.onerror = reject;
        image.onload = function() { resolve(image); };
        image.src = input;
      });
    }

    function responseJson(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      if (response.status === 204 || response.status === 205) return;
      return response.json();
    }

    function json(input, init) {
      return fetch(input, init).then(responseJson);
    }

    function parser(type) {
      return (input, init) => text(input, init)
        .then(text => (new DOMParser).parseFromString(text, type));
    }

    var xml = parser("application/xml");

    var html = parser("text/html");

    var svg = parser("image/svg+xml");

    function center(x, y) {
      var nodes, strength = 1;

      if (x == null) x = 0;
      if (y == null) y = 0;

      function force() {
        var i,
            n = nodes.length,
            node,
            sx = 0,
            sy = 0;

        for (i = 0; i < n; ++i) {
          node = nodes[i], sx += node.x, sy += node.y;
        }

        for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {
          node = nodes[i], node.x -= sx, node.y -= sy;
        }
      }

      force.initialize = function(_) {
        nodes = _;
      };

      force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
      };

      force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
      };

      return force;
    }

    function tree_add(d) {
      const x = +this._x.call(null, d),
          y = +this._y.call(null, d);
      return add(this.cover(x, y), x, y, d);
    }

    function add(tree, x, y, d) {
      if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

      var parent,
          node = tree._root,
          leaf = {data: d},
          x0 = tree._x0,
          y0 = tree._y0,
          x1 = tree._x1,
          y1 = tree._y1,
          xm,
          ym,
          xp,
          yp,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return tree._root = leaf, tree;

      // Find the existing leaf for the new point, or add it.
      while (node.length) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
      }

      // Is the new point is exactly coincident with the existing point?
      xp = +tree._x.call(null, node.data);
      yp = +tree._y.call(null, node.data);
      if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

      // Otherwise, split the leaf node until the old and new point are separated.
      do {
        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
      return parent[j] = node, parent[i] = leaf, tree;
    }

    function addAll(data) {
      var d, i, n = data.length,
          x,
          y,
          xz = new Array(n),
          yz = new Array(n),
          x0 = Infinity,
          y0 = Infinity,
          x1 = -Infinity,
          y1 = -Infinity;

      // Compute the points and their extent.
      for (i = 0; i < n; ++i) {
        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
        xz[i] = x;
        yz[i] = y;
        if (x < x0) x0 = x;
        if (x > x1) x1 = x;
        if (y < y0) y0 = y;
        if (y > y1) y1 = y;
      }

      // If there were no (valid) points, abort.
      if (x0 > x1 || y0 > y1) return this;

      // Expand the tree to cover the new points.
      this.cover(x0, y0).cover(x1, y1);

      // Add the new points.
      for (i = 0; i < n; ++i) {
        add(this, xz[i], yz[i], data[i]);
      }

      return this;
    }

    function tree_cover(x, y) {
      if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

      var x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1;

      // If the quadtree has no extent, initialize them.
      // Integer extent are necessary so that if we later double the extent,
      // the existing quadrant boundaries don’t change due to floating point error!
      if (isNaN(x0)) {
        x1 = (x0 = Math.floor(x)) + 1;
        y1 = (y0 = Math.floor(y)) + 1;
      }

      // Otherwise, double repeatedly to cover.
      else {
        var z = x1 - x0 || 1,
            node = this._root,
            parent,
            i;

        while (x0 > x || x >= x1 || y0 > y || y >= y1) {
          i = (y < y0) << 1 | (x < x0);
          parent = new Array(4), parent[i] = node, node = parent, z *= 2;
          switch (i) {
            case 0: x1 = x0 + z, y1 = y0 + z; break;
            case 1: x0 = x1 - z, y1 = y0 + z; break;
            case 2: x1 = x0 + z, y0 = y1 - z; break;
            case 3: x0 = x1 - z, y0 = y1 - z; break;
          }
        }

        if (this._root && this._root.length) this._root = node;
      }

      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      return this;
    }

    function tree_data() {
      var data = [];
      this.visit(function(node) {
        if (!node.length) do data.push(node.data); while (node = node.next)
      });
      return data;
    }

    function tree_extent(_) {
      return arguments.length
          ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
          : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
    }

    function Quad(node, x0, y0, x1, y1) {
      this.node = node;
      this.x0 = x0;
      this.y0 = y0;
      this.x1 = x1;
      this.y1 = y1;
    }

    function tree_find(x, y, radius) {
      var data,
          x0 = this._x0,
          y0 = this._y0,
          x1,
          y1,
          x2,
          y2,
          x3 = this._x1,
          y3 = this._y1,
          quads = [],
          node = this._root,
          q,
          i;

      if (node) quads.push(new Quad(node, x0, y0, x3, y3));
      if (radius == null) radius = Infinity;
      else {
        x0 = x - radius, y0 = y - radius;
        x3 = x + radius, y3 = y + radius;
        radius *= radius;
      }

      while (q = quads.pop()) {

        // Stop searching if this quadrant can’t contain a closer node.
        if (!(node = q.node)
            || (x1 = q.x0) > x3
            || (y1 = q.y0) > y3
            || (x2 = q.x1) < x0
            || (y2 = q.y1) < y0) continue;

        // Bisect the current quadrant.
        if (node.length) {
          var xm = (x1 + x2) / 2,
              ym = (y1 + y2) / 2;

          quads.push(
            new Quad(node[3], xm, ym, x2, y2),
            new Quad(node[2], x1, ym, xm, y2),
            new Quad(node[1], xm, y1, x2, ym),
            new Quad(node[0], x1, y1, xm, ym)
          );

          // Visit the closest quadrant first.
          if (i = (y >= ym) << 1 | (x >= xm)) {
            q = quads[quads.length - 1];
            quads[quads.length - 1] = quads[quads.length - 1 - i];
            quads[quads.length - 1 - i] = q;
          }
        }

        // Visit this point. (Visiting coincident points isn’t necessary!)
        else {
          var dx = x - +this._x.call(null, node.data),
              dy = y - +this._y.call(null, node.data),
              d2 = dx * dx + dy * dy;
          if (d2 < radius) {
            var d = Math.sqrt(radius = d2);
            x0 = x - d, y0 = y - d;
            x3 = x + d, y3 = y + d;
            data = node.data;
          }
        }
      }

      return data;
    }

    function tree_remove(d) {
      if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

      var parent,
          node = this._root,
          retainer,
          previous,
          next,
          x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1,
          x,
          y,
          xm,
          ym,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return this;

      // Find the leaf node for the point.
      // While descending, also retain the deepest parent with a non-removed sibling.
      if (node.length) while (true) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
        if (!node.length) break;
        if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
      }

      // Find the point to remove.
      while (node.data !== d) if (!(previous = node, node = node.next)) return this;
      if (next = node.next) delete node.next;

      // If there are multiple coincident points, remove just the point.
      if (previous) return (next ? previous.next = next : delete previous.next), this;

      // If this is the root point, remove it.
      if (!parent) return this._root = next, this;

      // Remove this leaf.
      next ? parent[i] = next : delete parent[i];

      // If the parent now contains exactly one leaf, collapse superfluous parents.
      if ((node = parent[0] || parent[1] || parent[2] || parent[3])
          && node === (parent[3] || parent[2] || parent[1] || parent[0])
          && !node.length) {
        if (retainer) retainer[j] = node;
        else this._root = node;
      }

      return this;
    }

    function removeAll(data) {
      for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
      return this;
    }

    function tree_root() {
      return this._root;
    }

    function tree_size() {
      var size = 0;
      this.visit(function(node) {
        if (!node.length) do ++size; while (node = node.next)
      });
      return size;
    }

    function tree_visit(callback) {
      var quads = [], q, node = this._root, child, x0, y0, x1, y1;
      if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
          var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        }
      }
      return this;
    }

    function tree_visitAfter(callback) {
      var quads = [], next = [], q;
      if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        var node = q.node;
        if (node.length) {
          var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        }
        next.push(q);
      }
      while (q = next.pop()) {
        callback(q.node, q.x0, q.y0, q.x1, q.y1);
      }
      return this;
    }

    function defaultX(d) {
      return d[0];
    }

    function tree_x(_) {
      return arguments.length ? (this._x = _, this) : this._x;
    }

    function defaultY(d) {
      return d[1];
    }

    function tree_y(_) {
      return arguments.length ? (this._y = _, this) : this._y;
    }

    function quadtree(nodes, x, y) {
      var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
      return nodes == null ? tree : tree.addAll(nodes);
    }

    function Quadtree(x, y, x0, y0, x1, y1) {
      this._x = x;
      this._y = y;
      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      this._root = undefined;
    }

    function leaf_copy(leaf) {
      var copy = {data: leaf.data}, next = copy;
      while (leaf = leaf.next) next = next.next = {data: leaf.data};
      return copy;
    }

    var treeProto = quadtree.prototype = Quadtree.prototype;

    treeProto.copy = function() {
      var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
          node = this._root,
          nodes,
          child;

      if (!node) return copy;

      if (!node.length) return copy._root = leaf_copy(node), copy;

      nodes = [{source: node, target: copy._root = new Array(4)}];
      while (node = nodes.pop()) {
        for (var i = 0; i < 4; ++i) {
          if (child = node.source[i]) {
            if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
            else node.target[i] = leaf_copy(child);
          }
        }
      }

      return copy;
    };

    treeProto.add = tree_add;
    treeProto.addAll = addAll;
    treeProto.cover = tree_cover;
    treeProto.data = tree_data;
    treeProto.extent = tree_extent;
    treeProto.find = tree_find;
    treeProto.remove = tree_remove;
    treeProto.removeAll = removeAll;
    treeProto.root = tree_root;
    treeProto.size = tree_size;
    treeProto.visit = tree_visit;
    treeProto.visitAfter = tree_visitAfter;
    treeProto.x = tree_x;
    treeProto.y = tree_y;

    function constant$4(x) {
      return function() {
        return x;
      };
    }

    function jiggle(random) {
      return (random() - 0.5) * 1e-6;
    }

    function x$3(d) {
      return d.x + d.vx;
    }

    function y$3(d) {
      return d.y + d.vy;
    }

    function collide(radius) {
      var nodes,
          radii,
          random,
          strength = 1,
          iterations = 1;

      if (typeof radius !== "function") radius = constant$4(radius == null ? 1 : +radius);

      function force() {
        var i, n = nodes.length,
            tree,
            node,
            xi,
            yi,
            ri,
            ri2;

        for (var k = 0; k < iterations; ++k) {
          tree = quadtree(nodes, x$3, y$3).visitAfter(prepare);
          for (i = 0; i < n; ++i) {
            node = nodes[i];
            ri = radii[node.index], ri2 = ri * ri;
            xi = node.x + node.vx;
            yi = node.y + node.vy;
            tree.visit(apply);
          }
        }

        function apply(quad, x0, y0, x1, y1) {
          var data = quad.data, rj = quad.r, r = ri + rj;
          if (data) {
            if (data.index > node.index) {
              var x = xi - data.x - data.vx,
                  y = yi - data.y - data.vy,
                  l = x * x + y * y;
              if (l < r * r) {
                if (x === 0) x = jiggle(random), l += x * x;
                if (y === 0) y = jiggle(random), l += y * y;
                l = (r - (l = Math.sqrt(l))) / l * strength;
                node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                node.vy += (y *= l) * r;
                data.vx -= x * (r = 1 - r);
                data.vy -= y * r;
              }
            }
            return;
          }
          return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
        }
      }

      function prepare(quad) {
        if (quad.data) return quad.r = radii[quad.data.index];
        for (var i = quad.r = 0; i < 4; ++i) {
          if (quad[i] && quad[i].r > quad.r) {
            quad.r = quad[i].r;
          }
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        radii = new Array(n);
        for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
      }

      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
      };

      force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : radius;
      };

      return force;
    }

    function index$3(d) {
      return d.index;
    }

    function find(nodeById, nodeId) {
      var node = nodeById.get(nodeId);
      if (!node) throw new Error("node not found: " + nodeId);
      return node;
    }

    function link$2(links) {
      var id = index$3,
          strength = defaultStrength,
          strengths,
          distance = constant$4(30),
          distances,
          nodes,
          count,
          bias,
          random,
          iterations = 1;

      if (links == null) links = [];

      function defaultStrength(link) {
        return 1 / Math.min(count[link.source.index], count[link.target.index]);
      }

      function force(alpha) {
        for (var k = 0, n = links.length; k < iterations; ++k) {
          for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
            link = links[i], source = link.source, target = link.target;
            x = target.x + target.vx - source.x - source.vx || jiggle(random);
            y = target.y + target.vy - source.y - source.vy || jiggle(random);
            l = Math.sqrt(x * x + y * y);
            l = (l - distances[i]) / l * alpha * strengths[i];
            x *= l, y *= l;
            target.vx -= x * (b = bias[i]);
            target.vy -= y * b;
            source.vx += x * (b = 1 - b);
            source.vy += y * b;
          }
        }
      }

      function initialize() {
        if (!nodes) return;

        var i,
            n = nodes.length,
            m = links.length,
            nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),
            link;

        for (i = 0, count = new Array(n); i < m; ++i) {
          link = links[i], link.index = i;
          if (typeof link.source !== "object") link.source = find(nodeById, link.source);
          if (typeof link.target !== "object") link.target = find(nodeById, link.target);
          count[link.source.index] = (count[link.source.index] || 0) + 1;
          count[link.target.index] = (count[link.target.index] || 0) + 1;
        }

        for (i = 0, bias = new Array(m); i < m; ++i) {
          link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
        }

        strengths = new Array(m), initializeStrength();
        distances = new Array(m), initializeDistance();
      }

      function initializeStrength() {
        if (!nodes) return;

        for (var i = 0, n = links.length; i < n; ++i) {
          strengths[i] = +strength(links[i], i, links);
        }
      }

      function initializeDistance() {
        if (!nodes) return;

        for (var i = 0, n = links.length; i < n; ++i) {
          distances[i] = +distance(links[i], i, links);
        }
      }

      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      force.links = function(_) {
        return arguments.length ? (links = _, initialize(), force) : links;
      };

      force.id = function(_) {
        return arguments.length ? (id = _, force) : id;
      };

      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initializeStrength(), force) : strength;
      };

      force.distance = function(_) {
        return arguments.length ? (distance = typeof _ === "function" ? _ : constant$4(+_), initializeDistance(), force) : distance;
      };

      return force;
    }

    // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
    const a$2 = 1664525;
    const c$4 = 1013904223;
    const m$1 = 4294967296; // 2^32

    function lcg$2() {
      let s = 1;
      return () => (s = (a$2 * s + c$4) % m$1) / m$1;
    }

    function x$2(d) {
      return d.x;
    }

    function y$2(d) {
      return d.y;
    }

    var initialRadius = 10,
        initialAngle = Math.PI * (3 - Math.sqrt(5));

    function simulation(nodes) {
      var simulation,
          alpha = 1,
          alphaMin = 0.001,
          alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
          alphaTarget = 0,
          velocityDecay = 0.6,
          forces = new Map(),
          stepper = timer(step),
          event = dispatch("tick", "end"),
          random = lcg$2();

      if (nodes == null) nodes = [];

      function step() {
        tick();
        event.call("tick", simulation);
        if (alpha < alphaMin) {
          stepper.stop();
          event.call("end", simulation);
        }
      }

      function tick(iterations) {
        var i, n = nodes.length, node;

        if (iterations === undefined) iterations = 1;

        for (var k = 0; k < iterations; ++k) {
          alpha += (alphaTarget - alpha) * alphaDecay;

          forces.forEach(function(force) {
            force(alpha);
          });

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            if (node.fx == null) node.x += node.vx *= velocityDecay;
            else node.x = node.fx, node.vx = 0;
            if (node.fy == null) node.y += node.vy *= velocityDecay;
            else node.y = node.fy, node.vy = 0;
          }
        }

        return simulation;
      }

      function initializeNodes() {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.index = i;
          if (node.fx != null) node.x = node.fx;
          if (node.fy != null) node.y = node.fy;
          if (isNaN(node.x) || isNaN(node.y)) {
            var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
            node.x = radius * Math.cos(angle);
            node.y = radius * Math.sin(angle);
          }
          if (isNaN(node.vx) || isNaN(node.vy)) {
            node.vx = node.vy = 0;
          }
        }
      }

      function initializeForce(force) {
        if (force.initialize) force.initialize(nodes, random);
        return force;
      }

      initializeNodes();

      return simulation = {
        tick: tick,

        restart: function() {
          return stepper.restart(step), simulation;
        },

        stop: function() {
          return stepper.stop(), simulation;
        },

        nodes: function(_) {
          return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
        },

        alpha: function(_) {
          return arguments.length ? (alpha = +_, simulation) : alpha;
        },

        alphaMin: function(_) {
          return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
        },

        alphaDecay: function(_) {
          return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
        },

        alphaTarget: function(_) {
          return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
        },

        velocityDecay: function(_) {
          return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
        },

        randomSource: function(_) {
          return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
        },

        force: function(name, _) {
          return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
        },

        find: function(x, y, radius) {
          var i = 0,
              n = nodes.length,
              dx,
              dy,
              d2,
              node,
              closest;

          if (radius == null) radius = Infinity;
          else radius *= radius;

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            dx = x - node.x;
            dy = y - node.y;
            d2 = dx * dx + dy * dy;
            if (d2 < radius) closest = node, radius = d2;
          }

          return closest;
        },

        on: function(name, _) {
          return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
        }
      };
    }

    function manyBody() {
      var nodes,
          node,
          random,
          alpha,
          strength = constant$4(-30),
          strengths,
          distanceMin2 = 1,
          distanceMax2 = Infinity,
          theta2 = 0.81;

      function force(_) {
        var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);
        for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        strengths = new Array(n);
        for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
      }

      function accumulate(quad) {
        var strength = 0, q, c, weight = 0, x, y, i;

        // For internal nodes, accumulate forces from child quadrants.
        if (quad.length) {
          for (x = y = i = 0; i < 4; ++i) {
            if ((q = quad[i]) && (c = Math.abs(q.value))) {
              strength += q.value, weight += c, x += c * q.x, y += c * q.y;
            }
          }
          quad.x = x / weight;
          quad.y = y / weight;
        }

        // For leaf nodes, accumulate forces from coincident quadrants.
        else {
          q = quad;
          q.x = q.data.x;
          q.y = q.data.y;
          do strength += strengths[q.data.index];
          while (q = q.next);
        }

        quad.value = strength;
      }

      function apply(quad, x1, _, x2) {
        if (!quad.value) return true;

        var x = quad.x - node.x,
            y = quad.y - node.y,
            w = x2 - x1,
            l = x * x + y * y;

        // Apply the Barnes-Hut approximation if possible.
        // Limit forces for very close nodes; randomize direction if coincident.
        if (w * w / theta2 < l) {
          if (l < distanceMax2) {
            if (x === 0) x = jiggle(random), l += x * x;
            if (y === 0) y = jiggle(random), l += y * y;
            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
            node.vx += x * quad.value * alpha / l;
            node.vy += y * quad.value * alpha / l;
          }
          return true;
        }

        // Otherwise, process points directly.
        else if (quad.length || l >= distanceMax2) return;

        // Limit forces for very close nodes; randomize direction if coincident.
        if (quad.data !== node || quad.next) {
          if (x === 0) x = jiggle(random), l += x * x;
          if (y === 0) y = jiggle(random), l += y * y;
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        }

        do if (quad.data !== node) {
          w = strengths[quad.data.index] * alpha / l;
          node.vx += x * w;
          node.vy += y * w;
        } while (quad = quad.next);
      }

      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
      };

      force.distanceMin = function(_) {
        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
      };

      force.distanceMax = function(_) {
        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
      };

      force.theta = function(_) {
        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
      };

      return force;
    }

    function radial$1(radius, x, y) {
      var nodes,
          strength = constant$4(0.1),
          strengths,
          radiuses;

      if (typeof radius !== "function") radius = constant$4(+radius);
      if (x == null) x = 0;
      if (y == null) y = 0;

      function force(alpha) {
        for (var i = 0, n = nodes.length; i < n; ++i) {
          var node = nodes[i],
              dx = node.x - x || 1e-6,
              dy = node.y - y || 1e-6,
              r = Math.sqrt(dx * dx + dy * dy),
              k = (radiuses[i] - r) * strengths[i] * alpha / r;
          node.vx += dx * k;
          node.vy += dy * k;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        radiuses = new Array(n);
        for (i = 0; i < n; ++i) {
          radiuses[i] = +radius(nodes[i], i, nodes);
          strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _, initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
      };

      force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : radius;
      };

      force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
      };

      force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
      };

      return force;
    }

    function x$1(x) {
      var strength = constant$4(0.1),
          nodes,
          strengths,
          xz;

      if (typeof x !== "function") x = constant$4(x == null ? 0 : +x);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        xz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
      };

      force.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : x;
      };

      return force;
    }

    function y$1(y) {
      var strength = constant$4(0.1),
          nodes,
          strengths,
          yz;

      if (typeof y !== "function") y = constant$4(y == null ? 0 : +y);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        yz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : strength;
      };

      force.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$4(+_), initialize(), force) : y;
      };

      return force;
    }

    function formatDecimal(x) {
      return Math.abs(x = Math.round(x)) >= 1e21
          ? x.toLocaleString("en").replace(/,/g, "")
          : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent(x) {
      return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": (x, p) => (x * 100).toFixed(p),
      "b": (x) => Math.round(x).toString(2),
      "c": (x) => x + "",
      "d": formatDecimal,
      "e": (x, p) => x.toExponential(p),
      "f": (x, p) => x.toFixed(p),
      "g": (x, p) => x.toPrecision(p),
      "o": (x) => Math.round(x).toString(8),
      "p": (x, p) => formatRounded(x * 100, p),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x) => Math.round(x).toString(16).toUpperCase(),
      "x": (x) => Math.round(x).toString(16)
    };

    function identity$6(x) {
      return x;
    }

    var map = Array.prototype.map,
        prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale$1(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity$6 : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity$6 : formatNumerals(map.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "−" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale$1;
    var format;
    var formatPrefix;

    defaultLocale$1({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      format = locale$1.format;
      formatPrefix = locale$1.formatPrefix;
      return locale$1;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent(max) - exponent(step)) + 1;
    }

    var epsilon$1 = 1e-6;
    var epsilon2 = 1e-12;
    var pi$1 = Math.PI;
    var halfPi$1 = pi$1 / 2;
    var quarterPi = pi$1 / 4;
    var tau$1 = pi$1 * 2;

    var degrees = 180 / pi$1;
    var radians = pi$1 / 180;

    var abs$1 = Math.abs;
    var atan = Math.atan;
    var atan2$1 = Math.atan2;
    var cos$1 = Math.cos;
    var ceil = Math.ceil;
    var exp = Math.exp;
    var hypot = Math.hypot;
    var log$1 = Math.log;
    var pow$1 = Math.pow;
    var sin$1 = Math.sin;
    var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
    var sqrt$2 = Math.sqrt;
    var tan = Math.tan;

    function acos$1(x) {
      return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);
    }

    function asin$1(x) {
      return x > 1 ? halfPi$1 : x < -1 ? -halfPi$1 : Math.asin(x);
    }

    function haversin(x) {
      return (x = sin$1(x / 2)) * x;
    }

    function noop$1() {}

    function streamGeometry(geometry, stream) {
      if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
        streamGeometryType[geometry.type](geometry, stream);
      }
    }

    var streamObjectType = {
      Feature: function(object, stream) {
        streamGeometry(object.geometry, stream);
      },
      FeatureCollection: function(object, stream) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n) streamGeometry(features[i].geometry, stream);
      }
    };

    var streamGeometryType = {
      Sphere: function(object, stream) {
        stream.sphere();
      },
      Point: function(object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
      },
      MultiPoint: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
      },
      LineString: function(object, stream) {
        streamLine(object.coordinates, stream, 0);
      },
      MultiLineString: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamLine(coordinates[i], stream, 0);
      },
      Polygon: function(object, stream) {
        streamPolygon(object.coordinates, stream);
      },
      MultiPolygon: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamPolygon(coordinates[i], stream);
      },
      GeometryCollection: function(object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n) streamGeometry(geometries[i], stream);
      }
    };

    function streamLine(coordinates, stream, closed) {
      var i = -1, n = coordinates.length - closed, coordinate;
      stream.lineStart();
      while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
      stream.lineEnd();
    }

    function streamPolygon(coordinates, stream) {
      var i = -1, n = coordinates.length;
      stream.polygonStart();
      while (++i < n) streamLine(coordinates[i], stream, 1);
      stream.polygonEnd();
    }

    function geoStream(object, stream) {
      if (object && streamObjectType.hasOwnProperty(object.type)) {
        streamObjectType[object.type](object, stream);
      } else {
        streamGeometry(object, stream);
      }
    }

    var areaRingSum$1 = new Adder();

    // hello?

    var areaSum$1 = new Adder(),
        lambda00$2,
        phi00$2,
        lambda0$2,
        cosPhi0$1,
        sinPhi0$1;

    var areaStream$1 = {
      point: noop$1,
      lineStart: noop$1,
      lineEnd: noop$1,
      polygonStart: function() {
        areaRingSum$1 = new Adder();
        areaStream$1.lineStart = areaRingStart$1;
        areaStream$1.lineEnd = areaRingEnd$1;
      },
      polygonEnd: function() {
        var areaRing = +areaRingSum$1;
        areaSum$1.add(areaRing < 0 ? tau$1 + areaRing : areaRing);
        this.lineStart = this.lineEnd = this.point = noop$1;
      },
      sphere: function() {
        areaSum$1.add(tau$1);
      }
    };

    function areaRingStart$1() {
      areaStream$1.point = areaPointFirst$1;
    }

    function areaRingEnd$1() {
      areaPoint$1(lambda00$2, phi00$2);
    }

    function areaPointFirst$1(lambda, phi) {
      areaStream$1.point = areaPoint$1;
      lambda00$2 = lambda, phi00$2 = phi;
      lambda *= radians, phi *= radians;
      lambda0$2 = lambda, cosPhi0$1 = cos$1(phi = phi / 2 + quarterPi), sinPhi0$1 = sin$1(phi);
    }

    function areaPoint$1(lambda, phi) {
      lambda *= radians, phi *= radians;
      phi = phi / 2 + quarterPi; // half the angular distance from south pole

      // Spherical excess E for a spherical triangle with vertices: south pole,
      // previous point, current point.  Uses a formula derived from Cagnoli’s
      // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
      var dLambda = lambda - lambda0$2,
          sdLambda = dLambda >= 0 ? 1 : -1,
          adLambda = sdLambda * dLambda,
          cosPhi = cos$1(phi),
          sinPhi = sin$1(phi),
          k = sinPhi0$1 * sinPhi,
          u = cosPhi0$1 * cosPhi + k * cos$1(adLambda),
          v = k * sdLambda * sin$1(adLambda);
      areaRingSum$1.add(atan2$1(v, u));

      // Advance the previous points.
      lambda0$2 = lambda, cosPhi0$1 = cosPhi, sinPhi0$1 = sinPhi;
    }

    function area$2(object) {
      areaSum$1 = new Adder();
      geoStream(object, areaStream$1);
      return areaSum$1 * 2;
    }

    function spherical(cartesian) {
      return [atan2$1(cartesian[1], cartesian[0]), asin$1(cartesian[2])];
    }

    function cartesian(spherical) {
      var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
      return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
    }

    function cartesianDot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }

    function cartesianCross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    }

    // TODO return a
    function cartesianAddInPlace(a, b) {
      a[0] += b[0], a[1] += b[1], a[2] += b[2];
    }

    function cartesianScale(vector, k) {
      return [vector[0] * k, vector[1] * k, vector[2] * k];
    }

    // TODO return d
    function cartesianNormalizeInPlace(d) {
      var l = sqrt$2(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
      d[0] /= l, d[1] /= l, d[2] /= l;
    }

    var lambda0$1, phi0, lambda1, phi1, // bounds
        lambda2, // previous lambda-coordinate
        lambda00$1, phi00$1, // first point
        p0, // previous 3D point
        deltaSum,
        ranges,
        range;

    var boundsStream$2 = {
      point: boundsPoint$1,
      lineStart: boundsLineStart,
      lineEnd: boundsLineEnd,
      polygonStart: function() {
        boundsStream$2.point = boundsRingPoint;
        boundsStream$2.lineStart = boundsRingStart;
        boundsStream$2.lineEnd = boundsRingEnd;
        deltaSum = new Adder();
        areaStream$1.polygonStart();
      },
      polygonEnd: function() {
        areaStream$1.polygonEnd();
        boundsStream$2.point = boundsPoint$1;
        boundsStream$2.lineStart = boundsLineStart;
        boundsStream$2.lineEnd = boundsLineEnd;
        if (areaRingSum$1 < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
        else if (deltaSum > epsilon$1) phi1 = 90;
        else if (deltaSum < -epsilon$1) phi0 = -90;
        range[0] = lambda0$1, range[1] = lambda1;
      },
      sphere: function() {
        lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
      }
    };

    function boundsPoint$1(lambda, phi) {
      ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    function linePoint(lambda, phi) {
      var p = cartesian([lambda * radians, phi * radians]);
      if (p0) {
        var normal = cartesianCross(p0, p),
            equatorial = [normal[1], -normal[0], 0],
            inflection = cartesianCross(equatorial, normal);
        cartesianNormalizeInPlace(inflection);
        inflection = spherical(inflection);
        var delta = lambda - lambda2,
            sign = delta > 0 ? 1 : -1,
            lambdai = inflection[0] * degrees * sign,
            phii,
            antimeridian = abs$1(delta) > 180;
        if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
          phii = inflection[1] * degrees;
          if (phii > phi1) phi1 = phii;
        } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
          phii = -inflection[1] * degrees;
          if (phii < phi0) phi0 = phii;
        } else {
          if (phi < phi0) phi0 = phi;
          if (phi > phi1) phi1 = phi;
        }
        if (antimeridian) {
          if (lambda < lambda2) {
            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
          } else {
            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
          }
        } else {
          if (lambda1 >= lambda0$1) {
            if (lambda < lambda0$1) lambda0$1 = lambda;
            if (lambda > lambda1) lambda1 = lambda;
          } else {
            if (lambda > lambda2) {
              if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
            } else {
              if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
            }
          }
        }
      } else {
        ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
      }
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
      p0 = p, lambda2 = lambda;
    }

    function boundsLineStart() {
      boundsStream$2.point = linePoint;
    }

    function boundsLineEnd() {
      range[0] = lambda0$1, range[1] = lambda1;
      boundsStream$2.point = boundsPoint$1;
      p0 = null;
    }

    function boundsRingPoint(lambda, phi) {
      if (p0) {
        var delta = lambda - lambda2;
        deltaSum.add(abs$1(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
      } else {
        lambda00$1 = lambda, phi00$1 = phi;
      }
      areaStream$1.point(lambda, phi);
      linePoint(lambda, phi);
    }

    function boundsRingStart() {
      areaStream$1.lineStart();
    }

    function boundsRingEnd() {
      boundsRingPoint(lambda00$1, phi00$1);
      areaStream$1.lineEnd();
      if (abs$1(deltaSum) > epsilon$1) lambda0$1 = -(lambda1 = 180);
      range[0] = lambda0$1, range[1] = lambda1;
      p0 = null;
    }

    // Finds the left-right distance between two longitudes.
    // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
    // the distance between ±180° to be 360°.
    function angle(lambda0, lambda1) {
      return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
    }

    function rangeCompare(a, b) {
      return a[0] - b[0];
    }

    function rangeContains(range, x) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }

    function bounds(feature) {
      var i, n, a, b, merged, deltaMax, delta;

      phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
      ranges = [];
      geoStream(feature, boundsStream$2);

      // First, sort ranges by their minimum longitudes.
      if (n = ranges.length) {
        ranges.sort(rangeCompare);

        // Then, merge any ranges that overlap.
        for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
          b = ranges[i];
          if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }

        // Finally, find the largest gap between the merged ranges.
        // The final bounding box will be the inverse of this gap.
        for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
          b = merged[i];
          if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
        }
      }

      ranges = range = null;

      return lambda0$1 === Infinity || phi0 === Infinity
          ? [[NaN, NaN], [NaN, NaN]]
          : [[lambda0$1, phi0], [lambda1, phi1]];
    }

    var W0, W1,
        X0$1, Y0$1, Z0$1,
        X1$1, Y1$1, Z1$1,
        X2$1, Y2$1, Z2$1,
        lambda00, phi00, // first point
        x0$4, y0$4, z0; // previous point

    var centroidStream$1 = {
      sphere: noop$1,
      point: centroidPoint$1,
      lineStart: centroidLineStart$1,
      lineEnd: centroidLineEnd$1,
      polygonStart: function() {
        centroidStream$1.lineStart = centroidRingStart$1;
        centroidStream$1.lineEnd = centroidRingEnd$1;
      },
      polygonEnd: function() {
        centroidStream$1.lineStart = centroidLineStart$1;
        centroidStream$1.lineEnd = centroidLineEnd$1;
      }
    };

    // Arithmetic mean of Cartesian vectors.
    function centroidPoint$1(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$1(phi);
      centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
    }

    function centroidPointCartesian(x, y, z) {
      ++W0;
      X0$1 += (x - X0$1) / W0;
      Y0$1 += (y - Y0$1) / W0;
      Z0$1 += (z - Z0$1) / W0;
    }

    function centroidLineStart$1() {
      centroidStream$1.point = centroidLinePointFirst;
    }

    function centroidLinePointFirst(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$1(phi);
      x0$4 = cosPhi * cos$1(lambda);
      y0$4 = cosPhi * sin$1(lambda);
      z0 = sin$1(phi);
      centroidStream$1.point = centroidLinePoint;
      centroidPointCartesian(x0$4, y0$4, z0);
    }

    function centroidLinePoint(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$1(phi),
          x = cosPhi * cos$1(lambda),
          y = cosPhi * sin$1(lambda),
          z = sin$1(phi),
          w = atan2$1(sqrt$2((w = y0$4 * z - z0 * y) * w + (w = z0 * x - x0$4 * z) * w + (w = x0$4 * y - y0$4 * x) * w), x0$4 * x + y0$4 * y + z0 * z);
      W1 += w;
      X1$1 += w * (x0$4 + (x0$4 = x));
      Y1$1 += w * (y0$4 + (y0$4 = y));
      Z1$1 += w * (z0 + (z0 = z));
      centroidPointCartesian(x0$4, y0$4, z0);
    }

    function centroidLineEnd$1() {
      centroidStream$1.point = centroidPoint$1;
    }

    // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
    // J. Applied Mechanics 42, 239 (1975).
    function centroidRingStart$1() {
      centroidStream$1.point = centroidRingPointFirst;
    }

    function centroidRingEnd$1() {
      centroidRingPoint(lambda00, phi00);
      centroidStream$1.point = centroidPoint$1;
    }

    function centroidRingPointFirst(lambda, phi) {
      lambda00 = lambda, phi00 = phi;
      lambda *= radians, phi *= radians;
      centroidStream$1.point = centroidRingPoint;
      var cosPhi = cos$1(phi);
      x0$4 = cosPhi * cos$1(lambda);
      y0$4 = cosPhi * sin$1(lambda);
      z0 = sin$1(phi);
      centroidPointCartesian(x0$4, y0$4, z0);
    }

    function centroidRingPoint(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$1(phi),
          x = cosPhi * cos$1(lambda),
          y = cosPhi * sin$1(lambda),
          z = sin$1(phi),
          cx = y0$4 * z - z0 * y,
          cy = z0 * x - x0$4 * z,
          cz = x0$4 * y - y0$4 * x,
          m = hypot(cx, cy, cz),
          w = asin$1(m), // line weight = angle
          v = m && -w / m; // area weight multiplier
      X2$1.add(v * cx);
      Y2$1.add(v * cy);
      Z2$1.add(v * cz);
      W1 += w;
      X1$1 += w * (x0$4 + (x0$4 = x));
      Y1$1 += w * (y0$4 + (y0$4 = y));
      Z1$1 += w * (z0 + (z0 = z));
      centroidPointCartesian(x0$4, y0$4, z0);
    }

    function centroid$1(object) {
      W0 = W1 =
      X0$1 = Y0$1 = Z0$1 =
      X1$1 = Y1$1 = Z1$1 = 0;
      X2$1 = new Adder();
      Y2$1 = new Adder();
      Z2$1 = new Adder();
      geoStream(object, centroidStream$1);

      var x = +X2$1,
          y = +Y2$1,
          z = +Z2$1,
          m = hypot(x, y, z);

      // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
      if (m < epsilon2) {
        x = X1$1, y = Y1$1, z = Z1$1;
        // If the feature has zero length, fall back to arithmetic mean of point vectors.
        if (W1 < epsilon$1) x = X0$1, y = Y0$1, z = Z0$1;
        m = hypot(x, y, z);
        // If the feature still has an undefined ccentroid, then return.
        if (m < epsilon2) return [NaN, NaN];
      }

      return [atan2$1(y, x) * degrees, asin$1(z / m) * degrees];
    }

    function constant$3(x) {
      return function() {
        return x;
      };
    }

    function compose(a, b) {

      function compose(x, y) {
        return x = a(x, y), b(x[0], x[1]);
      }

      if (a.invert && b.invert) compose.invert = function(x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
      };

      return compose;
    }

    function rotationIdentity(lambda, phi) {
      if (abs$1(lambda) > pi$1) lambda -= Math.round(lambda / tau$1) * tau$1;
      return [lambda, phi];
    }

    rotationIdentity.invert = rotationIdentity;

    function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
      return (deltaLambda %= tau$1) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
        : rotationLambda(deltaLambda))
        : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
        : rotationIdentity);
    }

    function forwardRotationLambda(deltaLambda) {
      return function(lambda, phi) {
        lambda += deltaLambda;
        if (abs$1(lambda) > pi$1) lambda -= Math.round(lambda / tau$1) * tau$1;
        return [lambda, phi];
      };
    }

    function rotationLambda(deltaLambda) {
      var rotation = forwardRotationLambda(deltaLambda);
      rotation.invert = forwardRotationLambda(-deltaLambda);
      return rotation;
    }

    function rotationPhiGamma(deltaPhi, deltaGamma) {
      var cosDeltaPhi = cos$1(deltaPhi),
          sinDeltaPhi = sin$1(deltaPhi),
          cosDeltaGamma = cos$1(deltaGamma),
          sinDeltaGamma = sin$1(deltaGamma);

      function rotation(lambda, phi) {
        var cosPhi = cos$1(phi),
            x = cos$1(lambda) * cosPhi,
            y = sin$1(lambda) * cosPhi,
            z = sin$1(phi),
            k = z * cosDeltaPhi + x * sinDeltaPhi;
        return [
          atan2$1(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
          asin$1(k * cosDeltaGamma + y * sinDeltaGamma)
        ];
      }

      rotation.invert = function(lambda, phi) {
        var cosPhi = cos$1(phi),
            x = cos$1(lambda) * cosPhi,
            y = sin$1(lambda) * cosPhi,
            z = sin$1(phi),
            k = z * cosDeltaGamma - y * sinDeltaGamma;
        return [
          atan2$1(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
          asin$1(k * cosDeltaPhi - x * sinDeltaPhi)
        ];
      };

      return rotation;
    }

    function rotation(rotate) {
      rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

      function forward(coordinates) {
        coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
        return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
      }

      forward.invert = function(coordinates) {
        coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
        return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
      };

      return forward;
    }

    // Generates a circle centered at [0°, 0°], with a given radius and precision.
    function circleStream(stream, radius, delta, direction, t0, t1) {
      if (!delta) return;
      var cosRadius = cos$1(radius),
          sinRadius = sin$1(radius),
          step = direction * delta;
      if (t0 == null) {
        t0 = radius + direction * tau$1;
        t1 = radius - step / 2;
      } else {
        t0 = circleRadius(cosRadius, t0);
        t1 = circleRadius(cosRadius, t1);
        if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$1;
      }
      for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
        point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
        stream.point(point[0], point[1]);
      }
    }

    // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
    function circleRadius(cosRadius, point) {
      point = cartesian(point), point[0] -= cosRadius;
      cartesianNormalizeInPlace(point);
      var radius = acos$1(-point[1]);
      return ((-point[2] < 0 ? -radius : radius) + tau$1 - epsilon$1) % tau$1;
    }

    function circle$1() {
      var center = constant$3([0, 0]),
          radius = constant$3(90),
          precision = constant$3(2),
          ring,
          rotate,
          stream = {point: point};

      function point(x, y) {
        ring.push(x = rotate(x, y));
        x[0] *= degrees, x[1] *= degrees;
      }

      function circle() {
        var c = center.apply(this, arguments),
            r = radius.apply(this, arguments) * radians,
            p = precision.apply(this, arguments) * radians;
        ring = [];
        rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
        circleStream(stream, r, p, 1);
        c = {type: "Polygon", coordinates: [ring]};
        ring = rotate = null;
        return c;
      }

      circle.center = function(_) {
        return arguments.length ? (center = typeof _ === "function" ? _ : constant$3([+_[0], +_[1]]), circle) : center;
      };

      circle.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$3(+_), circle) : radius;
      };

      circle.precision = function(_) {
        return arguments.length ? (precision = typeof _ === "function" ? _ : constant$3(+_), circle) : precision;
      };

      return circle;
    }

    function clipBuffer() {
      var lines = [],
          line;
      return {
        point: function(x, y, m) {
          line.push([x, y, m]);
        },
        lineStart: function() {
          lines.push(line = []);
        },
        lineEnd: noop$1,
        rejoin: function() {
          if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
        },
        result: function() {
          var result = lines;
          lines = [];
          line = null;
          return result;
        }
      };
    }

    function pointEqual(a, b) {
      return abs$1(a[0] - b[0]) < epsilon$1 && abs$1(a[1] - b[1]) < epsilon$1;
    }

    function Intersection(point, points, other, entry) {
      this.x = point;
      this.z = points;
      this.o = other; // another intersection
      this.e = entry; // is an entry?
      this.v = false; // visited
      this.n = this.p = null; // next & previous
    }

    // A generalized polygon clipping algorithm: given a polygon that has been cut
    // into its visible line segments, and rejoins the segments by interpolating
    // along the clip edge.
    function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
      var subject = [],
          clip = [],
          i,
          n;

      segments.forEach(function(segment) {
        if ((n = segment.length - 1) <= 0) return;
        var n, p0 = segment[0], p1 = segment[n], x;

        if (pointEqual(p0, p1)) {
          if (!p0[2] && !p1[2]) {
            stream.lineStart();
            for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
            stream.lineEnd();
            return;
          }
          // handle degenerate cases by moving the point
          p1[0] += 2 * epsilon$1;
        }

        subject.push(x = new Intersection(p0, segment, null, true));
        clip.push(x.o = new Intersection(p0, null, x, false));
        subject.push(x = new Intersection(p1, segment, null, false));
        clip.push(x.o = new Intersection(p1, null, x, true));
      });

      if (!subject.length) return;

      clip.sort(compareIntersection);
      link$1(subject);
      link$1(clip);

      for (i = 0, n = clip.length; i < n; ++i) {
        clip[i].e = startInside = !startInside;
      }

      var start = subject[0],
          points,
          point;

      while (1) {
        // Find first unvisited intersection.
        var current = start,
            isSubject = true;
        while (current.v) if ((current = current.n) === start) return;
        points = current.z;
        stream.lineStart();
        do {
          current.v = current.o.v = true;
          if (current.e) {
            if (isSubject) {
              for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
            } else {
              interpolate(current.x, current.n.x, 1, stream);
            }
            current = current.n;
          } else {
            if (isSubject) {
              points = current.p.z;
              for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
            } else {
              interpolate(current.x, current.p.x, -1, stream);
            }
            current = current.p;
          }
          current = current.o;
          points = current.z;
          isSubject = !isSubject;
        } while (!current.v);
        stream.lineEnd();
      }
    }

    function link$1(array) {
      if (!(n = array.length)) return;
      var n,
          i = 0,
          a = array[0],
          b;
      while (++i < n) {
        a.n = b = array[i];
        b.p = a;
        a = b;
      }
      a.n = b = array[0];
      b.p = a;
    }

    function longitude(point) {
      return abs$1(point[0]) <= pi$1 ? point[0] : sign$1(point[0]) * ((abs$1(point[0]) + pi$1) % tau$1 - pi$1);
    }

    function polygonContains(polygon, point) {
      var lambda = longitude(point),
          phi = point[1],
          sinPhi = sin$1(phi),
          normal = [sin$1(lambda), -cos$1(lambda), 0],
          angle = 0,
          winding = 0;

      var sum = new Adder();

      if (sinPhi === 1) phi = halfPi$1 + epsilon$1;
      else if (sinPhi === -1) phi = -halfPi$1 - epsilon$1;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        if (!(m = (ring = polygon[i]).length)) continue;
        var ring,
            m,
            point0 = ring[m - 1],
            lambda0 = longitude(point0),
            phi0 = point0[1] / 2 + quarterPi,
            sinPhi0 = sin$1(phi0),
            cosPhi0 = cos$1(phi0);

        for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
          var point1 = ring[j],
              lambda1 = longitude(point1),
              phi1 = point1[1] / 2 + quarterPi,
              sinPhi1 = sin$1(phi1),
              cosPhi1 = cos$1(phi1),
              delta = lambda1 - lambda0,
              sign = delta >= 0 ? 1 : -1,
              absDelta = sign * delta,
              antimeridian = absDelta > pi$1,
              k = sinPhi0 * sinPhi1;

          sum.add(atan2$1(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
          angle += antimeridian ? delta + sign * tau$1 : delta;

          // Are the longitudes either side of the point’s meridian (lambda),
          // and are the latitudes smaller than the parallel (phi)?
          if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
            var arc = cartesianCross(cartesian(point0), cartesian(point1));
            cartesianNormalizeInPlace(arc);
            var intersection = cartesianCross(normal, arc);
            cartesianNormalizeInPlace(intersection);
            var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);
            if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
              winding += antimeridian ^ delta >= 0 ? 1 : -1;
            }
          }
        }
      }

      // First, determine whether the South pole is inside or outside:
      //
      // It is inside if:
      // * the polygon winds around it in a clockwise direction.
      // * the polygon does not (cumulatively) wind around it, but has a negative
      //   (counter-clockwise) area.
      //
      // Second, count the (signed) number of times a segment crosses a lambda
      // from the point to the South pole.  If it is zero, then the point is the
      // same side as the South pole.

      return (angle < -epsilon$1 || angle < epsilon$1 && sum < -epsilon2) ^ (winding & 1);
    }

    function clip(pointVisible, clipLine, interpolate, start) {
      return function(sink) {
        var line = clipLine(sink),
            ringBuffer = clipBuffer(),
            ringSink = clipLine(ringBuffer),
            polygonStarted = false,
            polygon,
            segments,
            ring;

        var clip = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function() {
            clip.point = pointRing;
            clip.lineStart = ringStart;
            clip.lineEnd = ringEnd;
            segments = [];
            polygon = [];
          },
          polygonEnd: function() {
            clip.point = point;
            clip.lineStart = lineStart;
            clip.lineEnd = lineEnd;
            segments = merge(segments);
            var startInside = polygonContains(polygon, start);
            if (segments.length) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
            } else if (startInside) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              sink.lineStart();
              interpolate(null, null, 1, sink);
              sink.lineEnd();
            }
            if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
            segments = polygon = null;
          },
          sphere: function() {
            sink.polygonStart();
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
            sink.polygonEnd();
          }
        };

        function point(lambda, phi) {
          if (pointVisible(lambda, phi)) sink.point(lambda, phi);
        }

        function pointLine(lambda, phi) {
          line.point(lambda, phi);
        }

        function lineStart() {
          clip.point = pointLine;
          line.lineStart();
        }

        function lineEnd() {
          clip.point = point;
          line.lineEnd();
        }

        function pointRing(lambda, phi) {
          ring.push([lambda, phi]);
          ringSink.point(lambda, phi);
        }

        function ringStart() {
          ringSink.lineStart();
          ring = [];
        }

        function ringEnd() {
          pointRing(ring[0][0], ring[0][1]);
          ringSink.lineEnd();

          var clean = ringSink.clean(),
              ringSegments = ringBuffer.result(),
              i, n = ringSegments.length, m,
              segment,
              point;

          ring.pop();
          polygon.push(ring);
          ring = null;

          if (!n) return;

          // No intersections.
          if (clean & 1) {
            segment = ringSegments[0];
            if ((m = segment.length - 1) > 0) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              sink.lineStart();
              for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
              sink.lineEnd();
            }
            return;
          }

          // Rejoin connected segments.
          // TODO reuse ringBuffer.rejoin()?
          if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

          segments.push(ringSegments.filter(validSegment));
        }

        return clip;
      };
    }

    function validSegment(segment) {
      return segment.length > 1;
    }

    // Intersections are sorted along the clip edge. For both antimeridian cutting
    // and circle clipping, the same comparison is used.
    function compareIntersection(a, b) {
      return ((a = a.x)[0] < 0 ? a[1] - halfPi$1 - epsilon$1 : halfPi$1 - a[1])
           - ((b = b.x)[0] < 0 ? b[1] - halfPi$1 - epsilon$1 : halfPi$1 - b[1]);
    }

    var clipAntimeridian = clip(
      function() { return true; },
      clipAntimeridianLine,
      clipAntimeridianInterpolate,
      [-pi$1, -halfPi$1]
    );

    // Takes a line and cuts into visible segments. Return values: 0 - there were
    // intersections or the line was empty; 1 - no intersections; 2 - there were
    // intersections, and the first and last segments should be rejoined.
    function clipAntimeridianLine(stream) {
      var lambda0 = NaN,
          phi0 = NaN,
          sign0 = NaN,
          clean; // no intersections

      return {
        lineStart: function() {
          stream.lineStart();
          clean = 1;
        },
        point: function(lambda1, phi1) {
          var sign1 = lambda1 > 0 ? pi$1 : -pi$1,
              delta = abs$1(lambda1 - lambda0);
          if (abs$1(delta - pi$1) < epsilon$1) { // line crosses a pole
            stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$1 : -halfPi$1);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            stream.point(lambda1, phi0);
            clean = 0;
          } else if (sign0 !== sign1 && delta >= pi$1) { // line crosses antimeridian
            if (abs$1(lambda0 - sign0) < epsilon$1) lambda0 -= sign0 * epsilon$1; // handle degeneracies
            if (abs$1(lambda1 - sign1) < epsilon$1) lambda1 -= sign1 * epsilon$1;
            phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            clean = 0;
          }
          stream.point(lambda0 = lambda1, phi0 = phi1);
          sign0 = sign1;
        },
        lineEnd: function() {
          stream.lineEnd();
          lambda0 = phi0 = NaN;
        },
        clean: function() {
          return 2 - clean; // if intersections, rejoin first and last segments
        }
      };
    }

    function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
      var cosPhi0,
          cosPhi1,
          sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
      return abs$1(sinLambda0Lambda1) > epsilon$1
          ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
              - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
              / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
          : (phi0 + phi1) / 2;
    }

    function clipAntimeridianInterpolate(from, to, direction, stream) {
      var phi;
      if (from == null) {
        phi = direction * halfPi$1;
        stream.point(-pi$1, phi);
        stream.point(0, phi);
        stream.point(pi$1, phi);
        stream.point(pi$1, 0);
        stream.point(pi$1, -phi);
        stream.point(0, -phi);
        stream.point(-pi$1, -phi);
        stream.point(-pi$1, 0);
        stream.point(-pi$1, phi);
      } else if (abs$1(from[0] - to[0]) > epsilon$1) {
        var lambda = from[0] < to[0] ? pi$1 : -pi$1;
        phi = direction * lambda / 2;
        stream.point(-lambda, phi);
        stream.point(0, phi);
        stream.point(lambda, phi);
      } else {
        stream.point(to[0], to[1]);
      }
    }

    function clipCircle(radius) {
      var cr = cos$1(radius),
          delta = 2 * radians,
          smallRadius = cr > 0,
          notHemisphere = abs$1(cr) > epsilon$1; // TODO optimise for this common case

      function interpolate(from, to, direction, stream) {
        circleStream(stream, radius, delta, direction, from, to);
      }

      function visible(lambda, phi) {
        return cos$1(lambda) * cos$1(phi) > cr;
      }

      // Takes a line and cuts into visible segments. Return values used for polygon
      // clipping: 0 - there were intersections or the line was empty; 1 - no
      // intersections 2 - there were intersections, and the first and last segments
      // should be rejoined.
      function clipLine(stream) {
        var point0, // previous point
            c0, // code for previous point
            v0, // visibility of previous point
            v00, // visibility of first point
            clean; // no intersections
        return {
          lineStart: function() {
            v00 = v0 = false;
            clean = 1;
          },
          point: function(lambda, phi) {
            var point1 = [lambda, phi],
                point2,
                v = visible(lambda, phi),
                c = smallRadius
                  ? v ? 0 : code(lambda, phi)
                  : v ? code(lambda + (lambda < 0 ? pi$1 : -pi$1), phi) : 0;
            if (!point0 && (v00 = v0 = v)) stream.lineStart();
            if (v !== v0) {
              point2 = intersect(point0, point1);
              if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))
                point1[2] = 1;
            }
            if (v !== v0) {
              clean = 0;
              if (v) {
                // outside going in
                stream.lineStart();
                point2 = intersect(point1, point0);
                stream.point(point2[0], point2[1]);
              } else {
                // inside going out
                point2 = intersect(point0, point1);
                stream.point(point2[0], point2[1], 2);
                stream.lineEnd();
              }
              point0 = point2;
            } else if (notHemisphere && point0 && smallRadius ^ v) {
              var t;
              // If the codes for two points are different, or are both zero,
              // and there this segment intersects with the small circle.
              if (!(c & c0) && (t = intersect(point1, point0, true))) {
                clean = 0;
                if (smallRadius) {
                  stream.lineStart();
                  stream.point(t[0][0], t[0][1]);
                  stream.point(t[1][0], t[1][1]);
                  stream.lineEnd();
                } else {
                  stream.point(t[1][0], t[1][1]);
                  stream.lineEnd();
                  stream.lineStart();
                  stream.point(t[0][0], t[0][1], 3);
                }
              }
            }
            if (v && (!point0 || !pointEqual(point0, point1))) {
              stream.point(point1[0], point1[1]);
            }
            point0 = point1, v0 = v, c0 = c;
          },
          lineEnd: function() {
            if (v0) stream.lineEnd();
            point0 = null;
          },
          // Rejoin first and last segments if there were intersections and the first
          // and last points were visible.
          clean: function() {
            return clean | ((v00 && v0) << 1);
          }
        };
      }

      // Intersects the great circle between a and b with the clip circle.
      function intersect(a, b, two) {
        var pa = cartesian(a),
            pb = cartesian(b);

        // We have two planes, n1.p = d1 and n2.p = d2.
        // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
        var n1 = [1, 0, 0], // normal
            n2 = cartesianCross(pa, pb),
            n2n2 = cartesianDot(n2, n2),
            n1n2 = n2[0], // cartesianDot(n1, n2),
            determinant = n2n2 - n1n2 * n1n2;

        // Two polar points.
        if (!determinant) return !two && a;

        var c1 =  cr * n2n2 / determinant,
            c2 = -cr * n1n2 / determinant,
            n1xn2 = cartesianCross(n1, n2),
            A = cartesianScale(n1, c1),
            B = cartesianScale(n2, c2);
        cartesianAddInPlace(A, B);

        // Solve |p(t)|^2 = 1.
        var u = n1xn2,
            w = cartesianDot(A, u),
            uu = cartesianDot(u, u),
            t2 = w * w - uu * (cartesianDot(A, A) - 1);

        if (t2 < 0) return;

        var t = sqrt$2(t2),
            q = cartesianScale(u, (-w - t) / uu);
        cartesianAddInPlace(q, A);
        q = spherical(q);

        if (!two) return q;

        // Two intersection points.
        var lambda0 = a[0],
            lambda1 = b[0],
            phi0 = a[1],
            phi1 = b[1],
            z;

        if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

        var delta = lambda1 - lambda0,
            polar = abs$1(delta - pi$1) < epsilon$1,
            meridian = polar || delta < epsilon$1;

        if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

        // Check that the first point is between a and b.
        if (meridian
            ? polar
              ? phi0 + phi1 > 0 ^ q[1] < (abs$1(q[0] - lambda0) < epsilon$1 ? phi0 : phi1)
              : phi0 <= q[1] && q[1] <= phi1
            : delta > pi$1 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
          var q1 = cartesianScale(u, (-w + t) / uu);
          cartesianAddInPlace(q1, A);
          return [q, spherical(q1)];
        }
      }

      // Generates a 4-bit vector representing the location of a point relative to
      // the small circle's bounding box.
      function code(lambda, phi) {
        var r = smallRadius ? radius : pi$1 - radius,
            code = 0;
        if (lambda < -r) code |= 1; // left
        else if (lambda > r) code |= 2; // right
        if (phi < -r) code |= 4; // below
        else if (phi > r) code |= 8; // above
        return code;
      }

      return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$1, radius - pi$1]);
    }

    function clipLine(a, b, x0, y0, x1, y1) {
      var ax = a[0],
          ay = a[1],
          bx = b[0],
          by = b[1],
          t0 = 0,
          t1 = 1,
          dx = bx - ax,
          dy = by - ay,
          r;

      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
      if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
      return true;
    }

    var clipMax = 1e9, clipMin = -clipMax;

    // TODO Use d3-polygon’s polygonContains here for the ring check?
    // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

    function clipRectangle(x0, y0, x1, y1) {

      function visible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }

      function interpolate(from, to, direction, stream) {
        var a = 0, a1 = 0;
        if (from == null
            || (a = corner(from, direction)) !== (a1 = corner(to, direction))
            || comparePoint(from, to) < 0 ^ direction > 0) {
          do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          stream.point(to[0], to[1]);
        }
      }

      function corner(p, direction) {
        return abs$1(p[0] - x0) < epsilon$1 ? direction > 0 ? 0 : 3
            : abs$1(p[0] - x1) < epsilon$1 ? direction > 0 ? 2 : 1
            : abs$1(p[1] - y0) < epsilon$1 ? direction > 0 ? 1 : 0
            : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
      }

      function compareIntersection(a, b) {
        return comparePoint(a.x, b.x);
      }

      function comparePoint(a, b) {
        var ca = corner(a, 1),
            cb = corner(b, 1);
        return ca !== cb ? ca - cb
            : ca === 0 ? b[1] - a[1]
            : ca === 1 ? a[0] - b[0]
            : ca === 2 ? a[1] - b[1]
            : b[0] - a[0];
      }

      return function(stream) {
        var activeStream = stream,
            bufferStream = clipBuffer(),
            segments,
            polygon,
            ring,
            x__, y__, v__, // first point
            x_, y_, v_, // previous point
            first,
            clean;

        var clipStream = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: polygonStart,
          polygonEnd: polygonEnd
        };

        function point(x, y) {
          if (visible(x, y)) activeStream.point(x, y);
        }

        function polygonInside() {
          var winding = 0;

          for (var i = 0, n = polygon.length; i < n; ++i) {
            for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
              a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
              if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
              else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
            }
          }

          return winding;
        }

        // Buffer geometry within a polygon and then clip it en masse.
        function polygonStart() {
          activeStream = bufferStream, segments = [], polygon = [], clean = true;
        }

        function polygonEnd() {
          var startInside = polygonInside(),
              cleanInside = clean && startInside,
              visible = (segments = merge(segments)).length;
          if (cleanInside || visible) {
            stream.polygonStart();
            if (cleanInside) {
              stream.lineStart();
              interpolate(null, null, 1, stream);
              stream.lineEnd();
            }
            if (visible) {
              clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
            }
            stream.polygonEnd();
          }
          activeStream = stream, segments = polygon = ring = null;
        }

        function lineStart() {
          clipStream.point = linePoint;
          if (polygon) polygon.push(ring = []);
          first = true;
          v_ = false;
          x_ = y_ = NaN;
        }

        // TODO rather than special-case polygons, simply handle them separately.
        // Ideally, coincident intersection points should be jittered to avoid
        // clipping issues.
        function lineEnd() {
          if (segments) {
            linePoint(x__, y__);
            if (v__ && v_) bufferStream.rejoin();
            segments.push(bufferStream.result());
          }
          clipStream.point = point;
          if (v_) activeStream.lineEnd();
        }

        function linePoint(x, y) {
          var v = visible(x, y);
          if (polygon) ring.push([x, y]);
          if (first) {
            x__ = x, y__ = y, v__ = v;
            first = false;
            if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
            }
          } else {
            if (v && v_) activeStream.point(x, y);
            else {
              var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                  b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
              if (clipLine(a, b, x0, y0, x1, y1)) {
                if (!v_) {
                  activeStream.lineStart();
                  activeStream.point(a[0], a[1]);
                }
                activeStream.point(b[0], b[1]);
                if (!v) activeStream.lineEnd();
                clean = false;
              } else if (v) {
                activeStream.lineStart();
                activeStream.point(x, y);
                clean = false;
              }
            }
          }
          x_ = x, y_ = y, v_ = v;
        }

        return clipStream;
      };
    }

    function extent() {
      var x0 = 0,
          y0 = 0,
          x1 = 960,
          y1 = 500,
          cache,
          cacheStream,
          clip;

      return clip = {
        stream: function(stream) {
          return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
        },
        extent: function(_) {
          return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
        }
      };
    }

    var lengthSum$1,
        lambda0,
        sinPhi0,
        cosPhi0;

    var lengthStream$1 = {
      sphere: noop$1,
      point: noop$1,
      lineStart: lengthLineStart,
      lineEnd: noop$1,
      polygonStart: noop$1,
      polygonEnd: noop$1
    };

    function lengthLineStart() {
      lengthStream$1.point = lengthPointFirst$1;
      lengthStream$1.lineEnd = lengthLineEnd;
    }

    function lengthLineEnd() {
      lengthStream$1.point = lengthStream$1.lineEnd = noop$1;
    }

    function lengthPointFirst$1(lambda, phi) {
      lambda *= radians, phi *= radians;
      lambda0 = lambda, sinPhi0 = sin$1(phi), cosPhi0 = cos$1(phi);
      lengthStream$1.point = lengthPoint$1;
    }

    function lengthPoint$1(lambda, phi) {
      lambda *= radians, phi *= radians;
      var sinPhi = sin$1(phi),
          cosPhi = cos$1(phi),
          delta = abs$1(lambda - lambda0),
          cosDelta = cos$1(delta),
          sinDelta = sin$1(delta),
          x = cosPhi * sinDelta,
          y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
          z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
      lengthSum$1.add(atan2$1(sqrt$2(x * x + y * y), z));
      lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
    }

    function length$1(object) {
      lengthSum$1 = new Adder();
      geoStream(object, lengthStream$1);
      return +lengthSum$1;
    }

    var coordinates = [null, null],
        object = {type: "LineString", coordinates: coordinates};

    function distance(a, b) {
      coordinates[0] = a;
      coordinates[1] = b;
      return length$1(object);
    }

    var containsObjectType = {
      Feature: function(object, point) {
        return containsGeometry(object.geometry, point);
      },
      FeatureCollection: function(object, point) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
        return false;
      }
    };

    var containsGeometryType = {
      Sphere: function() {
        return true;
      },
      Point: function(object, point) {
        return containsPoint(object.coordinates, point);
      },
      MultiPoint: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) if (containsPoint(coordinates[i], point)) return true;
        return false;
      },
      LineString: function(object, point) {
        return containsLine(object.coordinates, point);
      },
      MultiLineString: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) if (containsLine(coordinates[i], point)) return true;
        return false;
      },
      Polygon: function(object, point) {
        return containsPolygon(object.coordinates, point);
      },
      MultiPolygon: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
        return false;
      },
      GeometryCollection: function(object, point) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n) if (containsGeometry(geometries[i], point)) return true;
        return false;
      }
    };

    function containsGeometry(geometry, point) {
      return geometry && containsGeometryType.hasOwnProperty(geometry.type)
          ? containsGeometryType[geometry.type](geometry, point)
          : false;
    }

    function containsPoint(coordinates, point) {
      return distance(coordinates, point) === 0;
    }

    function containsLine(coordinates, point) {
      var ao, bo, ab;
      for (var i = 0, n = coordinates.length; i < n; i++) {
        bo = distance(coordinates[i], point);
        if (bo === 0) return true;
        if (i > 0) {
          ab = distance(coordinates[i], coordinates[i - 1]);
          if (
            ab > 0 &&
            ao <= ab &&
            bo <= ab &&
            (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab
          )
            return true;
        }
        ao = bo;
      }
      return false;
    }

    function containsPolygon(coordinates, point) {
      return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
    }

    function ringRadians(ring) {
      return ring = ring.map(pointRadians), ring.pop(), ring;
    }

    function pointRadians(point) {
      return [point[0] * radians, point[1] * radians];
    }

    function contains$1(object, point) {
      return (object && containsObjectType.hasOwnProperty(object.type)
          ? containsObjectType[object.type]
          : containsGeometry)(object, point);
    }

    function graticuleX(y0, y1, dy) {
      var y = range$2(y0, y1 - epsilon$1, dy).concat(y1);
      return function(x) { return y.map(function(y) { return [x, y]; }); };
    }

    function graticuleY(x0, x1, dx) {
      var x = range$2(x0, x1 - epsilon$1, dx).concat(x1);
      return function(y) { return x.map(function(x) { return [x, y]; }); };
    }

    function graticule() {
      var x1, x0, X1, X0,
          y1, y0, Y1, Y0,
          dx = 10, dy = dx, DX = 90, DY = 360,
          x, y, X, Y,
          precision = 2.5;

      function graticule() {
        return {type: "MultiLineString", coordinates: lines()};
      }

      function lines() {
        return range$2(ceil(X0 / DX) * DX, X1, DX).map(X)
            .concat(range$2(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
            .concat(range$2(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs$1(x % DX) > epsilon$1; }).map(x))
            .concat(range$2(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs$1(y % DY) > epsilon$1; }).map(y));
      }

      graticule.lines = function() {
        return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
      };

      graticule.outline = function() {
        return {
          type: "Polygon",
          coordinates: [
            X(X0).concat(
            Y(Y1).slice(1),
            X(X1).reverse().slice(1),
            Y(Y0).reverse().slice(1))
          ]
        };
      };

      graticule.extent = function(_) {
        if (!arguments.length) return graticule.extentMinor();
        return graticule.extentMajor(_).extentMinor(_);
      };

      graticule.extentMajor = function(_) {
        if (!arguments.length) return [[X0, Y0], [X1, Y1]];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1) _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
        return graticule.precision(precision);
      };

      graticule.extentMinor = function(_) {
        if (!arguments.length) return [[x0, y0], [x1, y1]];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1) _ = x0, x0 = x1, x1 = _;
        if (y0 > y1) _ = y0, y0 = y1, y1 = _;
        return graticule.precision(precision);
      };

      graticule.step = function(_) {
        if (!arguments.length) return graticule.stepMinor();
        return graticule.stepMajor(_).stepMinor(_);
      };

      graticule.stepMajor = function(_) {
        if (!arguments.length) return [DX, DY];
        DX = +_[0], DY = +_[1];
        return graticule;
      };

      graticule.stepMinor = function(_) {
        if (!arguments.length) return [dx, dy];
        dx = +_[0], dy = +_[1];
        return graticule;
      };

      graticule.precision = function(_) {
        if (!arguments.length) return precision;
        precision = +_;
        x = graticuleX(y0, y1, 90);
        y = graticuleY(x0, x1, precision);
        X = graticuleX(Y0, Y1, 90);
        Y = graticuleY(X0, X1, precision);
        return graticule;
      };

      return graticule
          .extentMajor([[-180, -90 + epsilon$1], [180, 90 - epsilon$1]])
          .extentMinor([[-180, -80 - epsilon$1], [180, 80 + epsilon$1]]);
    }

    function graticule10() {
      return graticule()();
    }

    function interpolate(a, b) {
      var x0 = a[0] * radians,
          y0 = a[1] * radians,
          x1 = b[0] * radians,
          y1 = b[1] * radians,
          cy0 = cos$1(y0),
          sy0 = sin$1(y0),
          cy1 = cos$1(y1),
          sy1 = sin$1(y1),
          kx0 = cy0 * cos$1(x0),
          ky0 = cy0 * sin$1(x0),
          kx1 = cy1 * cos$1(x1),
          ky1 = cy1 * sin$1(x1),
          d = 2 * asin$1(sqrt$2(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
          k = sin$1(d);

      var interpolate = d ? function(t) {
        var B = sin$1(t *= d) / k,
            A = sin$1(d - t) / k,
            x = A * kx0 + B * kx1,
            y = A * ky0 + B * ky1,
            z = A * sy0 + B * sy1;
        return [
          atan2$1(y, x) * degrees,
          atan2$1(z, sqrt$2(x * x + y * y)) * degrees
        ];
      } : function() {
        return [x0 * degrees, y0 * degrees];
      };

      interpolate.distance = d;

      return interpolate;
    }

    var identity$5 = x => x;

    var areaSum = new Adder(),
        areaRingSum = new Adder(),
        x00$2,
        y00$2,
        x0$3,
        y0$3;

    var areaStream = {
      point: noop$1,
      lineStart: noop$1,
      lineEnd: noop$1,
      polygonStart: function() {
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
      },
      polygonEnd: function() {
        areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$1;
        areaSum.add(abs$1(areaRingSum));
        areaRingSum = new Adder();
      },
      result: function() {
        var area = areaSum / 2;
        areaSum = new Adder();
        return area;
      }
    };

    function areaRingStart() {
      areaStream.point = areaPointFirst;
    }

    function areaPointFirst(x, y) {
      areaStream.point = areaPoint;
      x00$2 = x0$3 = x, y00$2 = y0$3 = y;
    }

    function areaPoint(x, y) {
      areaRingSum.add(y0$3 * x - x0$3 * y);
      x0$3 = x, y0$3 = y;
    }

    function areaRingEnd() {
      areaPoint(x00$2, y00$2);
    }

    var pathArea = areaStream;

    var x0$2 = Infinity,
        y0$2 = x0$2,
        x1 = -x0$2,
        y1 = x1;

    var boundsStream = {
      point: boundsPoint,
      lineStart: noop$1,
      lineEnd: noop$1,
      polygonStart: noop$1,
      polygonEnd: noop$1,
      result: function() {
        var bounds = [[x0$2, y0$2], [x1, y1]];
        x1 = y1 = -(y0$2 = x0$2 = Infinity);
        return bounds;
      }
    };

    function boundsPoint(x, y) {
      if (x < x0$2) x0$2 = x;
      if (x > x1) x1 = x;
      if (y < y0$2) y0$2 = y;
      if (y > y1) y1 = y;
    }

    var boundsStream$1 = boundsStream;

    // TODO Enforce positive area for exterior, negative area for interior?

    var X0 = 0,
        Y0 = 0,
        Z0 = 0,
        X1 = 0,
        Y1 = 0,
        Z1 = 0,
        X2 = 0,
        Y2 = 0,
        Z2 = 0,
        x00$1,
        y00$1,
        x0$1,
        y0$1;

    var centroidStream = {
      point: centroidPoint,
      lineStart: centroidLineStart,
      lineEnd: centroidLineEnd,
      polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
      },
      polygonEnd: function() {
        centroidStream.point = centroidPoint;
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
      },
      result: function() {
        var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
            : Z1 ? [X1 / Z1, Y1 / Z1]
            : Z0 ? [X0 / Z0, Y0 / Z0]
            : [NaN, NaN];
        X0 = Y0 = Z0 =
        X1 = Y1 = Z1 =
        X2 = Y2 = Z2 = 0;
        return centroid;
      }
    };

    function centroidPoint(x, y) {
      X0 += x;
      Y0 += y;
      ++Z0;
    }

    function centroidLineStart() {
      centroidStream.point = centroidPointFirstLine;
    }

    function centroidPointFirstLine(x, y) {
      centroidStream.point = centroidPointLine;
      centroidPoint(x0$1 = x, y0$1 = y);
    }

    function centroidPointLine(x, y) {
      var dx = x - x0$1, dy = y - y0$1, z = sqrt$2(dx * dx + dy * dy);
      X1 += z * (x0$1 + x) / 2;
      Y1 += z * (y0$1 + y) / 2;
      Z1 += z;
      centroidPoint(x0$1 = x, y0$1 = y);
    }

    function centroidLineEnd() {
      centroidStream.point = centroidPoint;
    }

    function centroidRingStart() {
      centroidStream.point = centroidPointFirstRing;
    }

    function centroidRingEnd() {
      centroidPointRing(x00$1, y00$1);
    }

    function centroidPointFirstRing(x, y) {
      centroidStream.point = centroidPointRing;
      centroidPoint(x00$1 = x0$1 = x, y00$1 = y0$1 = y);
    }

    function centroidPointRing(x, y) {
      var dx = x - x0$1,
          dy = y - y0$1,
          z = sqrt$2(dx * dx + dy * dy);

      X1 += z * (x0$1 + x) / 2;
      Y1 += z * (y0$1 + y) / 2;
      Z1 += z;

      z = y0$1 * x - x0$1 * y;
      X2 += z * (x0$1 + x);
      Y2 += z * (y0$1 + y);
      Z2 += z * 3;
      centroidPoint(x0$1 = x, y0$1 = y);
    }

    var pathCentroid = centroidStream;

    function PathContext(context) {
      this._context = context;
    }

    PathContext.prototype = {
      _radius: 4.5,
      pointRadius: function(_) {
        return this._radius = _, this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
      },
      point: function(x, y) {
        switch (this._point) {
          case 0: {
            this._context.moveTo(x, y);
            this._point = 1;
            break;
          }
          case 1: {
            this._context.lineTo(x, y);
            break;
          }
          default: {
            this._context.moveTo(x + this._radius, y);
            this._context.arc(x, y, this._radius, 0, tau$1);
            break;
          }
        }
      },
      result: noop$1
    };

    var lengthSum = new Adder(),
        lengthRing,
        x00,
        y00,
        x0,
        y0;

    var lengthStream = {
      point: noop$1,
      lineStart: function() {
        lengthStream.point = lengthPointFirst;
      },
      lineEnd: function() {
        if (lengthRing) lengthPoint(x00, y00);
        lengthStream.point = noop$1;
      },
      polygonStart: function() {
        lengthRing = true;
      },
      polygonEnd: function() {
        lengthRing = null;
      },
      result: function() {
        var length = +lengthSum;
        lengthSum = new Adder();
        return length;
      }
    };

    function lengthPointFirst(x, y) {
      lengthStream.point = lengthPoint;
      x00 = x0 = x, y00 = y0 = y;
    }

    function lengthPoint(x, y) {
      x0 -= x, y0 -= y;
      lengthSum.add(sqrt$2(x0 * x0 + y0 * y0));
      x0 = x, y0 = y;
    }

    var pathMeasure = lengthStream;

    // Simple caching for constant-radius points.
    let cacheDigits, cacheAppend, cacheRadius, cacheCircle;

    class PathString {
      constructor(digits) {
        this._append = digits == null ? append : appendRound(digits);
        this._radius = 4.5;
        this._ = "";
      }
      pointRadius(_) {
        this._radius = +_;
        return this;
      }
      polygonStart() {
        this._line = 0;
      }
      polygonEnd() {
        this._line = NaN;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {
        if (this._line === 0) this._ += "Z";
        this._point = NaN;
      }
      point(x, y) {
        switch (this._point) {
          case 0: {
            this._append`M${x},${y}`;
            this._point = 1;
            break;
          }
          case 1: {
            this._append`L${x},${y}`;
            break;
          }
          default: {
            this._append`M${x},${y}`;
            if (this._radius !== cacheRadius || this._append !== cacheAppend) {
              const r = this._radius;
              const s = this._;
              this._ = ""; // stash the old string so we can cache the circle path fragment
              this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;
              cacheRadius = r;
              cacheAppend = this._append;
              cacheCircle = this._;
              this._ = s;
            }
            this._ += cacheCircle;
            break;
          }
        }
      }
      result() {
        const result = this._;
        this._ = "";
        return result.length ? result : null;
      }
    }

    function append(strings) {
      let i = 1;
      this._ += strings[0];
      for (const j = strings.length; i < j; ++i) {
        this._ += arguments[i] + strings[i];
      }
    }

    function appendRound(digits) {
      const d = Math.floor(digits);
      if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);
      if (d > 15) return append;
      if (d !== cacheDigits) {
        const k = 10 ** d;
        cacheDigits = d;
        cacheAppend = function append(strings) {
          let i = 1;
          this._ += strings[0];
          for (const j = strings.length; i < j; ++i) {
            this._ += Math.round(arguments[i] * k) / k + strings[i];
          }
        };
      }
      return cacheAppend;
    }

    function index$2(projection, context) {
      let digits = 3,
          pointRadius = 4.5,
          projectionStream,
          contextStream;

      function path(object) {
        if (object) {
          if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
          geoStream(object, projectionStream(contextStream));
        }
        return contextStream.result();
      }

      path.area = function(object) {
        geoStream(object, projectionStream(pathArea));
        return pathArea.result();
      };

      path.measure = function(object) {
        geoStream(object, projectionStream(pathMeasure));
        return pathMeasure.result();
      };

      path.bounds = function(object) {
        geoStream(object, projectionStream(boundsStream$1));
        return boundsStream$1.result();
      };

      path.centroid = function(object) {
        geoStream(object, projectionStream(pathCentroid));
        return pathCentroid.result();
      };

      path.projection = function(_) {
        if (!arguments.length) return projection;
        projectionStream = _ == null ? (projection = null, identity$5) : (projection = _).stream;
        return path;
      };

      path.context = function(_) {
        if (!arguments.length) return context;
        contextStream = _ == null ? (context = null, new PathString(digits)) : new PathContext(context = _);
        if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
        return path;
      };

      path.pointRadius = function(_) {
        if (!arguments.length) return pointRadius;
        pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
        return path;
      };

      path.digits = function(_) {
        if (!arguments.length) return digits;
        if (_ == null) digits = null;
        else {
          const d = Math.floor(_);
          if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
          digits = d;
        }
        if (context === null) contextStream = new PathString(digits);
        return path;
      };

      return path.projection(projection).digits(digits).context(context);
    }

    function transform$1(methods) {
      return {
        stream: transformer$3(methods)
      };
    }

    function transformer$3(methods) {
      return function(stream) {
        var s = new TransformStream;
        for (var key in methods) s[key] = methods[key];
        s.stream = stream;
        return s;
      };
    }

    function TransformStream() {}

    TransformStream.prototype = {
      constructor: TransformStream,
      point: function(x, y) { this.stream.point(x, y); },
      sphere: function() { this.stream.sphere(); },
      lineStart: function() { this.stream.lineStart(); },
      lineEnd: function() { this.stream.lineEnd(); },
      polygonStart: function() { this.stream.polygonStart(); },
      polygonEnd: function() { this.stream.polygonEnd(); }
    };

    function fit(projection, fitBounds, object) {
      var clip = projection.clipExtent && projection.clipExtent();
      projection.scale(150).translate([0, 0]);
      if (clip != null) projection.clipExtent(null);
      geoStream(object, projection.stream(boundsStream$1));
      fitBounds(boundsStream$1.result());
      if (clip != null) projection.clipExtent(clip);
      return projection;
    }

    function fitExtent(projection, extent, object) {
      return fit(projection, function(b) {
        var w = extent[1][0] - extent[0][0],
            h = extent[1][1] - extent[0][1],
            k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
            x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
            y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    function fitSize(projection, size, object) {
      return fitExtent(projection, [[0, 0], size], object);
    }

    function fitWidth(projection, width, object) {
      return fit(projection, function(b) {
        var w = +width,
            k = w / (b[1][0] - b[0][0]),
            x = (w - k * (b[1][0] + b[0][0])) / 2,
            y = -k * b[0][1];
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    function fitHeight(projection, height, object) {
      return fit(projection, function(b) {
        var h = +height,
            k = h / (b[1][1] - b[0][1]),
            x = -k * b[0][0],
            y = (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    var maxDepth = 16, // maximum depth of subdivision
        cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)

    function resample(project, delta2) {
      return +delta2 ? resample$1(project, delta2) : resampleNone(project);
    }

    function resampleNone(project) {
      return transformer$3({
        point: function(x, y) {
          x = project(x, y);
          this.stream.point(x[0], x[1]);
        }
      });
    }

    function resample$1(project, delta2) {

      function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0,
            dy = y1 - y0,
            d2 = dx * dx + dy * dy;
        if (d2 > 4 * delta2 && depth--) {
          var a = a0 + a1,
              b = b0 + b1,
              c = c0 + c1,
              m = sqrt$2(a * a + b * b + c * c),
              phi2 = asin$1(c /= m),
              lambda2 = abs$1(abs$1(c) - 1) < epsilon$1 || abs$1(lambda0 - lambda1) < epsilon$1 ? (lambda0 + lambda1) / 2 : atan2$1(b, a),
              p = project(lambda2, phi2),
              x2 = p[0],
              y2 = p[1],
              dx2 = x2 - x0,
              dy2 = y2 - y0,
              dz = dy * dx2 - dx * dy2;
          if (dz * dz / d2 > delta2 // perpendicular projected distance
              || abs$1((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
              || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
            stream.point(x2, y2);
            resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
          }
        }
      }
      return function(stream) {
        var lambda00, x00, y00, a00, b00, c00, // first point
            lambda0, x0, y0, a0, b0, c0; // previous point

        var resampleStream = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
          polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
        };

        function point(x, y) {
          x = project(x, y);
          stream.point(x[0], x[1]);
        }

        function lineStart() {
          x0 = NaN;
          resampleStream.point = linePoint;
          stream.lineStart();
        }

        function linePoint(lambda, phi) {
          var c = cartesian([lambda, phi]), p = project(lambda, phi);
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
          stream.point(x0, y0);
        }

        function lineEnd() {
          resampleStream.point = point;
          stream.lineEnd();
        }

        function ringStart() {
          lineStart();
          resampleStream.point = ringPoint;
          resampleStream.lineEnd = ringEnd;
        }

        function ringPoint(lambda, phi) {
          linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
          resampleStream.point = linePoint;
        }

        function ringEnd() {
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
          resampleStream.lineEnd = lineEnd;
          lineEnd();
        }

        return resampleStream;
      };
    }

    var transformRadians = transformer$3({
      point: function(x, y) {
        this.stream.point(x * radians, y * radians);
      }
    });

    function transformRotate(rotate) {
      return transformer$3({
        point: function(x, y) {
          var r = rotate(x, y);
          return this.stream.point(r[0], r[1]);
        }
      });
    }

    function scaleTranslate(k, dx, dy, sx, sy) {
      function transform(x, y) {
        x *= sx; y *= sy;
        return [dx + k * x, dy - k * y];
      }
      transform.invert = function(x, y) {
        return [(x - dx) / k * sx, (dy - y) / k * sy];
      };
      return transform;
    }

    function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
      if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
      var cosAlpha = cos$1(alpha),
          sinAlpha = sin$1(alpha),
          a = cosAlpha * k,
          b = sinAlpha * k,
          ai = cosAlpha / k,
          bi = sinAlpha / k,
          ci = (sinAlpha * dy - cosAlpha * dx) / k,
          fi = (sinAlpha * dx + cosAlpha * dy) / k;
      function transform(x, y) {
        x *= sx; y *= sy;
        return [a * x - b * y + dx, dy - b * x - a * y];
      }
      transform.invert = function(x, y) {
        return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
      };
      return transform;
    }

    function projection(project) {
      return projectionMutator(function() { return project; })();
    }

    function projectionMutator(projectAt) {
      var project,
          k = 150, // scale
          x = 480, y = 250, // translate
          lambda = 0, phi = 0, // center
          deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
          alpha = 0, // post-rotate angle
          sx = 1, // reflectX
          sy = 1, // reflectX
          theta = null, preclip = clipAntimeridian, // pre-clip angle
          x0 = null, y0, x1, y1, postclip = identity$5, // post-clip extent
          delta2 = 0.5, // precision
          projectResample,
          projectTransform,
          projectRotateTransform,
          cache,
          cacheStream;

      function projection(point) {
        return projectRotateTransform(point[0] * radians, point[1] * radians);
      }

      function invert(point) {
        point = projectRotateTransform.invert(point[0], point[1]);
        return point && [point[0] * degrees, point[1] * degrees];
      }

      projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
      };

      projection.preclip = function(_) {
        return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
      };

      projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
      };

      projection.clipAngle = function(_) {
        return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
      };

      projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$5) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };

      projection.scale = function(_) {
        return arguments.length ? (k = +_, recenter()) : k;
      };

      projection.translate = function(_) {
        return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
      };

      projection.center = function(_) {
        return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
      };

      projection.rotate = function(_) {
        return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
      };

      projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
      };

      projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
      };

      projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
      };

      projection.precision = function(_) {
        return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$2(delta2);
      };

      projection.fitExtent = function(extent, object) {
        return fitExtent(projection, extent, object);
      };

      projection.fitSize = function(size, object) {
        return fitSize(projection, size, object);
      };

      projection.fitWidth = function(width, object) {
        return fitWidth(projection, width, object);
      };

      projection.fitHeight = function(height, object) {
        return fitHeight(projection, height, object);
      };

      function recenter() {
        var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
            transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
        rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
        projectTransform = compose(project, transform);
        projectRotateTransform = compose(rotate, projectTransform);
        projectResample = resample(projectTransform, delta2);
        return reset();
      }

      function reset() {
        cache = cacheStream = null;
        return projection;
      }

      return function() {
        project = projectAt.apply(this, arguments);
        projection.invert = project.invert && invert;
        return recenter();
      };
    }

    function conicProjection(projectAt) {
      var phi0 = 0,
          phi1 = pi$1 / 3,
          m = projectionMutator(projectAt),
          p = m(phi0, phi1);

      p.parallels = function(_) {
        return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
      };

      return p;
    }

    function cylindricalEqualAreaRaw(phi0) {
      var cosPhi0 = cos$1(phi0);

      function forward(lambda, phi) {
        return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
      }

      forward.invert = function(x, y) {
        return [x / cosPhi0, asin$1(y * cosPhi0)];
      };

      return forward;
    }

    function conicEqualAreaRaw(y0, y1) {
      var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;

      // Are the parallels symmetrical around the Equator?
      if (abs$1(n) < epsilon$1) return cylindricalEqualAreaRaw(y0);

      var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt$2(c) / n;

      function project(x, y) {
        var r = sqrt$2(c - 2 * n * sin$1(y)) / n;
        return [r * sin$1(x *= n), r0 - r * cos$1(x)];
      }

      project.invert = function(x, y) {
        var r0y = r0 - y,
            l = atan2$1(x, abs$1(r0y)) * sign$1(r0y);
        if (r0y * n < 0)
          l -= pi$1 * sign$1(x) * sign$1(r0y);
        return [l / n, asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
      };

      return project;
    }

    function conicEqualArea() {
      return conicProjection(conicEqualAreaRaw)
          .scale(155.424)
          .center([0, 33.6442]);
    }

    function albers() {
      return conicEqualArea()
          .parallels([29.5, 45.5])
          .scale(1070)
          .translate([480, 250])
          .rotate([96, 0])
          .center([-0.6, 38.7]);
    }

    // The projections must have mutually exclusive clip regions on the sphere,
    // as this will avoid emitting interleaving lines and polygons.
    function multiplex(streams) {
      var n = streams.length;
      return {
        point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
        sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
        lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
        lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
        polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
        polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
      };
    }

    // A composite projection for the United States, configured by default for
    // 960×500. The projection also works quite well at 960×600 if you change the
    // scale to 1285 and adjust the translate accordingly. The set of standard
    // parallels for each region comes from USGS, which is published here:
    // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
    function albersUsa() {
      var cache,
          cacheStream,
          lower48 = albers(), lower48Point,
          alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
          hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
          point, pointStream = {point: function(x, y) { point = [x, y]; }};

      function albersUsa(coordinates) {
        var x = coordinates[0], y = coordinates[1];
        return point = null,
            (lower48Point.point(x, y), point)
            || (alaskaPoint.point(x, y), point)
            || (hawaiiPoint.point(x, y), point);
      }

      albersUsa.invert = function(coordinates) {
        var k = lower48.scale(),
            t = lower48.translate(),
            x = (coordinates[0] - t[0]) / k,
            y = (coordinates[1] - t[1]) / k;
        return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
            : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
            : lower48).invert(coordinates);
      };

      albersUsa.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
      };

      albersUsa.precision = function(_) {
        if (!arguments.length) return lower48.precision();
        lower48.precision(_), alaska.precision(_), hawaii.precision(_);
        return reset();
      };

      albersUsa.scale = function(_) {
        if (!arguments.length) return lower48.scale();
        lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
        return albersUsa.translate(lower48.translate());
      };

      albersUsa.translate = function(_) {
        if (!arguments.length) return lower48.translate();
        var k = lower48.scale(), x = +_[0], y = +_[1];

        lower48Point = lower48
            .translate(_)
            .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
            .stream(pointStream);

        alaskaPoint = alaska
            .translate([x - 0.307 * k, y + 0.201 * k])
            .clipExtent([[x - 0.425 * k + epsilon$1, y + 0.120 * k + epsilon$1], [x - 0.214 * k - epsilon$1, y + 0.234 * k - epsilon$1]])
            .stream(pointStream);

        hawaiiPoint = hawaii
            .translate([x - 0.205 * k, y + 0.212 * k])
            .clipExtent([[x - 0.214 * k + epsilon$1, y + 0.166 * k + epsilon$1], [x - 0.115 * k - epsilon$1, y + 0.234 * k - epsilon$1]])
            .stream(pointStream);

        return reset();
      };

      albersUsa.fitExtent = function(extent, object) {
        return fitExtent(albersUsa, extent, object);
      };

      albersUsa.fitSize = function(size, object) {
        return fitSize(albersUsa, size, object);
      };

      albersUsa.fitWidth = function(width, object) {
        return fitWidth(albersUsa, width, object);
      };

      albersUsa.fitHeight = function(height, object) {
        return fitHeight(albersUsa, height, object);
      };

      function reset() {
        cache = cacheStream = null;
        return albersUsa;
      }

      return albersUsa.scale(1070);
    }

    function azimuthalRaw(scale) {
      return function(x, y) {
        var cx = cos$1(x),
            cy = cos$1(y),
            k = scale(cx * cy);
            if (k === Infinity) return [2, 0];
        return [
          k * cy * sin$1(x),
          k * sin$1(y)
        ];
      }
    }

    function azimuthalInvert(angle) {
      return function(x, y) {
        var z = sqrt$2(x * x + y * y),
            c = angle(z),
            sc = sin$1(c),
            cc = cos$1(c);
        return [
          atan2$1(x * sc, z * cc),
          asin$1(z && y * sc / z)
        ];
      }
    }

    var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
      return sqrt$2(2 / (1 + cxcy));
    });

    azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
      return 2 * asin$1(z / 2);
    });

    function azimuthalEqualArea() {
      return projection(azimuthalEqualAreaRaw)
          .scale(124.75)
          .clipAngle(180 - 1e-3);
    }

    var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
      return (c = acos$1(c)) && c / sin$1(c);
    });

    azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
      return z;
    });

    function azimuthalEquidistant() {
      return projection(azimuthalEquidistantRaw)
          .scale(79.4188)
          .clipAngle(180 - 1e-3);
    }

    function mercatorRaw(lambda, phi) {
      return [lambda, log$1(tan((halfPi$1 + phi) / 2))];
    }

    mercatorRaw.invert = function(x, y) {
      return [x, 2 * atan(exp(y)) - halfPi$1];
    };

    function mercator() {
      return mercatorProjection(mercatorRaw)
          .scale(961 / tau$1);
    }

    function mercatorProjection(project) {
      var m = projection(project),
          center = m.center,
          scale = m.scale,
          translate = m.translate,
          clipExtent = m.clipExtent,
          x0 = null, y0, x1, y1; // clip extent

      m.scale = function(_) {
        return arguments.length ? (scale(_), reclip()) : scale();
      };

      m.translate = function(_) {
        return arguments.length ? (translate(_), reclip()) : translate();
      };

      m.center = function(_) {
        return arguments.length ? (center(_), reclip()) : center();
      };

      m.clipExtent = function(_) {
        return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };

      function reclip() {
        var k = pi$1 * scale(),
            t = m(rotation(m.rotate()).invert([0, 0]));
        return clipExtent(x0 == null
            ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
            ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
            : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
      }

      return reclip();
    }

    function tany(y) {
      return tan((halfPi$1 + y) / 2);
    }

    function conicConformalRaw(y0, y1) {
      var cy0 = cos$1(y0),
          n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0)),
          f = cy0 * pow$1(tany(y0), n) / n;

      if (!n) return mercatorRaw;

      function project(x, y) {
        if (f > 0) { if (y < -halfPi$1 + epsilon$1) y = -halfPi$1 + epsilon$1; }
        else { if (y > halfPi$1 - epsilon$1) y = halfPi$1 - epsilon$1; }
        var r = f / pow$1(tany(y), n);
        return [r * sin$1(n * x), f - r * cos$1(n * x)];
      }

      project.invert = function(x, y) {
        var fy = f - y, r = sign$1(n) * sqrt$2(x * x + fy * fy),
          l = atan2$1(x, abs$1(fy)) * sign$1(fy);
        if (fy * n < 0)
          l -= pi$1 * sign$1(x) * sign$1(fy);
        return [l / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$1];
      };

      return project;
    }

    function conicConformal() {
      return conicProjection(conicConformalRaw)
          .scale(109.5)
          .parallels([30, 30]);
    }

    function equirectangularRaw(lambda, phi) {
      return [lambda, phi];
    }

    equirectangularRaw.invert = equirectangularRaw;

    function equirectangular() {
      return projection(equirectangularRaw)
          .scale(152.63);
    }

    function conicEquidistantRaw(y0, y1) {
      var cy0 = cos$1(y0),
          n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
          g = cy0 / n + y0;

      if (abs$1(n) < epsilon$1) return equirectangularRaw;

      function project(x, y) {
        var gy = g - y, nx = n * x;
        return [gy * sin$1(nx), g - gy * cos$1(nx)];
      }

      project.invert = function(x, y) {
        var gy = g - y,
            l = atan2$1(x, abs$1(gy)) * sign$1(gy);
        if (gy * n < 0)
          l -= pi$1 * sign$1(x) * sign$1(gy);
        return [l / n, g - sign$1(n) * sqrt$2(x * x + gy * gy)];
      };

      return project;
    }

    function conicEquidistant() {
      return conicProjection(conicEquidistantRaw)
          .scale(131.154)
          .center([0, 13.9389]);
    }

    var A1 = 1.340264,
        A2 = -0.081106,
        A3 = 0.000893,
        A4 = 0.003796,
        M = sqrt$2(3) / 2,
        iterations = 12;

    function equalEarthRaw(lambda, phi) {
      var l = asin$1(M * sin$1(phi)), l2 = l * l, l6 = l2 * l2 * l2;
      return [
        lambda * cos$1(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
        l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
      ];
    }

    equalEarthRaw.invert = function(x, y) {
      var l = y, l2 = l * l, l6 = l2 * l2 * l2;
      for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
        fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
        fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
        l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
        if (abs$1(delta) < epsilon2) break;
      }
      return [
        M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos$1(l),
        asin$1(sin$1(l) / M)
      ];
    };

    function equalEarth() {
      return projection(equalEarthRaw)
          .scale(177.158);
    }

    function gnomonicRaw(x, y) {
      var cy = cos$1(y), k = cos$1(x) * cy;
      return [cy * sin$1(x) / k, sin$1(y) / k];
    }

    gnomonicRaw.invert = azimuthalInvert(atan);

    function gnomonic() {
      return projection(gnomonicRaw)
          .scale(144.049)
          .clipAngle(60);
    }

    function identity$4() {
      var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, // scale, translate and reflect
          alpha = 0, ca, sa, // angle
          x0 = null, y0, x1, y1, // clip extent
          kx = 1, ky = 1,
          transform = transformer$3({
            point: function(x, y) {
              var p = projection([x, y]);
              this.stream.point(p[0], p[1]);
            }
          }),
          postclip = identity$5,
          cache,
          cacheStream;

      function reset() {
        kx = k * sx;
        ky = k * sy;
        cache = cacheStream = null;
        return projection;
      }

      function projection (p) {
        var x = p[0] * kx, y = p[1] * ky;
        if (alpha) {
          var t = y * ca - x * sa;
          x = x * ca + y * sa;
          y = t;
        }    
        return [x + tx, y + ty];
      }
      projection.invert = function(p) {
        var x = p[0] - tx, y = p[1] - ty;
        if (alpha) {
          var t = y * ca + x * sa;
          x = x * ca - y * sa;
          y = t;
        }
        return [x / kx, y / ky];
      };
      projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
      };
      projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
      };
      projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$5) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };
      projection.scale = function(_) {
        return arguments.length ? (k = +_, reset()) : k;
      };
      projection.translate = function(_) {
        return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
      };
      projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * radians, sa = sin$1(alpha), ca = cos$1(alpha), reset()) : alpha * degrees;
      };
      projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
      };
      projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
      };
      projection.fitExtent = function(extent, object) {
        return fitExtent(projection, extent, object);
      };
      projection.fitSize = function(size, object) {
        return fitSize(projection, size, object);
      };
      projection.fitWidth = function(width, object) {
        return fitWidth(projection, width, object);
      };
      projection.fitHeight = function(height, object) {
        return fitHeight(projection, height, object);
      };

      return projection;
    }

    function naturalEarth1Raw(lambda, phi) {
      var phi2 = phi * phi, phi4 = phi2 * phi2;
      return [
        lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
        phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
      ];
    }

    naturalEarth1Raw.invert = function(x, y) {
      var phi = y, i = 25, delta;
      do {
        var phi2 = phi * phi, phi4 = phi2 * phi2;
        phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
            (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
      } while (abs$1(delta) > epsilon$1 && --i > 0);
      return [
        x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
        phi
      ];
    };

    function naturalEarth1() {
      return projection(naturalEarth1Raw)
          .scale(175.295);
    }

    function orthographicRaw(x, y) {
      return [cos$1(y) * sin$1(x), sin$1(y)];
    }

    orthographicRaw.invert = azimuthalInvert(asin$1);

    function orthographic() {
      return projection(orthographicRaw)
          .scale(249.5)
          .clipAngle(90 + epsilon$1);
    }

    function stereographicRaw(x, y) {
      var cy = cos$1(y), k = 1 + cos$1(x) * cy;
      return [cy * sin$1(x) / k, sin$1(y) / k];
    }

    stereographicRaw.invert = azimuthalInvert(function(z) {
      return 2 * atan(z);
    });

    function stereographic() {
      return projection(stereographicRaw)
          .scale(250)
          .clipAngle(142);
    }

    function transverseMercatorRaw(lambda, phi) {
      return [log$1(tan((halfPi$1 + phi) / 2)), -lambda];
    }

    transverseMercatorRaw.invert = function(x, y) {
      return [-y, 2 * atan(exp(x)) - halfPi$1];
    };

    function transverseMercator() {
      var m = mercatorProjection(transverseMercatorRaw),
          center = m.center,
          rotate = m.rotate;

      m.center = function(_) {
        return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
      };

      m.rotate = function(_) {
        return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
      };

      return rotate([0, 0, 90])
          .scale(159.155);
    }

    function defaultSeparation$1(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    function meanX(children) {
      return children.reduce(meanXReduce, 0) / children.length;
    }

    function meanXReduce(x, c) {
      return x + c.x;
    }

    function maxY(children) {
      return 1 + children.reduce(maxYReduce, 0);
    }

    function maxYReduce(y, c) {
      return Math.max(y, c.y);
    }

    function leafLeft(node) {
      var children;
      while (children = node.children) node = children[0];
      return node;
    }

    function leafRight(node) {
      var children;
      while (children = node.children) node = children[children.length - 1];
      return node;
    }

    function cluster() {
      var separation = defaultSeparation$1,
          dx = 1,
          dy = 1,
          nodeSize = false;

      function cluster(root) {
        var previousNode,
            x = 0;

        // First walk, computing the initial x & y values.
        root.eachAfter(function(node) {
          var children = node.children;
          if (children) {
            node.x = meanX(children);
            node.y = maxY(children);
          } else {
            node.x = previousNode ? x += separation(node, previousNode) : 0;
            node.y = 0;
            previousNode = node;
          }
        });

        var left = leafLeft(root),
            right = leafRight(root),
            x0 = left.x - separation(left, right) / 2,
            x1 = right.x + separation(right, left) / 2;

        // Second walk, normalizing x & y to the desired size.
        return root.eachAfter(nodeSize ? function(node) {
          node.x = (node.x - root.x) * dx;
          node.y = (root.y - node.y) * dy;
        } : function(node) {
          node.x = (node.x - x0) / (x1 - x0) * dx;
          node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
        });
      }

      cluster.separation = function(x) {
        return arguments.length ? (separation = x, cluster) : separation;
      };

      cluster.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
      };

      cluster.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
      };

      return cluster;
    }

    function count(node) {
      var sum = 0,
          children = node.children,
          i = children && children.length;
      if (!i) sum = 1;
      else while (--i >= 0) sum += children[i].value;
      node.value = sum;
    }

    function node_count() {
      return this.eachAfter(count);
    }

    function node_each(callback, that) {
      let index = -1;
      for (const node of this) {
        callback.call(that, node, ++index, this);
      }
      return this;
    }

    function node_eachBefore(callback, that) {
      var node = this, nodes = [node], children, i, index = -1;
      while (node = nodes.pop()) {
        callback.call(that, node, ++index, this);
        if (children = node.children) {
          for (i = children.length - 1; i >= 0; --i) {
            nodes.push(children[i]);
          }
        }
      }
      return this;
    }

    function node_eachAfter(callback, that) {
      var node = this, nodes = [node], next = [], children, i, n, index = -1;
      while (node = nodes.pop()) {
        next.push(node);
        if (children = node.children) {
          for (i = 0, n = children.length; i < n; ++i) {
            nodes.push(children[i]);
          }
        }
      }
      while (node = next.pop()) {
        callback.call(that, node, ++index, this);
      }
      return this;
    }

    function node_find(callback, that) {
      let index = -1;
      for (const node of this) {
        if (callback.call(that, node, ++index, this)) {
          return node;
        }
      }
    }

    function node_sum(value) {
      return this.eachAfter(function(node) {
        var sum = +value(node.data) || 0,
            children = node.children,
            i = children && children.length;
        while (--i >= 0) sum += children[i].value;
        node.value = sum;
      });
    }

    function node_sort(compare) {
      return this.eachBefore(function(node) {
        if (node.children) {
          node.children.sort(compare);
        }
      });
    }

    function node_path(end) {
      var start = this,
          ancestor = leastCommonAncestor(start, end),
          nodes = [start];
      while (start !== ancestor) {
        start = start.parent;
        nodes.push(start);
      }
      var k = nodes.length;
      while (end !== ancestor) {
        nodes.splice(k, 0, end);
        end = end.parent;
      }
      return nodes;
    }

    function leastCommonAncestor(a, b) {
      if (a === b) return a;
      var aNodes = a.ancestors(),
          bNodes = b.ancestors(),
          c = null;
      a = aNodes.pop();
      b = bNodes.pop();
      while (a === b) {
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
      }
      return c;
    }

    function node_ancestors() {
      var node = this, nodes = [node];
      while (node = node.parent) {
        nodes.push(node);
      }
      return nodes;
    }

    function node_descendants() {
      return Array.from(this);
    }

    function node_leaves() {
      var leaves = [];
      this.eachBefore(function(node) {
        if (!node.children) {
          leaves.push(node);
        }
      });
      return leaves;
    }

    function node_links() {
      var root = this, links = [];
      root.each(function(node) {
        if (node !== root) { // Don’t include the root’s parent, if any.
          links.push({source: node.parent, target: node});
        }
      });
      return links;
    }

    function* node_iterator() {
      var node = this, current, next = [node], children, i, n;
      do {
        current = next.reverse(), next = [];
        while (node = current.pop()) {
          yield node;
          if (children = node.children) {
            for (i = 0, n = children.length; i < n; ++i) {
              next.push(children[i]);
            }
          }
        }
      } while (next.length);
    }

    function hierarchy(data, children) {
      if (data instanceof Map) {
        data = [undefined, data];
        if (children === undefined) children = mapChildren;
      } else if (children === undefined) {
        children = objectChildren;
      }

      var root = new Node$1(data),
          node,
          nodes = [root],
          child,
          childs,
          i,
          n;

      while (node = nodes.pop()) {
        if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
          node.children = childs;
          for (i = n - 1; i >= 0; --i) {
            nodes.push(child = childs[i] = new Node$1(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
          }
        }
      }

      return root.eachBefore(computeHeight);
    }

    function node_copy() {
      return hierarchy(this).eachBefore(copyData);
    }

    function objectChildren(d) {
      return d.children;
    }

    function mapChildren(d) {
      return Array.isArray(d) ? d[1] : null;
    }

    function copyData(node) {
      if (node.data.value !== undefined) node.value = node.data.value;
      node.data = node.data.data;
    }

    function computeHeight(node) {
      var height = 0;
      do node.height = height;
      while ((node = node.parent) && (node.height < ++height));
    }

    function Node$1(data) {
      this.data = data;
      this.depth =
      this.height = 0;
      this.parent = null;
    }

    Node$1.prototype = hierarchy.prototype = {
      constructor: Node$1,
      count: node_count,
      each: node_each,
      eachAfter: node_eachAfter,
      eachBefore: node_eachBefore,
      find: node_find,
      sum: node_sum,
      sort: node_sort,
      path: node_path,
      ancestors: node_ancestors,
      descendants: node_descendants,
      leaves: node_leaves,
      links: node_links,
      copy: node_copy,
      [Symbol.iterator]: node_iterator
    };

    function optional(f) {
      return f == null ? null : required(f);
    }

    function required(f) {
      if (typeof f !== "function") throw new Error;
      return f;
    }

    function constantZero() {
      return 0;
    }

    function constant$2(x) {
      return function() {
        return x;
      };
    }

    // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
    const a$1 = 1664525;
    const c$3 = 1013904223;
    const m = 4294967296; // 2^32

    function lcg$1() {
      let s = 1;
      return () => (s = (a$1 * s + c$3) % m) / m;
    }

    function array$1(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function shuffle(array, random) {
      let m = array.length,
          t,
          i;

      while (m) {
        i = random() * m-- | 0;
        t = array[m];
        array[m] = array[i];
        array[i] = t;
      }

      return array;
    }

    function enclose(circles) {
      return packEncloseRandom(circles, lcg$1());
    }

    function packEncloseRandom(circles, random) {
      var i = 0, n = (circles = shuffle(Array.from(circles), random)).length, B = [], p, e;

      while (i < n) {
        p = circles[i];
        if (e && enclosesWeak(e, p)) ++i;
        else e = encloseBasis(B = extendBasis(B, p)), i = 0;
      }

      return e;
    }

    function extendBasis(B, p) {
      var i, j;

      if (enclosesWeakAll(p, B)) return [p];

      // If we get here then B must have at least one element.
      for (i = 0; i < B.length; ++i) {
        if (enclosesNot(p, B[i])
            && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
          return [B[i], p];
        }
      }

      // If we get here then B must have at least two elements.
      for (i = 0; i < B.length - 1; ++i) {
        for (j = i + 1; j < B.length; ++j) {
          if (enclosesNot(encloseBasis2(B[i], B[j]), p)
              && enclosesNot(encloseBasis2(B[i], p), B[j])
              && enclosesNot(encloseBasis2(B[j], p), B[i])
              && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
            return [B[i], B[j], p];
          }
        }
      }

      // If we get here then something is very wrong.
      throw new Error;
    }

    function enclosesNot(a, b) {
      var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
      return dr < 0 || dr * dr < dx * dx + dy * dy;
    }

    function enclosesWeak(a, b) {
      var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;
      return dr > 0 && dr * dr > dx * dx + dy * dy;
    }

    function enclosesWeakAll(a, B) {
      for (var i = 0; i < B.length; ++i) {
        if (!enclosesWeak(a, B[i])) {
          return false;
        }
      }
      return true;
    }

    function encloseBasis(B) {
      switch (B.length) {
        case 1: return encloseBasis1(B[0]);
        case 2: return encloseBasis2(B[0], B[1]);
        case 3: return encloseBasis3(B[0], B[1], B[2]);
      }
    }

    function encloseBasis1(a) {
      return {
        x: a.x,
        y: a.y,
        r: a.r
      };
    }

    function encloseBasis2(a, b) {
      var x1 = a.x, y1 = a.y, r1 = a.r,
          x2 = b.x, y2 = b.y, r2 = b.r,
          x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
          l = Math.sqrt(x21 * x21 + y21 * y21);
      return {
        x: (x1 + x2 + x21 / l * r21) / 2,
        y: (y1 + y2 + y21 / l * r21) / 2,
        r: (l + r1 + r2) / 2
      };
    }

    function encloseBasis3(a, b, c) {
      var x1 = a.x, y1 = a.y, r1 = a.r,
          x2 = b.x, y2 = b.y, r2 = b.r,
          x3 = c.x, y3 = c.y, r3 = c.r,
          a2 = x1 - x2,
          a3 = x1 - x3,
          b2 = y1 - y2,
          b3 = y1 - y3,
          c2 = r2 - r1,
          c3 = r3 - r1,
          d1 = x1 * x1 + y1 * y1 - r1 * r1,
          d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
          d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
          ab = a3 * b2 - a2 * b3,
          xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
          xb = (b3 * c2 - b2 * c3) / ab,
          ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
          yb = (a2 * c3 - a3 * c2) / ab,
          A = xb * xb + yb * yb - 1,
          B = 2 * (r1 + xa * xb + ya * yb),
          C = xa * xa + ya * ya - r1 * r1,
          r = -(Math.abs(A) > 1e-6 ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
      return {
        x: x1 + xa + xb * r,
        y: y1 + ya + yb * r,
        r: r
      };
    }

    function place(b, a, c) {
      var dx = b.x - a.x, x, a2,
          dy = b.y - a.y, y, b2,
          d2 = dx * dx + dy * dy;
      if (d2) {
        a2 = a.r + c.r, a2 *= a2;
        b2 = b.r + c.r, b2 *= b2;
        if (a2 > b2) {
          x = (d2 + b2 - a2) / (2 * d2);
          y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
          c.x = b.x - x * dx - y * dy;
          c.y = b.y - x * dy + y * dx;
        } else {
          x = (d2 + a2 - b2) / (2 * d2);
          y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
          c.x = a.x + x * dx - y * dy;
          c.y = a.y + x * dy + y * dx;
        }
      } else {
        c.x = a.x + c.r;
        c.y = a.y;
      }
    }

    function intersects(a, b) {
      var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
      return dr > 0 && dr * dr > dx * dx + dy * dy;
    }

    function score(node) {
      var a = node._,
          b = node.next._,
          ab = a.r + b.r,
          dx = (a.x * b.r + b.x * a.r) / ab,
          dy = (a.y * b.r + b.y * a.r) / ab;
      return dx * dx + dy * dy;
    }

    function Node(circle) {
      this._ = circle;
      this.next = null;
      this.previous = null;
    }

    function packSiblingsRandom(circles, random) {
      if (!(n = (circles = array$1(circles)).length)) return 0;

      var a, b, c, n, aa, ca, i, j, k, sj, sk;

      // Place the first circle.
      a = circles[0], a.x = 0, a.y = 0;
      if (!(n > 1)) return a.r;

      // Place the second circle.
      b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
      if (!(n > 2)) return a.r + b.r;

      // Place the third circle.
      place(b, a, c = circles[2]);

      // Initialize the front-chain using the first three circles a, b and c.
      a = new Node(a), b = new Node(b), c = new Node(c);
      a.next = c.previous = b;
      b.next = a.previous = c;
      c.next = b.previous = a;

      // Attempt to place each remaining circle…
      pack: for (i = 3; i < n; ++i) {
        place(a._, b._, c = circles[i]), c = new Node(c);

        // Find the closest intersecting circle on the front-chain, if any.
        // “Closeness” is determined by linear distance along the front-chain.
        // “Ahead” or “behind” is likewise determined by linear distance.
        j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
        do {
          if (sj <= sk) {
            if (intersects(j._, c._)) {
              b = j, a.next = b, b.previous = a, --i;
              continue pack;
            }
            sj += j._.r, j = j.next;
          } else {
            if (intersects(k._, c._)) {
              a = k, a.next = b, b.previous = a, --i;
              continue pack;
            }
            sk += k._.r, k = k.previous;
          }
        } while (j !== k.next);

        // Success! Insert the new circle c between a and b.
        c.previous = a, c.next = b, a.next = b.previous = b = c;

        // Compute the new closest circle pair to the centroid.
        aa = score(a);
        while ((c = c.next) !== b) {
          if ((ca = score(c)) < aa) {
            a = c, aa = ca;
          }
        }
        b = a.next;
      }

      // Compute the enclosing circle of the front chain.
      a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = packEncloseRandom(a, random);

      // Translate the circles to put the enclosing circle around the origin.
      for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

      return c.r;
    }

    function siblings(circles) {
      packSiblingsRandom(circles, lcg$1());
      return circles;
    }

    function defaultRadius(d) {
      return Math.sqrt(d.value);
    }

    function index$1() {
      var radius = null,
          dx = 1,
          dy = 1,
          padding = constantZero;

      function pack(root) {
        const random = lcg$1();
        root.x = dx / 2, root.y = dy / 2;
        if (radius) {
          root.eachBefore(radiusLeaf(radius))
              .eachAfter(packChildrenRandom(padding, 0.5, random))
              .eachBefore(translateChild(1));
        } else {
          root.eachBefore(radiusLeaf(defaultRadius))
              .eachAfter(packChildrenRandom(constantZero, 1, random))
              .eachAfter(packChildrenRandom(padding, root.r / Math.min(dx, dy), random))
              .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
        }
        return root;
      }

      pack.radius = function(x) {
        return arguments.length ? (radius = optional(x), pack) : radius;
      };

      pack.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
      };

      pack.padding = function(x) {
        return arguments.length ? (padding = typeof x === "function" ? x : constant$2(+x), pack) : padding;
      };

      return pack;
    }

    function radiusLeaf(radius) {
      return function(node) {
        if (!node.children) {
          node.r = Math.max(0, +radius(node) || 0);
        }
      };
    }

    function packChildrenRandom(padding, k, random) {
      return function(node) {
        if (children = node.children) {
          var children,
              i,
              n = children.length,
              r = padding(node) * k || 0,
              e;

          if (r) for (i = 0; i < n; ++i) children[i].r += r;
          e = packSiblingsRandom(children, random);
          if (r) for (i = 0; i < n; ++i) children[i].r -= r;
          node.r = e + r;
        }
      };
    }

    function translateChild(k) {
      return function(node) {
        var parent = node.parent;
        node.r *= k;
        if (parent) {
          node.x = parent.x + k * node.x;
          node.y = parent.y + k * node.y;
        }
      };
    }

    function roundNode(node) {
      node.x0 = Math.round(node.x0);
      node.y0 = Math.round(node.y0);
      node.x1 = Math.round(node.x1);
      node.y1 = Math.round(node.y1);
    }

    function treemapDice(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          node,
          i = -1,
          n = nodes.length,
          k = parent.value && (x1 - x0) / parent.value;

      while (++i < n) {
        node = nodes[i], node.y0 = y0, node.y1 = y1;
        node.x0 = x0, node.x1 = x0 += node.value * k;
      }
    }

    function partition() {
      var dx = 1,
          dy = 1,
          padding = 0,
          round = false;

      function partition(root) {
        var n = root.height + 1;
        root.x0 =
        root.y0 = padding;
        root.x1 = dx;
        root.y1 = dy / n;
        root.eachBefore(positionNode(dy, n));
        if (round) root.eachBefore(roundNode);
        return root;
      }

      function positionNode(dy, n) {
        return function(node) {
          if (node.children) {
            treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
          }
          var x0 = node.x0,
              y0 = node.y0,
              x1 = node.x1 - padding,
              y1 = node.y1 - padding;
          if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
          if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
          node.x0 = x0;
          node.y0 = y0;
          node.x1 = x1;
          node.y1 = y1;
        };
      }

      partition.round = function(x) {
        return arguments.length ? (round = !!x, partition) : round;
      };

      partition.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
      };

      partition.padding = function(x) {
        return arguments.length ? (padding = +x, partition) : padding;
      };

      return partition;
    }

    var preroot = {depth: -1},
        ambiguous = {},
        imputed = {};

    function defaultId(d) {
      return d.id;
    }

    function defaultParentId(d) {
      return d.parentId;
    }

    function stratify() {
      var id = defaultId,
          parentId = defaultParentId,
          path;

      function stratify(data) {
        var nodes = Array.from(data),
            currentId = id,
            currentParentId = parentId,
            n,
            d,
            i,
            root,
            parent,
            node,
            nodeId,
            nodeKey,
            nodeByKey = new Map;

        if (path != null) {
          const I = nodes.map((d, i) => normalize$1(path(d, i, data)));
          const P = I.map(parentof);
          const S = new Set(I).add("");
          for (const i of P) {
            if (!S.has(i)) {
              S.add(i);
              I.push(i);
              P.push(parentof(i));
              nodes.push(imputed);
            }
          }
          currentId = (_, i) => I[i];
          currentParentId = (_, i) => P[i];
        }

        for (i = 0, n = nodes.length; i < n; ++i) {
          d = nodes[i], node = nodes[i] = new Node$1(d);
          if ((nodeId = currentId(d, i, data)) != null && (nodeId += "")) {
            nodeKey = node.id = nodeId;
            nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
          }
          if ((nodeId = currentParentId(d, i, data)) != null && (nodeId += "")) {
            node.parent = nodeId;
          }
        }

        for (i = 0; i < n; ++i) {
          node = nodes[i];
          if (nodeId = node.parent) {
            parent = nodeByKey.get(nodeId);
            if (!parent) throw new Error("missing: " + nodeId);
            if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
            if (parent.children) parent.children.push(node);
            else parent.children = [node];
            node.parent = parent;
          } else {
            if (root) throw new Error("multiple roots");
            root = node;
          }
        }

        if (!root) throw new Error("no root");

        // When imputing internal nodes, only introduce roots if needed.
        // Then replace the imputed marker data with null.
        if (path != null) {
          while (root.data === imputed && root.children.length === 1) {
            root = root.children[0], --n;
          }
          for (let i = nodes.length - 1; i >= 0; --i) {
            node = nodes[i];
            if (node.data !== imputed) break;
            node.data = null;
          }
        }

        root.parent = preroot;
        root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
        root.parent = null;
        if (n > 0) throw new Error("cycle");

        return root;
      }

      stratify.id = function(x) {
        return arguments.length ? (id = optional(x), stratify) : id;
      };

      stratify.parentId = function(x) {
        return arguments.length ? (parentId = optional(x), stratify) : parentId;
      };

      stratify.path = function(x) {
        return arguments.length ? (path = optional(x), stratify) : path;
      };

      return stratify;
    }

    // To normalize a path, we coerce to a string, strip the trailing slash if any
    // (as long as the trailing slash is not immediately preceded by another slash),
    // and add leading slash if missing.
    function normalize$1(path) {
      path = `${path}`;
      let i = path.length;
      if (slash(path, i - 1) && !slash(path, i - 2)) path = path.slice(0, -1);
      return path[0] === "/" ? path : `/${path}`;
    }

    // Walk backwards to find the first slash that is not the leading slash, e.g.:
    // "/foo/bar" ⇥ "/foo", "/foo" ⇥ "/", "/" ↦ "". (The root is special-cased
    // because the id of the root must be a truthy value.)
    function parentof(path) {
      let i = path.length;
      if (i < 2) return "";
      while (--i > 1) if (slash(path, i)) break;
      return path.slice(0, i);
    }

    // Slashes can be escaped; to determine whether a slash is a path delimiter, we
    // count the number of preceding backslashes escaping the forward slash: an odd
    // number indicates an escaped forward slash.
    function slash(path, i) {
      if (path[i] === "/") {
        let k = 0;
        while (i > 0 && path[--i] === "\\") ++k;
        if ((k & 1) === 0) return true;
      }
      return false;
    }

    function defaultSeparation(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    // function radialSeparation(a, b) {
    //   return (a.parent === b.parent ? 1 : 2) / a.depth;
    // }

    // This function is used to traverse the left contour of a subtree (or
    // subforest). It returns the successor of v on this contour. This successor is
    // either given by the leftmost child of v or by the thread of v. The function
    // returns null if and only if v is on the highest level of its subtree.
    function nextLeft(v) {
      var children = v.children;
      return children ? children[0] : v.t;
    }

    // This function works analogously to nextLeft.
    function nextRight(v) {
      var children = v.children;
      return children ? children[children.length - 1] : v.t;
    }

    // Shifts the current subtree rooted at w+. This is done by increasing
    // prelim(w+) and mod(w+) by shift.
    function moveSubtree(wm, wp, shift) {
      var change = shift / (wp.i - wm.i);
      wp.c -= change;
      wp.s += shift;
      wm.c += change;
      wp.z += shift;
      wp.m += shift;
    }

    // All other shifts, applied to the smaller subtrees between w- and w+, are
    // performed by this function. To prepare the shifts, we have to adjust
    // change(w+), shift(w+), and change(w-).
    function executeShifts(v) {
      var shift = 0,
          change = 0,
          children = v.children,
          i = children.length,
          w;
      while (--i >= 0) {
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
      }
    }

    // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
    // returns the specified (default) ancestor.
    function nextAncestor(vim, v, ancestor) {
      return vim.a.parent === v.parent ? vim.a : ancestor;
    }

    function TreeNode(node, i) {
      this._ = node;
      this.parent = null;
      this.children = null;
      this.A = null; // default ancestor
      this.a = this; // ancestor
      this.z = 0; // prelim
      this.m = 0; // mod
      this.c = 0; // change
      this.s = 0; // shift
      this.t = null; // thread
      this.i = i; // number
    }

    TreeNode.prototype = Object.create(Node$1.prototype);

    function treeRoot(root) {
      var tree = new TreeNode(root, 0),
          node,
          nodes = [tree],
          child,
          children,
          i,
          n;

      while (node = nodes.pop()) {
        if (children = node._.children) {
          node.children = new Array(n = children.length);
          for (i = n - 1; i >= 0; --i) {
            nodes.push(child = node.children[i] = new TreeNode(children[i], i));
            child.parent = node;
          }
        }
      }

      (tree.parent = new TreeNode(null, 0)).children = [tree];
      return tree;
    }

    // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
    function tree() {
      var separation = defaultSeparation,
          dx = 1,
          dy = 1,
          nodeSize = null;

      function tree(root) {
        var t = treeRoot(root);

        // Compute the layout using Buchheim et al.’s algorithm.
        t.eachAfter(firstWalk), t.parent.m = -t.z;
        t.eachBefore(secondWalk);

        // If a fixed node size is specified, scale x and y.
        if (nodeSize) root.eachBefore(sizeNode);

        // If a fixed tree size is specified, scale x and y based on the extent.
        // Compute the left-most, right-most, and depth-most nodes for extents.
        else {
          var left = root,
              right = root,
              bottom = root;
          root.eachBefore(function(node) {
            if (node.x < left.x) left = node;
            if (node.x > right.x) right = node;
            if (node.depth > bottom.depth) bottom = node;
          });
          var s = left === right ? 1 : separation(left, right) / 2,
              tx = s - left.x,
              kx = dx / (right.x + s + tx),
              ky = dy / (bottom.depth || 1);
          root.eachBefore(function(node) {
            node.x = (node.x + tx) * kx;
            node.y = node.depth * ky;
          });
        }

        return root;
      }

      // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
      // applied recursively to the children of v, as well as the function
      // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
      // node v is placed to the midpoint of its outermost children.
      function firstWalk(v) {
        var children = v.children,
            siblings = v.parent.children,
            w = v.i ? siblings[v.i - 1] : null;
        if (children) {
          executeShifts(v);
          var midpoint = (children[0].z + children[children.length - 1].z) / 2;
          if (w) {
            v.z = w.z + separation(v._, w._);
            v.m = v.z - midpoint;
          } else {
            v.z = midpoint;
          }
        } else if (w) {
          v.z = w.z + separation(v._, w._);
        }
        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
      }

      // Computes all real x-coordinates by summing up the modifiers recursively.
      function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
      }

      // The core of the algorithm. Here, a new subtree is combined with the
      // previous subtrees. Threads are used to traverse the inside and outside
      // contours of the left and right subtree up to the highest common level. The
      // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
      // superscript o means outside and i means inside, the subscript - means left
      // subtree and + means right subtree. For summing up the modifiers along the
      // contour, we use respective variables si+, si-, so-, and so+. Whenever two
      // nodes of the inside contours conflict, we compute the left one of the
      // greatest uncommon ancestors using the function ANCESTOR and call MOVE
      // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
      // Finally, we add a new thread (if necessary).
      function apportion(v, w, ancestor) {
        if (w) {
          var vip = v,
              vop = v,
              vim = w,
              vom = vip.parent.children[0],
              sip = vip.m,
              sop = vop.m,
              sim = vim.m,
              som = vom.m,
              shift;
          while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
            vom = nextLeft(vom);
            vop = nextRight(vop);
            vop.a = v;
            shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
            if (shift > 0) {
              moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
              sip += shift;
              sop += shift;
            }
            sim += vim.m;
            sip += vip.m;
            som += vom.m;
            sop += vop.m;
          }
          if (vim && !nextRight(vop)) {
            vop.t = vim;
            vop.m += sim - sop;
          }
          if (vip && !nextLeft(vom)) {
            vom.t = vip;
            vom.m += sip - som;
            ancestor = v;
          }
        }
        return ancestor;
      }

      function sizeNode(node) {
        node.x *= dx;
        node.y = node.depth * dy;
      }

      tree.separation = function(x) {
        return arguments.length ? (separation = x, tree) : separation;
      };

      tree.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
      };

      tree.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
      };

      return tree;
    }

    function treemapSlice(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          node,
          i = -1,
          n = nodes.length,
          k = parent.value && (y1 - y0) / parent.value;

      while (++i < n) {
        node = nodes[i], node.x0 = x0, node.x1 = x1;
        node.y0 = y0, node.y1 = y0 += node.value * k;
      }
    }

    var phi = (1 + Math.sqrt(5)) / 2;

    function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
      var rows = [],
          nodes = parent.children,
          row,
          nodeValue,
          i0 = 0,
          i1 = 0,
          n = nodes.length,
          dx, dy,
          value = parent.value,
          sumValue,
          minValue,
          maxValue,
          newRatio,
          minRatio,
          alpha,
          beta;

      while (i0 < n) {
        dx = x1 - x0, dy = y1 - y0;

        // Find the next non-empty node.
        do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
        minValue = maxValue = sumValue;
        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
        beta = sumValue * sumValue * alpha;
        minRatio = Math.max(maxValue / beta, beta / minValue);

        // Keep adding nodes while the aspect ratio maintains or improves.
        for (; i1 < n; ++i1) {
          sumValue += nodeValue = nodes[i1].value;
          if (nodeValue < minValue) minValue = nodeValue;
          if (nodeValue > maxValue) maxValue = nodeValue;
          beta = sumValue * sumValue * alpha;
          newRatio = Math.max(maxValue / beta, beta / minValue);
          if (newRatio > minRatio) { sumValue -= nodeValue; break; }
          minRatio = newRatio;
        }

        // Position and record the row orientation.
        rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
        if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
        else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
        value -= sumValue, i0 = i1;
      }

      return rows;
    }

    var squarify = (function custom(ratio) {

      function squarify(parent, x0, y0, x1, y1) {
        squarifyRatio(ratio, parent, x0, y0, x1, y1);
      }

      squarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
      };

      return squarify;
    })(phi);

    function index() {
      var tile = squarify,
          round = false,
          dx = 1,
          dy = 1,
          paddingStack = [0],
          paddingInner = constantZero,
          paddingTop = constantZero,
          paddingRight = constantZero,
          paddingBottom = constantZero,
          paddingLeft = constantZero;

      function treemap(root) {
        root.x0 =
        root.y0 = 0;
        root.x1 = dx;
        root.y1 = dy;
        root.eachBefore(positionNode);
        paddingStack = [0];
        if (round) root.eachBefore(roundNode);
        return root;
      }

      function positionNode(node) {
        var p = paddingStack[node.depth],
            x0 = node.x0 + p,
            y0 = node.y0 + p,
            x1 = node.x1 - p,
            y1 = node.y1 - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
        if (node.children) {
          p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
          x0 += paddingLeft(node) - p;
          y0 += paddingTop(node) - p;
          x1 -= paddingRight(node) - p;
          y1 -= paddingBottom(node) - p;
          if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
          if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
          tile(node, x0, y0, x1, y1);
        }
      }

      treemap.round = function(x) {
        return arguments.length ? (round = !!x, treemap) : round;
      };

      treemap.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
      };

      treemap.tile = function(x) {
        return arguments.length ? (tile = required(x), treemap) : tile;
      };

      treemap.padding = function(x) {
        return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
      };

      treemap.paddingInner = function(x) {
        return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$2(+x), treemap) : paddingInner;
      };

      treemap.paddingOuter = function(x) {
        return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
      };

      treemap.paddingTop = function(x) {
        return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$2(+x), treemap) : paddingTop;
      };

      treemap.paddingRight = function(x) {
        return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$2(+x), treemap) : paddingRight;
      };

      treemap.paddingBottom = function(x) {
        return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$2(+x), treemap) : paddingBottom;
      };

      treemap.paddingLeft = function(x) {
        return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$2(+x), treemap) : paddingLeft;
      };

      return treemap;
    }

    function binary(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          i, n = nodes.length,
          sum, sums = new Array(n + 1);

      for (sums[0] = sum = i = 0; i < n; ++i) {
        sums[i + 1] = sum += nodes[i].value;
      }

      partition(0, n, parent.value, x0, y0, x1, y1);

      function partition(i, j, value, x0, y0, x1, y1) {
        if (i >= j - 1) {
          var node = nodes[i];
          node.x0 = x0, node.y0 = y0;
          node.x1 = x1, node.y1 = y1;
          return;
        }

        var valueOffset = sums[i],
            valueTarget = (value / 2) + valueOffset,
            k = i + 1,
            hi = j - 1;

        while (k < hi) {
          var mid = k + hi >>> 1;
          if (sums[mid] < valueTarget) k = mid + 1;
          else hi = mid;
        }

        if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

        var valueLeft = sums[k] - valueOffset,
            valueRight = value - valueLeft;

        if ((x1 - x0) > (y1 - y0)) {
          var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;
          partition(i, k, valueLeft, x0, y0, xk, y1);
          partition(k, j, valueRight, xk, y0, x1, y1);
        } else {
          var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;
          partition(i, k, valueLeft, x0, y0, x1, yk);
          partition(k, j, valueRight, x0, yk, x1, y1);
        }
      }
    }

    function sliceDice(parent, x0, y0, x1, y1) {
      (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
    }

    var resquarify = (function custom(ratio) {

      function resquarify(parent, x0, y0, x1, y1) {
        if ((rows = parent._squarify) && (rows.ratio === ratio)) {
          var rows,
              row,
              nodes,
              i,
              j = -1,
              n,
              m = rows.length,
              value = parent.value;

          while (++j < m) {
            row = rows[j], nodes = row.children;
            for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
            if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);
            else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);
            value -= row.value;
          }
        } else {
          parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
          rows.ratio = ratio;
        }
      }

      resquarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
      };

      return resquarify;
    })(phi);

    function area$1(polygon) {
      var i = -1,
          n = polygon.length,
          a,
          b = polygon[n - 1],
          area = 0;

      while (++i < n) {
        a = b;
        b = polygon[i];
        area += a[1] * b[0] - a[0] * b[1];
      }

      return area / 2;
    }

    function centroid(polygon) {
      var i = -1,
          n = polygon.length,
          x = 0,
          y = 0,
          a,
          b = polygon[n - 1],
          c,
          k = 0;

      while (++i < n) {
        a = b;
        b = polygon[i];
        k += c = a[0] * b[1] - b[0] * a[1];
        x += (a[0] + b[0]) * c;
        y += (a[1] + b[1]) * c;
      }

      return k *= 3, [x / k, y / k];
    }

    // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
    // the 3D cross product in a quadrant I Cartesian coordinate system (+x is
    // right, +y is up). Returns a positive value if ABC is counter-clockwise,
    // negative if clockwise, and zero if the points are collinear.
    function cross$1(a, b, c) {
      return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
    }

    function lexicographicOrder(a, b) {
      return a[0] - b[0] || a[1] - b[1];
    }

    // Computes the upper convex hull per the monotone chain algorithm.
    // Assumes points.length >= 3, is sorted by x, unique in y.
    // Returns an array of indices into points in left-to-right order.
    function computeUpperHullIndexes(points) {
      const n = points.length,
          indexes = [0, 1];
      let size = 2, i;

      for (i = 2; i < n; ++i) {
        while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
        indexes[size++] = i;
      }

      return indexes.slice(0, size); // remove popped points
    }

    function hull(points) {
      if ((n = points.length) < 3) return null;

      var i,
          n,
          sortedPoints = new Array(n),
          flippedPoints = new Array(n);

      for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
      sortedPoints.sort(lexicographicOrder);
      for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

      var upperIndexes = computeUpperHullIndexes(sortedPoints),
          lowerIndexes = computeUpperHullIndexes(flippedPoints);

      // Construct the hull polygon, removing possible duplicate endpoints.
      var skipLeft = lowerIndexes[0] === upperIndexes[0],
          skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
          hull = [];

      // Add upper hull in right-to-l order.
      // Then add lower hull in left-to-right order.
      for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
      for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

      return hull;
    }

    function contains(polygon, point) {
      var n = polygon.length,
          p = polygon[n - 1],
          x = point[0], y = point[1],
          x0 = p[0], y0 = p[1],
          x1, y1,
          inside = false;

      for (var i = 0; i < n; ++i) {
        p = polygon[i], x1 = p[0], y1 = p[1];
        if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
        x0 = x1, y0 = y1;
      }

      return inside;
    }

    function length(polygon) {
      var i = -1,
          n = polygon.length,
          b = polygon[n - 1],
          xa,
          ya,
          xb = b[0],
          yb = b[1],
          perimeter = 0;

      while (++i < n) {
        xa = xb;
        ya = yb;
        b = polygon[i];
        xb = b[0];
        yb = b[1];
        xa -= xb;
        ya -= yb;
        perimeter += Math.hypot(xa, ya);
      }

      return perimeter;
    }

    var defaultSource = Math.random;

    var uniform = (function sourceRandomUniform(source) {
      function randomUniform(min, max) {
        min = min == null ? 0 : +min;
        max = max == null ? 1 : +max;
        if (arguments.length === 1) max = min, min = 0;
        else max -= min;
        return function() {
          return source() * max + min;
        };
      }

      randomUniform.source = sourceRandomUniform;

      return randomUniform;
    })(defaultSource);

    var int = (function sourceRandomInt(source) {
      function randomInt(min, max) {
        if (arguments.length < 2) max = min, min = 0;
        min = Math.floor(min);
        max = Math.floor(max) - min;
        return function() {
          return Math.floor(source() * max + min);
        };
      }

      randomInt.source = sourceRandomInt;

      return randomInt;
    })(defaultSource);

    var normal = (function sourceRandomNormal(source) {
      function randomNormal(mu, sigma) {
        var x, r;
        mu = mu == null ? 0 : +mu;
        sigma = sigma == null ? 1 : +sigma;
        return function() {
          var y;

          // If available, use the second previously-generated uniform random.
          if (x != null) y = x, x = null;

          // Otherwise, generate a new x and y.
          else do {
            x = source() * 2 - 1;
            y = source() * 2 - 1;
            r = x * x + y * y;
          } while (!r || r > 1);

          return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
        };
      }

      randomNormal.source = sourceRandomNormal;

      return randomNormal;
    })(defaultSource);

    var logNormal = (function sourceRandomLogNormal(source) {
      var N = normal.source(source);

      function randomLogNormal() {
        var randomNormal = N.apply(this, arguments);
        return function() {
          return Math.exp(randomNormal());
        };
      }

      randomLogNormal.source = sourceRandomLogNormal;

      return randomLogNormal;
    })(defaultSource);

    var irwinHall = (function sourceRandomIrwinHall(source) {
      function randomIrwinHall(n) {
        if ((n = +n) <= 0) return () => 0;
        return function() {
          for (var sum = 0, i = n; i > 1; --i) sum += source();
          return sum + i * source();
        };
      }

      randomIrwinHall.source = sourceRandomIrwinHall;

      return randomIrwinHall;
    })(defaultSource);

    var bates = (function sourceRandomBates(source) {
      var I = irwinHall.source(source);

      function randomBates(n) {
        // use limiting distribution at n === 0
        if ((n = +n) === 0) return source;
        var randomIrwinHall = I(n);
        return function() {
          return randomIrwinHall() / n;
        };
      }

      randomBates.source = sourceRandomBates;

      return randomBates;
    })(defaultSource);

    var exponential = (function sourceRandomExponential(source) {
      function randomExponential(lambda) {
        return function() {
          return -Math.log1p(-source()) / lambda;
        };
      }

      randomExponential.source = sourceRandomExponential;

      return randomExponential;
    })(defaultSource);

    var pareto = (function sourceRandomPareto(source) {
      function randomPareto(alpha) {
        if ((alpha = +alpha) < 0) throw new RangeError("invalid alpha");
        alpha = 1 / -alpha;
        return function() {
          return Math.pow(1 - source(), alpha);
        };
      }

      randomPareto.source = sourceRandomPareto;

      return randomPareto;
    })(defaultSource);

    var bernoulli = (function sourceRandomBernoulli(source) {
      function randomBernoulli(p) {
        if ((p = +p) < 0 || p > 1) throw new RangeError("invalid p");
        return function() {
          return Math.floor(source() + p);
        };
      }

      randomBernoulli.source = sourceRandomBernoulli;

      return randomBernoulli;
    })(defaultSource);

    var geometric = (function sourceRandomGeometric(source) {
      function randomGeometric(p) {
        if ((p = +p) < 0 || p > 1) throw new RangeError("invalid p");
        if (p === 0) return () => Infinity;
        if (p === 1) return () => 1;
        p = Math.log1p(-p);
        return function() {
          return 1 + Math.floor(Math.log1p(-source()) / p);
        };
      }

      randomGeometric.source = sourceRandomGeometric;

      return randomGeometric;
    })(defaultSource);

    var gamma = (function sourceRandomGamma(source) {
      var randomNormal = normal.source(source)();

      function randomGamma(k, theta) {
        if ((k = +k) < 0) throw new RangeError("invalid k");
        // degenerate distribution if k === 0
        if (k === 0) return () => 0;
        theta = theta == null ? 1 : +theta;
        // exponential distribution if k === 1
        if (k === 1) return () => -Math.log1p(-source()) * theta;

        var d = (k < 1 ? k + 1 : k) - 1 / 3,
            c = 1 / (3 * Math.sqrt(d)),
            multiplier = k < 1 ? () => Math.pow(source(), 1 / k) : () => 1;
        return function() {
          do {
            do {
              var x = randomNormal(),
                  v = 1 + c * x;
            } while (v <= 0);
            v *= v * v;
            var u = 1 - source();
          } while (u >= 1 - 0.0331 * x * x * x * x && Math.log(u) >= 0.5 * x * x + d * (1 - v + Math.log(v)));
          return d * v * multiplier() * theta;
        };
      }

      randomGamma.source = sourceRandomGamma;

      return randomGamma;
    })(defaultSource);

    var beta = (function sourceRandomBeta(source) {
      var G = gamma.source(source);

      function randomBeta(alpha, beta) {
        var X = G(alpha),
            Y = G(beta);
        return function() {
          var x = X();
          return x === 0 ? 0 : x / (x + Y());
        };
      }

      randomBeta.source = sourceRandomBeta;

      return randomBeta;
    })(defaultSource);

    var binomial = (function sourceRandomBinomial(source) {
      var G = geometric.source(source),
          B = beta.source(source);

      function randomBinomial(n, p) {
        n = +n;
        if ((p = +p) >= 1) return () => n;
        if (p <= 0) return () => 0;
        return function() {
          var acc = 0, nn = n, pp = p;
          while (nn * pp > 16 && nn * (1 - pp) > 16) {
            var i = Math.floor((nn + 1) * pp),
                y = B(i, nn - i + 1)();
            if (y <= pp) {
              acc += i;
              nn -= i;
              pp = (pp - y) / (1 - y);
            } else {
              nn = i - 1;
              pp /= y;
            }
          }
          var sign = pp < 0.5,
              pFinal = sign ? pp : 1 - pp,
              g = G(pFinal);
          for (var s = g(), k = 0; s <= nn; ++k) s += g();
          return acc + (sign ? k : nn - k);
        };
      }

      randomBinomial.source = sourceRandomBinomial;

      return randomBinomial;
    })(defaultSource);

    var weibull = (function sourceRandomWeibull(source) {
      function randomWeibull(k, a, b) {
        var outerFunc;
        if ((k = +k) === 0) {
          outerFunc = x => -Math.log(x);
        } else {
          k = 1 / k;
          outerFunc = x => Math.pow(x, k);
        }
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
          return a + b * outerFunc(-Math.log1p(-source()));
        };
      }

      randomWeibull.source = sourceRandomWeibull;

      return randomWeibull;
    })(defaultSource);

    var cauchy = (function sourceRandomCauchy(source) {
      function randomCauchy(a, b) {
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
          return a + b * Math.tan(Math.PI * source());
        };
      }

      randomCauchy.source = sourceRandomCauchy;

      return randomCauchy;
    })(defaultSource);

    var logistic = (function sourceRandomLogistic(source) {
      function randomLogistic(a, b) {
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
          var u = source();
          return a + b * Math.log(u / (1 - u));
        };
      }

      randomLogistic.source = sourceRandomLogistic;

      return randomLogistic;
    })(defaultSource);

    var poisson = (function sourceRandomPoisson(source) {
      var G = gamma.source(source),
          B = binomial.source(source);

      function randomPoisson(lambda) {
        return function() {
          var acc = 0, l = lambda;
          while (l > 16) {
            var n = Math.floor(0.875 * l),
                t = G(n)();
            if (t > l) return acc + B(n - 1, l / t)();
            acc += n;
            l -= t;
          }
          for (var s = -Math.log1p(-source()), k = 0; s <= l; ++k) s -= Math.log1p(-source());
          return acc + k;
        };
      }

      randomPoisson.source = sourceRandomPoisson;

      return randomPoisson;
    })(defaultSource);

    // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
    const mul = 0x19660D;
    const inc = 0x3C6EF35F;
    const eps = 1 / 0x100000000;

    function lcg(seed = Math.random()) {
      let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;
      return () => (state = mul * state + inc | 0, eps * (state >>> 0));
    }

    function initRange(domain, range) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.range(domain); break;
        default: this.range(range).domain(domain); break;
      }
      return this;
    }

    function initInterpolator(domain, interpolator) {
      switch (arguments.length) {
        case 0: break;
        case 1: {
          if (typeof domain === "function") this.interpolator(domain);
          else this.range(domain);
          break;
        }
        default: {
          this.domain(domain);
          if (typeof interpolator === "function") this.interpolator(interpolator);
          else this.range(interpolator);
          break;
        }
      }
      return this;
    }

    const implicit = Symbol("implicit");

    function ordinal() {
      var index = new InternMap(),
          domain = [],
          range = [],
          unknown = implicit;

      function scale(d) {
        let i = index.get(d);
        if (i === undefined) {
          if (unknown !== implicit) return unknown;
          index.set(d, i = domain.push(d) - 1);
        }
        return range[i % range.length];
      }

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new InternMap();
        for (const value of _) {
          if (index.has(value)) continue;
          index.set(value, domain.push(value) - 1);
        }
        return scale;
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return ordinal(domain, range).unknown(unknown);
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function band() {
      var scale = ordinal().unknown(undefined),
          domain = scale.domain,
          ordinalRange = scale.range,
          r0 = 0,
          r1 = 1,
          step,
          bandwidth,
          round = false,
          paddingInner = 0,
          paddingOuter = 0,
          align = 0.5;

      delete scale.unknown;

      function rescale() {
        var n = domain().length,
            reverse = r1 < r0,
            start = reverse ? r1 : r0,
            stop = reverse ? r0 : r1;
        step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
        if (round) step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = range$2(n).map(function(i) { return start + step * i; });
        return ordinalRange(reverse ? values.reverse() : values);
      }

      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };

      scale.range = function(_) {
        return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
      };

      scale.rangeRound = function(_) {
        return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
      };

      scale.bandwidth = function() {
        return bandwidth;
      };

      scale.step = function() {
        return step;
      };

      scale.round = function(_) {
        return arguments.length ? (round = !!_, rescale()) : round;
      };

      scale.padding = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
      };

      scale.paddingInner = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
      };

      scale.paddingOuter = function(_) {
        return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
      };

      scale.align = function(_) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
      };

      scale.copy = function() {
        return band(domain(), [r0, r1])
            .round(round)
            .paddingInner(paddingInner)
            .paddingOuter(paddingOuter)
            .align(align);
      };

      return initRange.apply(rescale(), arguments);
    }

    function pointish(scale) {
      var copy = scale.copy;

      scale.padding = scale.paddingOuter;
      delete scale.paddingInner;
      delete scale.paddingOuter;

      scale.copy = function() {
        return pointish(copy());
      };

      return scale;
    }

    function point$4() {
      return pointish(band.apply(null, arguments).paddingInner(1));
    }

    function constants(x) {
      return function() {
        return x;
      };
    }

    function number$1(x) {
      return +x;
    }

    var unit = [0, 1];

    function identity$3(x) {
      return x;
    }

    function normalize(a, b) {
      return (b -= (a = +a))
          ? function(x) { return (x - a) / b; }
          : constants(isNaN(b) ? NaN : 0.5);
    }

    function clamper(a, b) {
      var t;
      if (a > b) t = a, a = b, b = t;
      return function(x) { return Math.max(a, Math.min(b, x)); };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap(domain, range, interpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
      if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
      else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
      return function(x) { return r0(d0(x)); };
    }

    function polymap(domain, range, interpolate) {
      var j = Math.min(domain.length, range.length) - 1,
          d = new Array(j),
          r = new Array(j),
          i = -1;

      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++i < j) {
        d[i] = normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
      }

      return function(x) {
        var i = bisect(domain, x, 1, j) - 1;
        return r[i](d[i](x));
      };
    }

    function copy$1(source, target) {
      return target
          .domain(source.domain())
          .range(source.range())
          .interpolate(source.interpolate())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function transformer$2() {
      var domain = unit,
          range = unit,
          interpolate = interpolate$2,
          transform,
          untransform,
          unknown,
          clamp = identity$3,
          piecewise,
          output,
          input;

      function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity$3) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
      }

      scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
      };

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate = interpolateRound, rescale();
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity$3, rescale()) : clamp !== identity$3;
      };

      scale.interpolate = function(_) {
        return arguments.length ? (interpolate = _, rescale()) : interpolate;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t, u) {
        transform = t, untransform = u;
        return rescale();
      };
    }

    function continuous() {
      return transformer$2()(identity$3, identity$3);
    }

    function tickFormat(start, stop, count, specifier) {
      var step = tickStep(start, stop, count),
          precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format(specifier);
    }

    function linearish(scale) {
      var domain = scale.domain;

      scale.ticks = function(count) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
      };

      scale.tickFormat = function(count, specifier) {
        var d = domain();
        return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
      };

      scale.nice = function(count) {
        if (count == null) count = 10;

        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;

        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }
        
        while (maxIter-- > 0) {
          step = tickIncrement(start, stop, count);
          if (step === prestep) {
            d[i0] = start;
            d[i1] = stop;
            return domain(d);
          } else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
          } else {
            break;
          }
          prestep = step;
        }

        return scale;
      };

      return scale;
    }

    function linear() {
      var scale = continuous();

      scale.copy = function() {
        return copy$1(scale, linear());
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function identity$2(domain) {
      var unknown;

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : x;
      }

      scale.invert = scale;

      scale.domain = scale.range = function(_) {
        return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return identity$2(domain).unknown(unknown);
      };

      domain = arguments.length ? Array.from(domain, number$1) : [0, 1];

      return linearish(scale);
    }

    function nice(domain, interval) {
      domain = domain.slice();

      var i0 = 0,
          i1 = domain.length - 1,
          x0 = domain[i0],
          x1 = domain[i1],
          t;

      if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
      }

      domain[i0] = interval.floor(x0);
      domain[i1] = interval.ceil(x1);
      return domain;
    }

    function transformLog(x) {
      return Math.log(x);
    }

    function transformExp(x) {
      return Math.exp(x);
    }

    function transformLogn(x) {
      return -Math.log(-x);
    }

    function transformExpn(x) {
      return -Math.exp(-x);
    }

    function pow10(x) {
      return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
    }

    function powp(base) {
      return base === 10 ? pow10
          : base === Math.E ? Math.exp
          : x => Math.pow(base, x);
    }

    function logp(base) {
      return base === Math.E ? Math.log
          : base === 10 && Math.log10
          || base === 2 && Math.log2
          || (base = Math.log(base), x => Math.log(x) / base);
    }

    function reflect(f) {
      return (x, k) => -f(-x, k);
    }

    function loggish(transform) {
      const scale = transform(transformLog, transformExp);
      const domain = scale.domain;
      let base = 10;
      let logs;
      let pows;

      function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0) {
          logs = reflect(logs), pows = reflect(pows);
          transform(transformLogn, transformExpn);
        } else {
          transform(transformLog, transformExp);
        }
        return scale;
      }

      scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
      };

      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };

      scale.ticks = count => {
        const d = domain();
        let u = d[0];
        let v = d[d.length - 1];
        const r = v < u;

        if (r) ([u, v] = [v, u]);

        let i = logs(u);
        let j = logs(v);
        let k;
        let t;
        const n = count == null ? 10 : +count;
        let z = [];

        if (!(base % 1) && j - i < n) {
          i = Math.floor(i), j = Math.ceil(j);
          if (u > 0) for (; i <= j; ++i) {
            for (k = 1; k < base; ++k) {
              t = i < 0 ? k / pows(-i) : k * pows(i);
              if (t < u) continue;
              if (t > v) break;
              z.push(t);
            }
          } else for (; i <= j; ++i) {
            for (k = base - 1; k >= 1; --k) {
              t = i > 0 ? k / pows(-i) : k * pows(i);
              if (t < u) continue;
              if (t > v) break;
              z.push(t);
            }
          }
          if (z.length * 2 < n) z = ticks(u, v, n);
        } else {
          z = ticks(i, j, Math.min(j - i, n)).map(pows);
        }
        return r ? z.reverse() : z;
      };

      scale.tickFormat = (count, specifier) => {
        if (count == null) count = 10;
        if (specifier == null) specifier = base === 10 ? "s" : ",";
        if (typeof specifier !== "function") {
          if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
          specifier = format(specifier);
        }
        if (count === Infinity) return specifier;
        const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
        return d => {
          let i = d / pows(Math.round(logs(d)));
          if (i * base < base - 0.5) i *= base;
          return i <= k ? specifier(d) : "";
        };
      };

      scale.nice = () => {
        return domain(nice(domain(), {
          floor: x => pows(Math.floor(logs(x))),
          ceil: x => pows(Math.ceil(logs(x)))
        }));
      };

      return scale;
    }

    function log() {
      const scale = loggish(transformer$2()).domain([1, 10]);
      scale.copy = () => copy$1(scale, log()).base(scale.base());
      initRange.apply(scale, arguments);
      return scale;
    }

    function transformSymlog(c) {
      return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
      };
    }

    function transformSymexp(c) {
      return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
      };
    }

    function symlogish(transform) {
      var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

      scale.constant = function(_) {
        return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
      };

      return linearish(scale);
    }

    function symlog() {
      var scale = symlogish(transformer$2());

      scale.copy = function() {
        return copy$1(scale, symlog()).constant(scale.constant());
      };

      return initRange.apply(scale, arguments);
    }

    function transformPow(exponent) {
      return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
      };
    }

    function transformSqrt(x) {
      return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
    }

    function transformSquare(x) {
      return x < 0 ? -x * x : x * x;
    }

    function powish(transform) {
      var scale = transform(identity$3, identity$3),
          exponent = 1;

      function rescale() {
        return exponent === 1 ? transform(identity$3, identity$3)
            : exponent === 0.5 ? transform(transformSqrt, transformSquare)
            : transform(transformPow(exponent), transformPow(1 / exponent));
      }

      scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
      };

      return linearish(scale);
    }

    function pow() {
      var scale = powish(transformer$2());

      scale.copy = function() {
        return copy$1(scale, pow()).exponent(scale.exponent());
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function sqrt$1() {
      return pow.apply(null, arguments).exponent(0.5);
    }

    function square$1(x) {
      return Math.sign(x) * x * x;
    }

    function unsquare(x) {
      return Math.sign(x) * Math.sqrt(Math.abs(x));
    }

    function radial() {
      var squared = continuous(),
          range = [0, 1],
          round = false,
          unknown;

      function scale(x) {
        var y = unsquare(squared(x));
        return isNaN(y) ? unknown : round ? Math.round(y) : y;
      }

      scale.invert = function(y) {
        return squared.invert(square$1(y));
      };

      scale.domain = function(_) {
        return arguments.length ? (squared.domain(_), scale) : squared.domain();
      };

      scale.range = function(_) {
        return arguments.length ? (squared.range((range = Array.from(_, number$1)).map(square$1)), scale) : range.slice();
      };

      scale.rangeRound = function(_) {
        return scale.range(_).round(true);
      };

      scale.round = function(_) {
        return arguments.length ? (round = !!_, scale) : round;
      };

      scale.clamp = function(_) {
        return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return radial(squared.domain(), range)
            .round(round)
            .clamp(squared.clamp())
            .unknown(unknown);
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function quantile() {
      var domain = [],
          range = [],
          thresholds = [],
          unknown;

      function rescale() {
        var i = 0, n = Math.max(1, range.length);
        thresholds = new Array(n - 1);
        while (++i < n) thresholds[i - 1] = quantileSorted(domain, i / n);
        return scale;
      }

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : range[bisect(thresholds, x)];
      }

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [NaN, NaN] : [
          i > 0 ? thresholds[i - 1] : domain[0],
          i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
        ];
      };

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(ascending$3);
        return rescale();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.quantiles = function() {
        return thresholds.slice();
      };

      scale.copy = function() {
        return quantile()
            .domain(domain)
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(scale, arguments);
    }

    function quantize() {
      var x0 = 0,
          x1 = 1,
          n = 1,
          domain = [0.5],
          range = [0, 1],
          unknown;

      function scale(x) {
        return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;
      }

      function rescale() {
        var i = -1;
        domain = new Array(n);
        while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
        return scale;
      }

      scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
      };

      scale.range = function(_) {
        return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
      };

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [NaN, NaN]
            : i < 1 ? [x0, domain[0]]
            : i >= n ? [domain[n - 1], x1]
            : [domain[i - 1], domain[i]];
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : scale;
      };

      scale.thresholds = function() {
        return domain.slice();
      };

      scale.copy = function() {
        return quantize()
            .domain([x0, x1])
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(linearish(scale), arguments);
    }

    function threshold() {
      var domain = [0.5],
          range = [0, 1],
          unknown,
          n = 1;

      function scale(x) {
        return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;
      }

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
      };

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return [domain[i - 1], domain[i]];
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return threshold()
            .domain(domain)
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(scale, arguments);
    }

    const t0 = new Date, t1 = new Date;

    function timeInterval(floori, offseti, count, field) {

      function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
      }

      interval.floor = (date) => {
        return floori(date = new Date(+date)), date;
      };

      interval.ceil = (date) => {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
      };

      interval.round = (date) => {
        const d0 = interval(date), d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
      };

      interval.offset = (date, step) => {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
      };

      interval.range = (start, stop, step) => {
        const range = [];
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        let previous;
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
      };

      interval.filter = (test) => {
        return timeInterval((date) => {
          if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
        }, (date, step) => {
          if (date >= date) {
            if (step < 0) while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
            } else while (--step >= 0) {
              while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
            }
          }
        });
      };

      if (count) {
        interval.count = (start, end) => {
          t0.setTime(+start), t1.setTime(+end);
          floori(t0), floori(t1);
          return Math.floor(count(t0, t1));
        };

        interval.every = (step) => {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null
              : !(step > 1) ? interval
              : interval.filter(field
                  ? (d) => field(d) % step === 0
                  : (d) => interval.count(0, d) % step === 0);
        };
      }

      return interval;
    }

    const millisecond = timeInterval(() => {
      // noop
    }, (date, step) => {
      date.setTime(+date + step);
    }, (start, end) => {
      return end - start;
    });

    // An optimized implementation for this simple case.
    millisecond.every = (k) => {
      k = Math.floor(k);
      if (!isFinite(k) || !(k > 0)) return null;
      if (!(k > 1)) return millisecond;
      return timeInterval((date) => {
        date.setTime(Math.floor(date / k) * k);
      }, (date, step) => {
        date.setTime(+date + step * k);
      }, (start, end) => {
        return (end - start) / k;
      });
    };

    const milliseconds = millisecond.range;

    const durationSecond = 1000;
    const durationMinute = durationSecond * 60;
    const durationHour = durationMinute * 60;
    const durationDay = durationHour * 24;
    const durationWeek = durationDay * 7;
    const durationMonth = durationDay * 30;
    const durationYear = durationDay * 365;

    const second = timeInterval((date) => {
      date.setTime(date - date.getMilliseconds());
    }, (date, step) => {
      date.setTime(+date + step * durationSecond);
    }, (start, end) => {
      return (end - start) / durationSecond;
    }, (date) => {
      return date.getUTCSeconds();
    });

    const seconds = second.range;

    const timeMinute = timeInterval((date) => {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
    }, (date, step) => {
      date.setTime(+date + step * durationMinute);
    }, (start, end) => {
      return (end - start) / durationMinute;
    }, (date) => {
      return date.getMinutes();
    });

    const timeMinutes = timeMinute.range;

    const utcMinute = timeInterval((date) => {
      date.setUTCSeconds(0, 0);
    }, (date, step) => {
      date.setTime(+date + step * durationMinute);
    }, (start, end) => {
      return (end - start) / durationMinute;
    }, (date) => {
      return date.getUTCMinutes();
    });

    const utcMinutes = utcMinute.range;

    const timeHour = timeInterval((date) => {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
    }, (date, step) => {
      date.setTime(+date + step * durationHour);
    }, (start, end) => {
      return (end - start) / durationHour;
    }, (date) => {
      return date.getHours();
    });

    const timeHours = timeHour.range;

    const utcHour = timeInterval((date) => {
      date.setUTCMinutes(0, 0, 0);
    }, (date, step) => {
      date.setTime(+date + step * durationHour);
    }, (start, end) => {
      return (end - start) / durationHour;
    }, (date) => {
      return date.getUTCHours();
    });

    const utcHours = utcHour.range;

    const timeDay = timeInterval(
      date => date.setHours(0, 0, 0, 0),
      (date, step) => date.setDate(date.getDate() + step),
      (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
      date => date.getDate() - 1
    );

    const timeDays = timeDay.range;

    const utcDay = timeInterval((date) => {
      date.setUTCHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setUTCDate(date.getUTCDate() + step);
    }, (start, end) => {
      return (end - start) / durationDay;
    }, (date) => {
      return date.getUTCDate() - 1;
    });

    const utcDays = utcDay.range;

    const unixDay = timeInterval((date) => {
      date.setUTCHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setUTCDate(date.getUTCDate() + step);
    }, (start, end) => {
      return (end - start) / durationDay;
    }, (date) => {
      return Math.floor(date / durationDay);
    });

    const unixDays = unixDay.range;

    function timeWeekday(i) {
      return timeInterval((date) => {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
      }, (date, step) => {
        date.setDate(date.getDate() + step * 7);
      }, (start, end) => {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
      });
    }

    const timeSunday = timeWeekday(0);
    const timeMonday = timeWeekday(1);
    const timeTuesday = timeWeekday(2);
    const timeWednesday = timeWeekday(3);
    const timeThursday = timeWeekday(4);
    const timeFriday = timeWeekday(5);
    const timeSaturday = timeWeekday(6);

    const timeSundays = timeSunday.range;
    const timeMondays = timeMonday.range;
    const timeTuesdays = timeTuesday.range;
    const timeWednesdays = timeWednesday.range;
    const timeThursdays = timeThursday.range;
    const timeFridays = timeFriday.range;
    const timeSaturdays = timeSaturday.range;

    function utcWeekday(i) {
      return timeInterval((date) => {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
      }, (date, step) => {
        date.setUTCDate(date.getUTCDate() + step * 7);
      }, (start, end) => {
        return (end - start) / durationWeek;
      });
    }

    const utcSunday = utcWeekday(0);
    const utcMonday = utcWeekday(1);
    const utcTuesday = utcWeekday(2);
    const utcWednesday = utcWeekday(3);
    const utcThursday = utcWeekday(4);
    const utcFriday = utcWeekday(5);
    const utcSaturday = utcWeekday(6);

    const utcSundays = utcSunday.range;
    const utcMondays = utcMonday.range;
    const utcTuesdays = utcTuesday.range;
    const utcWednesdays = utcWednesday.range;
    const utcThursdays = utcThursday.range;
    const utcFridays = utcFriday.range;
    const utcSaturdays = utcSaturday.range;

    const timeMonth = timeInterval((date) => {
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setMonth(date.getMonth() + step);
    }, (start, end) => {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, (date) => {
      return date.getMonth();
    });

    const timeMonths = timeMonth.range;

    const utcMonth = timeInterval((date) => {
      date.setUTCDate(1);
      date.setUTCHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setUTCMonth(date.getUTCMonth() + step);
    }, (start, end) => {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, (date) => {
      return date.getUTCMonth();
    });

    const utcMonths = utcMonth.range;

    const timeYear = timeInterval((date) => {
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setFullYear(date.getFullYear() + step);
    }, (start, end) => {
      return end.getFullYear() - start.getFullYear();
    }, (date) => {
      return date.getFullYear();
    });

    // An optimized implementation for this simple case.
    timeYear.every = (k) => {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, (date, step) => {
        date.setFullYear(date.getFullYear() + step * k);
      });
    };

    const timeYears = timeYear.range;

    const utcYear = timeInterval((date) => {
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setUTCFullYear(date.getUTCFullYear() + step);
    }, (start, end) => {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, (date) => {
      return date.getUTCFullYear();
    });

    // An optimized implementation for this simple case.
    utcYear.every = (k) => {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, (date, step) => {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
      });
    };

    const utcYears = utcYear.range;

    function ticker(year, month, week, day, hour, minute) {

      const tickIntervals = [
        [second,  1,      durationSecond],
        [second,  5,  5 * durationSecond],
        [second, 15, 15 * durationSecond],
        [second, 30, 30 * durationSecond],
        [minute,  1,      durationMinute],
        [minute,  5,  5 * durationMinute],
        [minute, 15, 15 * durationMinute],
        [minute, 30, 30 * durationMinute],
        [  hour,  1,      durationHour  ],
        [  hour,  3,  3 * durationHour  ],
        [  hour,  6,  6 * durationHour  ],
        [  hour, 12, 12 * durationHour  ],
        [   day,  1,      durationDay   ],
        [   day,  2,  2 * durationDay   ],
        [  week,  1,      durationWeek  ],
        [ month,  1,      durationMonth ],
        [ month,  3,  3 * durationMonth ],
        [  year,  1,      durationYear  ]
      ];

      function ticks(start, stop, count) {
        const reverse = stop < start;
        if (reverse) [start, stop] = [stop, start];
        const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
        const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
        return reverse ? ticks.reverse() : ticks;
      }

      function tickInterval(start, stop, count) {
        const target = Math.abs(stop - start) / count;
        const i = bisector(([,, step]) => step).right(tickIntervals, target);
        if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
        if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));
        const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        return t.every(step);
      }

      return [ticks, tickInterval];
    }

    const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
    const [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);

    function localDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
      }
      return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }

    function utcDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }

    function newDate(y, m, d) {
      return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
    }

    function formatLocale(locale) {
      var locale_dateTime = locale.dateTime,
          locale_date = locale.date,
          locale_time = locale.time,
          locale_periods = locale.periods,
          locale_weekdays = locale.days,
          locale_shortWeekdays = locale.shortDays,
          locale_months = locale.months,
          locale_shortMonths = locale.shortMonths;

      var periodRe = formatRe(locale_periods),
          periodLookup = formatLookup(locale_periods),
          weekdayRe = formatRe(locale_weekdays),
          weekdayLookup = formatLookup(locale_weekdays),
          shortWeekdayRe = formatRe(locale_shortWeekdays),
          shortWeekdayLookup = formatLookup(locale_shortWeekdays),
          monthRe = formatRe(locale_months),
          monthLookup = formatLookup(locale_months),
          shortMonthRe = formatRe(locale_shortMonths),
          shortMonthLookup = formatLookup(locale_shortMonths);

      var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
      };

      var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
      };

      var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
      };

      // These recursive directive definitions must be deferred.
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);

      function newFormat(specifier, formats) {
        return function(date) {
          var string = [],
              i = -1,
              j = 0,
              n = specifier.length,
              c,
              pad,
              format;

          if (!(date instanceof Date)) date = new Date(+date);

          while (++i < n) {
            if (specifier.charCodeAt(i) === 37) {
              string.push(specifier.slice(j, i));
              if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
              else pad = c === "e" ? " " : "0";
              if (format = formats[c]) c = format(date, pad);
              string.push(c);
              j = i + 1;
            }
          }

          string.push(specifier.slice(j, i));
          return string.join("");
        };
      }

      function newParse(specifier, Z) {
        return function(string) {
          var d = newDate(1900, undefined, 1),
              i = parseSpecifier(d, specifier, string += "", 0),
              week, day;
          if (i != string.length) return null;

          // If a UNIX timestamp is specified, return it.
          if ("Q" in d) return new Date(d.Q);
          if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

          // If this is utcParse, never use the local timezone.
          if (Z && !("Z" in d)) d.Z = 0;

          // The am-pm flag is 0 for AM, and 1 for PM.
          if ("p" in d) d.H = d.H % 12 + d.p * 12;

          // If the month was not specified, inherit from the quarter.
          if (d.m === undefined) d.m = "q" in d ? d.q : 0;

          // Convert day-of-week and week-of-year to day-of-year.
          if ("V" in d) {
            if (d.V < 1 || d.V > 53) return null;
            if (!("w" in d)) d.w = 1;
            if ("Z" in d) {
              week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
              week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
              week = utcDay.offset(week, (d.V - 1) * 7);
              d.y = week.getUTCFullYear();
              d.m = week.getUTCMonth();
              d.d = week.getUTCDate() + (d.w + 6) % 7;
            } else {
              week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
              week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
              week = timeDay.offset(week, (d.V - 1) * 7);
              d.y = week.getFullYear();
              d.m = week.getMonth();
              d.d = week.getDate() + (d.w + 6) % 7;
            }
          } else if ("W" in d || "U" in d) {
            if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
            day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
            d.m = 0;
            d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
          }

          // If a time zone is specified, all fields are interpreted as UTC and then
          // offset according to the specified time zone.
          if ("Z" in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d);
          }

          // Otherwise, all fields are in local time.
          return localDate(d);
        };
      }

      function parseSpecifier(d, specifier, string, j) {
        var i = 0,
            n = specifier.length,
            m = string.length,
            c,
            parse;

        while (i < n) {
          if (j >= m) return -1;
          c = specifier.charCodeAt(i++);
          if (c === 37) {
            c = specifier.charAt(i++);
            parse = parses[c in pads ? specifier.charAt(i++) : c];
            if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
          } else if (c != string.charCodeAt(j++)) {
            return -1;
          }
        }

        return j;
      }

      function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
      }

      function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
      }

      function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
      }

      function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
      }

      function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
      }

      function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
      }

      function formatMonth(d) {
        return locale_months[d.getMonth()];
      }

      function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
      }

      function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
      }

      function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
      }

      function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
      }

      function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
      }

      function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
      }

      function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
      }

      function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
      }

      return {
        format: function(specifier) {
          var f = newFormat(specifier += "", formats);
          f.toString = function() { return specifier; };
          return f;
        },
        parse: function(specifier) {
          var p = newParse(specifier += "", false);
          p.toString = function() { return specifier; };
          return p;
        },
        utcFormat: function(specifier) {
          var f = newFormat(specifier += "", utcFormats);
          f.toString = function() { return specifier; };
          return f;
        },
        utcParse: function(specifier) {
          var p = newParse(specifier += "", true);
          p.toString = function() { return specifier; };
          return p;
        }
      };
    }

    var pads = {"-": "", "_": " ", "0": "0"},
        numberRe = /^\s*\d+/, // note: ignores next directive
        percentRe = /^%/,
        requoteRe = /[\\^$*+?|[\]().{}]/g;

    function pad(value, fill, width) {
      var sign = value < 0 ? "-" : "",
          string = (sign ? -value : value) + "",
          length = string.length;
      return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }

    function requote(s) {
      return s.replace(requoteRe, "\\$&");
    }

    function formatRe(names) {
      return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }

    function formatLookup(names) {
      return new Map(names.map((name, i) => [name.toLowerCase(), i]));
    }

    function parseWeekdayNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.w = +n[0], i + n[0].length) : -1;
    }

    function parseWeekdayNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.u = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.U = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberISO(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.V = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.W = +n[0], i + n[0].length) : -1;
    }

    function parseFullYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 4));
      return n ? (d.y = +n[0], i + n[0].length) : -1;
    }

    function parseYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
    }

    function parseZone(d, string, i) {
      var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
      return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
    }

    function parseQuarter(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
    }

    function parseMonthNumber(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
    }

    function parseDayOfMonth(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.d = +n[0], i + n[0].length) : -1;
    }

    function parseDayOfYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
    }

    function parseHour24(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.H = +n[0], i + n[0].length) : -1;
    }

    function parseMinutes(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.M = +n[0], i + n[0].length) : -1;
    }

    function parseSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.S = +n[0], i + n[0].length) : -1;
    }

    function parseMilliseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.L = +n[0], i + n[0].length) : -1;
    }

    function parseMicroseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 6));
      return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
    }

    function parseLiteralPercent(d, string, i) {
      var n = percentRe.exec(string.slice(i, i + 1));
      return n ? i + n[0].length : -1;
    }

    function parseUnixTimestamp(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.Q = +n[0], i + n[0].length) : -1;
    }

    function parseUnixTimestampSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.s = +n[0], i + n[0].length) : -1;
    }

    function formatDayOfMonth(d, p) {
      return pad(d.getDate(), p, 2);
    }

    function formatHour24(d, p) {
      return pad(d.getHours(), p, 2);
    }

    function formatHour12(d, p) {
      return pad(d.getHours() % 12 || 12, p, 2);
    }

    function formatDayOfYear(d, p) {
      return pad(1 + timeDay.count(timeYear(d), d), p, 3);
    }

    function formatMilliseconds(d, p) {
      return pad(d.getMilliseconds(), p, 3);
    }

    function formatMicroseconds(d, p) {
      return formatMilliseconds(d, p) + "000";
    }

    function formatMonthNumber(d, p) {
      return pad(d.getMonth() + 1, p, 2);
    }

    function formatMinutes(d, p) {
      return pad(d.getMinutes(), p, 2);
    }

    function formatSeconds(d, p) {
      return pad(d.getSeconds(), p, 2);
    }

    function formatWeekdayNumberMonday(d) {
      var day = d.getDay();
      return day === 0 ? 7 : day;
    }

    function formatWeekNumberSunday(d, p) {
      return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
    }

    function dISO(d) {
      var day = d.getDay();
      return (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);
    }

    function formatWeekNumberISO(d, p) {
      d = dISO(d);
      return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
    }

    function formatWeekdayNumberSunday(d) {
      return d.getDay();
    }

    function formatWeekNumberMonday(d, p) {
      return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
    }

    function formatYear(d, p) {
      return pad(d.getFullYear() % 100, p, 2);
    }

    function formatYearISO(d, p) {
      d = dISO(d);
      return pad(d.getFullYear() % 100, p, 2);
    }

    function formatFullYear(d, p) {
      return pad(d.getFullYear() % 10000, p, 4);
    }

    function formatFullYearISO(d, p) {
      var day = d.getDay();
      d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);
      return pad(d.getFullYear() % 10000, p, 4);
    }

    function formatZone(d) {
      var z = d.getTimezoneOffset();
      return (z > 0 ? "-" : (z *= -1, "+"))
          + pad(z / 60 | 0, "0", 2)
          + pad(z % 60, "0", 2);
    }

    function formatUTCDayOfMonth(d, p) {
      return pad(d.getUTCDate(), p, 2);
    }

    function formatUTCHour24(d, p) {
      return pad(d.getUTCHours(), p, 2);
    }

    function formatUTCHour12(d, p) {
      return pad(d.getUTCHours() % 12 || 12, p, 2);
    }

    function formatUTCDayOfYear(d, p) {
      return pad(1 + utcDay.count(utcYear(d), d), p, 3);
    }

    function formatUTCMilliseconds(d, p) {
      return pad(d.getUTCMilliseconds(), p, 3);
    }

    function formatUTCMicroseconds(d, p) {
      return formatUTCMilliseconds(d, p) + "000";
    }

    function formatUTCMonthNumber(d, p) {
      return pad(d.getUTCMonth() + 1, p, 2);
    }

    function formatUTCMinutes(d, p) {
      return pad(d.getUTCMinutes(), p, 2);
    }

    function formatUTCSeconds(d, p) {
      return pad(d.getUTCSeconds(), p, 2);
    }

    function formatUTCWeekdayNumberMonday(d) {
      var dow = d.getUTCDay();
      return dow === 0 ? 7 : dow;
    }

    function formatUTCWeekNumberSunday(d, p) {
      return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
    }

    function UTCdISO(d) {
      var day = d.getUTCDay();
      return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
    }

    function formatUTCWeekNumberISO(d, p) {
      d = UTCdISO(d);
      return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
    }

    function formatUTCWeekdayNumberSunday(d) {
      return d.getUTCDay();
    }

    function formatUTCWeekNumberMonday(d, p) {
      return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
    }

    function formatUTCYear(d, p) {
      return pad(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCYearISO(d, p) {
      d = UTCdISO(d);
      return pad(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCFullYear(d, p) {
      return pad(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCFullYearISO(d, p) {
      var day = d.getUTCDay();
      d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
      return pad(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCZone() {
      return "+0000";
    }

    function formatLiteralPercent() {
      return "%";
    }

    function formatUnixTimestamp(d) {
      return +d;
    }

    function formatUnixTimestampSeconds(d) {
      return Math.floor(+d / 1000);
    }

    var locale;
    var timeFormat;
    var timeParse;
    var utcFormat;
    var utcParse;

    defaultLocale({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      timeFormat = locale.format;
      timeParse = locale.parse;
      utcFormat = locale.utcFormat;
      utcParse = locale.utcParse;
      return locale;
    }

    var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

    function formatIsoNative(date) {
      return date.toISOString();
    }

    var formatIso = Date.prototype.toISOString
        ? formatIsoNative
        : utcFormat(isoSpecifier);

    var formatIso$1 = formatIso;

    function parseIsoNative(string) {
      var date = new Date(string);
      return isNaN(date) ? null : date;
    }

    var parseIso = +new Date("2000-01-01T00:00:00.000Z")
        ? parseIsoNative
        : utcParse(isoSpecifier);

    var parseIso$1 = parseIso;

    function date(t) {
      return new Date(t);
    }

    function number(t) {
      return t instanceof Date ? +t : +new Date(+t);
    }

    function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
      var scale = continuous(),
          invert = scale.invert,
          domain = scale.domain;

      var formatMillisecond = format(".%L"),
          formatSecond = format(":%S"),
          formatMinute = format("%I:%M"),
          formatHour = format("%I %p"),
          formatDay = format("%a %d"),
          formatWeek = format("%b %d"),
          formatMonth = format("%B"),
          formatYear = format("%Y");

      function tickFormat(date) {
        return (second(date) < date ? formatMillisecond
            : minute(date) < date ? formatSecond
            : hour(date) < date ? formatMinute
            : day(date) < date ? formatHour
            : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
            : year(date) < date ? formatMonth
            : formatYear)(date);
      }

      scale.invert = function(y) {
        return new Date(invert(y));
      };

      scale.domain = function(_) {
        return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
      };

      scale.ticks = function(interval) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
      };

      scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
      };

      scale.nice = function(interval) {
        var d = domain();
        if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
        return interval ? domain(nice(d, interval)) : scale;
      };

      scale.copy = function() {
        return copy$1(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
      };

      return scale;
    }

    function time() {
      return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
    }

    function utcTime() {
      return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
    }

    function transformer$1() {
      var x0 = 0,
          x1 = 1,
          t0,
          t1,
          k10,
          transform,
          interpolator = identity$3,
          clamp = false,
          unknown;

      function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
      }

      scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      function range(interpolate) {
        return function(_) {
          var r0, r1;
          return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
        };
      }

      scale.range = range(interpolate$2);

      scale.rangeRound = range(interpolateRound);

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
        return scale;
      };
    }

    function copy(source, target) {
      return target
          .domain(source.domain())
          .interpolator(source.interpolator())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function sequential() {
      var scale = linearish(transformer$1()(identity$3));

      scale.copy = function() {
        return copy(scale, sequential());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialLog() {
      var scale = loggish(transformer$1()).domain([1, 10]);

      scale.copy = function() {
        return copy(scale, sequentialLog()).base(scale.base());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialSymlog() {
      var scale = symlogish(transformer$1());

      scale.copy = function() {
        return copy(scale, sequentialSymlog()).constant(scale.constant());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialPow() {
      var scale = powish(transformer$1());

      scale.copy = function() {
        return copy(scale, sequentialPow()).exponent(scale.exponent());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialSqrt() {
      return sequentialPow.apply(null, arguments).exponent(0.5);
    }

    function sequentialQuantile() {
      var domain = [],
          interpolator = identity$3;

      function scale(x) {
        if (x != null && !isNaN(x = +x)) return interpolator((bisect(domain, x, 1) - 1) / (domain.length - 1));
      }

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(ascending$3);
        return scale;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      scale.range = function() {
        return domain.map((d, i) => interpolator(i / (domain.length - 1)));
      };

      scale.quantiles = function(n) {
        return Array.from({length: n + 1}, (_, i) => quantile$1(domain, i / n));
      };

      scale.copy = function() {
        return sequentialQuantile(interpolator).domain(domain);
      };

      return initInterpolator.apply(scale, arguments);
    }

    function transformer() {
      var x0 = 0,
          x1 = 0.5,
          x2 = 1,
          s = 1,
          t0,
          t1,
          t2,
          k10,
          k21,
          interpolator = identity$3,
          transform,
          clamp = false,
          unknown;

      function scale(x) {
        return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
      }

      scale.domain = function(_) {
        return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      function range(interpolate) {
        return function(_) {
          var r0, r1, r2;
          return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
        };
      }

      scale.range = range(interpolate$2);

      scale.rangeRound = range(interpolateRound);

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
        return scale;
      };
    }

    function diverging$1() {
      var scale = linearish(transformer()(identity$3));

      scale.copy = function() {
        return copy(scale, diverging$1());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingLog() {
      var scale = loggish(transformer()).domain([0.1, 1, 10]);

      scale.copy = function() {
        return copy(scale, divergingLog()).base(scale.base());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingSymlog() {
      var scale = symlogish(transformer());

      scale.copy = function() {
        return copy(scale, divergingSymlog()).constant(scale.constant());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingPow() {
      var scale = powish(transformer());

      scale.copy = function() {
        return copy(scale, divergingPow()).exponent(scale.exponent());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingSqrt() {
      return divergingPow.apply(null, arguments).exponent(0.5);
    }

    function colors(specifier) {
      var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
      while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
      return colors;
    }

    var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

    var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

    var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

    var observable10 = colors("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0");

    var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

    var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

    var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

    var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

    var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

    var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

    var Tableau10 = colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

    var ramp$1 = scheme => rgbBasis(scheme[scheme.length - 1]);

    var scheme$q = new Array(3).concat(
      "d8b365f5f5f55ab4ac",
      "a6611adfc27d80cdc1018571",
      "a6611adfc27df5f5f580cdc1018571",
      "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
      "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
      "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
      "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
      "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
      "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
    ).map(colors);

    var BrBG = ramp$1(scheme$q);

    var scheme$p = new Array(3).concat(
      "af8dc3f7f7f77fbf7b",
      "7b3294c2a5cfa6dba0008837",
      "7b3294c2a5cff7f7f7a6dba0008837",
      "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
      "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
      "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
      "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
      "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
      "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
    ).map(colors);

    var PRGn = ramp$1(scheme$p);

    var scheme$o = new Array(3).concat(
      "e9a3c9f7f7f7a1d76a",
      "d01c8bf1b6dab8e1864dac26",
      "d01c8bf1b6daf7f7f7b8e1864dac26",
      "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
      "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
      "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
      "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
      "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
      "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
    ).map(colors);

    var PiYG = ramp$1(scheme$o);

    var scheme$n = new Array(3).concat(
      "998ec3f7f7f7f1a340",
      "5e3c99b2abd2fdb863e66101",
      "5e3c99b2abd2f7f7f7fdb863e66101",
      "542788998ec3d8daebfee0b6f1a340b35806",
      "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
      "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
      "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
      "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
      "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
    ).map(colors);

    var PuOr = ramp$1(scheme$n);

    var scheme$m = new Array(3).concat(
      "ef8a62f7f7f767a9cf",
      "ca0020f4a58292c5de0571b0",
      "ca0020f4a582f7f7f792c5de0571b0",
      "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
      "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
      "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
      "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
      "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
      "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
    ).map(colors);

    var RdBu = ramp$1(scheme$m);

    var scheme$l = new Array(3).concat(
      "ef8a62ffffff999999",
      "ca0020f4a582bababa404040",
      "ca0020f4a582ffffffbababa404040",
      "b2182bef8a62fddbc7e0e0e09999994d4d4d",
      "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
      "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
      "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
      "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
      "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
    ).map(colors);

    var RdGy = ramp$1(scheme$l);

    var scheme$k = new Array(3).concat(
      "fc8d59ffffbf91bfdb",
      "d7191cfdae61abd9e92c7bb6",
      "d7191cfdae61ffffbfabd9e92c7bb6",
      "d73027fc8d59fee090e0f3f891bfdb4575b4",
      "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
      "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
      "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
      "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
      "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
    ).map(colors);

    var RdYlBu = ramp$1(scheme$k);

    var scheme$j = new Array(3).concat(
      "fc8d59ffffbf91cf60",
      "d7191cfdae61a6d96a1a9641",
      "d7191cfdae61ffffbfa6d96a1a9641",
      "d73027fc8d59fee08bd9ef8b91cf601a9850",
      "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
      "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
      "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
      "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
      "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
    ).map(colors);

    var RdYlGn = ramp$1(scheme$j);

    var scheme$i = new Array(3).concat(
      "fc8d59ffffbf99d594",
      "d7191cfdae61abdda42b83ba",
      "d7191cfdae61ffffbfabdda42b83ba",
      "d53e4ffc8d59fee08be6f59899d5943288bd",
      "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
      "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
      "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
      "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
      "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
    ).map(colors);

    var Spectral = ramp$1(scheme$i);

    var scheme$h = new Array(3).concat(
      "e5f5f999d8c92ca25f",
      "edf8fbb2e2e266c2a4238b45",
      "edf8fbb2e2e266c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
    ).map(colors);

    var BuGn = ramp$1(scheme$h);

    var scheme$g = new Array(3).concat(
      "e0ecf49ebcda8856a7",
      "edf8fbb3cde38c96c688419d",
      "edf8fbb3cde38c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
    ).map(colors);

    var BuPu = ramp$1(scheme$g);

    var scheme$f = new Array(3).concat(
      "e0f3dba8ddb543a2ca",
      "f0f9e8bae4bc7bccc42b8cbe",
      "f0f9e8bae4bc7bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
    ).map(colors);

    var GnBu = ramp$1(scheme$f);

    var scheme$e = new Array(3).concat(
      "fee8c8fdbb84e34a33",
      "fef0d9fdcc8afc8d59d7301f",
      "fef0d9fdcc8afc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
    ).map(colors);

    var OrRd = ramp$1(scheme$e);

    var scheme$d = new Array(3).concat(
      "ece2f0a6bddb1c9099",
      "f6eff7bdc9e167a9cf02818a",
      "f6eff7bdc9e167a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
    ).map(colors);

    var PuBuGn = ramp$1(scheme$d);

    var scheme$c = new Array(3).concat(
      "ece7f2a6bddb2b8cbe",
      "f1eef6bdc9e174a9cf0570b0",
      "f1eef6bdc9e174a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
    ).map(colors);

    var PuBu = ramp$1(scheme$c);

    var scheme$b = new Array(3).concat(
      "e7e1efc994c7dd1c77",
      "f1eef6d7b5d8df65b0ce1256",
      "f1eef6d7b5d8df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
    ).map(colors);

    var PuRd = ramp$1(scheme$b);

    var scheme$a = new Array(3).concat(
      "fde0ddfa9fb5c51b8a",
      "feebe2fbb4b9f768a1ae017e",
      "feebe2fbb4b9f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
    ).map(colors);

    var RdPu = ramp$1(scheme$a);

    var scheme$9 = new Array(3).concat(
      "edf8b17fcdbb2c7fb8",
      "ffffcca1dab441b6c4225ea8",
      "ffffcca1dab441b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
    ).map(colors);

    var YlGnBu = ramp$1(scheme$9);

    var scheme$8 = new Array(3).concat(
      "f7fcb9addd8e31a354",
      "ffffccc2e69978c679238443",
      "ffffccc2e69978c67931a354006837",
      "ffffccd9f0a3addd8e78c67931a354006837",
      "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
    ).map(colors);

    var YlGn = ramp$1(scheme$8);

    var scheme$7 = new Array(3).concat(
      "fff7bcfec44fd95f0e",
      "ffffd4fed98efe9929cc4c02",
      "ffffd4fed98efe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
    ).map(colors);

    var YlOrBr = ramp$1(scheme$7);

    var scheme$6 = new Array(3).concat(
      "ffeda0feb24cf03b20",
      "ffffb2fecc5cfd8d3ce31a1c",
      "ffffb2fecc5cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
    ).map(colors);

    var YlOrRd = ramp$1(scheme$6);

    var scheme$5 = new Array(3).concat(
      "deebf79ecae13182bd",
      "eff3ffbdd7e76baed62171b5",
      "eff3ffbdd7e76baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
    ).map(colors);

    var Blues = ramp$1(scheme$5);

    var scheme$4 = new Array(3).concat(
      "e5f5e0a1d99b31a354",
      "edf8e9bae4b374c476238b45",
      "edf8e9bae4b374c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
    ).map(colors);

    var Greens = ramp$1(scheme$4);

    var scheme$3 = new Array(3).concat(
      "f0f0f0bdbdbd636363",
      "f7f7f7cccccc969696525252",
      "f7f7f7cccccc969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
    ).map(colors);

    var Greys = ramp$1(scheme$3);

    var scheme$2 = new Array(3).concat(
      "efedf5bcbddc756bb1",
      "f2f0f7cbc9e29e9ac86a51a3",
      "f2f0f7cbc9e29e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
    ).map(colors);

    var Purples = ramp$1(scheme$2);

    var scheme$1 = new Array(3).concat(
      "fee0d2fc9272de2d26",
      "fee5d9fcae91fb6a4acb181d",
      "fee5d9fcae91fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
    ).map(colors);

    var Reds = ramp$1(scheme$1);

    var scheme = new Array(3).concat(
      "fee6cefdae6be6550d",
      "feeddefdbe85fd8d3cd94701",
      "feeddefdbe85fd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
    ).map(colors);

    var Oranges = ramp$1(scheme);

    function cividis(t) {
      t = Math.max(0, Math.min(1, t));
      return "rgb("
          + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))
          + ")";
    }

    var cubehelix = cubehelixLong(cubehelix$3(300, 0.5, 0.0), cubehelix$3(-240, 0.5, 1.0));

    var warm = cubehelixLong(cubehelix$3(-100, 0.75, 0.35), cubehelix$3(80, 1.50, 0.8));

    var cool = cubehelixLong(cubehelix$3(260, 0.75, 0.35), cubehelix$3(80, 1.50, 0.8));

    var c$2 = cubehelix$3();

    function rainbow(t) {
      if (t < 0 || t > 1) t -= Math.floor(t);
      var ts = Math.abs(t - 0.5);
      c$2.h = 360 * t - 100;
      c$2.s = 1.5 - 1.5 * ts;
      c$2.l = 0.8 - 0.9 * ts;
      return c$2 + "";
    }

    var c$1 = rgb(),
        pi_1_3 = Math.PI / 3,
        pi_2_3 = Math.PI * 2 / 3;

    function sinebow(t) {
      var x;
      t = (0.5 - t) * Math.PI;
      c$1.r = 255 * (x = Math.sin(t)) * x;
      c$1.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
      c$1.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
      return c$1 + "";
    }

    function turbo(t) {
      t = Math.max(0, Math.min(1, t));
      return "rgb("
          + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))
          + ")";
    }

    function ramp(range) {
      var n = range.length;
      return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
      };
    }

    var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

    var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

    var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

    var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

    function constant$1(x) {
      return function constant() {
        return x;
      };
    }

    const abs = Math.abs;
    const atan2 = Math.atan2;
    const cos = Math.cos;
    const max = Math.max;
    const min = Math.min;
    const sin = Math.sin;
    const sqrt = Math.sqrt;

    const epsilon = 1e-12;
    const pi = Math.PI;
    const halfPi = pi / 2;
    const tau = 2 * pi;

    function acos(x) {
      return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
    }

    function asin(x) {
      return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
    }

    function withPath(shape) {
      let digits = 3;

      shape.digits = function(_) {
        if (!arguments.length) return digits;
        if (_ == null) {
          digits = null;
        } else {
          const d = Math.floor(_);
          if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
          digits = d;
        }
        return shape;
      };

      return () => new Path$1(digits);
    }

    function arcInnerRadius(d) {
      return d.innerRadius;
    }

    function arcOuterRadius(d) {
      return d.outerRadius;
    }

    function arcStartAngle(d) {
      return d.startAngle;
    }

    function arcEndAngle(d) {
      return d.endAngle;
    }

    function arcPadAngle(d) {
      return d && d.padAngle; // Note: optional!
    }

    function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
      var x10 = x1 - x0, y10 = y1 - y0,
          x32 = x3 - x2, y32 = y3 - y2,
          t = y32 * x10 - x32 * y10;
      if (t * t < epsilon) return;
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
      return [x0 + t * x10, y0 + t * y10];
    }

    // Compute perpendicular offset line of length rc.
    // http://mathworld.wolfram.com/Circle-LineIntersection.html
    function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
      var x01 = x0 - x1,
          y01 = y0 - y1,
          lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
          ox = lo * y01,
          oy = -lo * x01,
          x11 = x0 + ox,
          y11 = y0 + oy,
          x10 = x1 + ox,
          y10 = y1 + oy,
          x00 = (x11 + x10) / 2,
          y00 = (y11 + y10) / 2,
          dx = x10 - x11,
          dy = y10 - y11,
          d2 = dx * dx + dy * dy,
          r = r1 - rc,
          D = x11 * y10 - x10 * y11,
          d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
          cx0 = (D * dy - dx * d) / d2,
          cy0 = (-D * dx - dy * d) / d2,
          cx1 = (D * dy + dx * d) / d2,
          cy1 = (-D * dx + dy * d) / d2,
          dx0 = cx0 - x00,
          dy0 = cy0 - y00,
          dx1 = cx1 - x00,
          dy1 = cy1 - y00;

      // Pick the closer of the two intersection points.
      // TODO Is there a faster way to determine which intersection to use?
      if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

      return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
      };
    }

    function arc() {
      var innerRadius = arcInnerRadius,
          outerRadius = arcOuterRadius,
          cornerRadius = constant$1(0),
          padRadius = null,
          startAngle = arcStartAngle,
          endAngle = arcEndAngle,
          padAngle = arcPadAngle,
          context = null,
          path = withPath(arc);

      function arc() {
        var buffer,
            r,
            r0 = +innerRadius.apply(this, arguments),
            r1 = +outerRadius.apply(this, arguments),
            a0 = startAngle.apply(this, arguments) - halfPi,
            a1 = endAngle.apply(this, arguments) - halfPi,
            da = abs(a1 - a0),
            cw = a1 > a0;

        if (!context) context = buffer = path();

        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;

        // Is it a point?
        if (!(r1 > epsilon)) context.moveTo(0, 0);

        // Or is it a circle or annulus?
        else if (da > tau - epsilon) {
          context.moveTo(r1 * cos(a0), r1 * sin(a0));
          context.arc(0, 0, r1, a0, a1, !cw);
          if (r0 > epsilon) {
            context.moveTo(r0 * cos(a1), r0 * sin(a1));
            context.arc(0, 0, r0, a1, a0, cw);
          }
        }

        // Or is it a circular or annular sector?
        else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
              rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1;

          // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
          if (rp > epsilon) {
            var p0 = asin(rp / r0 * sin(ap)),
                p1 = asin(rp / r1 * sin(ap));
            if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
            else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
            else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * cos(a01),
              y01 = r1 * sin(a01),
              x10 = r0 * cos(a10),
              y10 = r0 * sin(a10);

          // Apply rounded corners?
          if (rc > epsilon) {
            var x11 = r1 * cos(a11),
                y11 = r1 * sin(a11),
                x00 = r0 * cos(a00),
                y00 = r0 * sin(a00),
                oc;

            // Restrict the corner radius according to the sector angle. If this
            // intersection fails, it’s probably because the arc is too small, so
            // disable the corner radius entirely.
            if (da < pi) {
              if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {
                var ax = x01 - oc[0],
                    ay = y01 - oc[1],
                    bx = x11 - oc[0],
                    by = y11 - oc[1],
                    kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                    lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                rc0 = min(rc, (r0 - lc) / (kc - 1));
                rc1 = min(rc, (r1 - lc) / (kc + 1));
              } else {
                rc0 = rc1 = 0;
              }
            }
          }

          // Is the sector collapsed to a line?
          if (!(da1 > epsilon)) context.moveTo(x01, y01);

          // Does the sector’s outer ring have rounded corners?
          else if (rc1 > epsilon) {
            t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
            t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

            context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
              context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the outer ring just a circular arc?
          else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

          // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?
          if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

          // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > epsilon) {
            t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
            t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

            context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
              context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the inner ring just a circular arc?
          else context.arc(0, 0, r0, a10, a00, cw);
        }

        context.closePath();

        if (buffer) return context = null, buffer + "" || null;
      }

      arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
            a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
        return [cos(a) * r, sin(a) * r];
      };

      arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : innerRadius;
      };

      arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : outerRadius;
      };

      arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : cornerRadius;
      };

      arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), arc) : padRadius;
      };

      arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : startAngle;
      };

      arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : endAngle;
      };

      arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : padAngle;
      };

      arc.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), arc) : context;
      };

      return arc;
    }

    var slice = Array.prototype.slice;

    function array(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function Linear(context) {
      this._context = context;
    }

    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // falls through
          default: this._context.lineTo(x, y); break;
        }
      }
    };

    function curveLinear(context) {
      return new Linear(context);
    }

    function x(p) {
      return p[0];
    }

    function y(p) {
      return p[1];
    }

    function line(x$1, y$1) {
      var defined = constant$1(true),
          context = null,
          curve = curveLinear,
          output = null,
          path = withPath(line);

      x$1 = typeof x$1 === "function" ? x$1 : (x$1 === undefined) ? x : constant$1(x$1);
      y$1 = typeof y$1 === "function" ? y$1 : (y$1 === undefined) ? y : constant$1(y$1);

      function line(data) {
        var i,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer;

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) output.lineStart();
            else output.lineEnd();
          }
          if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      line.x = function(_) {
        return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$1(+_), line) : x$1;
      };

      line.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$1(+_), line) : y$1;
      };

      line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), line) : defined;
      };

      line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
      };

      line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
      };

      return line;
    }

    function area(x0, y0, y1) {
      var x1 = null,
          defined = constant$1(true),
          context = null,
          curve = curveLinear,
          output = null,
          path = withPath(area);

      x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? x : constant$1(+x0);
      y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant$1(0) : constant$1(+y0);
      y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? y : constant$1(+y1);

      function area(data) {
        var i,
            j,
            k,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer,
            x0z = new Array(n),
            y0z = new Array(n);

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
              j = i;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k = i - 1; k >= j; --k) {
                output.point(x0z[k], y0z[k]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
            output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
          }
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      function arealine() {
        return line().defined(defined).curve(curve).context(context);
      }

      area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), x1 = null, area) : x0;
      };

      area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), area) : x0;
      };

      area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : x1;
      };

      area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), y1 = null, area) : y0;
      };

      area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), area) : y0;
      };

      area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : y1;
      };

      area.lineX0 =
      area.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };

      area.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };

      area.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };

      area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), area) : defined;
      };

      area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
      };

      area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
      };

      return area;
    }

    function descending$1(a, b) {
      return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }

    function identity$1(d) {
      return d;
    }

    function pie() {
      var value = identity$1,
          sortValues = descending$1,
          sort = null,
          startAngle = constant$1(0),
          endAngle = constant$1(tau),
          padAngle = constant$1(0);

      function pie(data) {
        var i,
            n = (data = array(data)).length,
            j,
            k,
            sum = 0,
            index = new Array(n),
            arcs = new Array(n),
            a0 = +startAngle.apply(this, arguments),
            da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
            a1,
            p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
            pa = p * (da < 0 ? -1 : 1),
            v;

        for (i = 0; i < n; ++i) {
          if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
            sum += v;
          }
        }

        // Optionally sort the arcs by previously-computed values or by data.
        if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
        else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

        // Compute the arcs! They are stored in the original data's order.
        for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
          j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
            data: data[j],
            index: i,
            value: v,
            startAngle: a0,
            endAngle: a1,
            padAngle: p
          };
        }

        return arcs;
      }

      pie.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), pie) : value;
      };

      pie.sortValues = function(_) {
        return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
      };

      pie.sort = function(_) {
        return arguments.length ? (sort = _, sortValues = null, pie) : sort;
      };

      pie.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : startAngle;
      };

      pie.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : endAngle;
      };

      pie.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : padAngle;
      };

      return pie;
    }

    var curveRadialLinear = curveRadial(curveLinear);

    function Radial(curve) {
      this._curve = curve;
    }

    Radial.prototype = {
      areaStart: function() {
        this._curve.areaStart();
      },
      areaEnd: function() {
        this._curve.areaEnd();
      },
      lineStart: function() {
        this._curve.lineStart();
      },
      lineEnd: function() {
        this._curve.lineEnd();
      },
      point: function(a, r) {
        this._curve.point(r * Math.sin(a), r * -Math.cos(a));
      }
    };

    function curveRadial(curve) {

      function radial(context) {
        return new Radial(curve(context));
      }

      radial._curve = curve;

      return radial;
    }

    function lineRadial(l) {
      var c = l.curve;

      l.angle = l.x, delete l.x;
      l.radius = l.y, delete l.y;

      l.curve = function(_) {
        return arguments.length ? c(curveRadial(_)) : c()._curve;
      };

      return l;
    }

    function lineRadial$1() {
      return lineRadial(line().curve(curveRadialLinear));
    }

    function areaRadial() {
      var a = area().curve(curveRadialLinear),
          c = a.curve,
          x0 = a.lineX0,
          x1 = a.lineX1,
          y0 = a.lineY0,
          y1 = a.lineY1;

      a.angle = a.x, delete a.x;
      a.startAngle = a.x0, delete a.x0;
      a.endAngle = a.x1, delete a.x1;
      a.radius = a.y, delete a.y;
      a.innerRadius = a.y0, delete a.y0;
      a.outerRadius = a.y1, delete a.y1;
      a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
      a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
      a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
      a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

      a.curve = function(_) {
        return arguments.length ? c(curveRadial(_)) : c()._curve;
      };

      return a;
    }

    function pointRadial(x, y) {
      return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
    }

    class Bump {
      constructor(context, x) {
        this._context = context;
        this._x = x;
      }
      areaStart() {
        this._line = 0;
      }
      areaEnd() {
        this._line = NaN;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      }
      point(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: {
            this._point = 1;
            if (this._line) this._context.lineTo(x, y);
            else this._context.moveTo(x, y);
            break;
          }
          case 1: this._point = 2; // falls through
          default: {
            if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);
            else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
            break;
          }
        }
        this._x0 = x, this._y0 = y;
      }
    }

    class BumpRadial {
      constructor(context) {
        this._context = context;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {}
      point(x, y) {
        x = +x, y = +y;
        if (this._point === 0) {
          this._point = 1;
        } else {
          const p0 = pointRadial(this._x0, this._y0);
          const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);
          const p2 = pointRadial(x, this._y0);
          const p3 = pointRadial(x, y);
          this._context.moveTo(...p0);
          this._context.bezierCurveTo(...p1, ...p2, ...p3);
        }
        this._x0 = x, this._y0 = y;
      }
    }

    function bumpX(context) {
      return new Bump(context, true);
    }

    function bumpY(context) {
      return new Bump(context, false);
    }

    function bumpRadial(context) {
      return new BumpRadial(context);
    }

    function linkSource(d) {
      return d.source;
    }

    function linkTarget(d) {
      return d.target;
    }

    function link(curve) {
      let source = linkSource,
          target = linkTarget,
          x$1 = x,
          y$1 = y,
          context = null,
          output = null,
          path = withPath(link);

      function link() {
        let buffer;
        const argv = slice.call(arguments);
        const s = source.apply(this, argv);
        const t = target.apply(this, argv);
        if (context == null) output = curve(buffer = path());
        output.lineStart();
        argv[0] = s, output.point(+x$1.apply(this, argv), +y$1.apply(this, argv));
        argv[0] = t, output.point(+x$1.apply(this, argv), +y$1.apply(this, argv));
        output.lineEnd();
        if (buffer) return output = null, buffer + "" || null;
      }

      link.source = function(_) {
        return arguments.length ? (source = _, link) : source;
      };

      link.target = function(_) {
        return arguments.length ? (target = _, link) : target;
      };

      link.x = function(_) {
        return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$1(+_), link) : x$1;
      };

      link.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$1(+_), link) : y$1;
      };

      link.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link) : context;
      };

      return link;
    }

    function linkHorizontal() {
      return link(bumpX);
    }

    function linkVertical() {
      return link(bumpY);
    }

    function linkRadial() {
      const l = link(bumpRadial);
      l.angle = l.x, delete l.x;
      l.radius = l.y, delete l.y;
      return l;
    }

    const sqrt3$2 = sqrt(3);

    var asterisk = {
      draw(context, size) {
        const r = sqrt(size + min(size / 28, 0.75)) * 0.59436;
        const t = r / 2;
        const u = t * sqrt3$2;
        context.moveTo(0, r);
        context.lineTo(0, -r);
        context.moveTo(-u, -t);
        context.lineTo(u, t);
        context.moveTo(-u, t);
        context.lineTo(u, -t);
      }
    };

    var circle = {
      draw(context, size) {
        const r = sqrt(size / pi);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau);
      }
    };

    var cross = {
      draw(context, size) {
        const r = sqrt(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
      }
    };

    const tan30 = sqrt(1 / 3);
    const tan30_2 = tan30 * 2;

    var diamond = {
      draw(context, size) {
        const y = sqrt(size / tan30_2);
        const x = y * tan30;
        context.moveTo(0, -y);
        context.lineTo(x, 0);
        context.lineTo(0, y);
        context.lineTo(-x, 0);
        context.closePath();
      }
    };

    var diamond2 = {
      draw(context, size) {
        const r = sqrt(size) * 0.62625;
        context.moveTo(0, -r);
        context.lineTo(r, 0);
        context.lineTo(0, r);
        context.lineTo(-r, 0);
        context.closePath();
      }
    };

    var plus = {
      draw(context, size) {
        const r = sqrt(size - min(size / 7, 2)) * 0.87559;
        context.moveTo(-r, 0);
        context.lineTo(r, 0);
        context.moveTo(0, r);
        context.lineTo(0, -r);
      }
    };

    var square = {
      draw(context, size) {
        const w = sqrt(size);
        const x = -w / 2;
        context.rect(x, x, w, w);
      }
    };

    var square2 = {
      draw(context, size) {
        const r = sqrt(size) * 0.4431;
        context.moveTo(r, r);
        context.lineTo(r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, r);
        context.closePath();
      }
    };

    const ka = 0.89081309152928522810;
    const kr = sin(pi / 10) / sin(7 * pi / 10);
    const kx = sin(tau / 10) * kr;
    const ky = -cos(tau / 10) * kr;

    var star = {
      draw(context, size) {
        const r = sqrt(size * ka);
        const x = kx * r;
        const y = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for (let i = 1; i < 5; ++i) {
          const a = tau * i / 5;
          const c = cos(a);
          const s = sin(a);
          context.lineTo(s * r, -c * r);
          context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
      }
    };

    const sqrt3$1 = sqrt(3);

    var triangle = {
      draw(context, size) {
        const y = -sqrt(size / (sqrt3$1 * 3));
        context.moveTo(0, y * 2);
        context.lineTo(-sqrt3$1 * y, -y);
        context.lineTo(sqrt3$1 * y, -y);
        context.closePath();
      }
    };

    const sqrt3 = sqrt(3);

    var triangle2 = {
      draw(context, size) {
        const s = sqrt(size) * 0.6824;
        const t = s  / 2;
        const u = (s * sqrt3) / 2; // cos(Math.PI / 6)
        context.moveTo(0, -s);
        context.lineTo(u, t);
        context.lineTo(-u, t);
        context.closePath();
      }
    };

    const c = -0.5;
    const s = sqrt(3) / 2;
    const k = 1 / sqrt(12);
    const a = (k / 2 + 1) * 3;

    var wye = {
      draw(context, size) {
        const r = sqrt(size / a);
        const x0 = r / 2, y0 = r * k;
        const x1 = x0, y1 = r * k + r;
        const x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
      }
    };

    var times = {
      draw(context, size) {
        const r = sqrt(size - min(size / 6, 1.7)) * 0.6189;
        context.moveTo(-r, -r);
        context.lineTo(r, r);
        context.moveTo(-r, r);
        context.lineTo(r, -r);
      }
    };

    // These symbols are designed to be filled.
    const symbolsFill = [
      circle,
      cross,
      diamond,
      square,
      star,
      triangle,
      wye
    ];

    // These symbols are designed to be stroked (with a width of 1.5px and round caps).
    const symbolsStroke = [
      circle,
      plus,
      times,
      triangle2,
      asterisk,
      square2,
      diamond2
    ];

    function Symbol$1(type, size) {
      let context = null,
          path = withPath(symbol);

      type = typeof type === "function" ? type : constant$1(type || circle);
      size = typeof size === "function" ? size : constant$1(size === undefined ? 64 : +size);

      function symbol() {
        let buffer;
        if (!context) context = buffer = path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
      }

      symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : constant$1(_), symbol) : type;
      };

      symbol.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : constant$1(+_), symbol) : size;
      };

      symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
      };

      return symbol;
    }

    function noop() {}

    function point$3(that, x, y) {
      that._context.bezierCurveTo(
        (2 * that._x0 + that._x1) / 3,
        (2 * that._y0 + that._y1) / 3,
        (that._x0 + 2 * that._x1) / 3,
        (that._y0 + 2 * that._y1) / 3,
        (that._x0 + 4 * that._x1 + x) / 6,
        (that._y0 + 4 * that._y1 + y) / 6
      );
    }

    function Basis(context) {
      this._context = context;
    }

    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3: point$3(this, this._x1, this._y1); // falls through
          case 2: this._context.lineTo(this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through
          default: point$3(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function basis(context) {
      return new Basis(context);
    }

    function BasisClosed(context) {
      this._context = context;
    }

    BasisClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
          case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
          case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
          default: point$3(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function basisClosed(context) {
      return new BasisClosed(context);
    }

    function BasisOpen(context) {
      this._context = context;
    }

    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
          case 3: this._point = 4; // falls through
          default: point$3(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function basisOpen(context) {
      return new BasisOpen(context);
    }

    function Bundle(context, beta) {
      this._basis = new Basis(context);
      this._beta = beta;
    }

    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x = this._x,
            y = this._y,
            j = x.length - 1;

        if (j > 0) {
          var x0 = x[0],
              y0 = y[0],
              dx = x[j] - x0,
              dy = y[j] - y0,
              i = -1,
              t;

          while (++i <= j) {
            t = i / j;
            this._basis.point(
              this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
              this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
            );
          }
        }

        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
      }
    };

    var bundle = (function custom(beta) {

      function bundle(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
      }

      bundle.beta = function(beta) {
        return custom(+beta);
      };

      return bundle;
    })(0.85);

    function point$2(that, x, y) {
      that._context.bezierCurveTo(
        that._x1 + that._k * (that._x2 - that._x0),
        that._y1 + that._k * (that._y2 - that._y0),
        that._x2 + that._k * (that._x1 - x),
        that._y2 + that._k * (that._y1 - y),
        that._x2,
        that._y2
      );
    }

    function Cardinal(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: point$2(this, this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
          case 2: this._point = 3; // falls through
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var cardinal = (function custom(tension) {

      function cardinal(context) {
        return new Cardinal(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function CardinalClosed(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    CardinalClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
          case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
          case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var cardinalClosed = (function custom(tension) {

      function cardinal(context) {
        return new CardinalClosed(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function CardinalOpen(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
          case 3: this._point = 4; // falls through
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var cardinalOpen = (function custom(tension) {

      function cardinal(context) {
        return new CardinalOpen(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function point$1(that, x, y) {
      var x1 = that._x1,
          y1 = that._y1,
          x2 = that._x2,
          y2 = that._y2;

      if (that._l01_a > epsilon) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
            n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
      }

      if (that._l23_a > epsilon) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
            m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
      }

      that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
    }

    function CatmullRom(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: this.point(this._x2, this._y2); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; // falls through
          default: point$1(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var catmullRom = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function CatmullRomClosed(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRomClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
          case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
          case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
          default: point$1(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var catmullRomClosed = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function CatmullRomOpen(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
          case 3: this._point = 4; // falls through
          default: point$1(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var catmullRomOpen = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function LinearClosed(context) {
      this._context = context;
    }

    LinearClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point) this._context.closePath();
      },
      point: function(x, y) {
        x = +x, y = +y;
        if (this._point) this._context.lineTo(x, y);
        else this._point = 1, this._context.moveTo(x, y);
      }
    };

    function linearClosed(context) {
      return new LinearClosed(context);
    }

    function sign(x) {
      return x < 0 ? -1 : 1;
    }

    // Calculate the slopes of the tangents (Hermite-type interpolation) based on
    // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
    // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
    // NOV(II), P. 443, 1990.
    function slope3(that, x2, y2) {
      var h0 = that._x1 - that._x0,
          h1 = x2 - that._x1,
          s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
          s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
          p = (s0 * h1 + s1 * h0) / (h0 + h1);
      return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }

    // Calculate a one-sided slope.
    function slope2(that, t) {
      var h = that._x1 - that._x0;
      return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }

    // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
    // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
    // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
    function point(that, t0, t1) {
      var x0 = that._x0,
          y0 = that._y0,
          x1 = that._x1,
          y1 = that._y1,
          dx = (x1 - x0) / 3;
      that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
    }

    function MonotoneX(context) {
      this._context = context;
    }

    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 =
        this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x1, this._y1); break;
          case 3: point(this, this._t0, slope2(this, this._t0)); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        var t1 = NaN;

        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
          default: point(this, this._t0, t1 = slope3(this, x, y)); break;
        }

        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
      }
    };

    function MonotoneY(context) {
      this._context = new ReflectContext(context);
    }

    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
      MonotoneX.prototype.point.call(this, y, x);
    };

    function ReflectContext(context) {
      this._context = context;
    }

    ReflectContext.prototype = {
      moveTo: function(x, y) { this._context.moveTo(y, x); },
      closePath: function() { this._context.closePath(); },
      lineTo: function(x, y) { this._context.lineTo(y, x); },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
    };

    function monotoneX(context) {
      return new MonotoneX(context);
    }

    function monotoneY(context) {
      return new MonotoneY(context);
    }

    function Natural(context) {
      this._context = context;
    }

    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x = this._x,
            y = this._y,
            n = x.length;

        if (n) {
          this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
          if (n === 2) {
            this._context.lineTo(x[1], y[1]);
          } else {
            var px = controlPoints(x),
                py = controlPoints(y);
            for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
            }
          }
        }

        if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
      }
    };

    // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
    function controlPoints(x) {
      var i,
          n = x.length - 1,
          m,
          a = new Array(n),
          b = new Array(n),
          r = new Array(n);
      a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
      for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
      a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
      for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
      a[n - 1] = r[n - 1] / b[n - 1];
      for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
      b[n - 1] = (x[n] + a[n - 1]) / 2;
      for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
      return [a, b];
    }

    function natural(context) {
      return new Natural(context);
    }

    function Step(context, t) {
      this._context = context;
      this._t = t;
    }

    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // falls through
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y);
              this._context.lineTo(x, y);
            } else {
              var x1 = this._x * (1 - this._t) + x * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y);
            }
            break;
          }
        }
        this._x = x, this._y = y;
      }
    };

    function step(context) {
      return new Step(context, 0.5);
    }

    function stepBefore(context) {
      return new Step(context, 0);
    }

    function stepAfter(context) {
      return new Step(context, 1);
    }

    function none$1(series, order) {
      if (!((n = series.length) > 1)) return;
      for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
        s0 = s1, s1 = series[order[i]];
        for (j = 0; j < m; ++j) {
          s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
        }
      }
    }

    function none(series) {
      var n = series.length, o = new Array(n);
      while (--n >= 0) o[n] = n;
      return o;
    }

    function stackValue(d, key) {
      return d[key];
    }

    function stackSeries(key) {
      const series = [];
      series.key = key;
      return series;
    }

    function stack() {
      var keys = constant$1([]),
          order = none,
          offset = none$1,
          value = stackValue;

      function stack(data) {
        var sz = Array.from(keys.apply(this, arguments), stackSeries),
            i, n = sz.length, j = -1,
            oz;

        for (const d of data) {
          for (i = 0, ++j; i < n; ++i) {
            (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
          }
        }

        for (i = 0, oz = array(order(sz)); i < n; ++i) {
          sz[oz[i]].index = i;
        }

        offset(sz, oz);
        return sz;
      }

      stack.keys = function(_) {
        return arguments.length ? (keys = typeof _ === "function" ? _ : constant$1(Array.from(_)), stack) : keys;
      };

      stack.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), stack) : value;
      };

      stack.order = function(_) {
        return arguments.length ? (order = _ == null ? none : typeof _ === "function" ? _ : constant$1(Array.from(_)), stack) : order;
      };

      stack.offset = function(_) {
        return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
      };

      return stack;
    }

    function expand(series, order) {
      if (!((n = series.length) > 0)) return;
      for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
        for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
        if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
      }
      none$1(series, order);
    }

    function diverging(series, order) {
      if (!((n = series.length) > 0)) return;
      for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
        for (yp = yn = 0, i = 0; i < n; ++i) {
          if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
            d[0] = yp, d[1] = yp += dy;
          } else if (dy < 0) {
            d[1] = yn, d[0] = yn += dy;
          } else {
            d[0] = 0, d[1] = dy;
          }
        }
      }
    }

    function silhouette(series, order) {
      if (!((n = series.length) > 0)) return;
      for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
        for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
        s0[j][1] += s0[j][0] = -y / 2;
      }
      none$1(series, order);
    }

    function wiggle(series, order) {
      if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
      for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
        for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
          var si = series[order[i]],
              sij0 = si[j][1] || 0,
              sij1 = si[j - 1][1] || 0,
              s3 = (sij0 - sij1) / 2;
          for (var k = 0; k < i; ++k) {
            var sk = series[order[k]],
                skj0 = sk[j][1] || 0,
                skj1 = sk[j - 1][1] || 0;
            s3 += skj0 - skj1;
          }
          s1 += sij0, s2 += s3 * sij0;
        }
        s0[j - 1][1] += s0[j - 1][0] = y;
        if (s1) y -= s2 / s1;
      }
      s0[j - 1][1] += s0[j - 1][0] = y;
      none$1(series, order);
    }

    function appearance(series) {
      var peaks = series.map(peak);
      return none(series).sort(function(a, b) { return peaks[a] - peaks[b]; });
    }

    function peak(series) {
      var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
      while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
      return j;
    }

    function ascending(series) {
      var sums = series.map(sum);
      return none(series).sort(function(a, b) { return sums[a] - sums[b]; });
    }

    function sum(series) {
      var s = 0, i = -1, n = series.length, v;
      while (++i < n) if (v = +series[i][1]) s += v;
      return s;
    }

    function descending(series) {
      return ascending(series).reverse();
    }

    function insideOut(series) {
      var n = series.length,
          i,
          j,
          sums = series.map(sum),
          order = appearance(series),
          top = 0,
          bottom = 0,
          tops = [],
          bottoms = [];

      for (i = 0; i < n; ++i) {
        j = order[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }

      return bottoms.reverse().concat(tops);
    }

    function reverse(series) {
      return none(series).reverse();
    }

    var constant = x => () => x;

    function ZoomEvent(type, {
      sourceEvent,
      target,
      transform,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        transform: {value: transform, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    function Transform(k, x, y) {
      this.k = k;
      this.x = x;
      this.y = y;
    }

    Transform.prototype = {
      constructor: Transform,
      scale: function(k) {
        return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
      },
      translate: function(x, y) {
        return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
      },
      apply: function(point) {
        return [point[0] * this.k + this.x, point[1] * this.k + this.y];
      },
      applyX: function(x) {
        return x * this.k + this.x;
      },
      applyY: function(y) {
        return y * this.k + this.y;
      },
      invert: function(location) {
        return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
      },
      invertX: function(x) {
        return (x - this.x) / this.k;
      },
      invertY: function(y) {
        return (y - this.y) / this.k;
      },
      rescaleX: function(x) {
        return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
      },
      rescaleY: function(y) {
        return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
      },
      toString: function() {
        return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
      }
    };

    var identity = new Transform(1, 0, 0);

    transform.prototype = Transform.prototype;

    function transform(node) {
      while (!node.__zoom) if (!(node = node.parentNode)) return identity;
      return node.__zoom;
    }

    function nopropagation(event) {
      event.stopImmediatePropagation();
    }

    function noevent(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    // Ignore right-click, since that should open the context menu.
    // except for pinch-to-zoom, which is sent as a wheel+ctrlKey event
    function defaultFilter(event) {
      return (!event.ctrlKey || event.type === 'wheel') && !event.button;
    }

    function defaultExtent() {
      var e = this;
      if (e instanceof SVGElement) {
        e = e.ownerSVGElement || e;
        if (e.hasAttribute("viewBox")) {
          e = e.viewBox.baseVal;
          return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
        }
        return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
      }
      return [[0, 0], [e.clientWidth, e.clientHeight]];
    }

    function defaultTransform() {
      return this.__zoom || identity;
    }

    function defaultWheelDelta(event) {
      return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);
    }

    function defaultTouchable() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    function defaultConstrain(transform, extent, translateExtent) {
      var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
          dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
          dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
          dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
      return transform.translate(
        dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
        dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
      );
    }

    function zoom() {
      var filter = defaultFilter,
          extent = defaultExtent,
          constrain = defaultConstrain,
          wheelDelta = defaultWheelDelta,
          touchable = defaultTouchable,
          scaleExtent = [0, Infinity],
          translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
          duration = 250,
          interpolate = interpolateZoom,
          listeners = dispatch("start", "zoom", "end"),
          touchstarting,
          touchfirst,
          touchending,
          touchDelay = 500,
          wheelDelay = 150,
          clickDistance2 = 0,
          tapDistance = 10;

      function zoom(selection) {
        selection
            .property("__zoom", defaultTransform)
            .on("wheel.zoom", wheeled, {passive: false})
            .on("mousedown.zoom", mousedowned)
            .on("dblclick.zoom", dblclicked)
          .filter(touchable)
            .on("touchstart.zoom", touchstarted)
            .on("touchmove.zoom", touchmoved)
            .on("touchend.zoom touchcancel.zoom", touchended)
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      zoom.transform = function(collection, transform, point, event) {
        var selection = collection.selection ? collection.selection() : collection;
        selection.property("__zoom", defaultTransform);
        if (collection !== selection) {
          schedule(collection, transform, point, event);
        } else {
          selection.interrupt().each(function() {
            gesture(this, arguments)
              .event(event)
              .start()
              .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
              .end();
          });
        }
      };

      zoom.scaleBy = function(selection, k, p, event) {
        zoom.scaleTo(selection, function() {
          var k0 = this.__zoom.k,
              k1 = typeof k === "function" ? k.apply(this, arguments) : k;
          return k0 * k1;
        }, p, event);
      };

      zoom.scaleTo = function(selection, k, p, event) {
        zoom.transform(selection, function() {
          var e = extent.apply(this, arguments),
              t0 = this.__zoom,
              p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
              p1 = t0.invert(p0),
              k1 = typeof k === "function" ? k.apply(this, arguments) : k;
          return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
        }, p, event);
      };

      zoom.translateBy = function(selection, x, y, event) {
        zoom.transform(selection, function() {
          return constrain(this.__zoom.translate(
            typeof x === "function" ? x.apply(this, arguments) : x,
            typeof y === "function" ? y.apply(this, arguments) : y
          ), extent.apply(this, arguments), translateExtent);
        }, null, event);
      };

      zoom.translateTo = function(selection, x, y, p, event) {
        zoom.transform(selection, function() {
          var e = extent.apply(this, arguments),
              t = this.__zoom,
              p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
          return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(
            typeof x === "function" ? -x.apply(this, arguments) : -x,
            typeof y === "function" ? -y.apply(this, arguments) : -y
          ), e, translateExtent);
        }, p, event);
      };

      function scale(transform, k) {
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
        return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
      }

      function translate(transform, p0, p1) {
        var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
        return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
      }

      function centroid(extent) {
        return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
      }

      function schedule(transition, transform, point, event) {
        transition
            .on("start.zoom", function() { gesture(this, arguments).event(event).start(); })
            .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).event(event).end(); })
            .tween("zoom", function() {
              var that = this,
                  args = arguments,
                  g = gesture(that, args).event(event),
                  e = extent.apply(that, args),
                  p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
                  w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
                  a = that.__zoom,
                  b = typeof transform === "function" ? transform.apply(that, args) : transform,
                  i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
              return function(t) {
                if (t === 1) t = b; // Avoid rounding error on end.
                else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
                g.zoom(null, t);
              };
            });
      }

      function gesture(that, args, clean) {
        return (!clean && that.__zooming) || new Gesture(that, args);
      }

      function Gesture(that, args) {
        this.that = that;
        this.args = args;
        this.active = 0;
        this.sourceEvent = null;
        this.extent = extent.apply(that, args);
        this.taps = 0;
      }

      Gesture.prototype = {
        event: function(event) {
          if (event) this.sourceEvent = event;
          return this;
        },
        start: function() {
          if (++this.active === 1) {
            this.that.__zooming = this;
            this.emit("start");
          }
          return this;
        },
        zoom: function(key, transform) {
          if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
          if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
          if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
          this.that.__zoom = transform;
          this.emit("zoom");
          return this;
        },
        end: function() {
          if (--this.active === 0) {
            delete this.that.__zooming;
            this.emit("end");
          }
          return this;
        },
        emit: function(type) {
          var d = select(this.that).datum();
          listeners.call(
            type,
            this.that,
            new ZoomEvent(type, {
              sourceEvent: this.sourceEvent,
              target: zoom,
              type,
              transform: this.that.__zoom,
              dispatch: listeners
            }),
            d
          );
        }
      };

      function wheeled(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var g = gesture(this, args).event(event),
            t = this.__zoom,
            k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
            p = pointer(event);

        // If the mouse is in the same location as before, reuse it.
        // If there were recent wheel events, reset the wheel idle timeout.
        if (g.wheel) {
          if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
            g.mouse[1] = t.invert(g.mouse[0] = p);
          }
          clearTimeout(g.wheel);
        }

        // If this wheel event won’t trigger a transform change, ignore it.
        else if (t.k === k) return;

        // Otherwise, capture the mouse point and location at the start.
        else {
          g.mouse = [p, t.invert(p)];
          interrupt(this);
          g.start();
        }

        noevent(event);
        g.wheel = setTimeout(wheelidled, wheelDelay);
        g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

        function wheelidled() {
          g.wheel = null;
          g.end();
        }
      }

      function mousedowned(event, ...args) {
        if (touchending || !filter.apply(this, arguments)) return;
        var currentTarget = event.currentTarget,
            g = gesture(this, args, true).event(event),
            v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
            p = pointer(event, currentTarget),
            x0 = event.clientX,
            y0 = event.clientY;

        dragDisable(event.view);
        nopropagation(event);
        g.mouse = [p, this.__zoom.invert(p)];
        interrupt(this);
        g.start();

        function mousemoved(event) {
          noevent(event);
          if (!g.moved) {
            var dx = event.clientX - x0, dy = event.clientY - y0;
            g.moved = dx * dx + dy * dy > clickDistance2;
          }
          g.event(event)
           .zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));
        }

        function mouseupped(event) {
          v.on("mousemove.zoom mouseup.zoom", null);
          yesdrag(event.view, g.moved);
          noevent(event);
          g.event(event).end();
        }
      }

      function dblclicked(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var t0 = this.__zoom,
            p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),
            p1 = t0.invert(p0),
            k1 = t0.k * (event.shiftKey ? 0.5 : 2),
            t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);

        noevent(event);
        if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event);
        else select(this).call(zoom.transform, t1, p0, event);
      }

      function touchstarted(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var touches = event.touches,
            n = touches.length,
            g = gesture(this, args, event.changedTouches.length === n).event(event),
            started, i, t, p;

        nopropagation(event);
        for (i = 0; i < n; ++i) {
          t = touches[i], p = pointer(t, this);
          p = [p, this.__zoom.invert(p), t.identifier];
          if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
          else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
        }

        if (touchstarting) touchstarting = clearTimeout(touchstarting);

        if (started) {
          if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
          interrupt(this);
          g.start();
        }
      }

      function touchmoved(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event),
            touches = event.changedTouches,
            n = touches.length, i, t, p, l;

        noevent(event);
        for (i = 0; i < n; ++i) {
          t = touches[i], p = pointer(t, this);
          if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
          else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
        }
        t = g.that.__zoom;
        if (g.touch1) {
          var p0 = g.touch0[0], l0 = g.touch0[1],
              p1 = g.touch1[0], l1 = g.touch1[1],
              dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
              dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
          t = scale(t, Math.sqrt(dp / dl));
          p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
          l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
        }
        else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
        else return;

        g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
      }

      function touchended(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event),
            touches = event.changedTouches,
            n = touches.length, i, t;

        nopropagation(event);
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, touchDelay);
        for (i = 0; i < n; ++i) {
          t = touches[i];
          if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
          else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
        }
        if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
        if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
        else {
          g.end();
          // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
          if (g.taps === 2) {
            t = pointer(t, this);
            if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
              var p = select(this).on("dblclick.zoom");
              if (p) p.apply(this, arguments);
            }
          }
        }
      }

      zoom.wheelDelta = function(_) {
        return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;
      };

      zoom.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;
      };

      zoom.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;
      };

      zoom.extent = function(_) {
        return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
      };

      zoom.scaleExtent = function(_) {
        return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
      };

      zoom.translateExtent = function(_) {
        return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
      };

      zoom.constrain = function(_) {
        return arguments.length ? (constrain = _, zoom) : constrain;
      };

      zoom.duration = function(_) {
        return arguments.length ? (duration = +_, zoom) : duration;
      };

      zoom.interpolate = function(_) {
        return arguments.length ? (interpolate = _, zoom) : interpolate;
      };

      zoom.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? zoom : value;
      };

      zoom.clickDistance = function(_) {
        return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
      };

      zoom.tapDistance = function(_) {
        return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
      };

      return zoom;
    }

    var d3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Adder: Adder,
        Delaunay: Delaunay,
        FormatSpecifier: FormatSpecifier,
        InternMap: InternMap,
        InternSet: InternSet,
        Node: Node$1,
        Path: Path$1,
        Voronoi: Voronoi,
        ZoomTransform: Transform,
        active: active,
        arc: arc,
        area: area,
        areaRadial: areaRadial,
        ascending: ascending$3,
        autoType: autoType,
        axisBottom: axisBottom,
        axisLeft: axisLeft,
        axisRight: axisRight,
        axisTop: axisTop,
        bin: bin,
        bisect: bisect,
        bisectCenter: bisectCenter,
        bisectLeft: bisectLeft,
        bisectRight: bisectRight,
        bisector: bisector,
        blob: blob,
        blur: blur,
        blur2: blur2,
        blurImage: blurImage,
        brush: brush,
        brushSelection: brushSelection,
        brushX: brushX,
        brushY: brushY,
        buffer: buffer,
        chord: chord,
        chordDirected: chordDirected,
        chordTranspose: chordTranspose,
        cluster: cluster,
        color: color,
        contourDensity: density,
        contours: Contours,
        count: count$1,
        create: create$1,
        creator: creator,
        cross: cross$2,
        csv: csv,
        csvFormat: csvFormat,
        csvFormatBody: csvFormatBody,
        csvFormatRow: csvFormatRow,
        csvFormatRows: csvFormatRows,
        csvFormatValue: csvFormatValue,
        csvParse: csvParse,
        csvParseRows: csvParseRows,
        cubehelix: cubehelix$3,
        cumsum: cumsum,
        curveBasis: basis,
        curveBasisClosed: basisClosed,
        curveBasisOpen: basisOpen,
        curveBumpX: bumpX,
        curveBumpY: bumpY,
        curveBundle: bundle,
        curveCardinal: cardinal,
        curveCardinalClosed: cardinalClosed,
        curveCardinalOpen: cardinalOpen,
        curveCatmullRom: catmullRom,
        curveCatmullRomClosed: catmullRomClosed,
        curveCatmullRomOpen: catmullRomOpen,
        curveLinear: curveLinear,
        curveLinearClosed: linearClosed,
        curveMonotoneX: monotoneX,
        curveMonotoneY: monotoneY,
        curveNatural: natural,
        curveStep: step,
        curveStepAfter: stepAfter,
        curveStepBefore: stepBefore,
        descending: descending$2,
        deviation: deviation,
        difference: difference,
        disjoint: disjoint,
        dispatch: dispatch,
        drag: drag,
        dragDisable: dragDisable,
        dragEnable: yesdrag,
        dsv: dsv,
        dsvFormat: dsvFormat,
        easeBack: backInOut,
        easeBackIn: backIn,
        easeBackInOut: backInOut,
        easeBackOut: backOut,
        easeBounce: bounceOut,
        easeBounceIn: bounceIn,
        easeBounceInOut: bounceInOut,
        easeBounceOut: bounceOut,
        easeCircle: circleInOut,
        easeCircleIn: circleIn,
        easeCircleInOut: circleInOut,
        easeCircleOut: circleOut,
        easeCubic: cubicInOut,
        easeCubicIn: cubicIn,
        easeCubicInOut: cubicInOut,
        easeCubicOut: cubicOut,
        easeElastic: elasticOut,
        easeElasticIn: elasticIn,
        easeElasticInOut: elasticInOut,
        easeElasticOut: elasticOut,
        easeExp: expInOut,
        easeExpIn: expIn,
        easeExpInOut: expInOut,
        easeExpOut: expOut,
        easeLinear: linear$1,
        easePoly: polyInOut,
        easePolyIn: polyIn,
        easePolyInOut: polyInOut,
        easePolyOut: polyOut,
        easeQuad: quadInOut,
        easeQuadIn: quadIn,
        easeQuadInOut: quadInOut,
        easeQuadOut: quadOut,
        easeSin: sinInOut,
        easeSinIn: sinIn,
        easeSinInOut: sinInOut,
        easeSinOut: sinOut,
        every: every,
        extent: extent$1,
        fcumsum: fcumsum,
        filter: filter$1,
        flatGroup: flatGroup,
        flatRollup: flatRollup,
        forceCenter: center,
        forceCollide: collide,
        forceLink: link$2,
        forceManyBody: manyBody,
        forceRadial: radial$1,
        forceSimulation: simulation,
        forceX: x$1,
        forceY: y$1,
        get format () { return format; },
        formatDefaultLocale: defaultLocale$1,
        formatLocale: formatLocale$1,
        get formatPrefix () { return formatPrefix; },
        formatSpecifier: formatSpecifier,
        fsum: fsum,
        geoAlbers: albers,
        geoAlbersUsa: albersUsa,
        geoArea: area$2,
        geoAzimuthalEqualArea: azimuthalEqualArea,
        geoAzimuthalEqualAreaRaw: azimuthalEqualAreaRaw,
        geoAzimuthalEquidistant: azimuthalEquidistant,
        geoAzimuthalEquidistantRaw: azimuthalEquidistantRaw,
        geoBounds: bounds,
        geoCentroid: centroid$1,
        geoCircle: circle$1,
        geoClipAntimeridian: clipAntimeridian,
        geoClipCircle: clipCircle,
        geoClipExtent: extent,
        geoClipRectangle: clipRectangle,
        geoConicConformal: conicConformal,
        geoConicConformalRaw: conicConformalRaw,
        geoConicEqualArea: conicEqualArea,
        geoConicEqualAreaRaw: conicEqualAreaRaw,
        geoConicEquidistant: conicEquidistant,
        geoConicEquidistantRaw: conicEquidistantRaw,
        geoContains: contains$1,
        geoDistance: distance,
        geoEqualEarth: equalEarth,
        geoEqualEarthRaw: equalEarthRaw,
        geoEquirectangular: equirectangular,
        geoEquirectangularRaw: equirectangularRaw,
        geoGnomonic: gnomonic,
        geoGnomonicRaw: gnomonicRaw,
        geoGraticule: graticule,
        geoGraticule10: graticule10,
        geoIdentity: identity$4,
        geoInterpolate: interpolate,
        geoLength: length$1,
        geoMercator: mercator,
        geoMercatorRaw: mercatorRaw,
        geoNaturalEarth1: naturalEarth1,
        geoNaturalEarth1Raw: naturalEarth1Raw,
        geoOrthographic: orthographic,
        geoOrthographicRaw: orthographicRaw,
        geoPath: index$2,
        geoProjection: projection,
        geoProjectionMutator: projectionMutator,
        geoRotation: rotation,
        geoStereographic: stereographic,
        geoStereographicRaw: stereographicRaw,
        geoStream: geoStream,
        geoTransform: transform$1,
        geoTransverseMercator: transverseMercator,
        geoTransverseMercatorRaw: transverseMercatorRaw,
        gray: gray,
        greatest: greatest,
        greatestIndex: greatestIndex,
        group: group,
        groupSort: groupSort,
        groups: groups,
        hcl: hcl$2,
        hierarchy: hierarchy,
        histogram: bin,
        hsl: hsl$2,
        html: html,
        image: image,
        index: index$4,
        indexes: indexes,
        interpolate: interpolate$2,
        interpolateArray: array$3,
        interpolateBasis: basis$2,
        interpolateBasisClosed: basisClosed$1,
        interpolateBlues: Blues,
        interpolateBrBG: BrBG,
        interpolateBuGn: BuGn,
        interpolateBuPu: BuPu,
        interpolateCividis: cividis,
        interpolateCool: cool,
        interpolateCubehelix: cubehelix$2,
        interpolateCubehelixDefault: cubehelix,
        interpolateCubehelixLong: cubehelixLong,
        interpolateDate: date$1,
        interpolateDiscrete: discrete,
        interpolateGnBu: GnBu,
        interpolateGreens: Greens,
        interpolateGreys: Greys,
        interpolateHcl: hcl$1,
        interpolateHclLong: hclLong,
        interpolateHsl: hsl$1,
        interpolateHslLong: hslLong,
        interpolateHue: hue,
        interpolateInferno: inferno,
        interpolateLab: lab,
        interpolateMagma: magma,
        interpolateNumber: interpolateNumber,
        interpolateNumberArray: numberArray,
        interpolateObject: object$1,
        interpolateOrRd: OrRd,
        interpolateOranges: Oranges,
        interpolatePRGn: PRGn,
        interpolatePiYG: PiYG,
        interpolatePlasma: plasma,
        interpolatePuBu: PuBu,
        interpolatePuBuGn: PuBuGn,
        interpolatePuOr: PuOr,
        interpolatePuRd: PuRd,
        interpolatePurples: Purples,
        interpolateRainbow: rainbow,
        interpolateRdBu: RdBu,
        interpolateRdGy: RdGy,
        interpolateRdPu: RdPu,
        interpolateRdYlBu: RdYlBu,
        interpolateRdYlGn: RdYlGn,
        interpolateReds: Reds,
        interpolateRgb: interpolateRgb,
        interpolateRgbBasis: rgbBasis,
        interpolateRgbBasisClosed: rgbBasisClosed,
        interpolateRound: interpolateRound,
        interpolateSinebow: sinebow,
        interpolateSpectral: Spectral,
        interpolateString: interpolateString,
        interpolateTransformCss: interpolateTransformCss,
        interpolateTransformSvg: interpolateTransformSvg,
        interpolateTurbo: turbo,
        interpolateViridis: viridis,
        interpolateWarm: warm,
        interpolateYlGn: YlGn,
        interpolateYlGnBu: YlGnBu,
        interpolateYlOrBr: YlOrBr,
        interpolateYlOrRd: YlOrRd,
        interpolateZoom: interpolateZoom,
        interrupt: interrupt,
        intersection: intersection,
        interval: interval,
        isoFormat: formatIso$1,
        isoParse: parseIso$1,
        json: json,
        lab: lab$1,
        lch: lch,
        least: least,
        leastIndex: leastIndex,
        line: line,
        lineRadial: lineRadial$1,
        link: link,
        linkHorizontal: linkHorizontal,
        linkRadial: linkRadial,
        linkVertical: linkVertical,
        local: local$1,
        map: map$1,
        matcher: matcher,
        max: max$3,
        maxIndex: maxIndex,
        mean: mean,
        median: median,
        medianIndex: medianIndex,
        merge: merge,
        min: min$2,
        minIndex: minIndex,
        mode: mode,
        namespace: namespace,
        namespaces: namespaces,
        nice: nice$1,
        now: now,
        pack: index$1,
        packEnclose: enclose,
        packSiblings: siblings,
        pairs: pairs,
        partition: partition,
        path: path,
        pathRound: pathRound,
        permute: permute,
        pie: pie,
        piecewise: piecewise,
        pointRadial: pointRadial,
        pointer: pointer,
        pointers: pointers,
        polygonArea: area$1,
        polygonCentroid: centroid,
        polygonContains: contains,
        polygonHull: hull,
        polygonLength: length,
        precisionFixed: precisionFixed,
        precisionPrefix: precisionPrefix,
        precisionRound: precisionRound,
        quadtree: quadtree,
        quantile: quantile$1,
        quantileIndex: quantileIndex,
        quantileSorted: quantileSorted,
        quantize: quantize$1,
        quickselect: quickselect,
        radialArea: areaRadial,
        radialLine: lineRadial$1,
        randomBates: bates,
        randomBernoulli: bernoulli,
        randomBeta: beta,
        randomBinomial: binomial,
        randomCauchy: cauchy,
        randomExponential: exponential,
        randomGamma: gamma,
        randomGeometric: geometric,
        randomInt: int,
        randomIrwinHall: irwinHall,
        randomLcg: lcg,
        randomLogNormal: logNormal,
        randomLogistic: logistic,
        randomNormal: normal,
        randomPareto: pareto,
        randomPoisson: poisson,
        randomUniform: uniform,
        randomWeibull: weibull,
        range: range$2,
        rank: rank,
        reduce: reduce,
        reverse: reverse$1,
        rgb: rgb,
        ribbon: ribbon$1,
        ribbonArrow: ribbonArrow,
        rollup: rollup,
        rollups: rollups,
        scaleBand: band,
        scaleDiverging: diverging$1,
        scaleDivergingLog: divergingLog,
        scaleDivergingPow: divergingPow,
        scaleDivergingSqrt: divergingSqrt,
        scaleDivergingSymlog: divergingSymlog,
        scaleIdentity: identity$2,
        scaleImplicit: implicit,
        scaleLinear: linear,
        scaleLog: log,
        scaleOrdinal: ordinal,
        scalePoint: point$4,
        scalePow: pow,
        scaleQuantile: quantile,
        scaleQuantize: quantize,
        scaleRadial: radial,
        scaleSequential: sequential,
        scaleSequentialLog: sequentialLog,
        scaleSequentialPow: sequentialPow,
        scaleSequentialQuantile: sequentialQuantile,
        scaleSequentialSqrt: sequentialSqrt,
        scaleSequentialSymlog: sequentialSymlog,
        scaleSqrt: sqrt$1,
        scaleSymlog: symlog,
        scaleThreshold: threshold,
        scaleTime: time,
        scaleUtc: utcTime,
        scan: scan,
        schemeAccent: Accent,
        schemeBlues: scheme$5,
        schemeBrBG: scheme$q,
        schemeBuGn: scheme$h,
        schemeBuPu: scheme$g,
        schemeCategory10: category10,
        schemeDark2: Dark2,
        schemeGnBu: scheme$f,
        schemeGreens: scheme$4,
        schemeGreys: scheme$3,
        schemeObservable10: observable10,
        schemeOrRd: scheme$e,
        schemeOranges: scheme,
        schemePRGn: scheme$p,
        schemePaired: Paired,
        schemePastel1: Pastel1,
        schemePastel2: Pastel2,
        schemePiYG: scheme$o,
        schemePuBu: scheme$c,
        schemePuBuGn: scheme$d,
        schemePuOr: scheme$n,
        schemePuRd: scheme$b,
        schemePurples: scheme$2,
        schemeRdBu: scheme$m,
        schemeRdGy: scheme$l,
        schemeRdPu: scheme$a,
        schemeRdYlBu: scheme$k,
        schemeRdYlGn: scheme$j,
        schemeReds: scheme$1,
        schemeSet1: Set1,
        schemeSet2: Set2,
        schemeSet3: Set3,
        schemeSpectral: scheme$i,
        schemeTableau10: Tableau10,
        schemeYlGn: scheme$8,
        schemeYlGnBu: scheme$9,
        schemeYlOrBr: scheme$7,
        schemeYlOrRd: scheme$6,
        select: select,
        selectAll: selectAll,
        selection: selection,
        selector: selector,
        selectorAll: selectorAll,
        shuffle: shuffle$1,
        shuffler: shuffler,
        some: some,
        sort: sort,
        stack: stack,
        stackOffsetDiverging: diverging,
        stackOffsetExpand: expand,
        stackOffsetNone: none$1,
        stackOffsetSilhouette: silhouette,
        stackOffsetWiggle: wiggle,
        stackOrderAppearance: appearance,
        stackOrderAscending: ascending,
        stackOrderDescending: descending,
        stackOrderInsideOut: insideOut,
        stackOrderNone: none,
        stackOrderReverse: reverse,
        stratify: stratify,
        style: styleValue,
        subset: subset,
        sum: sum$2,
        superset: superset,
        svg: svg,
        symbol: Symbol$1,
        symbolAsterisk: asterisk,
        symbolCircle: circle,
        symbolCross: cross,
        symbolDiamond: diamond,
        symbolDiamond2: diamond2,
        symbolPlus: plus,
        symbolSquare: square,
        symbolSquare2: square2,
        symbolStar: star,
        symbolTimes: times,
        symbolTriangle: triangle,
        symbolTriangle2: triangle2,
        symbolWye: wye,
        symbolX: times,
        symbols: symbolsFill,
        symbolsFill: symbolsFill,
        symbolsStroke: symbolsStroke,
        text: text,
        thresholdFreedmanDiaconis: thresholdFreedmanDiaconis,
        thresholdScott: thresholdScott,
        thresholdSturges: thresholdSturges,
        tickFormat: tickFormat,
        tickIncrement: tickIncrement,
        tickStep: tickStep,
        ticks: ticks,
        timeDay: timeDay,
        timeDays: timeDays,
        get timeFormat () { return timeFormat; },
        timeFormatDefaultLocale: defaultLocale,
        timeFormatLocale: formatLocale,
        timeFriday: timeFriday,
        timeFridays: timeFridays,
        timeHour: timeHour,
        timeHours: timeHours,
        timeInterval: timeInterval,
        timeMillisecond: millisecond,
        timeMilliseconds: milliseconds,
        timeMinute: timeMinute,
        timeMinutes: timeMinutes,
        timeMonday: timeMonday,
        timeMondays: timeMondays,
        timeMonth: timeMonth,
        timeMonths: timeMonths,
        get timeParse () { return timeParse; },
        timeSaturday: timeSaturday,
        timeSaturdays: timeSaturdays,
        timeSecond: second,
        timeSeconds: seconds,
        timeSunday: timeSunday,
        timeSundays: timeSundays,
        timeThursday: timeThursday,
        timeThursdays: timeThursdays,
        timeTickInterval: timeTickInterval,
        timeTicks: timeTicks,
        timeTuesday: timeTuesday,
        timeTuesdays: timeTuesdays,
        timeWednesday: timeWednesday,
        timeWednesdays: timeWednesdays,
        timeWeek: timeSunday,
        timeWeeks: timeSundays,
        timeYear: timeYear,
        timeYears: timeYears,
        timeout: timeout,
        timer: timer,
        timerFlush: timerFlush,
        transition: transition,
        transpose: transpose,
        tree: tree,
        treemap: index,
        treemapBinary: binary,
        treemapDice: treemapDice,
        treemapResquarify: resquarify,
        treemapSlice: treemapSlice,
        treemapSliceDice: sliceDice,
        treemapSquarify: squarify,
        tsv: tsv,
        tsvFormat: tsvFormat,
        tsvFormatBody: tsvFormatBody,
        tsvFormatRow: tsvFormatRow,
        tsvFormatRows: tsvFormatRows,
        tsvFormatValue: tsvFormatValue,
        tsvParse: tsvParse,
        tsvParseRows: tsvParseRows,
        union: union,
        unixDay: unixDay,
        unixDays: unixDays,
        utcDay: utcDay,
        utcDays: utcDays,
        get utcFormat () { return utcFormat; },
        utcFriday: utcFriday,
        utcFridays: utcFridays,
        utcHour: utcHour,
        utcHours: utcHours,
        utcMillisecond: millisecond,
        utcMilliseconds: milliseconds,
        utcMinute: utcMinute,
        utcMinutes: utcMinutes,
        utcMonday: utcMonday,
        utcMondays: utcMondays,
        utcMonth: utcMonth,
        utcMonths: utcMonths,
        get utcParse () { return utcParse; },
        utcSaturday: utcSaturday,
        utcSaturdays: utcSaturdays,
        utcSecond: second,
        utcSeconds: seconds,
        utcSunday: utcSunday,
        utcSundays: utcSundays,
        utcThursday: utcThursday,
        utcThursdays: utcThursdays,
        utcTickInterval: utcTickInterval,
        utcTicks: utcTicks,
        utcTuesday: utcTuesday,
        utcTuesdays: utcTuesdays,
        utcWednesday: utcWednesday,
        utcWednesdays: utcWednesdays,
        utcWeek: utcSunday,
        utcWeeks: utcSundays,
        utcYear: utcYear,
        utcYears: utcYears,
        variance: variance,
        window: defaultView,
        xml: xml,
        zip: zip,
        zoom: zoom,
        zoomIdentity: identity,
        zoomTransform: transform
    });

    /* src\Pages\Page_2.svelte generated by Svelte v3.59.2 */

    const { console: console_1$2 } = globals;
    const file$3 = "src\\Pages\\Page_2.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (174:8) {#each inputData as row}
    function create_each_block_1$2(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*row*/ ctx[17].Year + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*row*/ ctx[17].Oil + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*row*/ ctx[17].Liquid + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*row*/ ctx[17].Waters + "";
    	let t6;
    	let t7;
    	let td4;
    	let t8_value = /*row*/ ctx[17].WaterCut + "";
    	let t8;
    	let t9;
    	let td5;
    	let t10_value = /*row*/ ctx[17].ActivePoint + "";
    	let t10;
    	let t11;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text$1(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text$1(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text$1(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text$1(t6_value);
    			t7 = space();
    			td4 = element("td");
    			t8 = text$1(t8_value);
    			t9 = space();
    			td5 = element("td");
    			t10 = text$1(t10_value);
    			t11 = space();
    			attr_dev(td0, "class", "svelte-64afup");
    			add_location(td0, file$3, 175, 12, 4869);
    			attr_dev(td1, "class", "svelte-64afup");
    			add_location(td1, file$3, 176, 12, 4902);
    			attr_dev(td2, "class", "svelte-64afup");
    			add_location(td2, file$3, 177, 12, 4934);
    			attr_dev(td3, "class", "svelte-64afup");
    			add_location(td3, file$3, 178, 12, 4969);
    			attr_dev(td4, "class", "svelte-64afup");
    			add_location(td4, file$3, 179, 12, 5004);
    			attr_dev(td5, "class", "svelte-64afup");
    			add_location(td5, file$3, 180, 12, 5041);
    			add_location(tr, file$3, 174, 10, 4851);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, t8);
    			append_dev(tr, t9);
    			append_dev(tr, td5);
    			append_dev(td5, t10);
    			append_dev(tr, t11);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*inputData*/ 1 && t0_value !== (t0_value = /*row*/ ctx[17].Year + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*inputData*/ 1 && t2_value !== (t2_value = /*row*/ ctx[17].Oil + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*inputData*/ 1 && t4_value !== (t4_value = /*row*/ ctx[17].Liquid + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*inputData*/ 1 && t6_value !== (t6_value = /*row*/ ctx[17].Waters + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*inputData*/ 1 && t8_value !== (t8_value = /*row*/ ctx[17].WaterCut + "")) set_data_dev(t8, t8_value);
    			if (dirty & /*inputData*/ 1 && t10_value !== (t10_value = /*row*/ ctx[17].ActivePoint + "")) set_data_dev(t10, t10_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(174:8) {#each inputData as row}",
    		ctx
    	});

    	return block;
    }

    // (192:2) {#if showCalculatedTable}
    function create_if_block_2$2(ctx) {
    	let section;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;
    	let t7;
    	let th4;
    	let t9;
    	let tbody;
    	let each_value = /*calculatedData*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Year";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "X (Water)";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Y (Liquid / Oil)";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "XY";
    			t7 = space();
    			th4 = element("th");
    			th4.textContent = "X²";
    			t9 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(th0, "class", "svelte-64afup");
    			add_location(th0, file$3, 196, 12, 5351);
    			attr_dev(th1, "class", "svelte-64afup");
    			add_location(th1, file$3, 197, 12, 5378);
    			attr_dev(th2, "class", "svelte-64afup");
    			add_location(th2, file$3, 198, 12, 5410);
    			attr_dev(th3, "class", "svelte-64afup");
    			add_location(th3, file$3, 199, 12, 5449);
    			attr_dev(th4, "class", "svelte-64afup");
    			add_location(th4, file$3, 200, 12, 5474);
    			add_location(tr, file$3, 195, 10, 5333);
    			add_location(thead, file$3, 194, 8, 5314);
    			add_location(tbody, file$3, 203, 8, 5530);
    			attr_dev(table, "border", "1");
    			attr_dev(table, "class", "svelte-64afup");
    			add_location(table, file$3, 193, 6, 5286);
    			add_location(section, file$3, 192, 4, 5269);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    			append_dev(tr, t7);
    			append_dev(tr, th4);
    			append_dev(table, t9);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tbody, null);
    				}
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*calculatedData*/ 4) {
    				each_value = /*calculatedData*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(192:2) {#if showCalculatedTable}",
    		ctx
    	});

    	return block;
    }

    // (205:10) {#each calculatedData as row}
    function create_each_block$2(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*row*/ ctx[17].Year + "";
    	let t0;
    	let t1;
    	let td1;

    	let t2_value = (typeof /*row*/ ctx[17].X === 'number'
    	? /*row*/ ctx[17].X.toFixed(2)
    	: 'Invalid') + "";

    	let t2;
    	let t3;
    	let td2;

    	let t4_value = (typeof /*row*/ ctx[17].Y === 'number'
    	? /*row*/ ctx[17].Y.toFixed(2)
    	: 'Invalid') + "";

    	let t4;
    	let t5;
    	let td3;

    	let t6_value = (typeof /*row*/ ctx[17].XY === 'number'
    	? /*row*/ ctx[17].XY.toFixed(2)
    	: 'Invalid') + "";

    	let t6;
    	let t7;
    	let td4;

    	let t8_value = (typeof /*row*/ ctx[17].X2 === 'number'
    	? /*row*/ ctx[17].X2.toFixed(2)
    	: 'Invalid') + "";

    	let t8;
    	let t9;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text$1(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text$1(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text$1(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text$1(t6_value);
    			t7 = space();
    			td4 = element("td");
    			t8 = text$1(t8_value);
    			t9 = space();
    			attr_dev(td0, "class", "svelte-64afup");
    			add_location(td0, file$3, 206, 14, 5612);
    			attr_dev(td1, "class", "svelte-64afup");
    			add_location(td1, file$3, 207, 14, 5647);
    			attr_dev(td2, "class", "svelte-64afup");
    			add_location(td2, file$3, 208, 14, 5730);
    			attr_dev(td3, "class", "svelte-64afup");
    			add_location(td3, file$3, 209, 14, 5813);
    			attr_dev(td4, "class", "svelte-64afup");
    			add_location(td4, file$3, 210, 14, 5898);
    			add_location(tr, file$3, 205, 12, 5592);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, t8);
    			append_dev(tr, t9);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*calculatedData*/ 4 && t0_value !== (t0_value = /*row*/ ctx[17].Year + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*calculatedData*/ 4 && t2_value !== (t2_value = (typeof /*row*/ ctx[17].X === 'number'
    			? /*row*/ ctx[17].X.toFixed(2)
    			: 'Invalid') + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*calculatedData*/ 4 && t4_value !== (t4_value = (typeof /*row*/ ctx[17].Y === 'number'
    			? /*row*/ ctx[17].Y.toFixed(2)
    			: 'Invalid') + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*calculatedData*/ 4 && t6_value !== (t6_value = (typeof /*row*/ ctx[17].XY === 'number'
    			? /*row*/ ctx[17].XY.toFixed(2)
    			: 'Invalid') + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*calculatedData*/ 4 && t8_value !== (t8_value = (typeof /*row*/ ctx[17].X2 === 'number'
    			? /*row*/ ctx[17].X2.toFixed(2)
    			: 'Invalid') + "")) set_data_dev(t8, t8_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(205:10) {#each calculatedData as row}",
    		ctx
    	});

    	return block;
    }

    // (219:2) {#if showCalculatedTable}
    function create_if_block_1$2(ctx) {
    	let section;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			section = element("section");
    			button = element("button");
    			button.textContent = "Show Graph";
    			attr_dev(button, "class", "svelte-64afup");
    			add_location(button, file$3, 220, 6, 6118);
    			add_location(section, file$3, 219, 4, 6101);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*renderGraph*/ ctx[8], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$4,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(219:2) {#if showCalculatedTable}",
    		ctx
    	});

    	return block;
    }

    // (225:2) {#if showGraph}
    function create_if_block$2(ctx) {
    	let section;
    	let h2;
    	let t1;
    	let svg;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			h2.textContent = "Graph";
    			t1 = space();
    			svg = svg_element("svg");
    			add_location(h2, file$3, 226, 6, 6237);
    			attr_dev(svg, "id", "graph");
    			add_location(svg, file$3, 227, 6, 6259);
    			add_location(section, file$3, 225, 4, 6220);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(section, t1);
    			append_dev(section, svg);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(225:2) {#if showGraph}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let main;
    	let section0;
    	let input0;
    	let t0;
    	let section1;
    	let input1;
    	let input1_max_value;
    	let t1;
    	let button0;
    	let t3;
    	let section2;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t5;
    	let th1;
    	let t7;
    	let th2;
    	let t9;
    	let th3;
    	let t11;
    	let th4;
    	let t13;
    	let th5;
    	let t15;
    	let tbody;
    	let t16;
    	let section3;
    	let button1;
    	let t18;
    	let t19;
    	let t20;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*inputData*/ ctx[0];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	let if_block0 = /*showCalculatedTable*/ ctx[3] && create_if_block_2$2(ctx);
    	let if_block1 = /*showCalculatedTable*/ ctx[3] && create_if_block_1$2(ctx);
    	let if_block2 = /*showGraph*/ ctx[4] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			section0 = element("section");
    			input0 = element("input");
    			t0 = space();
    			section1 = element("section");
    			input1 = element("input");
    			t1 = space();
    			button0 = element("button");
    			button0.textContent = "Update Active Points";
    			t3 = space();
    			section2 = element("section");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Year";
    			t5 = space();
    			th1 = element("th");
    			th1.textContent = "Oil";
    			t7 = space();
    			th2 = element("th");
    			th2.textContent = "Liquid";
    			t9 = space();
    			th3 = element("th");
    			th3.textContent = "Waters";
    			t11 = space();
    			th4 = element("th");
    			th4.textContent = "Water Cut";
    			t13 = space();
    			th5 = element("th");
    			th5.textContent = "Active Point";
    			t15 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t16 = space();
    			section3 = element("section");
    			button1 = element("button");
    			button1.textContent = "Calculate";
    			t18 = space();
    			if (if_block0) if_block0.c();
    			t19 = space();
    			if (if_block1) if_block1.c();
    			t20 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(input0, "type", "file");
    			attr_dev(input0, "accept", ".xlsx");
    			add_location(input0, file$3, 151, 4, 4211);
    			add_location(section0, file$3, 150, 2, 4196);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "1");
    			attr_dev(input1, "max", input1_max_value = /*inputData*/ ctx[0].length);
    			attr_dev(input1, "placeholder", "Enter Active Points Count");
    			add_location(input1, file$3, 155, 4, 4311);
    			attr_dev(button0, "class", "svelte-64afup");
    			add_location(button0, file$3, 156, 4, 4442);
    			add_location(section1, file$3, 154, 2, 4296);
    			attr_dev(th0, "class", "svelte-64afup");
    			add_location(th0, file$3, 164, 10, 4605);
    			attr_dev(th1, "class", "svelte-64afup");
    			add_location(th1, file$3, 165, 10, 4630);
    			attr_dev(th2, "class", "svelte-64afup");
    			add_location(th2, file$3, 166, 10, 4654);
    			attr_dev(th3, "class", "svelte-64afup");
    			add_location(th3, file$3, 167, 10, 4681);
    			attr_dev(th4, "class", "svelte-64afup");
    			add_location(th4, file$3, 168, 10, 4708);
    			attr_dev(th5, "class", "svelte-64afup");
    			add_location(th5, file$3, 169, 10, 4738);
    			add_location(tr, file$3, 163, 8, 4589);
    			add_location(thead, file$3, 162, 6, 4572);
    			add_location(tbody, file$3, 172, 6, 4798);
    			attr_dev(table, "border", "1");
    			attr_dev(table, "class", "svelte-64afup");
    			add_location(table, file$3, 161, 4, 4546);
    			add_location(section2, file$3, 159, 2, 4529);
    			attr_dev(button1, "class", "svelte-64afup");
    			add_location(button1, file$3, 188, 4, 5166);
    			add_location(section3, file$3, 187, 2, 5151);
    			attr_dev(main, "class", "svelte-64afup");
    			add_location(main, file$3, 148, 0, 4184);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, section0);
    			append_dev(section0, input0);
    			append_dev(main, t0);
    			append_dev(main, section1);
    			append_dev(section1, input1);
    			set_input_value(input1, /*activePointsCount*/ ctx[1]);
    			append_dev(section1, t1);
    			append_dev(section1, button0);
    			append_dev(main, t3);
    			append_dev(main, section2);
    			append_dev(section2, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t5);
    			append_dev(tr, th1);
    			append_dev(tr, t7);
    			append_dev(tr, th2);
    			append_dev(tr, t9);
    			append_dev(tr, th3);
    			append_dev(tr, t11);
    			append_dev(tr, th4);
    			append_dev(tr, t13);
    			append_dev(tr, th5);
    			append_dev(table, t15);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tbody, null);
    				}
    			}

    			append_dev(main, t16);
    			append_dev(main, section3);
    			append_dev(section3, button1);
    			append_dev(main, t18);
    			if (if_block0) if_block0.m(main, null);
    			append_dev(main, t19);
    			if (if_block1) if_block1.m(main, null);
    			append_dev(main, t20);
    			if (if_block2) if_block2.m(main, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*handleFileUpload*/ ctx[5], false, false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
    					listen_dev(button0, "click", /*updateActivePoints*/ ctx[6], false, false, false, false),
    					listen_dev(button1, "click", /*calculateTable*/ ctx[7], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*inputData*/ 1 && input1_max_value !== (input1_max_value = /*inputData*/ ctx[0].length)) {
    				attr_dev(input1, "max", input1_max_value);
    			}

    			if (dirty & /*activePointsCount*/ 2 && to_number(input1.value) !== /*activePointsCount*/ ctx[1]) {
    				set_input_value(input1, /*activePointsCount*/ ctx[1]);
    			}

    			if (dirty & /*inputData*/ 1) {
    				each_value_1 = /*inputData*/ ctx[0];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (/*showCalculatedTable*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$2(ctx);
    					if_block0.c();
    					if_block0.m(main, t19);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*showCalculatedTable*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					if_block1.m(main, t20);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*showGraph*/ ctx[4]) {
    				if (if_block2) ; else {
    					if_block2 = create_if_block$2(ctx);
    					if_block2.c();
    					if_block2.m(main, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: noop$4,
    		o: noop$4,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Page_2', slots, []);
    	let inputData = [];
    	let activePointsCount = 11; // Default value
    	let calculatedData = [];
    	let showCalculatedTable = false;
    	let showGraph = false;
    	let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0, sumX2Squared = 0, A = 0, B = 0;

    	// Handles file upload
    	const handleFileUpload = event => {
    		const file = event.target.files[0];
    		if (!file) return;
    		const reader = new FileReader();

    		reader.onload = () => {
    			const data = new Uint8Array(reader.result);
    			const workbook = readSync(data, { type: "array" });
    			const sheetName = workbook.SheetNames[0];
    			const sheet = workbook.Sheets[sheetName];

    			$$invalidate(0, inputData = utils.sheet_to_json(sheet, {
    				header: ["Year", "Oil", "Liquid", "Waters", "WaterCut"]
    			}));

    			inputData.forEach(row => row.ActivePoint = 0);
    			console.log("Uploaded Data:", inputData);
    		};

    		reader.readAsArrayBuffer(file);
    	};

    	// Updates active points
    	const updateActivePoints = () => {
    		const startIndex = Math.max(0, inputData.length - activePointsCount);

    		inputData.forEach((row, index) => {
    			row.ActivePoint = index >= startIndex ? 1 : 0;
    		});

    		console.log("Updated Data with Active Points:", inputData);
    	};

    	// Calculates values for the second table
    	const calculateTable = () => {
    		const activeData = inputData.filter(row => row.ActivePoint === 1);
    		sumX = activeData.reduce((acc, row) => acc + (row.Waters || 0), 0);
    		sumY = activeData.reduce((acc, row) => acc + (row.Liquid && row.Oil ? row.Liquid / row.Oil : 0), 0);
    		sumXY = activeData.reduce((acc, row) => acc + (row.Waters || 0) * (row.Liquid && row.Oil ? row.Liquid / row.Oil : 0), 0);
    		sumX2 = activeData.reduce((acc, row) => acc + Math.pow(row.Waters || 0, 2), 0);
    		const n = activeData.length;
    		sumX2Squared = Math.pow(sumX, 2);

    		// Calculate A and B
    		A = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX2Squared || 1); // Prevent divide by zero

    		B = (sumY - A * sumX) / n;

    		// Prepare calculated data for table
    		$$invalidate(2, calculatedData = activeData.map(row => {
    			const X = row.Liquid;
    			const Y = row.Liquid / row.Oil;

    			return {
    				Year: row.Year,
    				X,
    				Y,
    				XY: X * Y,
    				X2: Math.pow(X, 2)
    			};
    		}));

    		$$invalidate(3, showCalculatedTable = true);
    		$$invalidate(4, showGraph = false);
    		console.log("Calculated Data:", calculatedData, { A, B });
    	};

    	// Render the graph
    	const renderGraph = () => {
    		const svgElement = document.querySelector("#graph");
    		select(svgElement).selectAll("*").remove();

    		const width = 800,
    			height = 400,
    			margin = { top: 40, right: 30, bottom: 50, left: 60 };

    		const xScale = linear().domain([0, max$3(calculatedData, d => d.X)]).range([margin.left, width - margin.right]);
    		const yScale = linear().domain([0, max$3(calculatedData, d => d.Y)]).range([height - margin.bottom, margin.top]);
    		const svg = select(svgElement).attr("width", width).attr("height", height);
    		svg.append("g").attr("transform", `translate(0,${height - margin.bottom})`).call(axisBottom(xScale));
    		svg.append("g").attr("transform", `translate(${margin.left},0)`).call(axisLeft(yScale));
    		svg.selectAll("circle").data(calculatedData).enter().append("circle").attr("cx", d => xScale(d.X)).attr("cy", d => yScale(d.Y)).attr("r", 5).style("fill", "blue");
    		svg.append("line").attr("x1", xScale(0)).attr("y1", yScale(B)).attr("x2", xScale(max$3(calculatedData, d => d.X))).attr("y2", yScale(A * max$3(calculatedData, d => d.X) + B)).style("stroke", "red").style("stroke-width", 2);
    		$$invalidate(4, showGraph = true);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<Page_2> was created with unknown prop '${key}'`);
    	});

    	function input1_input_handler() {
    		activePointsCount = to_number(this.value);
    		$$invalidate(1, activePointsCount);
    	}

    	$$self.$capture_state = () => ({
    		XLSX: XLSX$1,
    		d3,
    		inputData,
    		activePointsCount,
    		calculatedData,
    		showCalculatedTable,
    		showGraph,
    		sumX,
    		sumY,
    		sumXY,
    		sumX2,
    		sumX2Squared,
    		A,
    		B,
    		handleFileUpload,
    		updateActivePoints,
    		calculateTable,
    		renderGraph
    	});

    	$$self.$inject_state = $$props => {
    		if ('inputData' in $$props) $$invalidate(0, inputData = $$props.inputData);
    		if ('activePointsCount' in $$props) $$invalidate(1, activePointsCount = $$props.activePointsCount);
    		if ('calculatedData' in $$props) $$invalidate(2, calculatedData = $$props.calculatedData);
    		if ('showCalculatedTable' in $$props) $$invalidate(3, showCalculatedTable = $$props.showCalculatedTable);
    		if ('showGraph' in $$props) $$invalidate(4, showGraph = $$props.showGraph);
    		if ('sumX' in $$props) sumX = $$props.sumX;
    		if ('sumY' in $$props) sumY = $$props.sumY;
    		if ('sumXY' in $$props) sumXY = $$props.sumXY;
    		if ('sumX2' in $$props) sumX2 = $$props.sumX2;
    		if ('sumX2Squared' in $$props) sumX2Squared = $$props.sumX2Squared;
    		if ('A' in $$props) A = $$props.A;
    		if ('B' in $$props) B = $$props.B;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		inputData,
    		activePointsCount,
    		calculatedData,
    		showCalculatedTable,
    		showGraph,
    		handleFileUpload,
    		updateActivePoints,
    		calculateTable,
    		renderGraph,
    		input1_input_handler
    	];
    }

    class Page_2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Page_2",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src\Pages\Page_1.svelte generated by Svelte v3.59.2 */

    const { console: console_1$1 } = globals;
    const file$2 = "src\\Pages\\Page_1.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (174:8) {#each inputData as row}
    function create_each_block_1$1(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*row*/ ctx[17].Year + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*row*/ ctx[17].Oil + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*row*/ ctx[17].Liquid + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*row*/ ctx[17].Waters + "";
    	let t6;
    	let t7;
    	let td4;
    	let t8_value = /*row*/ ctx[17].WaterCut + "";
    	let t8;
    	let t9;
    	let td5;
    	let t10_value = /*row*/ ctx[17].ActivePoint + "";
    	let t10;
    	let t11;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text$1(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text$1(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text$1(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text$1(t6_value);
    			t7 = space();
    			td4 = element("td");
    			t8 = text$1(t8_value);
    			t9 = space();
    			td5 = element("td");
    			t10 = text$1(t10_value);
    			t11 = space();
    			attr_dev(td0, "class", "svelte-64afup");
    			add_location(td0, file$2, 175, 12, 4902);
    			attr_dev(td1, "class", "svelte-64afup");
    			add_location(td1, file$2, 176, 12, 4935);
    			attr_dev(td2, "class", "svelte-64afup");
    			add_location(td2, file$2, 177, 12, 4967);
    			attr_dev(td3, "class", "svelte-64afup");
    			add_location(td3, file$2, 178, 12, 5002);
    			attr_dev(td4, "class", "svelte-64afup");
    			add_location(td4, file$2, 179, 12, 5037);
    			attr_dev(td5, "class", "svelte-64afup");
    			add_location(td5, file$2, 180, 12, 5074);
    			add_location(tr, file$2, 174, 10, 4884);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, t8);
    			append_dev(tr, t9);
    			append_dev(tr, td5);
    			append_dev(td5, t10);
    			append_dev(tr, t11);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*inputData*/ 1 && t0_value !== (t0_value = /*row*/ ctx[17].Year + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*inputData*/ 1 && t2_value !== (t2_value = /*row*/ ctx[17].Oil + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*inputData*/ 1 && t4_value !== (t4_value = /*row*/ ctx[17].Liquid + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*inputData*/ 1 && t6_value !== (t6_value = /*row*/ ctx[17].Waters + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*inputData*/ 1 && t8_value !== (t8_value = /*row*/ ctx[17].WaterCut + "")) set_data_dev(t8, t8_value);
    			if (dirty & /*inputData*/ 1 && t10_value !== (t10_value = /*row*/ ctx[17].ActivePoint + "")) set_data_dev(t10, t10_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(174:8) {#each inputData as row}",
    		ctx
    	});

    	return block;
    }

    // (192:2) {#if showCalculatedTable}
    function create_if_block_2$1(ctx) {
    	let section;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;
    	let t7;
    	let th4;
    	let t9;
    	let tbody;
    	let each_value = /*calculatedData*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Year";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "X (Water)";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Y (Liquid / Oil)";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "XY";
    			t7 = space();
    			th4 = element("th");
    			th4.textContent = "X²";
    			t9 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(th0, "class", "svelte-64afup");
    			add_location(th0, file$2, 196, 12, 5384);
    			attr_dev(th1, "class", "svelte-64afup");
    			add_location(th1, file$2, 197, 12, 5411);
    			attr_dev(th2, "class", "svelte-64afup");
    			add_location(th2, file$2, 198, 12, 5443);
    			attr_dev(th3, "class", "svelte-64afup");
    			add_location(th3, file$2, 199, 12, 5482);
    			attr_dev(th4, "class", "svelte-64afup");
    			add_location(th4, file$2, 200, 12, 5507);
    			add_location(tr, file$2, 195, 10, 5366);
    			add_location(thead, file$2, 194, 8, 5347);
    			add_location(tbody, file$2, 203, 8, 5563);
    			attr_dev(table, "border", "1");
    			attr_dev(table, "class", "svelte-64afup");
    			add_location(table, file$2, 193, 6, 5319);
    			add_location(section, file$2, 192, 4, 5302);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    			append_dev(tr, t7);
    			append_dev(tr, th4);
    			append_dev(table, t9);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tbody, null);
    				}
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*calculatedData*/ 4) {
    				each_value = /*calculatedData*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(192:2) {#if showCalculatedTable}",
    		ctx
    	});

    	return block;
    }

    // (205:10) {#each calculatedData as row}
    function create_each_block$1(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*row*/ ctx[17].Year + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*row*/ ctx[17].X.toFixed(2) + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*row*/ ctx[17].Y.toFixed(2) + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*row*/ ctx[17].XY.toFixed(2) + "";
    	let t6;
    	let t7;
    	let td4;
    	let t8_value = /*row*/ ctx[17].X2.toFixed(2) + "";
    	let t8;
    	let t9;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text$1(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text$1(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text$1(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text$1(t6_value);
    			t7 = space();
    			td4 = element("td");
    			t8 = text$1(t8_value);
    			t9 = space();
    			attr_dev(td0, "class", "svelte-64afup");
    			add_location(td0, file$2, 206, 14, 5645);
    			attr_dev(td1, "class", "svelte-64afup");
    			add_location(td1, file$2, 207, 14, 5680);
    			attr_dev(td2, "class", "svelte-64afup");
    			add_location(td2, file$2, 208, 14, 5723);
    			attr_dev(td3, "class", "svelte-64afup");
    			add_location(td3, file$2, 209, 14, 5766);
    			attr_dev(td4, "class", "svelte-64afup");
    			add_location(td4, file$2, 210, 14, 5810);
    			add_location(tr, file$2, 205, 12, 5625);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, t8);
    			append_dev(tr, t9);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*calculatedData*/ 4 && t0_value !== (t0_value = /*row*/ ctx[17].Year + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*calculatedData*/ 4 && t2_value !== (t2_value = /*row*/ ctx[17].X.toFixed(2) + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*calculatedData*/ 4 && t4_value !== (t4_value = /*row*/ ctx[17].Y.toFixed(2) + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*calculatedData*/ 4 && t6_value !== (t6_value = /*row*/ ctx[17].XY.toFixed(2) + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*calculatedData*/ 4 && t8_value !== (t8_value = /*row*/ ctx[17].X2.toFixed(2) + "")) set_data_dev(t8, t8_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(205:10) {#each calculatedData as row}",
    		ctx
    	});

    	return block;
    }

    // (219:2) {#if showCalculatedTable}
    function create_if_block_1$1(ctx) {
    	let section;
    	let h2;
    	let t1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			h2.textContent = "Step 4: Show Graph";
    			t1 = space();
    			button = element("button");
    			button.textContent = "Show Graph";
    			add_location(h2, file$2, 220, 6, 5989);
    			attr_dev(button, "class", "svelte-64afup");
    			add_location(button, file$2, 221, 6, 6024);
    			add_location(section, file$2, 219, 4, 5972);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(section, t1);
    			append_dev(section, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*renderGraph*/ ctx[8], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$4,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(219:2) {#if showCalculatedTable}",
    		ctx
    	});

    	return block;
    }

    // (226:2) {#if showGraph}
    function create_if_block$1(ctx) {
    	let section;
    	let h2;
    	let t1;
    	let svg;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			h2.textContent = "Graph";
    			t1 = space();
    			svg = svg_element("svg");
    			add_location(h2, file$2, 227, 6, 6143);
    			attr_dev(svg, "id", "graph");
    			add_location(svg, file$2, 228, 6, 6165);
    			add_location(section, file$2, 226, 4, 6126);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(section, t1);
    			append_dev(section, svg);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(226:2) {#if showGraph}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let main;
    	let section0;
    	let input0;
    	let t0;
    	let section1;
    	let input1;
    	let input1_max_value;
    	let t1;
    	let button0;
    	let t3;
    	let section2;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t5;
    	let th1;
    	let t7;
    	let th2;
    	let t9;
    	let th3;
    	let t11;
    	let th4;
    	let t13;
    	let th5;
    	let t15;
    	let tbody;
    	let t16;
    	let section3;
    	let button1;
    	let t18;
    	let t19;
    	let t20;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*inputData*/ ctx[0];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let if_block0 = /*showCalculatedTable*/ ctx[3] && create_if_block_2$1(ctx);
    	let if_block1 = /*showCalculatedTable*/ ctx[3] && create_if_block_1$1(ctx);
    	let if_block2 = /*showGraph*/ ctx[4] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			section0 = element("section");
    			input0 = element("input");
    			t0 = space();
    			section1 = element("section");
    			input1 = element("input");
    			t1 = space();
    			button0 = element("button");
    			button0.textContent = "Update Active Points";
    			t3 = space();
    			section2 = element("section");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Year";
    			t5 = space();
    			th1 = element("th");
    			th1.textContent = "Oil";
    			t7 = space();
    			th2 = element("th");
    			th2.textContent = "Liquid";
    			t9 = space();
    			th3 = element("th");
    			th3.textContent = "Waters";
    			t11 = space();
    			th4 = element("th");
    			th4.textContent = "Water Cut";
    			t13 = space();
    			th5 = element("th");
    			th5.textContent = "Active Point";
    			t15 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t16 = space();
    			section3 = element("section");
    			button1 = element("button");
    			button1.textContent = "Calculate";
    			t18 = space();
    			if (if_block0) if_block0.c();
    			t19 = space();
    			if (if_block1) if_block1.c();
    			t20 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(input0, "type", "file");
    			attr_dev(input0, "accept", ".xlsx");
    			add_location(input0, file$2, 152, 4, 4246);
    			add_location(section0, file$2, 151, 2, 4231);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "1");
    			attr_dev(input1, "max", input1_max_value = /*inputData*/ ctx[0].length);
    			attr_dev(input1, "placeholder", "Enter Active Points Count");
    			add_location(input1, file$2, 156, 4, 4346);
    			attr_dev(button0, "class", "svelte-64afup");
    			add_location(button0, file$2, 157, 4, 4477);
    			add_location(section1, file$2, 155, 2, 4331);
    			attr_dev(th0, "class", "svelte-64afup");
    			add_location(th0, file$2, 164, 10, 4638);
    			attr_dev(th1, "class", "svelte-64afup");
    			add_location(th1, file$2, 165, 10, 4663);
    			attr_dev(th2, "class", "svelte-64afup");
    			add_location(th2, file$2, 166, 10, 4687);
    			attr_dev(th3, "class", "svelte-64afup");
    			add_location(th3, file$2, 167, 10, 4714);
    			attr_dev(th4, "class", "svelte-64afup");
    			add_location(th4, file$2, 168, 10, 4741);
    			attr_dev(th5, "class", "svelte-64afup");
    			add_location(th5, file$2, 169, 10, 4771);
    			add_location(tr, file$2, 163, 8, 4622);
    			add_location(thead, file$2, 162, 6, 4605);
    			add_location(tbody, file$2, 172, 6, 4831);
    			attr_dev(table, "border", "1");
    			attr_dev(table, "class", "svelte-64afup");
    			add_location(table, file$2, 161, 4, 4579);
    			add_location(section2, file$2, 160, 2, 4564);
    			attr_dev(button1, "class", "svelte-64afup");
    			add_location(button1, file$2, 188, 4, 5199);
    			add_location(section3, file$2, 187, 2, 5184);
    			attr_dev(main, "class", "svelte-64afup");
    			add_location(main, file$2, 149, 0, 4219);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, section0);
    			append_dev(section0, input0);
    			append_dev(main, t0);
    			append_dev(main, section1);
    			append_dev(section1, input1);
    			set_input_value(input1, /*activePointsCount*/ ctx[1]);
    			append_dev(section1, t1);
    			append_dev(section1, button0);
    			append_dev(main, t3);
    			append_dev(main, section2);
    			append_dev(section2, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t5);
    			append_dev(tr, th1);
    			append_dev(tr, t7);
    			append_dev(tr, th2);
    			append_dev(tr, t9);
    			append_dev(tr, th3);
    			append_dev(tr, t11);
    			append_dev(tr, th4);
    			append_dev(tr, t13);
    			append_dev(tr, th5);
    			append_dev(table, t15);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tbody, null);
    				}
    			}

    			append_dev(main, t16);
    			append_dev(main, section3);
    			append_dev(section3, button1);
    			append_dev(main, t18);
    			if (if_block0) if_block0.m(main, null);
    			append_dev(main, t19);
    			if (if_block1) if_block1.m(main, null);
    			append_dev(main, t20);
    			if (if_block2) if_block2.m(main, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*handleFileUpload*/ ctx[5], false, false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
    					listen_dev(button0, "click", /*updateActivePoints*/ ctx[6], false, false, false, false),
    					listen_dev(button1, "click", /*calculateTable*/ ctx[7], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*inputData*/ 1 && input1_max_value !== (input1_max_value = /*inputData*/ ctx[0].length)) {
    				attr_dev(input1, "max", input1_max_value);
    			}

    			if (dirty & /*activePointsCount*/ 2 && to_number(input1.value) !== /*activePointsCount*/ ctx[1]) {
    				set_input_value(input1, /*activePointsCount*/ ctx[1]);
    			}

    			if (dirty & /*inputData*/ 1) {
    				each_value_1 = /*inputData*/ ctx[0];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (/*showCalculatedTable*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$1(ctx);
    					if_block0.c();
    					if_block0.m(main, t19);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*showCalculatedTable*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$1(ctx);
    					if_block1.c();
    					if_block1.m(main, t20);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*showGraph*/ ctx[4]) {
    				if (if_block2) ; else {
    					if_block2 = create_if_block$1(ctx);
    					if_block2.c();
    					if_block2.m(main, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: noop$4,
    		o: noop$4,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Page_1', slots, []);
    	let inputData = [];
    	let activePointsCount = 11; // Default value
    	let calculatedData = [];
    	let showCalculatedTable = false;
    	let showGraph = false;
    	let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0, sumX2Squared = 0, A = 0, B = 0;

    	// Handles file upload
    	const handleFileUpload = event => {
    		const file = event.target.files[0];
    		if (!file) return;
    		const reader = new FileReader();

    		reader.onload = () => {
    			const data = new Uint8Array(reader.result);
    			const workbook = readSync(data, { type: "array" });
    			const sheetName = workbook.SheetNames[0];
    			const sheet = workbook.Sheets[sheetName];

    			$$invalidate(0, inputData = utils.sheet_to_json(sheet, {
    				header: ["Year", "Oil", "Liquid", "Waters", "WaterCut"]
    			}));

    			inputData.forEach(row => row.ActivePoint = 0);
    			console.log("Uploaded Data:", inputData);
    		};

    		reader.readAsArrayBuffer(file);
    	};

    	// Updates active points
    	const updateActivePoints = () => {
    		const startIndex = Math.max(0, inputData.length - activePointsCount);

    		inputData.forEach((row, index) => {
    			row.ActivePoint = index >= startIndex ? 1 : 0;
    		});

    		console.log("Updated Data with Active Points:", inputData);
    	};

    	// Calculates values for the second table
    	const calculateTable = () => {
    		const activeData = inputData.filter(row => row.ActivePoint === 1);
    		sumX = activeData.reduce((acc, row) => acc + (row.Waters || 0), 0);
    		sumY = activeData.reduce((acc, row) => acc + (row.Liquid && row.Oil ? row.Liquid / row.Oil : 0), 0);
    		sumXY = activeData.reduce((acc, row) => acc + (row.Waters || 0) * (row.Liquid && row.Oil ? row.Liquid / row.Oil : 0), 0);
    		sumX2 = activeData.reduce((acc, row) => acc + Math.pow(row.Waters || 0, 2), 0);
    		const n = activeData.length;
    		sumX2Squared = Math.pow(sumX, 2);

    		// Calculate A and B
    		A = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX2Squared || 1); // Prevent divide by zero

    		B = (sumY - A * sumX) / n;

    		// Prepare calculated data for table
    		$$invalidate(2, calculatedData = activeData.map(row => {
    			const X = row.Waters || 0;
    			const Y = row.Liquid && row.Oil ? row.Liquid / row.Oil : 0;

    			return {
    				Year: row.Year,
    				X,
    				Y,
    				XY: X * Y,
    				X2: Math.pow(X, 2)
    			};
    		}));

    		$$invalidate(3, showCalculatedTable = true);
    		$$invalidate(4, showGraph = false);
    		console.log("Calculated Data:", calculatedData, { A, B });
    	};

    	// Render the graph
    	const renderGraph = () => {
    		const svgElement = document.querySelector("#graph");
    		select(svgElement).selectAll("*").remove();

    		const width = 800,
    			height = 400,
    			margin = { top: 40, right: 30, bottom: 50, left: 60 };

    		const xScale = linear().domain([0, max$3(calculatedData, d => d.X)]).range([margin.left, width - margin.right]);
    		const yScale = linear().domain([0, max$3(calculatedData, d => d.Y)]).range([height - margin.bottom, margin.top]);
    		const svg = select(svgElement).attr("width", width).attr("height", height);
    		svg.append("g").attr("transform", `translate(0,${height - margin.bottom})`).call(axisBottom(xScale));
    		svg.append("g").attr("transform", `translate(${margin.left},0)`).call(axisLeft(yScale));
    		svg.selectAll("circle").data(calculatedData).enter().append("circle").attr("cx", d => xScale(d.X)).attr("cy", d => yScale(d.Y)).attr("r", 5).style("fill", "blue");
    		svg.append("line").attr("x1", xScale(0)).attr("y1", yScale(B)).attr("x2", xScale(max$3(calculatedData, d => d.X))).attr("y2", yScale(A * max$3(calculatedData, d => d.X) + B)).style("stroke", "red").style("stroke-width", 2);
    		$$invalidate(4, showGraph = true);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Page_1> was created with unknown prop '${key}'`);
    	});

    	function input1_input_handler() {
    		activePointsCount = to_number(this.value);
    		$$invalidate(1, activePointsCount);
    	}

    	$$self.$capture_state = () => ({
    		XLSX: XLSX$1,
    		d3,
    		inputData,
    		activePointsCount,
    		calculatedData,
    		showCalculatedTable,
    		showGraph,
    		sumX,
    		sumY,
    		sumXY,
    		sumX2,
    		sumX2Squared,
    		A,
    		B,
    		handleFileUpload,
    		updateActivePoints,
    		calculateTable,
    		renderGraph
    	});

    	$$self.$inject_state = $$props => {
    		if ('inputData' in $$props) $$invalidate(0, inputData = $$props.inputData);
    		if ('activePointsCount' in $$props) $$invalidate(1, activePointsCount = $$props.activePointsCount);
    		if ('calculatedData' in $$props) $$invalidate(2, calculatedData = $$props.calculatedData);
    		if ('showCalculatedTable' in $$props) $$invalidate(3, showCalculatedTable = $$props.showCalculatedTable);
    		if ('showGraph' in $$props) $$invalidate(4, showGraph = $$props.showGraph);
    		if ('sumX' in $$props) sumX = $$props.sumX;
    		if ('sumY' in $$props) sumY = $$props.sumY;
    		if ('sumXY' in $$props) sumXY = $$props.sumXY;
    		if ('sumX2' in $$props) sumX2 = $$props.sumX2;
    		if ('sumX2Squared' in $$props) sumX2Squared = $$props.sumX2Squared;
    		if ('A' in $$props) A = $$props.A;
    		if ('B' in $$props) B = $$props.B;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		inputData,
    		activePointsCount,
    		calculatedData,
    		showCalculatedTable,
    		showGraph,
    		handleFileUpload,
    		updateActivePoints,
    		calculateTable,
    		renderGraph,
    		input1_input_handler
    	];
    }

    class Page_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Page_1",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\Pages\Page_3.svelte generated by Svelte v3.59.2 */

    const { console: console_1 } = globals;
    const file$1 = "src\\Pages\\Page_3.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (175:8) {#each inputData as row}
    function create_each_block_1(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*row*/ ctx[17].Year + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*row*/ ctx[17].Oil + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*row*/ ctx[17].Liquid + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*row*/ ctx[17].Waters + "";
    	let t6;
    	let t7;
    	let td4;
    	let t8_value = /*row*/ ctx[17].WaterCut + "";
    	let t8;
    	let t9;
    	let td5;
    	let t10_value = /*row*/ ctx[17].ActivePoint + "";
    	let t10;
    	let t11;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text$1(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text$1(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text$1(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text$1(t6_value);
    			t7 = space();
    			td4 = element("td");
    			t8 = text$1(t8_value);
    			t9 = space();
    			td5 = element("td");
    			t10 = text$1(t10_value);
    			t11 = space();
    			attr_dev(td0, "class", "svelte-64afup");
    			add_location(td0, file$1, 176, 12, 4810);
    			attr_dev(td1, "class", "svelte-64afup");
    			add_location(td1, file$1, 177, 12, 4843);
    			attr_dev(td2, "class", "svelte-64afup");
    			add_location(td2, file$1, 178, 12, 4875);
    			attr_dev(td3, "class", "svelte-64afup");
    			add_location(td3, file$1, 179, 12, 4910);
    			attr_dev(td4, "class", "svelte-64afup");
    			add_location(td4, file$1, 180, 12, 4945);
    			attr_dev(td5, "class", "svelte-64afup");
    			add_location(td5, file$1, 181, 12, 4982);
    			add_location(tr, file$1, 175, 10, 4792);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, t8);
    			append_dev(tr, t9);
    			append_dev(tr, td5);
    			append_dev(td5, t10);
    			append_dev(tr, t11);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*inputData*/ 1 && t0_value !== (t0_value = /*row*/ ctx[17].Year + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*inputData*/ 1 && t2_value !== (t2_value = /*row*/ ctx[17].Oil + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*inputData*/ 1 && t4_value !== (t4_value = /*row*/ ctx[17].Liquid + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*inputData*/ 1 && t6_value !== (t6_value = /*row*/ ctx[17].Waters + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*inputData*/ 1 && t8_value !== (t8_value = /*row*/ ctx[17].WaterCut + "")) set_data_dev(t8, t8_value);
    			if (dirty & /*inputData*/ 1 && t10_value !== (t10_value = /*row*/ ctx[17].ActivePoint + "")) set_data_dev(t10, t10_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(175:8) {#each inputData as row}",
    		ctx
    	});

    	return block;
    }

    // (195:2) {#if showCalculatedTable}
    function create_if_block_2(ctx) {
    	let section;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;
    	let t7;
    	let th4;
    	let t9;
    	let tbody;
    	let each_value = /*calculatedData*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Year";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "X (Water)";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Y (Liquid / Oil)";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "XY";
    			t7 = space();
    			th4 = element("th");
    			th4.textContent = "X²";
    			t9 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(th0, "class", "svelte-64afup");
    			add_location(th0, file$1, 199, 12, 5296);
    			attr_dev(th1, "class", "svelte-64afup");
    			add_location(th1, file$1, 200, 12, 5323);
    			attr_dev(th2, "class", "svelte-64afup");
    			add_location(th2, file$1, 201, 12, 5355);
    			attr_dev(th3, "class", "svelte-64afup");
    			add_location(th3, file$1, 202, 12, 5394);
    			attr_dev(th4, "class", "svelte-64afup");
    			add_location(th4, file$1, 203, 12, 5419);
    			add_location(tr, file$1, 198, 10, 5278);
    			add_location(thead, file$1, 197, 8, 5259);
    			add_location(tbody, file$1, 206, 8, 5475);
    			attr_dev(table, "border", "1");
    			attr_dev(table, "class", "svelte-64afup");
    			add_location(table, file$1, 196, 6, 5231);
    			add_location(section, file$1, 195, 4, 5214);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    			append_dev(tr, t7);
    			append_dev(tr, th4);
    			append_dev(table, t9);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tbody, null);
    				}
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*calculatedData*/ 4) {
    				each_value = /*calculatedData*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(195:2) {#if showCalculatedTable}",
    		ctx
    	});

    	return block;
    }

    // (208:10) {#each calculatedData as row}
    function create_each_block(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*row*/ ctx[17].Year + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*row*/ ctx[17].X.toFixed(2) + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*row*/ ctx[17].Y.toFixed(2) + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*row*/ ctx[17].XY.toFixed(2) + "";
    	let t6;
    	let t7;
    	let td4;
    	let t8_value = /*row*/ ctx[17].X2.toFixed(2) + "";
    	let t8;
    	let t9;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text$1(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text$1(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text$1(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text$1(t6_value);
    			t7 = space();
    			td4 = element("td");
    			t8 = text$1(t8_value);
    			t9 = space();
    			attr_dev(td0, "class", "svelte-64afup");
    			add_location(td0, file$1, 209, 14, 5557);
    			attr_dev(td1, "class", "svelte-64afup");
    			add_location(td1, file$1, 210, 14, 5592);
    			attr_dev(td2, "class", "svelte-64afup");
    			add_location(td2, file$1, 211, 14, 5635);
    			attr_dev(td3, "class", "svelte-64afup");
    			add_location(td3, file$1, 212, 14, 5678);
    			attr_dev(td4, "class", "svelte-64afup");
    			add_location(td4, file$1, 213, 14, 5722);
    			add_location(tr, file$1, 208, 12, 5537);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    			append_dev(tr, td4);
    			append_dev(td4, t8);
    			append_dev(tr, t9);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*calculatedData*/ 4 && t0_value !== (t0_value = /*row*/ ctx[17].Year + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*calculatedData*/ 4 && t2_value !== (t2_value = /*row*/ ctx[17].X.toFixed(2) + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*calculatedData*/ 4 && t4_value !== (t4_value = /*row*/ ctx[17].Y.toFixed(2) + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*calculatedData*/ 4 && t6_value !== (t6_value = /*row*/ ctx[17].XY.toFixed(2) + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*calculatedData*/ 4 && t8_value !== (t8_value = /*row*/ ctx[17].X2.toFixed(2) + "")) set_data_dev(t8, t8_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(208:10) {#each calculatedData as row}",
    		ctx
    	});

    	return block;
    }

    // (223:2) {#if showCalculatedTable}
    function create_if_block_1(ctx) {
    	let section;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			section = element("section");
    			button = element("button");
    			button.textContent = "Show Graph";
    			attr_dev(button, "class", "svelte-64afup");
    			add_location(button, file$1, 224, 6, 5903);
    			add_location(section, file$1, 223, 4, 5886);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*renderGraph*/ ctx[8], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$4,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(223:2) {#if showCalculatedTable}",
    		ctx
    	});

    	return block;
    }

    // (229:2) {#if showGraph}
    function create_if_block(ctx) {
    	let section;
    	let h2;
    	let t1;
    	let svg;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			h2.textContent = "Graph";
    			t1 = space();
    			svg = svg_element("svg");
    			add_location(h2, file$1, 230, 6, 6022);
    			attr_dev(svg, "id", "graph");
    			add_location(svg, file$1, 231, 6, 6044);
    			add_location(section, file$1, 229, 4, 6005);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(section, t1);
    			append_dev(section, svg);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(229:2) {#if showGraph}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let main;
    	let section0;
    	let input0;
    	let t0;
    	let section1;
    	let input1;
    	let input1_max_value;
    	let t1;
    	let button0;
    	let t3;
    	let section2;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t5;
    	let th1;
    	let t7;
    	let th2;
    	let t9;
    	let th3;
    	let t11;
    	let th4;
    	let t13;
    	let th5;
    	let t15;
    	let tbody;
    	let t16;
    	let section3;
    	let button1;
    	let t18;
    	let t19;
    	let t20;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*inputData*/ ctx[0];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let if_block0 = /*showCalculatedTable*/ ctx[3] && create_if_block_2(ctx);
    	let if_block1 = /*showCalculatedTable*/ ctx[3] && create_if_block_1(ctx);
    	let if_block2 = /*showGraph*/ ctx[4] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			section0 = element("section");
    			input0 = element("input");
    			t0 = space();
    			section1 = element("section");
    			input1 = element("input");
    			t1 = space();
    			button0 = element("button");
    			button0.textContent = "Update Active Points";
    			t3 = space();
    			section2 = element("section");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Year";
    			t5 = space();
    			th1 = element("th");
    			th1.textContent = "Oil";
    			t7 = space();
    			th2 = element("th");
    			th2.textContent = "Liquid";
    			t9 = space();
    			th3 = element("th");
    			th3.textContent = "Waters";
    			t11 = space();
    			th4 = element("th");
    			th4.textContent = "Water Cut";
    			t13 = space();
    			th5 = element("th");
    			th5.textContent = "Active Point";
    			t15 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t16 = space();
    			section3 = element("section");
    			button1 = element("button");
    			button1.textContent = "Calculate";
    			t18 = space();
    			if (if_block0) if_block0.c();
    			t19 = space();
    			if (if_block1) if_block1.c();
    			t20 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(input0, "type", "file");
    			attr_dev(input0, "accept", ".xlsx");
    			add_location(input0, file$1, 152, 4, 4152);
    			add_location(section0, file$1, 150, 2, 4135);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "1");
    			attr_dev(input1, "max", input1_max_value = /*inputData*/ ctx[0].length);
    			attr_dev(input1, "placeholder", "Enter Active Points Count");
    			add_location(input1, file$1, 157, 4, 4254);
    			attr_dev(button0, "class", "svelte-64afup");
    			add_location(button0, file$1, 158, 4, 4385);
    			add_location(section1, file$1, 156, 2, 4239);
    			attr_dev(th0, "class", "svelte-64afup");
    			add_location(th0, file$1, 165, 10, 4546);
    			attr_dev(th1, "class", "svelte-64afup");
    			add_location(th1, file$1, 166, 10, 4571);
    			attr_dev(th2, "class", "svelte-64afup");
    			add_location(th2, file$1, 167, 10, 4595);
    			attr_dev(th3, "class", "svelte-64afup");
    			add_location(th3, file$1, 168, 10, 4622);
    			attr_dev(th4, "class", "svelte-64afup");
    			add_location(th4, file$1, 169, 10, 4649);
    			attr_dev(th5, "class", "svelte-64afup");
    			add_location(th5, file$1, 170, 10, 4679);
    			add_location(tr, file$1, 164, 8, 4530);
    			add_location(thead, file$1, 163, 6, 4513);
    			add_location(tbody, file$1, 173, 6, 4739);
    			attr_dev(table, "border", "1");
    			attr_dev(table, "class", "svelte-64afup");
    			add_location(table, file$1, 162, 4, 4487);
    			add_location(section2, file$1, 161, 2, 4472);
    			attr_dev(button1, "class", "svelte-64afup");
    			add_location(button1, file$1, 190, 4, 5109);
    			add_location(section3, file$1, 189, 2, 5094);
    			attr_dev(main, "class", "svelte-64afup");
    			add_location(main, file$1, 148, 0, 4123);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, section0);
    			append_dev(section0, input0);
    			append_dev(main, t0);
    			append_dev(main, section1);
    			append_dev(section1, input1);
    			set_input_value(input1, /*activePointsCount*/ ctx[1]);
    			append_dev(section1, t1);
    			append_dev(section1, button0);
    			append_dev(main, t3);
    			append_dev(main, section2);
    			append_dev(section2, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t5);
    			append_dev(tr, th1);
    			append_dev(tr, t7);
    			append_dev(tr, th2);
    			append_dev(tr, t9);
    			append_dev(tr, th3);
    			append_dev(tr, t11);
    			append_dev(tr, th4);
    			append_dev(tr, t13);
    			append_dev(tr, th5);
    			append_dev(table, t15);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tbody, null);
    				}
    			}

    			append_dev(main, t16);
    			append_dev(main, section3);
    			append_dev(section3, button1);
    			append_dev(main, t18);
    			if (if_block0) if_block0.m(main, null);
    			append_dev(main, t19);
    			if (if_block1) if_block1.m(main, null);
    			append_dev(main, t20);
    			if (if_block2) if_block2.m(main, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*handleFileUpload*/ ctx[5], false, false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
    					listen_dev(button0, "click", /*updateActivePoints*/ ctx[6], false, false, false, false),
    					listen_dev(button1, "click", /*calculateTable*/ ctx[7], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*inputData*/ 1 && input1_max_value !== (input1_max_value = /*inputData*/ ctx[0].length)) {
    				attr_dev(input1, "max", input1_max_value);
    			}

    			if (dirty & /*activePointsCount*/ 2 && to_number(input1.value) !== /*activePointsCount*/ ctx[1]) {
    				set_input_value(input1, /*activePointsCount*/ ctx[1]);
    			}

    			if (dirty & /*inputData*/ 1) {
    				each_value_1 = /*inputData*/ ctx[0];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (/*showCalculatedTable*/ ctx[3]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2(ctx);
    					if_block0.c();
    					if_block0.m(main, t19);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*showCalculatedTable*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1(ctx);
    					if_block1.c();
    					if_block1.m(main, t20);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*showGraph*/ ctx[4]) {
    				if (if_block2) ; else {
    					if_block2 = create_if_block(ctx);
    					if_block2.c();
    					if_block2.m(main, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: noop$4,
    		o: noop$4,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Page_3', slots, []);
    	let inputData = [];
    	let activePointsCount = 11; // Default value
    	let calculatedData = [];
    	let showCalculatedTable = false;
    	let showGraph = false;
    	let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0, sumX2Squared = 0, A = 0, B = 0;

    	// Handles file upload
    	const handleFileUpload = event => {
    		const file = event.target.files[0];
    		if (!file) return;
    		const reader = new FileReader();

    		reader.onload = () => {
    			const data = new Uint8Array(reader.result);
    			const workbook = readSync(data, { type: "array" });
    			const sheetName = workbook.SheetNames[0];
    			const sheet = workbook.Sheets[sheetName];

    			$$invalidate(0, inputData = utils.sheet_to_json(sheet, {
    				header: ["Year", "Oil", "Liquid", "Waters", "WaterCut"]
    			}));

    			inputData.forEach(row => row.ActivePoint = 0);
    			console.log("Uploaded Data:", inputData);
    		};

    		reader.readAsArrayBuffer(file);
    	};

    	// Updates active points
    	const updateActivePoints = () => {
    		const startIndex = Math.max(0, inputData.length - activePointsCount);

    		inputData.forEach((row, index) => {
    			row.ActivePoint = index >= startIndex ? 1 : 0;
    		});

    		console.log("Updated Data with Active Points:", inputData);
    	};

    	// Calculates values for the second table
    	const calculateTable = () => {
    		const activeData = inputData.filter(row => row.ActivePoint === 1);
    		sumX = activeData.reduce((acc, row) => acc + (row.Waters || 0), 0);
    		sumY = activeData.reduce((acc, row) => acc + (row.Liquid && row.Oil ? row.Liquid / row.Oil : 0), 0);
    		sumXY = activeData.reduce((acc, row) => acc + (row.Waters || 0) * (row.Liquid && row.Oil ? row.Liquid / row.Oil : 0), 0);
    		sumX2 = activeData.reduce((acc, row) => acc + Math.pow(row.Waters || 0, 2), 0);
    		const n = activeData.length;
    		sumX2Squared = Math.pow(sumX, 2);

    		// Calculate A and B
    		A = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX2Squared || 1);

    		B = (sumY - A * sumX) / n;

    		$$invalidate(2, calculatedData = activeData.map(row => {
    			const X = row.Waters || 0;
    			const Y = Math.log(row.Waters);

    			return {
    				Year: row.Year,
    				X,
    				Y,
    				XY: X * Y,
    				X2: Math.pow(X, 2)
    			};
    		}));

    		$$invalidate(3, showCalculatedTable = true);
    		$$invalidate(4, showGraph = false);
    		console.log("Calculated Data:", calculatedData, { A, B });
    	};

    	// Render the graph
    	const renderGraph = () => {
    		const svgElement = document.querySelector("#graph");
    		select(svgElement).selectAll("*").remove();

    		const width = 800,
    			height = 400,
    			margin = { top: 40, right: 30, bottom: 50, left: 60 };

    		const xScale = linear().domain([0, max$3(calculatedData, d => d.X)]).range([margin.left, width - margin.right]);
    		const yScale = linear().domain([0, max$3(calculatedData, d => d.Y)]).range([height - margin.bottom, margin.top]);
    		const svg = select(svgElement).attr("width", width).attr("height", height);
    		svg.append("g").attr("transform", `translate(0,${height - margin.bottom})`).call(axisBottom(xScale));
    		svg.append("g").attr("transform", `translate(${margin.left},0)`).call(axisLeft(yScale));
    		svg.selectAll("circle").data(calculatedData).enter().append("circle").attr("cx", d => xScale(d.X)).attr("cy", d => yScale(d.Y)).attr("r", 5).style("fill", "blue");
    		svg.append("line").attr("x1", xScale(0)).attr("y1", yScale(B)).attr("x2", xScale(max$3(calculatedData, d => d.X))).attr("y2", yScale(A * max$3(calculatedData, d => d.X) + B)).style("stroke", "red").style("stroke-width", 2);
    		$$invalidate(4, showGraph = true);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Page_3> was created with unknown prop '${key}'`);
    	});

    	function input1_input_handler() {
    		activePointsCount = to_number(this.value);
    		$$invalidate(1, activePointsCount);
    	}

    	$$self.$capture_state = () => ({
    		XLSX: XLSX$1,
    		d3,
    		inputData,
    		activePointsCount,
    		calculatedData,
    		showCalculatedTable,
    		showGraph,
    		sumX,
    		sumY,
    		sumXY,
    		sumX2,
    		sumX2Squared,
    		A,
    		B,
    		handleFileUpload,
    		updateActivePoints,
    		calculateTable,
    		renderGraph
    	});

    	$$self.$inject_state = $$props => {
    		if ('inputData' in $$props) $$invalidate(0, inputData = $$props.inputData);
    		if ('activePointsCount' in $$props) $$invalidate(1, activePointsCount = $$props.activePointsCount);
    		if ('calculatedData' in $$props) $$invalidate(2, calculatedData = $$props.calculatedData);
    		if ('showCalculatedTable' in $$props) $$invalidate(3, showCalculatedTable = $$props.showCalculatedTable);
    		if ('showGraph' in $$props) $$invalidate(4, showGraph = $$props.showGraph);
    		if ('sumX' in $$props) sumX = $$props.sumX;
    		if ('sumY' in $$props) sumY = $$props.sumY;
    		if ('sumXY' in $$props) sumXY = $$props.sumXY;
    		if ('sumX2' in $$props) sumX2 = $$props.sumX2;
    		if ('sumX2Squared' in $$props) sumX2Squared = $$props.sumX2Squared;
    		if ('A' in $$props) A = $$props.A;
    		if ('B' in $$props) B = $$props.B;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		inputData,
    		activePointsCount,
    		calculatedData,
    		showCalculatedTable,
    		showGraph,
    		handleFileUpload,
    		updateActivePoints,
    		calculateTable,
    		renderGraph,
    		input1_input_handler
    	];
    }

    class Page_3 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Page_3",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src\App.svelte generated by Svelte v3.59.2 */
    const file = "src\\App.svelte";

    function create_fragment(ctx) {
    	let header;
    	let nav;
    	let a0;
    	let t1;
    	let a1;
    	let t3;
    	let a2;
    	let t5;
    	let main;
    	let router;
    	let current;

    	router = new Router({
    			props: { routes: /*routes*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			header = element("header");
    			nav = element("nav");
    			a0 = element("a");
    			a0.textContent = "Nazarov-Sipachev";
    			t1 = space();
    			a1 = element("a");
    			a1.textContent = "Sipachev-Posivech";
    			t3 = space();
    			a2 = element("a");
    			a2.textContent = "Maksimov";
    			t5 = space();
    			main = element("main");
    			create_component(router.$$.fragment);
    			attr_dev(a0, "href", "/");
    			attr_dev(a0, "class", "svelte-1iklyuc");
    			add_location(a0, file, 33, 4, 532);
    			attr_dev(a1, "href", "#/Posivech");
    			attr_dev(a1, "class", "svelte-1iklyuc");
    			add_location(a1, file, 34, 4, 569);
    			attr_dev(a2, "href", "#/Maksimov");
    			attr_dev(a2, "class", "svelte-1iklyuc");
    			add_location(a2, file, 35, 4, 616);
    			attr_dev(nav, "class", "svelte-1iklyuc");
    			add_location(nav, file, 32, 2, 522);
    			attr_dev(header, "class", "svelte-1iklyuc");
    			add_location(header, file, 31, 0, 511);
    			add_location(main, file, 39, 0, 670);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			append_dev(header, nav);
    			append_dev(nav, a0);
    			append_dev(nav, t1);
    			append_dev(nav, a1);
    			append_dev(nav, t3);
    			append_dev(nav, a2);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, main, anchor);
    			mount_component(router, main, null);
    			current = true;
    		},
    		p: noop$4,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(main);
    			destroy_component(router);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);

    	const routes = {
    		'/': Page_1,
    		'/Posivech': Page_2,
    		'/Maksimov': Page_3
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Router, Page_2, Page_1, Page_3, routes });
    	return [routes];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
    	target: document.body,
    	props: {
    		name: 'world'
    	}
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
